[{"memory":[[16976,16976]],"time":0.056884765625,"type":"start"},{"compiler":[[17,12]],"memory":[[4240128,104660896]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[11,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[10,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[9,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[8,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[7,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[6,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[5,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[4,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[3,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}]],"time":546.68701171875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.501171875,"valid":0.498828125}],"memory":[[25812640,551614432]],"mixsample":[[203.0439453125,"adjust",800],[128.5,"ival-div",0],[0.041259765625,"ival-div",400],[0.05908203125,"ival-sub",2000],[4.67919921875,"ival-assert",0],[303.144287109375,"ival-sub",0],[62.426025390625,"ival-tan",0],[19.046142578125,"ival-and",0],[0.0576171875,"ival-sub",400],[253.224609375,"const",0],[187.760009765625,"ival-tan",400],[2202.34326171875,"ival-sin",1600],[116.5830078125,"adjust",2000],[3871.02197265625,"ival-tan",1600],[0.02294921875,"ival-sub",800],[222.158203125,"ival-sin",400],[503.2158203125,"ival-tan",3600],[89.915771484375,"ival-sin",0],[0.014892578125,"ival-div",800],[24.328369140625,"adjust",2800],[0.01806640625,"ival-div",2000],[642.528564453125,"ival-sin",3600],[56.201171875,"ival-<=",0]],"outcomes":[[671.09814453125,1,"valid",2422],[6962.098876953125,2,"valid",4544],[1647.169189453125,3,"valid",1171],[16.198486328125,0,"valid",119]],"time":9782.06201171875,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[254,1,1,0]],"explanations":[["-.f64","(-.f64 eps (sin.f64 eps))","cancellation",81,1,[],[[1]]],["-.f64","(-.f64 eps (tan.f64 eps))","cancellation",81,0,[],[[2]]],["/.f64","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","u/u",174,0,[["(-.f64 eps (sin.f64 eps))","underflow",174],["(-.f64 eps (tan.f64 eps))","underflow",174]],[[]]]],"fperrors":[["(-.f64 eps (tan.f64 eps))",81,0,false,0,false],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",178,0,false,4,[2.5883986840946376e-106]],["(-.f64 eps (sin.f64 eps))",81,0,false,0,false],["(tan.f64 eps)",0,0,false,0,false],["eps",0,0,false,0,false],["(sin.f64 eps)",0,0,false,0,false]],"freqs":[[2,81],[1,174],[0,1]],"maybe-confusion":[[254,1,0,1,0,0]],"memory":[[1487264,59767072]],"mixsample":[[11.83544921875,"adjust",800],[7.71337890625,"ival-div",0],[0.013916015625,"ival-div",400],[0.22119140625,"ival-assert",0],[18.2939453125,"ival-sub",0],[4.303466796875,"ival-tan",0],[0.01904296875,"ival-sub",400],[12.496826171875,"ival-tan",400],[148.057373046875,"ival-sin",1600],[6.68603515625,"adjust",2000],[283.277587890625,"ival-tan",1600],[12.303466796875,"ival-sin",400],[22.34619140625,"ival-tan",3600],[4.458740234375,"ival-sin",0],[0.60009765625,"ival-true",0],[1.148193359375,"adjust",2800],[33.884765625,"ival-sin",3600]],"outcomes":[[32.650634765625,1,"valid",138],[485.026123046875,2,"valid",308],[80.6396484375,3,"valid",60],[0.5361328125,0,"valid",6]],"time":666.43896484375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"egraph":[[0,999,9,0.002231831],[10,999,9,0.003964627],[9,998,9,0.00430684],[8,983,9,0.005135289],[7,645,9,0.007214647],[6,328,9,0.003533291],[5,153,9,0.001798235],[4,79,9,0.000670322],[3,45,9,0.000445422],[2,28,9,0.00024302],[1,18,9,0.00016712],[0,11,9,0.000144065],[0,6,9,0.000102086]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"memory":[[-1087136,16114416]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(abs eps)"]],"time":171.803955078125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.072021484375,"type":"eval"},{"alts":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","next",62.91346974596035,"binary64"]],"compiler":[[9,6]],"memory":[[265600,265600]],"time":0.412109375,"type":"prune"},{"egraph":[[0,999,22,0.002632442],[10,999,22,0.004249953],[9,998,22,0.003869156],[8,983,22,0.005071853],[7,645,22,0.007487717],[6,328,22,0.003701493],[5,153,22,0.001713318],[4,79,22,0.000728],[3,45,22,0.000333085],[2,28,22,0.000205235],[1,18,22,0.000167779],[0,11,22,0.000150027],[0,6,22,9.8799e-5]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"locations":[["(-.f64 eps (tan.f64 eps))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","cost-diff",0]],"memory":[[1776768,1776768]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":39.3798828125,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(tan.f64 eps)","accuracy",0.015625],["(-.f64 eps (tan.f64 eps))","accuracy",18.012762280503342],["(-.f64 eps (sin.f64 eps))","accuracy",18.056317063700945],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","accuracy",43.54841409913426]],"memory":[[-38464,15919536]],"mixsample":[[6.046875,"adjust",800],[3.670166015625,"ival-div",0],[0.0078125,"ival-div",400],[0.113037109375,"ival-assert",0],[16.62744140625,"ival-sub",0],[1.761962890625,"ival-tan",0],[0.009033203125,"ival-sub",400],[5.79541015625,"ival-tan",400],[74.4091796875,"ival-sin",1600],[3.4208984375,"adjust",2000],[143.302490234375,"ival-tan",1600],[6.621337890625,"ival-sin",400],[11.34228515625,"ival-tan",3600],[2.624755859375,"ival-sin",0],[0.245849609375,"ival-true",0],[0.501220703125,"adjust",2800],[17.210205078125,"ival-sin",3600]],"outcomes":[[17.2958984375,1,"valid",69],[244.179931640625,2,"valid",154],[49.076171875,3,"valid",30],[0.262939453125,0,"valid",3]],"time":321.6630859375,"type":"localize"},{"count":[[5,32]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"memory":[[1712112,1712112]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ (sin eps) (cos eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"series":[[1.614013671875,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)) (tan eps))","eps","-inf"],[1.6689453125,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)) (tan eps))","eps","inf"],[1.284912109375,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)) (tan eps))","eps","0"]],"time":5.071044921875,"type":"series"},{"count":[[32,31]],"egraph":[[0,8366,383,0.082327734],[3,6188,415,0.025750218],[2,1500,452,0.020304709],[1,479,477,0.004153142],[0,163,515,0.001672564]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ (sin eps) (cos eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"memory":[[15904,41805856]],"method":["egg-herbie"],"outputs":[["-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(* 1/6 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* -1/3 (pow eps 3))","(*.f64 #s(literal -1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 #s(literal 1/3 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","1","#s(literal 1 binary64)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(+.f64 (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps) (sin.f64 eps) #s(literal -1 binary64))) eps) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(-.f64 (fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (*.f64 eps eps)) (+.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps)) (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(sin eps)","(sin.f64 eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+.f64 (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps) (sin.f64 eps) #s(literal -1 binary64))) eps) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal 1 binary64))) (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))"]],"stop":[["iter limit",1],["node limit",1]],"time":261.7470703125,"type":"simplify"},{"count":[[5,65]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"memory":[[-613552,15902208]],"outputs":[["(neg.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps))))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 eps eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 eps eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)))","(+.f64 (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (sin.f64 eps) eps))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (sin.f64 eps)))","(+.f64 (neg.f64 (sin.f64 eps)) eps)","(+.f64 eps (neg.f64 (sin.f64 eps)))","(+.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))))","(+.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(-.f64 eps (sin.f64 eps))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (sin.f64 eps))","(-.f64 #s(literal 0 binary64) (-.f64 (sin.f64 eps) eps))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 eps (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps))","(*.f64 (+.f64 (-.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (+.f64 eps eps)) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (sin.f64 eps) eps)))","(neg.f64 (neg.f64 (sin.f64 eps)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal 1 binary64) (sin.f64 eps))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 eps)))","(sin.f64 eps)","(neg.f64 (-.f64 (tan.f64 eps) eps))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (tan.f64 eps)))","(+.f64 (neg.f64 (tan.f64 eps)) eps)","(+.f64 eps (neg.f64 (tan.f64 eps)))","(+.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(-.f64 eps (tan.f64 eps))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (tan.f64 eps))","(-.f64 #s(literal 0 binary64) (-.f64 (tan.f64 eps) eps))","(-.f64 (/.f64 eps #s(literal 1 binary64)) (/.f64 (tan.f64 eps) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(-.f64 (/.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)))","(*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(neg.f64 (neg.f64 (tan.f64 eps)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 eps)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 eps))) (neg.f64 (tan.f64 eps)))","(*.f64 #s(literal 1 binary64) (tan.f64 eps))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 eps)) (sin.f64 eps))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 eps)))","(*.f64 (sin.f64 eps) (/.f64 #s(literal 1 binary64) (cos.f64 eps)))","(*.f64 (neg.f64 (sin.f64 eps)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 eps))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (cos.f64 eps))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (tan.f64 eps)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (tan.f64 eps))))","(/.f64 (sin.f64 eps) (neg.f64 (neg.f64 (cos.f64 eps))))"]],"time":426.197998046875,"type":"rewrite"},{"compiler":[[1767,363]],"memory":[[-2040944,5917936]],"time":8.199951171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","fresh",62.855341339802735,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.91346974596035,"binary64"],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","next",63.21221249262074,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","next",0.09500931001684312,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","next",0.1318710150110122,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","next",0.21640195471159504,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","next",0.5352055490039718,"binary64"]],"compiler":[[37,14],[9,6],[32,12],[26,15],[21,13],[16,11],[11,8],[37,14],[32,12],[26,15],[21,13],[16,11],[11,8]],"count":[[93,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[92,6],"picked":[1,1]}],"memory":[[-4979120,5715632]],"min-error":[[0.016593466849389005,"binary64"]],"time":5.975830078125,"type":"prune"},{"egraph":[[0,8266,230,0.058692367],[6,6330,230,0.026524642],[5,2655,230,0.026287659],[4,945,232,0.009837128],[3,372,239,0.002997881],[2,167,239,0.001371144],[1,99,239,0.000774463],[0,53,239,0.000556904],[0,31,253,0.000344564]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(literal 27/112000 binary64)","(*.f64 eps eps)","eps","#s(literal -27/2800 binary64)","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(literal -27/2800 binary64)","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","#s(literal 2 binary64)","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)"]],"locations":[["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","cost-diff",0],["(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","cost-diff",0],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","cost-diff",23],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0]],"memory":[[8915024,30109776]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))","#s(literal 27/112000 binary64)","(*.f64 eps eps)","eps","#s(literal -27/2800 binary64)","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(literal -27/2800 binary64)","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","#s(literal 2 binary64)","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":201.47607421875,"type":"simplify"},{"compiler":[[227,32]],"locations":[["(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)","accuracy",0.1875],["(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","accuracy",13.546035752464858],["(-.f64 eps (sin.f64 eps))","accuracy",18.056317063700945],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","accuracy",48.531154570804375],["(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","accuracy",0.01171875],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.1318710150110122],["(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","accuracy",0.21640195471159504],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","accuracy",0.5352055490039718],["(*.f64 eps eps)","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","accuracy",0.0078125],["(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","accuracy",0.0078125],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.09500931001684312]],"memory":[[-4000384,55947968]],"mixsample":[[18.8427734375,"adjust",800],[4.3369140625,"ival-div",0],[0.02734375,"ival-div",400],[0.097900390625,"ival-pow2",400],[0.153076171875,"ival-assert",0],[8.767333984375,"ival-sub",0],[1.755126953125,"ival-tan",0],[17.6357421875,"const",0],[0.03076171875,"ival-sub",400],[0.0419921875,"ival-tan",400],[31.3115234375,"ival-sin",4800],[130.870361328125,"ival-tan",1600],[17.15625,"ival-add",0],[3.10693359375,"ival-mult",800],[3.25341796875,"ival-sub",800],[0.032958984375,"ival-add",400],[0.302978515625,"ival-div",2000],[3.39404296875,"ival-sin",3600],[0.02001953125,"ival-pow2",2800],[3.058837890625,"ival-pow2",0],[7.241943359375,"ival-tan",2800],[0.453857421875,"ival-mult",2000],[0.51611328125,"ival-sub",2000],[75.62548828125,"ival-sin",1600],[23.322021484375,"ival-tan",4800],[2.194091796875,"adjust",2000],[23.2646484375,"ival-mult",0],[0.02294921875,"ival-mult",400],[0.07373046875,"ival-sin",400],[2.973876953125,"ival-pow2",1600],[0.5869140625,"ival-pow2",4800],[2.818115234375,"ival-sin",0],[2.059326171875,"ival-div",800],[0.41845703125,"ival-true",0],[0.432861328125,"exact",0]],"outcomes":[[356.5,1,"valid",217],[94.62451171875,2,"valid",35],[1.119140625,0,"valid",4]],"time":486.294921875,"type":"localize"},{"count":[[17,81]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)"]],"memory":[[-1941216,5629328]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","9/40","(+ 9/40 (* -27/2800 (pow eps 2)))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","-27/2800","(- (* 27/112000 (pow eps 2)) 27/2800)","(pow eps 2)","-1/4","(- (* 17/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(/ -1/4 eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* -2/3 (pow eps 4))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(- (* 37/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4)","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 27/112000 (pow eps 6))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(* 27/112000 (pow eps 4))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* 27/112000 (pow eps 2))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* 9/40 (pow eps 2))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(* -27/2800 (pow eps 4))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(* -27/2800 (pow eps 2))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(/ (sin eps) (* eps (cos eps)))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ 1 eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(+ 1 (* -1 (/ (sin eps) eps)))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2))))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps))) eps)))"]],"series":[[5.546875,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800) (/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps))","eps","-inf"],[5.575927734375,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800) (/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps))","eps","inf"],[2.489013671875,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800) (/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps))","eps","0"]],"time":15.2060546875,"type":"series"},{"count":[[81,80]],"egraph":[[0,8285,1204,0.090583215],[2,3020,1253,0.029608141],[1,971,1368,0.011068939],[0,334,1438,0.003496751]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","9/40","(+ 9/40 (* -27/2800 (pow eps 2)))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","-27/2800","(- (* 27/112000 (pow eps 2)) 27/2800)","(pow eps 2)","-1/4","(- (* 17/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(/ -1/4 eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* -2/3 (pow eps 4))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(- (* 37/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4)","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 27/112000 (pow eps 6))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(* 27/112000 (pow eps 4))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* 27/112000 (pow eps 2))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* 9/40 (pow eps 2))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(* -27/2800 (pow eps 4))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(* -27/2800 (pow eps 2))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(/ (sin eps) (* eps (cos eps)))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ 1 eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(+ 1 (* -1 (/ (sin eps) eps)))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2))))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps))) eps)))"]],"memory":[[5585120,47463408]],"method":["egg-herbie"],"outputs":[["-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","9/40","#s(literal 9/40 binary64)","(+ 9/40 (* -27/2800 (pow eps 2)))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","-27/2800","#s(literal -27/2800 binary64)","(- (* 27/112000 (pow eps 2)) 27/2800)","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","(pow eps 2)","(*.f64 eps eps)","-1/4","#s(literal -1/4 binary64)","(- (* 17/240 (pow eps 2)) 1/4)","(fma.f64 #s(literal 17/240 binary64) (*.f64 eps eps) #s(literal -1/4 binary64))","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(fma.f64 (fma.f64 #s(literal 53/12600 binary64) (*.f64 eps eps) #s(literal 17/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64))","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(fma.f64 (fma.f64 (fma.f64 #s(literal 8129/6048000 binary64) (*.f64 eps eps) #s(literal 53/12600 binary64)) (*.f64 eps eps) #s(literal 17/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64))","(/ -1/4 eps)","(/.f64 #s(literal -1/4 binary64) eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/.f64 (fma.f64 #s(literal 37/240 binary64) (*.f64 eps eps) #s(literal -1/4 binary64)) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/.f64 (fma.f64 (fma.f64 #s(literal -349/25200 binary64) (*.f64 eps eps) #s(literal 37/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64)) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -953/864000 binary64) (*.f64 eps eps) #s(literal -349/25200 binary64)) (*.f64 eps eps) #s(literal 37/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64)) eps)","(* 1/6 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* -2/3 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/3 binary64))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(*.f64 (fma.f64 #s(literal -17/45 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -62/315 binary64) (*.f64 eps eps) #s(literal -17/45 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1382/14175 binary64) (*.f64 eps eps) #s(literal -62/315 binary64)) (*.f64 eps eps) #s(literal -17/45 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(- (* 37/240 (pow eps 2)) 1/4)","(fma.f64 #s(literal 37/240 binary64) (*.f64 eps eps) #s(literal -1/4 binary64))","(- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4)","(fma.f64 (fma.f64 #s(literal -349/25200 binary64) (*.f64 eps eps) #s(literal 37/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64))","(- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4)","(fma.f64 (fma.f64 (fma.f64 #s(literal -953/864000 binary64) (*.f64 eps eps) #s(literal -349/25200 binary64)) (*.f64 eps eps) #s(literal 37/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64))","1","#s(literal 1 binary64)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 #s(literal -1 binary64) eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 #s(literal -1 binary64) eps)) (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) eps)) #s(literal 1 binary64)))","(* 27/112000 (pow eps 6))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 27/112000 binary64))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 27/112000 binary64)) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 27/112000 binary64)) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 6 binary64)))) (pow.f64 eps #s(literal 6 binary64)))","(* 27/112000 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 27/112000 binary64))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 27/112000 binary64)) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* 27/112000 (pow eps 2))","(*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) eps) eps)","(* 9/40 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal 9/40 binary64))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 9/40 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) eps) eps)","(* -27/2800 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -27/2800 binary64))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(*.f64 (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* -27/2800 (pow eps 2))","(*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) eps) eps)","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(-.f64 (+.f64 (/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))) eps) #s(literal 1 binary64)) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(-.f64 (+.f64 (+.f64 (/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))) eps) (*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(/ (sin eps) (* eps (cos eps)))","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) eps) eps)) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) eps)))) eps)","(/ 1 eps)","(/.f64 #s(literal 1 binary64) eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps)) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/.f64 (fma.f64 (/.f64 (sin.f64 eps) eps) #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) #s(literal 1 binary64))) eps)","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (*.f64 eps eps))","(+ 1 (* -1 (/ (sin eps) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) #s(literal 1 binary64)))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps) (sin.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) eps))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)) (/.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps)) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))) eps)","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) eps) eps)) eps)","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64))) (neg.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps)) eps)","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) eps) (sin.f64 eps)) eps)) eps)","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2))))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) eps) (sin.f64 eps)) eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":273.68212890625,"type":"simplify"},{"count":[[17,199]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)"]],"memory":[[-1831472,39638160]],"outputs":[["#s(approx (cos 3) (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64))))","(neg.f64 (/.f64 (fma.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) #s(literal 1/2 binary64)) (+.f64 (+.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal -9/40 binary64)) #s(literal -1/2 binary64))))","(neg.f64 (/.f64 (fma.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) #s(literal -1/2 binary64)) (neg.f64 (fma.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) #s(literal -1/2 binary64))) (fma.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64))) #s(literal -1/2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) #s(literal 1/2 binary64))) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64)))))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)))","(+.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) #s(literal -1/2 binary64))","(+.f64 (+.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64))) #s(literal 9/40 binary64))","(+.f64 #s(literal 9/40 binary64) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal -1/2 binary64)))","(+.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)))","(+.f64 (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64))) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64))))))","(-.f64 (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64))) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64)))) (/.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal -9/40 binary64)))) (/.f64 (*.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64))) (+.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal -9/40 binary64)))))","(*.f64 #s(literal 2 binary64) (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64))))","(*.f64 (fma.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) #s(literal 1/2 binary64)) (/.f64 #s(literal 2 binary64) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64)))))","(neg.f64 (+.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal -9/40 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))))","(+.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64) #s(literal 9/40 binary64)))","(+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64))","(+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) (*.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64)))","(+.f64 #s(literal 9/40 binary64) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(+.f64 (+.f64 #s(literal 9/40 binary64) (*.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64))) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(+.f64 (/.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64))) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal -9/40 binary64))) (neg.f64 (/.f64 #s(literal -9/40 binary64) (+.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal 9/40 binary64)))))","(-.f64 (/.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64))) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal -9/40 binary64))) (/.f64 #s(literal -9/40 binary64) (+.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal 9/40 binary64))))","(-.f64 (/.f64 #s(literal 9/40 binary64) (+.f64 #s(literal 9/40 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)))) (/.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64))) (+.f64 #s(literal 9/40 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)))))","(*.f64 (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) #s(literal 2 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)))","(*.f64 #s(literal 2 binary64) (+.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64)))","(*.f64 (/.f64 #s(literal -3 binary64) (+.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal 9/40 binary64))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal -9/40 binary64)))","(*.f64 (+.f64 #s(literal 9/40 binary64) (*.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)))) (/.f64 #s(literal 2 binary64) (+.f64 #s(literal 9/40 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)))))","(neg.f64 (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64)) #s(literal -27/2800 binary64))","(+.f64 (*.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64)) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (*.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64)))","(+.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64)))","(+.f64 (/.f64 (*.f64 #s(literal 2 binary64) #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64)) (fma.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64))) (neg.f64 (/.f64 #s(literal 27/2800 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 2 binary64) #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64)) (fma.f64 #s(literal 2 binary64) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64))) (/.f64 #s(literal 27/2800 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))))","(-.f64 (/.f64 #s(literal -27/2800 binary64) (+.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64)))) (/.f64 (*.f64 #s(literal 2 binary64) #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64)) (+.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64)))))","(*.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64))","(*.f64 (fma.f64 #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(*.f64 #s(literal 2 binary64) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(*.f64 (fma.f64 #s(literal 2 binary64) #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 19683/878080000000 binary64) #s(literal -27/2800 binary64))) (*.f64 (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) #s(literal 2 binary64) #s(literal -27/2800 binary64))))","(*.f64 (/.f64 #s(literal -3 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))) (fma.f64 #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64) #s(literal 2 binary64) #s(literal 27/2800 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64) #s(literal 2 binary64) #s(literal 27/2800 binary64))) (/.f64 #s(literal 2 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))))","(*.f64 (fma.f64 #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64) #s(literal 2 binary64) #s(literal 27/2800 binary64)) (/.f64 #s(literal -3 binary64) (fma.f64 #s(literal -3 binary64) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))))","#s(approx (cos 3) #s(literal -1/2 binary64))","#s(approx (cos 3) (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)))","(neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 1/2 binary64)))","(+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64))","(+.f64 #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(+.f64 (*.f64 (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64)) #s(literal 9/40 binary64)) (*.f64 (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64)) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64)) #s(literal 9/40 binary64)))","(+.f64 (*.f64 #s(literal 9/40 binary64) (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64))) (*.f64 #s(literal -1/2 binary64) (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64))) (*.f64 #s(literal 9/40 binary64) (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64))))","(+.f64 (/.f64 #s(literal -9/40 binary64) (+.f64 #s(literal -9/40 binary64) #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/2 binary64) (+.f64 #s(literal -9/40 binary64) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 #s(literal -9/40 binary64) (+.f64 #s(literal -9/40 binary64) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 #s(literal -9/40 binary64) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -1/2 binary64) #s(literal -9/40 binary64))) (/.f64 #s(literal 9/40 binary64) (+.f64 #s(literal -1/2 binary64) #s(literal -9/40 binary64))))","(-.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)) (/.f64 #s(literal -9/80 binary64) (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64))))","(*.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)))","(*.f64 #s(literal 2 binary64) (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)))","(*.f64 (/.f64 #s(literal -3 binary64) (+.f64 #s(literal -9/40 binary64) #s(literal -1/2 binary64))) (+.f64 #s(literal 9/40 binary64) #s(literal 1/2 binary64)))","(*.f64 (+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/80 binary64)) #s(literal 9/40 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)))","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 6 binary64)","#s(literal 12 binary64)","#s(literal 16 binary64)","#s(literal 8 binary64)","#s(literal 4 binary64)","eps","(neg.f64 #s(literal -3 binary64))","(+.f64 #s(literal 2 binary64) #s(literal 0 binary64))","(+.f64 #s(literal 2 binary64) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) #s(literal 2 binary64))","#s(approx (cos 3) (neg.f64 (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal 1/2 binary64))))","(neg.f64 (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal 1/2 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 9/40 binary64)))","(+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal -1/2 binary64))","(+.f64 #s(literal 9/40 binary64) (fma.f64 #s(literal -27/2800 binary64) #s(literal 2 binary64) #s(literal -1/2 binary64)))","(+.f64 #s(literal -1/2 binary64) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))))","(+.f64 (+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64))) #s(literal 9/40 binary64))","(+.f64 (*.f64 (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))) (*.f64 (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))) #s(literal -1/2 binary64)) (*.f64 (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))))","(+.f64 (*.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))))) (*.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))))) (*.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) (+.f64 (fma.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))))))","(+.f64 (/.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))) (/.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) (+.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))))","(-.f64 (neg.f64 (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal 1/2 binary64))) (/.f64 (*.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal -1/2 binary64)) (neg.f64 (+.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)) #s(literal 1/2 binary64)))))","(neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64))","(+.f64 #s(literal 9/40 binary64) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))) (+.f64 #s(literal 9/40 binary64) #s(literal -243/112000 binary64)))","(+.f64 (*.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64))) (*.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 9/40 binary64)))","(+.f64 (*.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 9/40 binary64)) (*.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64))))","(+.f64 (+.f64 #s(literal 9/40 binary64) #s(literal -243/112000 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))))","(+.f64 (*.f64 (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64)) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64))) (*.f64 (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64)) #s(literal 9/40 binary64)))","(+.f64 (*.f64 (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64)) #s(literal 9/40 binary64)) (*.f64 (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64)) (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64))) (*.f64 #s(literal 9/40 binary64) (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64))))","(+.f64 (*.f64 #s(literal 9/40 binary64) (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) #s(literal 243/112000 binary64))))","(+.f64 (/.f64 #s(literal 27/2800 binary64) (+.f64 #s(literal 27/2800 binary64) #s(literal 9/40 binary64))) (neg.f64 (/.f64 #s(literal -9/40 binary64) (+.f64 #s(literal 27/2800 binary64) #s(literal 9/40 binary64)))))","(-.f64 (/.f64 #s(literal 27/2800 binary64) (+.f64 #s(literal 27/2800 binary64) #s(literal 9/40 binary64))) (/.f64 #s(literal -9/40 binary64) (+.f64 #s(literal 27/2800 binary64) #s(literal 9/40 binary64))))","(-.f64 (/.f64 #s(literal 9/40 binary64) (+.f64 #s(literal 9/40 binary64) #s(literal 27/2800 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) #s(literal -27/2800 binary64)) (+.f64 #s(literal 9/40 binary64) #s(literal 27/2800 binary64))))","(-.f64 (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64))) (/.f64 #s(literal -243/112000 binary64) (neg.f64 (+.f64 #s(literal -9/40 binary64) #s(literal 27/2800 binary64)))))","(neg.f64 (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 0 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (sin.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (sin.f64 #s(literal 2 binary64)))","(neg.f64 (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 0 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (sin.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (sin.f64 #s(literal 2 binary64)))","(neg.f64 (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 0 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (sin.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (sin.f64 #s(literal 2 binary64)))","(neg.f64 (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 0 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (sin.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (sin.f64 #s(literal 2 binary64)))","(neg.f64 (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 0 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (sin.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (sin.f64 #s(literal 2 binary64)))","(neg.f64 (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 0 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) (sin.f64 #s(literal 2 binary64)))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (cos.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) (cos.f64 #s(literal 2 binary64)))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(+.f64 (sin.f64 #s(literal 2 binary64)) #s(literal 2 binary64))","(+.f64 #s(literal 0 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal -3 binary64) (sin.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (cos.f64 #s(literal 2 binary64)))","(+.f64 #s(literal 2 binary64) (sin.f64 #s(literal 2 binary64)))"]],"time":1760.43994140625,"type":"rewrite"},{"compiler":[[9511,1205]],"memory":[[-18326736,30139952]],"time":48.777099609375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","next",62.855341339802735,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.91346974596035,"binary64"],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","done",63.21221249262074,"binary64"],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","next",63.20896620163426,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.09500931001684312,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.1318710150110122,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","done",0.21640195471159504,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","done",0.5352055490039718,"binary64"]],"compiler":[[37,14],[9,6],[32,12],[41,20],[26,15],[21,13],[16,11],[11,8]],"count":[[334,8]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[327,1],"picked":[5,5]}],"memory":[[5435856,13766160]],"min-error":[[0.016593466849389005,"binary64"]],"time":6.48291015625,"type":"prune"},{"egraph":[[0,8372,280,0.05025878],[6,7744,281,0.01848366],[5,3411,281,0.031241049],[4,1074,281,0.014344206],[3,356,297,0.003896179],[2,156,297,0.001436354],[1,90,297,0.000743242],[0,54,305,0.000524968],[0,30,309,0.000345641]],"inputs":[["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)","(/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","#s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","#s(literal 1 binary64)","(/.f64 (sin.f64 eps) eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(*.f64 eps eps)","eps","(fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","#s(literal 3 binary64)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"locations":[["(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","cost-diff",0],["(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","cost-diff",0],["(*.f64 (*.f64 eps eps) eps)","cost-diff",2],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","cost-diff",0],["(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","cost-diff",0],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","cost-diff",1],["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","cost-diff",4]],"memory":[[-3751792,28387968]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(fma.f64 (/.f64 (tan.f64 eps) (fma.f64 (neg.f64 eps) eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 (sin.f64 eps) eps) (*.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(approx (- eps (sin eps)) (-.f64 eps (sin.f64 eps)))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (fma.f64 (neg.f64 eps) eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (sin.f64 eps) eps) (fma.f64 (neg.f64 eps) eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)","(*.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(approx (- eps (sin eps)) (-.f64 eps (sin.f64 eps))))","(/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 #s(approx (- eps (sin eps)) (-.f64 eps (sin.f64 eps))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","#s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps))","#s(approx (- eps (sin eps)) (-.f64 eps (sin.f64 eps)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(-.f64 eps (sin.f64 eps))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","#s(literal 1 binary64)","(/.f64 (sin.f64 eps) eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 (tan.f64 eps) eps))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(pow.f64 eps #s(literal 3 binary64))","(*.f64 eps eps)","eps","(fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","#s(literal 3 binary64)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":190.4638671875,"type":"simplify"},{"compiler":[[282,29]],"locations":[["(-.f64 eps (tan.f64 eps))","accuracy",18.012762280503342],["(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","accuracy",42.73655419404725],["(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","accuracy",42.74046044404725],["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","accuracy",43.54841409913426],["(-.f64 eps (sin.f64 eps))","accuracy",18.056317063700945],["(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","accuracy",29.79561506502805],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","accuracy",48.531154570804375],["(/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","accuracy",48.531154570804375]],"memory":[[5792208,63626976]],"mixsample":[[10.338134765625,"ival-div",0],[16.12109375,"adjust",800],[0.010009765625,"ival-pow2",400],[6.072265625,"ival-div",400],[3.705078125,"ival-pow",1600],[4.884033203125,"ival-div",1600],[0.13916015625,"ival-assert",0],[13.382568359375,"ival-sub",0],[2.077880859375,"ival-tan",0],[0.0224609375,"ival-sub",400],[0.02099609375,"ival-tan",400],[4.046142578125,"ival-pow",0],[30.38720703125,"ival-sin",4800],[131.96142578125,"ival-tan",1600],[3.2412109375,"ival-mult",800],[5.53955078125,"ival-add",0],[0.246337890625,"ival-mult",3600],[3.1513671875,"ival-sub",800],[1.97509765625,"ival-mult",1600],[2.449951171875,"ival-add",400],[2.1650390625,"adjust",2800],[0.42236328125,"ival-div",2000],[4.19677734375,"ival-sin",3600],[4.771484375,"ival-pow",400],[2.771728515625,"ival-pow2",0],[0.596435546875,"ival-sub",2000],[0.480712890625,"ival-mult",2000],[0.5546875,"ival-pow",3600],[144.543701171875,"ival-sin",1600],[0.27783203125,"ival-add",3600],[32.86572265625,"ival-tan",4800],[12.589111328125,"adjust",2000],[0.10888671875,"ival-sin",400],[2.7353515625,"ival-mult",400],[1.9013671875,"ival-add",1600],[15.7451171875,"ival-mult",0],[1.019775390625,"ival-pow2",4800],[3.9619140625,"ival-pow2",1600],[2.88232421875,"ival-sin",0],[2.00341796875,"ival-div",800],[0.30224609375,"ival-true",0],[0.849609375,"ival-div",3600],[0.010009765625,"ival-add",800],[0.447509765625,"exact",0]],"outcomes":[[43.322021484375,1,"valid",69],[395.075927734375,2,"valid",154],[82.463623046875,3,"valid",30],[0.697021484375,0,"valid",3]],"time":559.405029296875,"type":"localize"},{"count":[[13,78]],"inputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (*.f64 eps eps) eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(-.f64 eps (tan.f64 eps))"]],"memory":[[-2371456,5129872]],"outputs":[["(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","-1/4","(- (* 17/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(/ -1/4 eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(pow eps 3)","(* 1/3 eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(* 1/6 (pow eps 2))","(* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","1","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(/ (sin eps) (* eps (cos eps)))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ 1 eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(+ 1 (* -1 (/ (sin eps) eps)))","(/ (pow (sin eps) 3) (pow eps 2))","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"series":[[5.029052734375,"((* (- 1 (/ (sin eps) eps)) eps) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (* (* eps eps) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- 1 (/ (sin eps) eps)) (- eps (sin eps)) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (- eps (tan eps)))","eps","-inf"],[7.510986328125,"((* (- 1 (/ (sin eps) eps)) eps) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (* (* eps eps) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- 1 (/ (sin eps) eps)) (- eps (sin eps)) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (- eps (tan eps)))","eps","inf"],[2.597900390625,"((* (- 1 (/ (sin eps) eps)) eps) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (* (* eps eps) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- 1 (/ (sin eps) eps)) (- eps (sin eps)) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (- eps (tan eps)))","eps","0"]],"time":16.8681640625,"type":"series"},{"count":[[78,77]],"egraph":[[0,8315,1285,0.083734648],[2,4733,1341,0.02678304],[1,1416,1421,0.015462748],[0,463,1670,0.004556473]],"inputs":[["(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","-1/4","(- (* 17/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(/ -1/4 eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(pow eps 3)","(* 1/3 eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(* 1/6 (pow eps 2))","(* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","1","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(/ (sin eps) (* eps (cos eps)))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ 1 eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(+ 1 (* -1 (/ (sin eps) eps)))","(/ (pow (sin eps) 3) (pow eps 2))","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"memory":[[1656112,43296752]],"method":["egg-herbie"],"outputs":[["(* 1/6 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","-1/4","#s(literal -1/4 binary64)","(- (* 17/240 (pow eps 2)) 1/4)","(fma.f64 #s(literal 17/240 binary64) (*.f64 eps eps) #s(literal -1/4 binary64))","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(fma.f64 (fma.f64 #s(literal 53/12600 binary64) (*.f64 eps eps) #s(literal 17/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64))","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(fma.f64 (fma.f64 (fma.f64 #s(literal 8129/6048000 binary64) (*.f64 eps eps) #s(literal 53/12600 binary64)) (*.f64 eps eps) #s(literal 17/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64))","(/ -1/4 eps)","(/.f64 #s(literal -1/4 binary64) eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/.f64 (fma.f64 #s(literal 37/240 binary64) (*.f64 eps eps) #s(literal -1/4 binary64)) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/.f64 (fma.f64 (fma.f64 #s(literal -349/25200 binary64) (*.f64 eps eps) #s(literal 37/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64)) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -953/864000 binary64) (*.f64 eps eps) #s(literal -349/25200 binary64)) (*.f64 eps eps) #s(literal 37/240 binary64)) (*.f64 eps eps) #s(literal -1/4 binary64)) eps)","(pow eps 3)","(pow.f64 eps #s(literal 3 binary64))","(* 1/3 eps)","(*.f64 #s(literal 1/3 binary64) eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(*.f64 (fma.f64 #s(literal 1/18 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 11/3240 binary64) (*.f64 eps eps) #s(literal 1/18 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/27216 binary64) (*.f64 eps eps) #s(literal 11/3240 binary64)) (*.f64 eps eps) #s(literal 1/18 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* 1/6 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal 1/6 binary64))","(* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) eps) eps)","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) eps) eps)","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) eps) eps)","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/9 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(*.f64 (fma.f64 (fma.f64 #s(literal 19/1620 binary64) (*.f64 eps eps) #s(literal -1/9 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/8505 binary64) (*.f64 eps eps) #s(literal 19/1620 binary64)) (*.f64 eps eps) #s(literal -1/9 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* -1/3 (pow eps 3))","(*.f64 #s(literal -1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","1","#s(literal 1 binary64)","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(fma.f64 (sin.f64 eps) (+.f64 (/.f64 (sin.f64 eps) (*.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) eps) eps)) (/.f64 #s(literal -1 binary64) eps)) (-.f64 (+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) eps) eps))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(+.f64 (+.f64 (-.f64 (-.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) eps) eps))) (fma.f64 (sin.f64 eps) (+.f64 (/.f64 (sin.f64 eps) (*.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) eps) eps)) (/.f64 #s(literal -1 binary64) eps)) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))))) #s(literal 1 binary64))","(/ (sin eps) (* eps (cos eps)))","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (*.f64 eps eps))) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/.f64 (+.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (*.f64 eps eps))) eps)","(/ 1 eps)","(/.f64 #s(literal 1 binary64) eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 (/.f64 (sin.f64 eps) (*.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) eps) eps)) (/.f64 #s(literal -1 binary64) eps)) #s(literal 1 binary64)) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)))) eps)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 #s(literal -1 binary64) eps) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(+.f64 (fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps))))) #s(literal 1 binary64))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(fma.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps) (fma.f64 (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) eps))) eps eps)","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(fma.f64 (-.f64 (-.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (-.f64 (/.f64 (sin.f64 eps) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) eps eps)","(+ 1 (* -1 (/ (sin eps) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","(/ (pow (sin eps) 3) (pow eps 2))","(/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) eps)","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(/.f64 (-.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (+.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 5 binary64)) eps) eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 5 binary64)) eps) eps))) (*.f64 eps eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps)))) eps)) eps))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) (/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64))) (neg.f64 eps))) eps)) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))) eps)","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64))) (neg.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(/.f64 (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps) #s(literal -1 binary64) #s(literal 1 binary64)) eps)","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) (neg.f64 eps)) (sin.f64 eps)) eps) #s(literal 1 binary64)) eps)","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps)) eps) (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (sin.f64 eps) (/.f64 (*.f64 (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (sin.f64 eps)) (*.f64 (cos.f64 eps) eps))) eps)) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(*.f64 (+.f64 (-.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) eps)","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) eps) eps)) eps)) (*.f64 eps eps))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":252.593994140625,"type":"simplify"},{"count":[[13,167]],"inputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (*.f64 eps eps) eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(-.f64 eps (tan.f64 eps))"]],"memory":[[-855136,19023344]],"outputs":[["(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(+.f64 (cos.f64 #s(literal 1 binary64)) (*.f64 (/.f64 #s(approx (cos 1/8) (cos.f64 #s(literal 1 binary64))) (cos.f64 #s(literal 1 binary64))) #s(literal 1 binary64)))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 1/4 binary64)","#s(literal -1/2 binary64)","#s(literal 9 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(/.f64 #s(approx (cos 1/8) (cos.f64 #s(literal 1 binary64))) (cos.f64 #s(literal 1 binary64)))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(cos.f64 #s(literal 1 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal 1 binary64))))"]],"time":385.65087890625,"type":"rewrite"},{"compiler":[[4908,619]],"memory":[[676144,8635184]],"time":11.02197265625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","next",63.132045517101474,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.91346974596035,"binary64"],["(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","next",63.19973273933001,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.09500931001684312,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.1318710150110122,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","done",0.21640195471159504,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","done",0.5352055490039718,"binary64"]],"compiler":[[49,20],[9,6],[48,21],[26,15],[21,13],[16,11],[11,8]],"count":[[107,7]],"kept":[{"done":[6,5],"fresh":[0,0],"new":[99,2],"picked":[2,0]}],"memory":[[-3037888,5077296]],"min-error":[[0.010097509768442016,"binary64"]],"time":4.02001953125,"type":"prune"},{"egraph":[[0,8105,227,0.04662462],[6,5296,227,0.032604474],[5,3242,263,0.018827064],[4,1108,263,0.015007173],[3,382,269,0.004239236],[2,165,287,0.001486483],[1,94,287,0.000672788],[0,62,299,0.000492857],[0,37,299,0.00033768]],"inputs":[["(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","#s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","#s(literal 1 binary64)","(/.f64 (sin.f64 eps) eps)","(sin.f64 eps)","eps","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(*.f64 eps eps)","eps","(fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(neg.f64 eps)","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) eps)","(cos.f64 eps)"]],"locations":[["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","cost-diff",0],["(*.f64 (*.f64 eps eps) eps)","cost-diff",2],["(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","cost-diff",4],["(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","cost-diff",9],["(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","cost-diff",0],["#s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps))","cost-diff",0],["(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","cost-diff",0],["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","cost-diff",4]],"memory":[[2113200,24835568]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (-.f64 eps (sin.f64 eps))) (-.f64 eps (tan.f64 eps)))","#s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps))","#s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (-.f64 eps (sin.f64 eps)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(-.f64 eps (sin.f64 eps))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","#s(literal 1 binary64)","(/.f64 (sin.f64 eps) eps)","(sin.f64 eps)","eps","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(approx (- eps (tan eps)) (-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(pow.f64 eps #s(literal 3 binary64))","(*.f64 eps eps)","eps","(fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps))","#s(approx (- eps (tan eps)) (-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps))))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 eps)","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) eps)","(cos.f64 eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":184.506103515625,"type":"simplify"},{"compiler":[[271,26]],"locations":[["(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","accuracy",18.077847512602307],["(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","accuracy",42.73655419404725],["(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","accuracy",42.74046044404725],["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","accuracy",43.54841409913426],["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","accuracy",0.08203125],["(-.f64 eps (tan.f64 eps))","accuracy",18.012762280503342],["(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","accuracy",29.79561506502805],["(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","accuracy",43.54841409913426]],"memory":[[-3895344,57657264]],"mixsample":[[11.0986328125,"ival-div",0],[15.34130859375,"adjust",800],[6.7314453125,"ival-div",400],[3.312744140625,"ival-pow",1600],[6.615234375,"ival-div",1600],[0.132568359375,"ival-assert",0],[11.104248046875,"ival-sub",0],[2.02978515625,"ival-tan",0],[1.850830078125,"ival-cos",0],[0.011962890625,"ival-sub",400],[2.941162109375,"ival-cos",400],[6.124755859375,"ival-tan",400],[3.91796875,"ival-pow",0],[143.630859375,"ival-tan",1600],[0.006103515625,"ival-mult",800],[28.4052734375,"ival-add",0],[0.452880859375,"ival-mult",3600],[0.00390625,"ival-sub",800],[3.049560546875,"ival-mult",1600],[2.6396484375,"ival-add",400],[1.76513671875,"adjust",2800],[13.5517578125,"ival-sin",3600],[3.343017578125,"ival-pow",400],[0.2060546875,"ival-sin",800],[27.73095703125,"ival-cos",1600],[0.54248046875,"ival-pow",3600],[0.36376953125,"ival-add",3600],[77.24560546875,"ival-sin",1600],[0.007080078125,"ival-div",2800],[10.66552734375,"adjust",2000],[6.078369140625,"ival-mult",400],[2.347900390625,"ival-add",1600],[11.1416015625,"ival-mult",0],[6.635498046875,"ival-sin",400],[11.300537109375,"ival-tan",3600],[0.196044921875,"ival-sin",2800],[2.91845703125,"ival-sin",0],[7.955078125,"ival-cos",3600],[0.307373046875,"ival-true",0],[1.30908203125,"ival-div",3600],[0.011962890625,"ival-add",800],[0.38232421875,"exact",0],[1.3203125,"ival-neg",0]],"outcomes":[[62.640625,1,"valid",69],[344.84326171875,2,"valid",154],[68.783935546875,3,"valid",30],[0.965087890625,0,"valid",3]],"time":551.544921875,"type":"localize"},{"count":[[11,50]],"inputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","#s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(*.f64 (*.f64 eps eps) eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(-.f64 eps (tan.f64 eps))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))"]],"memory":[[3410576,3410576]],"outputs":[["(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 2))","(* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(pow eps 3)","(* 1/3 eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(+ 1 (* -1 (/ (sin eps) eps)))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(/ (pow (sin eps) 3) (pow eps 2))","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))"]],"series":[[1.839111328125,"((* (- 1 (/ (sin eps) eps)) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- 1 (/ (sin eps) eps)) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (+ (* (neg eps) (/ (/ (sin eps) eps) (cos eps))) eps) (* (* eps eps) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- eps (tan eps)) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))))","eps","-inf"],[1.800048828125,"((* (- 1 (/ (sin eps) eps)) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- 1 (/ (sin eps) eps)) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (+ (* (neg eps) (/ (/ (sin eps) eps) (cos eps))) eps) (* (* eps eps) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- eps (tan eps)) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))))","eps","inf"],[1.302001953125,"((* (- 1 (/ (sin eps) eps)) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- 1 (/ (sin eps) eps)) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (+ (* (neg eps) (/ (/ (sin eps) eps) (cos eps))) eps) (* (* eps eps) eps) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- eps (tan eps)) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))))","eps","0"]],"time":6.277099609375,"type":"series"},{"count":[[50,49]],"egraph":[[0,8306,668,0.081587124],[2,3217,709,0.031936282],[1,939,799,0.010506658],[0,303,979,0.003111969]],"inputs":[["(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 2))","(* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(pow eps 3)","(* 1/3 eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(+ 1 (* -1 (/ (sin eps) eps)))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(/ (pow (sin eps) 3) (pow eps 2))","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))"]],"memory":[[4726656,41639120]],"method":["egg-herbie"],"outputs":[["(* 1/6 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(* 1/6 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal 1/6 binary64))","(* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) eps) eps)","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) eps) eps)","(* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) eps) eps)","(* -1/3 (pow eps 3))","(*.f64 #s(literal -1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(pow eps 3)","(pow.f64 eps #s(literal 3 binary64))","(* 1/3 eps)","(*.f64 #s(literal 1/3 binary64) eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(*.f64 (fma.f64 #s(literal 1/18 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 11/3240 binary64) (*.f64 eps eps) #s(literal 1/18 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/27216 binary64) (*.f64 eps eps) #s(literal 11/3240 binary64)) (*.f64 eps eps) #s(literal 1/18 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/9 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(*.f64 (fma.f64 (fma.f64 #s(literal 19/1620 binary64) (*.f64 eps eps) #s(literal -1/9 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/8505 binary64) (*.f64 eps eps) #s(literal 19/1620 binary64)) (*.f64 eps eps) #s(literal -1/9 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","eps","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","1","#s(literal 1 binary64)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 #s(literal -1 binary64) eps) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps))) (fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(+ 1 (* -1 (/ (sin eps) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(fma.f64 (/.f64 eps (cos.f64 eps)) (/.f64 (sin.f64 eps) (neg.f64 eps)) eps)","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(fma.f64 (/.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) eps) (sin.f64 eps)) eps) eps eps)","(/ (pow (sin eps) 3) (pow eps 2))","(/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) eps)","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(/.f64 (-.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps)) (/.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (fma.f64 (/.f64 (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (cos.f64 eps)) (/.f64 (sin.f64 eps) eps) (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps)) (cos.f64 eps))) eps)) eps))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(fma.f64 (/.f64 eps (cos.f64 eps)) (/.f64 (sin.f64 eps) (neg.f64 eps)) eps)","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(fma.f64 (/.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) eps) (sin.f64 eps)) eps) eps eps)","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/.f64 (-.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps)) (*.f64 eps eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":220.97998046875,"type":"simplify"},{"count":[[11,123]],"inputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","#s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps))","(-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(*.f64 (*.f64 eps eps) eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(-.f64 eps (tan.f64 eps))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))"]],"memory":[[117168,19719824]],"outputs":[["(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(/.f64 #s(approx (cos 5) (cos.f64 #s(literal 1 binary64))) (cos.f64 #s(literal 1 binary64)))","#s(approx (cos 5) (cos.f64 #s(literal 1 binary64)))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) (cos.f64 #s(literal 1 binary64))))","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 18 binary64)","#s(literal -6 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -4 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(approx (cos 5) (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 1 binary64))))","(+.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1/2 binary64) (cos.f64 #s(literal 1 binary64))))"]],"time":306.77392578125,"type":"rewrite"},{"compiler":[[3776,380]],"memory":[[-734640,7015600]],"time":9.154052734375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","done",63.132045517101474,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.91346974596035,"binary64"],["(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","done",63.19973273933001,"binary64"],["(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 #s(approx (- 1 (/ (sin eps) eps)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","fresh",63.114464812239845,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.09500931001684312,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.1318710150110122,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","done",0.21640195471159504,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","done",0.5352055490039718,"binary64"]],"compiler":[[359,84],[49,20],[9,6],[48,21],[69,31],[26,15],[21,13],[16,11],[11,8]],"count":[[79,8]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[72,1],"picked":[2,2]}],"memory":[[-2331248,5933856]],"min-error":[[0.010097509768442016,"binary64"]],"time":6.98291015625,"type":"prune"},{"accuracy":[0.09500931001684312],"baseline":[0.09500931001684312],"branch":[["eps",0.09500931001684312,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.09500931001684312,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[11,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 #s(approx (- 1 (/ (sin eps) eps)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 #s(approx (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 eps (tan.f64 eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 #s(approx (- eps (sin eps)) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) #s(approx (- eps (tan eps)) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))"]],"memory":[[-3349504,4875312]],"oracle":[63.45403018860012],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":6.718017578125,"times":[[2.97998046875,"eps"],[2.544921875,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.1318710150110122],"baseline":[0.1318710150110122],"branch":[["eps",0.1318710150110122,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.1318710150110122,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[3,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"memory":[[3092592,3092592]],"oracle":[0.5352055490039718],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":3.092041015625,"times":[[1.4169921875,"eps"],[1.14794921875,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.21640195471159504],"baseline":[0.21640195471159504],"branch":[["eps",0.21640195471159504,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.21640195471159504,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[2,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"]],"memory":[[2846592,2846592]],"oracle":[0.5352055490039718],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":2.43603515625,"times":[[1.14697265625,"eps"],[0.968994140625,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.5352055490039718],"baseline":[0.5352055490039718],"branch":[["eps",0.5352055490039718,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.5352055490039718,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[1,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"link":["."],"memory":[[-6676560,2611152]],"name":["sintan (problem 3.4.5)"],"oracle":[0.5352055490039718],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"repr":["binary64"],"time":2.635986328125,"times":[[1.468994140625,"eps"],[0.869873046875,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"egraph":[[8,5536,74,0.028021613],[7,1549,74,0.026672848],[6,431,74,0.007383649],[5,176,74,0.002446787],[4,93,74,0.001194285],[3,55,74,0.000724597],[2,38,74,0.000513868],[1,28,74,0.000403369],[0,21,74,0.000472364]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"memory":[[2081712,9828720]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"stop":[["node limit",1]],"time":86.91796875,"type":"simplify"},{"compiler":[[74,21]],"memory":[[749872,749872]],"stop":[["fuel",1]],"time":1.072998046875,"type":"soundness"},{"compiler":[[74,21],[74,21],[7,6],[7,6],[9,6],[9,6],[26,15],[26,15]],"memory":[[5580528,21426848]],"remove-preprocessing":[["(abs eps)"],[],[],[],[]],"time":34.385986328125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01708984375,"type":"end"}]