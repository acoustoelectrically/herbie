[{"memory":[[13680,13680]],"time":0.02880859375,"type":"start"},{"compiler":[[13,11]],"memory":[[79024,79024]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.0,"valid":0.5040950775146484}],[0,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.5040950775146484,"valid":0.0}]],"time":0.3310546875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.49590492248535156,"valid":0.5040950775146484}],"memory":[[15731824,472580976]],"mixsample":[[191.3798828125,"adjust",800],[135.20654296875,"ival-add",0],[188.752197265625,"ival-exp",0],[65.423095703125,"ival-fabs",0],[38.68896484375,"ival-sub",1600],[4.274169921875,"ival-assert",0],[0.031005859375,"ival-add",400],[54.578369140625,"ival-sub",0],[1381.53515625,"ival-exp",1600],[581.6962890625,"ival-exp",400],[51.857177734375,"ival-sub",400],[0.059814453125,"ival-add",800],[28.764404296875,"ival-<=",0],[11.86279296875,"exact",0],[113.83203125,"adjust",2000],[39.33203125,"ival-neg",0]],"outcomes":[[436.821533203125,1,"valid",2346],[2767.42529296875,2,"valid",5703],[16.631103515625,0,"valid",207]],"time":3630.68896484375,"type":"sample"},{"compiler":[[8,7],[23,9],[23,9]],"confusion":[[122,0,1,133]],"explanations":[["exp.f64","(exp.f64 (neg.f64 x))","sensitivity",1,1,[],[[2]]],["+.f64","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cancellation",122,0,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",122,0,false,0,false],["(-.f64 (exp.f64 x) #s(literal 2 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["(exp.f64 (neg.f64 x))",0,1,[-609.4020574212135],0,false],["(neg.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,123],[0,133]],"maybe-confusion":[[122,0,0,1,1,132]],"memory":[[4590720,56985488]],"mixsample":[[10.167724609375,"adjust",800],[7.440185546875,"ival-add",0],[10.5771484375,"ival-exp",0],[2.1181640625,"ival-sub",1600],[0.196044921875,"ival-assert",0],[0.009765625,"ival-add",400],[3.151123046875,"ival-sub",0],[0.51318359375,"ival-true",0],[85.14990234375,"ival-exp",1600],[32.869873046875,"ival-exp",400],[2.721923828125,"ival-sub",400],[0.449462890625,"exact",0],[5.590576171875,"adjust",2000],[2.516845703125,"ival-neg",0]],"outcomes":[[26.194580078125,1,"valid",150],[161.853759765625,2,"valid",344],[1.58154296875,0,"valid",18]],"time":248.920166015625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,7]],"egraph":[[0,402,8,0.001683934],[9,402,8,0.002417725],[8,400,8,0.002850674],[7,342,8,0.002558466],[6,274,8,0.002714914],[5,168,8,0.001532884],[4,102,8,0.001001692],[3,63,8,0.000536042],[2,40,8,0.000284202],[1,24,8,0.000201401],[0,12,8,0.000200149],[0,7,8,0.000189997]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"memory":[[-146192,15773104]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(abs x)"]],"time":162.268798828125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.070068359375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",27.10268250565233,"binary64"]],"compiler":[[8,7]],"memory":[[305168,305168]],"time":0.526123046875,"type":"prune"},{"egraph":[[0,402,21,0.001666747],[9,402,21,0.002241219],[8,400,21,0.002460097],[7,342,21,0.002823475],[6,274,21,0.00323262],[5,168,21,0.001870675],[4,102,21,0.001242483],[3,63,21,0.000691276],[2,40,21,0.000382074],[1,24,21,0.000257849],[0,12,21,0.000280972],[0,7,21,0.00010682]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"locations":[["(exp.f64 (neg.f64 x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0]],"memory":[[1539488,1539488]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":26.510009765625,"type":"simplify"},{"compiler":[[23,9]],"locations":[["(exp.f64 (neg.f64 x))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.0234375],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",27.14873417109606]],"memory":[[-4342176,15827152]],"mixsample":[[9.200927734375,"adjust",800],[3.4423828125,"ival-add",0],[5.466552734375,"ival-exp",0],[0.987060546875,"ival-sub",1600],[0.095947265625,"ival-assert",0],[0.004150390625,"ival-add",400],[1.604248046875,"ival-sub",0],[0.189208984375,"ival-true",0],[41.862548828125,"ival-exp",1600],[15.962890625,"ival-exp",400],[1.25537109375,"ival-sub",400],[0.19775390625,"exact",0],[3.01513671875,"adjust",2000],[1.158203125,"ival-neg",0]],"outcomes":[[13.02978515625,1,"valid",75],[86.001220703125,2,"valid",172],[0.666015625,0,"valid",9]],"time":109.180908203125,"type":"localize"},{"count":[[4,21]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[676720,676720]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"series":[[0.26416015625,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","-inf"],[0.26318359375,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","inf"],[0.744140625,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","0"]],"time":1.623046875,"type":"series"},{"count":[[21,21]],"egraph":[[0,8428,132,0.099229758],[8,6661,153,0.020217758],[7,5255,153,0.024010923],[6,3863,153,0.020601095],[5,3034,153,0.01413328],[4,1762,153,0.010167759],[3,1060,153,0.005722895],[2,397,153,0.003278976],[1,168,159,0.001298015],[0,60,160,0.000553908]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"memory":[[-1917792,43042016]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- (* 1/2 x) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp x)","(exp.f64 x)","(exp (neg x))","(exp.f64 (neg.f64 x))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(exp (* -1 x))","(exp.f64 (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":301.725830078125,"type":"simplify"},{"count":[[4,49]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[3904944,15338848]],"outputs":[["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (+.f64 (exp.f64 x) #s(literal -2 binary64)))","(+.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal -2 binary64))","(+.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal -2 binary64)) (exp.f64 x))","(+.f64 #s(literal -2 binary64) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(+.f64 (exp.f64 x) (+.f64 (exp.f64 (neg.f64 x)) #s(literal -2 binary64)))","(+.f64 (/.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (/.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))))))","(-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 (neg.f64 x))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(neg.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 2 binary64) (exp.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal -2 binary64)))","(*.f64 (+.f64 (neg.f64 (exp.f64 (+.f64 x x))) #s(literal 4 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -2 binary64))))","(*.f64 (/.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (+.f64 (exp.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(exp.f64 x)","(exp.f64 (-.f64 x #s(literal 0 binary64)))","(neg.f64 (neg.f64 (exp.f64 (neg.f64 x))))","(*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 x))))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) x))","(pow.f64 (exp.f64 #s(literal -1 binary64)) x)","(pow.f64 (exp.f64 x) #s(literal -1 binary64))"]],"time":458.64404296875,"type":"rewrite"},{"compiler":[[972,228]],"memory":[[-2095136,5831824]],"time":8.041015625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",27.10268250565233,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","next",28.30443459314316,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","next",0.9867080646241724,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","next",1.0327015171980996,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","next",1.1864874256837505,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","next",1.591566612043919,"binary64"]],"compiler":[[8,7],[12,10],[27,19],[22,17],[17,13],[12,9],[12,10],[27,19],[22,17],[17,13],[12,9]],"count":[[69,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[68,5],"picked":[1,1]}],"memory":[[-3812528,4531888]],"min-error":[[0.01953125,"binary64"]],"time":5.342041015625,"type":"prune"},{"egraph":[[0,3042,212,0.018389459],[19,3042,212,0.023657822],[18,3042,212,0.023881864],[17,3042,212,0.020060154],[16,3040,212,0.020078483],[15,2995,212,0.024752047],[14,2797,212,0.017669197],[13,2667,212,0.017199174],[12,2219,212,0.016284819],[11,1800,212,0.013763615],[10,1433,212,0.009645721],[9,1265,212,0.009538145],[8,1122,212,0.00871599],[7,920,212,0.006809416],[6,694,212,0.0072159],[5,449,212,0.003709513],[4,332,212,0.002170871],[3,232,212,0.001472973],[2,143,212,0.000961441],[1,79,212,0.000625352],[0,44,212,0.000495696],[0,29,212,0.00028246]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","#s(literal 1/20160 binary64)","(*.f64 x x)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","x","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","#s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)"]],"locations":[["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["(pow.f64 x #s(literal 6 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(pow.f64 x #s(literal 4 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","cost-diff",0],["(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","cost-diff",0],["(pow.f64 x #s(literal 6 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","cost-diff",0]],"memory":[[1655824,9722016]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) x) x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) x) x (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","#s(literal 1/20160 binary64)","(*.f64 x x)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","x","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","(-.f64 #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 2 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","#s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(*.f64 x x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":301.62890625,"type":"simplify"},{"compiler":[[169,27]],"locations":[["(pow.f64 x #s(literal 4 binary64))","accuracy",0.0],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.01953125],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","accuracy",1.0170765171980996],["(pow.f64 x #s(literal 4 binary64))","accuracy",0.0],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.01953125],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","accuracy",1.1787997896237656],["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.0234375],["#s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x))","accuracy",1.8045088056727778],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","accuracy",27.14873417109606],["(*.f64 x x)","accuracy",0.0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","accuracy",1.591566612043919],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","accuracy",0.00390625],["(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","accuracy",0.00390625],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","accuracy",0.01953125],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","accuracy",0.9710830646241724]],"memory":[[-17646176,46521984]],"mixsample":[[16.56689453125,"adjust",800],[5.900634765625,"ival-exp",0],[1.053955078125,"ival-sub",1600],[0.119140625,"ival-assert",0],[2.840087890625,"ival-sub",0],[17.6904296875,"ival-exp",400],[1.40380859375,"ival-sub",400],[13.109375,"const",0],[7.35546875,"ival-pow",0],[10.362548828125,"adjust",2000],[12.07666015625,"ival-add",0],[12.064697265625,"ival-mult",0],[0.005126953125,"ival-add",400],[0.282958984375,"ival-true",0],[46.78369140625,"ival-exp",1600],[0.630126953125,"exact",0],[1.1298828125,"ival-neg",0]],"outcomes":[[37.16748046875,1,"valid",75],[153.812744140625,2,"valid",172],[2.333740234375,0,"valid",9]],"time":274.939208984375,"type":"localize"},{"count":[[15,36]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","#s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))"]],"memory":[[-3293072,4292624]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 6)","1/360","(+ 1/360 (* 1/20160 (pow x 2)))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(pow x 4)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 2))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(- (exp x) 2)","(exp x)","(exp (neg x))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"series":[[2.233154296875,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* 1/20160 (* x x)) 1/360) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) 1/12) (* x x)) (pow x 4) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))))","x","-inf"],[4.7080078125,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* 1/20160 (* x x)) 1/360) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) 1/12) (* x x)) (pow x 4) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))))","x","inf"],[1.632080078125,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (pow x 6) (+ (* 1/20160 (* x x)) 1/360) (+ (- (exp x) 2) (exp (neg x))) (* x x) (+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 4) 1/12) (* x x)) (pow x 4) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) 1/360) (+ (* (pow x 4) 1/12) (* x x))))","x","0"]],"time":9.466796875,"type":"series"},{"count":[[36,36]],"egraph":[[0,8143,245,0.086196069],[6,7547,278,0.014420032],[5,5602,278,0.022089957],[4,2642,280,0.020692246],[3,1658,280,0.009856087],[2,622,280,0.005115846],[1,266,290,0.001908582],[0,92,291,0.000891954]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 6)","1/360","(+ 1/360 (* 1/20160 (pow x 2)))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(pow x 4)","(- (+ (exp x) (exp (neg x))) 2)","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(* 1/20160 (pow x 2))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(- (exp x) 2)","(exp x)","(exp (neg x))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"memory":[[3065600,40194640]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x)))","(pow x 6)","(pow.f64 x #s(literal 6 binary64))","1/360","#s(literal 1/360 binary64)","(+ 1/360 (* 1/20160 (pow x 2)))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* 1/2 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- (* 1/2 x) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* 1/20160 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))","(* 1/20160 (pow x 2))","(*.f64 #s(literal 1/20160 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","(- (exp x) 2)","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp x)","(exp.f64 x)","(exp (neg x))","(exp.f64 (neg.f64 x))","(* 1/12 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","(* (pow x 4) (+ 1/12 (/ 1 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(* 1/360 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))","(* (pow x 6) (+ 1/360 (* 1/12 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)))","(* (pow x 6) (+ 1/360 (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(exp (* -1 x))","(exp.f64 (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":260.64306640625,"type":"simplify"},{"count":[[15,141]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","(*.f64 x x)","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","#s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))"]],"memory":[[924576,20189008]],"outputs":[["#s(approx -1 (*.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64)))","(neg.f64 (*.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64)))","(+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/20160 binary64)) (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) (*.f64 #s(literal -1/144 binary64) #s(literal 6 binary64)))","(+.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 6 binary64)) (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 1/360 binary64))","(+.f64 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)) #s(literal 1/20160 binary64))","(+.f64 #s(literal 1/20160 binary64) (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 1/360 binary64) (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 1/20160 binary64)) (*.f64 #s(literal 1/360 binary64) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 1/20160 binary64) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))) (*.f64 #s(literal 1/360 binary64) #s(literal 1/12 binary64)))","(+.f64 (fma.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64) (+.f64 #s(literal 1/406425600 binary64) #s(literal 1/2612736000 binary64))) (+.f64 #s(literal 1/360 binary64) #s(literal 1/2612736000 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64)) (*.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) #s(literal 1/12 binary64)))","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal 18 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 24 binary64)","#s(literal -12 binary64)","#s(literal -16 binary64)","#s(literal -64 binary64)","#s(literal 3 binary64)","#s(literal -6 binary64)","(neg.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)))","(+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64))","(+.f64 #s(literal 1/360 binary64) #s(literal -1/406425600 binary64))","(+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","(+.f64 #s(literal -1/406425600 binary64) #s(literal 1/360 binary64))","(+.f64 #s(literal 1/406425600 binary64) #s(literal 1/360 binary64))","(+.f64 #s(literal 1/360 binary64) #s(literal 1/406425600 binary64))","(+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/20160 binary64)) #s(literal 1/360 binary64))","(+.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64)) #s(literal 6 binary64))","(+.f64 (+.f64 #s(literal 1/406425600 binary64) #s(literal 1/2612736000 binary64)) (+.f64 #s(literal 1/360 binary64) #s(literal 1/2612736000 binary64)))","(+.f64 (+.f64 #s(literal 1/360 binary64) #s(literal 1/2612736000 binary64)) (+.f64 #s(literal 1/406425600 binary64) #s(literal 1/2612736000 binary64)))","(+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) #s(literal 1/20160 binary64))","(+.f64 #s(literal 1/20160 binary64) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 1/360 binary64) (+.f64 #s(literal 1/20160 binary64) #s(literal 6 binary64)))","(+.f64 #s(literal 1/360 binary64) (-.f64 #s(literal 1/20160 binary64) #s(literal 6 binary64)))","#s(approx -1 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal 18 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 24 binary64)","#s(literal -12 binary64)","#s(literal -16 binary64)","#s(literal -64 binary64)","#s(literal 3 binary64)","#s(literal -6 binary64)","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal 18 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 24 binary64)","#s(literal -12 binary64)","#s(literal -16 binary64)","#s(literal -64 binary64)","#s(literal 3 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal 18 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 24 binary64)","#s(literal -12 binary64)","#s(literal -16 binary64)","#s(literal -64 binary64)","#s(literal 3 binary64)","#s(literal -6 binary64)","#s(approx -1 #s(literal 6 binary64))","#s(approx -1 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(neg.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 #s(literal 6 binary64) (*.f64 #s(literal -1/144 binary64) #s(literal 6 binary64)))","(+.f64 #s(literal 6 binary64) (*.f64 #s(literal -1/12 binary64) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))))","(-.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(-.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","(-.f64 #s(literal 6 binary64) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1/12 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 1/144 binary64))","(*.f64 #s(literal 1/12 binary64) #s(literal 6 binary64))","(*.f64 #s(literal -1/12 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 1/144 binary64) #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal 18 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 24 binary64)","#s(literal -12 binary64)","#s(literal -16 binary64)","#s(literal -64 binary64)","#s(literal 3 binary64)","#s(literal -6 binary64)","#s(approx -1 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(neg.f64 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 1/360 binary64))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 1/360 binary64) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 1/360 binary64) #s(literal 1/12 binary64)) (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (*.f64 #s(literal 1/360 binary64) #s(literal 1/12 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)) (*.f64 #s(literal 1/360 binary64) #s(literal 1/12 binary64)))","(+.f64 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)) #s(literal 1/360 binary64))","(+.f64 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)) #s(literal 6 binary64))","(+.f64 (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)) (fma.f64 #s(literal 1/144 binary64) #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 1/360 binary64) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)))","(+.f64 #s(literal 1/360 binary64) (*.f64 #s(literal -1/144 binary64) #s(literal 6 binary64)))"]],"time":508.530029296875,"type":"rewrite"},{"compiler":[[3427,452]],"memory":[[-732432,14713824]],"time":20.010009765625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",27.10268250565233,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","done",28.30443459314316,"binary64"],["(+.f64 #s(approx (- (exp x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","fresh",28.857217607386417,"binary64"],["(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","fresh",61.2389381788545,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","done",0.9867080646241724,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","fresh",1.0327015171980996,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","done",1.1864874256837505,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","next",61.21690193317979,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))))","fresh",61.21690988854167,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","next",61.217338479360805,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",1.591566612043919,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))","next",0.9710830646241724,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","next",28.92071067298557,"binary64"],["#s(approx -1 #s(literal 6 binary64))","next",61.23251923239577,"binary64"]],"compiler":[[8,7],[12,10],[23,17],[5,5],[27,19],[22,15],[17,13],[17,15],[16,14],[14,12],[12,9],[49,36],[36,27],[3,4],[23,17],[5,5],[22,15],[17,15],[16,14],[14,12],[49,36],[36,27],[3,4]],"count":[[171,14]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[165,9],"picked":[5,4]}],"memory":[[2207648,10529424]],"min-error":[[0.00390625,"binary64"]],"time":11.263916015625,"type":"prune"},{"egraph":[[0,2888,250,0.017228545],[18,2888,250,0.022223429],[17,2888,250,0.018801896],[16,2886,250,0.020387161],[15,2841,250,0.021410193],[14,2643,250,0.016686842],[13,2513,250,0.019429948],[12,2055,250,0.014465316],[11,1638,250,0.01155676],[10,1272,250,0.008960999],[9,1104,250,0.00700043],[8,962,250,0.005499567],[7,797,250,0.005634217],[6,582,250,0.004529181],[5,424,250,0.002641283],[4,348,250,0.001998949],[3,265,262,0.001485626],[2,167,262,0.000967199],[1,96,262,0.000654569],[0,61,262,0.000510266],[0,42,262,0.000559452]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))","x","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(pow.f64 x #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(pow.f64 x #s(literal 8 binary64))","#s(literal 8 binary64)","#s(literal 1/20160 binary64)","#s(approx -1 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","#s(literal 6 binary64)","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","#s(literal 6 binary64)","#s(literal 1/12 binary64)","#s(literal 1/20160 binary64)","(+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))","#s(literal 1/360 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(pow.f64 x #s(literal 8 binary64))","x","#s(literal 8 binary64)","#s(literal 1/20160 binary64)"]],"locations":[["(pow.f64 x #s(literal 8 binary64))","cost-diff",0],["(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","cost-diff",0],["#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","cost-diff",0],["(+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))","cost-diff",2],["(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","cost-diff",2],["(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","cost-diff",3],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","cost-diff",0],["(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","cost-diff",2],["(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","cost-diff",2],["#s(approx -1 #s(literal 6 binary64))","cost-diff",0],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","cost-diff",0],["(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))","cost-diff",0],["#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))","cost-diff",0]],"memory":[[8368,9195200]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) x) x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) x) x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64)))))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/20160 binary64) x) x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))))","x","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","(fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 1/12 binary64)","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)))","(pow.f64 x #s(literal 6 binary64))","#s(literal 6 binary64)","#s(literal 1/360 binary64)","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(pow.f64 x #s(literal 8 binary64))","#s(literal 8 binary64)","#s(literal 1/20160 binary64)","#s(approx -1 #s(literal 6 binary64))","#s(literal 6 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","#s(literal 13/2 binary64)","(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 43699/6720 binary64))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","#s(literal 43699/6720 binary64)","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","#s(literal 10081/20160 binary64)","#s(literal 6 binary64)","#s(literal 1/12 binary64)","#s(literal 1/20160 binary64)","(+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))","#s(literal 2161/360 binary64)","#s(literal 1/360 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(pow.f64 x #s(literal 8 binary64))","x","#s(literal 8 binary64)","#s(literal 1/20160 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":239.026123046875,"type":"simplify"},{"compiler":[[190,36]],"locations":[["(pow.f64 x #s(literal 8 binary64))","accuracy",0.0],["(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","accuracy",0.0546875],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","accuracy",0.9710830646241724],["#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","accuracy",28.79009127332156],["(+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))","accuracy",0.0],["(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","accuracy",1.0],["(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","accuracy",1.0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","accuracy",61.21690193317979],["(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","accuracy",0.0],["(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","accuracy",0.0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","accuracy",61.217338479360805],["#s(approx -1 #s(literal 6 binary64))","accuracy",63.000352177480096],["(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","accuracy",0.0546875],["(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","accuracy",0.0546875],["(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","accuracy",0.06640625],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))","accuracy",0.9710830646241724]],"memory":[[-3400688,57156032]],"mixsample":[[24.897216796875,"adjust",800],[8.739013671875,"ival-exp",0],[1.17578125,"ival-sub",1600],[0.13525390625,"ival-assert",0],[1.677490234375,"ival-sub",0],[18.21142578125,"ival-exp",400],[1.495849609375,"ival-sub",400],[17.35693359375,"const",0],[17.61474609375,"ival-pow",0],[16.433837890625,"adjust",2000],[25.482177734375,"ival-add",0],[76.966064453125,"ival-mult",0],[0.004150390625,"ival-add",400],[0.30615234375,"ival-true",0],[47.4560546875,"ival-exp",1600],[0.752685546875,"exact",0],[1.158203125,"ival-neg",0]],"outcomes":[[49.2841796875,1,"valid",75],[253.260009765625,2,"valid",172],[2.576904296875,0,"valid",9]],"time":336.5029296875,"type":"localize"},{"count":[[17,16]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","#s(approx -1 #s(literal 6 binary64))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(pow.f64 x #s(literal 8 binary64))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))"]],"memory":[[3582032,3582032]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (* 1/360 (pow x 2))))","(* (pow x 4) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))","(* 1/20160 (pow x 8))","(pow x 8)","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/20160 (pow x 2))))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"series":[[1.5009765625,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160)))) (+ (* (pow x 4) 1/12) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160))) -1 (+ (* 6 1/12) 6) (* 6 1/12) (+ (- (exp x) 2) (exp (neg x))) (+ (* 6 1/12) 1/20160) (+ (+ (* 6 1/12) 1/20160) (+ 6 1/360)) (+ 6 1/360) (+ (- (exp x) 2) (exp (neg x))) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (* (pow x 8) 1/20160) (pow x 8) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160)))","x","-inf"],[1.551025390625,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160)))) (+ (* (pow x 4) 1/12) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160))) -1 (+ (* 6 1/12) 6) (* 6 1/12) (+ (- (exp x) 2) (exp (neg x))) (+ (* 6 1/12) 1/20160) (+ (+ (* 6 1/12) 1/20160) (+ 6 1/360)) (+ 6 1/360) (+ (- (exp x) 2) (exp (neg x))) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (* (pow x 8) 1/20160) (pow x 8) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160)))","x","inf"],[1.85693359375,"((+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160)))) (+ (* (pow x 4) 1/12) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160))) -1 (+ (* 6 1/12) 6) (* 6 1/12) (+ (- (exp x) 2) (exp (neg x))) (+ (* 6 1/12) 1/20160) (+ (+ (* 6 1/12) 1/20160) (+ 6 1/360)) (+ 6 1/360) (+ (- (exp x) 2) (exp (neg x))) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (* (pow x 8) 1/20160) (pow x 8) (+ (* (pow x 6) 1/360) (* (pow x 8) 1/20160)))","x","0"]],"time":5.719970703125,"type":"series"},{"count":[[16,16]],"egraph":[[0,8275,154,0.078708649],[7,5748,170,0.019040774],[6,3504,170,0.021913003],[5,2593,170,0.013460827],[4,2014,170,0.007863977],[3,1106,170,0.008968546],[2,428,170,0.004193618],[1,171,178,0.00210918],[0,57,178,0.000651054]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (* 1/360 (pow x 2))))","(* (pow x 4) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))","(* 1/20160 (pow x 8))","(pow x 8)","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/20160 (pow x 2))))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"memory":[[-6103120,36542512]],"method":["egg-herbie"],"outputs":[["(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 1/360 binary64) x (/.f64 #s(literal 1/12 binary64) x)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) x (/.f64 #s(literal 1/12 binary64) x)) (*.f64 x x))","(* 1/12 (pow x 4))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/12 (* 1/360 (pow x 2))))","(*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 1/360 binary64) x (/.f64 #s(literal 1/12 binary64) x)))","(* (pow x 4) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))","(*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) x (/.f64 #s(literal 1/12 binary64) x)))","(* 1/20160 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(pow x 8)","(pow.f64 x #s(literal 8 binary64))","(* 1/360 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64))","(* (pow x 6) (+ 1/360 (* 1/20160 (pow x 2))))","(*.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 #s(literal 1/20160 binary64) x (/.f64 #s(literal 1/360 binary64) x)))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 #s(literal 1/20160 binary64) x (/.f64 #s(literal 1/360 binary64) x)))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) x (/.f64 #s(literal 1/12 binary64) x)))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) x (/.f64 #s(literal 1/12 binary64) x)) (*.f64 x x))","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":288.89013671875,"type":"simplify"},{"count":[[17,148]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))))","(fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","#s(approx -1 #s(literal 6 binary64))","(+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(pow.f64 x #s(literal 8 binary64))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))"]],"memory":[[-3467792,65948512]],"outputs":[["#s(approx (+ (+ -2 (exp x)) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","#s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))","(neg.f64 (/.f64 (*.f64 (-.f64 (*.f64 x x) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))) (fma.f64 x (neg.f64 x) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","(neg.f64 (/.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (fma.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal -1/12 binary64) (*.f64 (neg.f64 x) x)))))","(neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal -1/12 binary64) (*.f64 (neg.f64 x) x))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))) (fma.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))) (fma.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal -1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))))","(neg.f64 (/.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (fma.f64 x (neg.f64 x) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))) (-.f64 (*.f64 x x) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) x) x (pow.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))) #s(literal 3 binary64)))) (fma.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (neg.f64 x) x))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))) (*.f64 (*.f64 x x) (*.f64 x x)))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) x) x (pow.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))) #s(literal 3 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (neg.f64 x) x))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))) (*.f64 (*.f64 x x) (*.f64 x x))))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal -1/12 binary64) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))))","(+.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))))","(+.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))","(+.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) x) x) (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/20160 binary64) (*.f64 x x)))","(+.f64 (fma.f64 x x (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))) (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))","(+.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64) (*.f64 x x)))","(+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))","(+.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))","(neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))","(+.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) x) x) (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))) (*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))))","(+.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))","(+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) x) x) (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)) (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))))","(+.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/144 binary64)) (fma.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))) (neg.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","(-.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/129600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) #s(literal 1/406425600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))))","(-.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) x) x) (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) x) x) (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))) (fma.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) x) x) (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal -1/20160 binary64))))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) #s(literal 1/406425600 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) x) x) (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal -1/20160 binary64))))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal -1/12 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/144 binary64)) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal -1/12 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/144 binary64)) (fma.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/129600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))) (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) #s(literal 1/406425600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 #s(literal -1/144 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal -1/12 binary64)))))","#s(approx -1 #s(literal 6 binary64))","#s(literal 13/2 binary64)","(neg.f64 (/.f64 (+.f64 #s(literal 1/4 binary64) #s(literal -36 binary64)) (neg.f64 #s(literal -11/2 binary64))))","(neg.f64 (/.f64 (+.f64 #s(literal 1/8 binary64) #s(literal 216 binary64)) (neg.f64 (+.f64 (+.f64 #s(literal 1/4 binary64) #s(literal 36 binary64)) #s(literal -3 binary64)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 #s(literal 1/8 binary64)) #s(literal -216 binary64)) (+.f64 (+.f64 #s(literal 1/4 binary64) #s(literal 36 binary64)) #s(literal -3 binary64))))","(neg.f64 (/.f64 (neg.f64 (+.f64 #s(literal 1/4 binary64) #s(literal -36 binary64))) #s(literal -11/2 binary64)))","(+.f64 #s(literal 1/2 binary64) #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 1/2 binary64))","(+.f64 (/.f64 #s(literal 1/4 binary64) #s(literal -11/2 binary64)) (neg.f64 (/.f64 #s(literal 36 binary64) #s(literal -11/2 binary64))))","(-.f64 #s(literal 1/2 binary64) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) #s(literal -11/2 binary64)) (/.f64 #s(literal 36 binary64) #s(literal -11/2 binary64)))","(-.f64 (/.f64 #s(literal 36 binary64) #s(literal 11/2 binary64)) (/.f64 #s(literal 1/4 binary64) #s(literal 11/2 binary64)))","(*.f64 #s(literal 6 binary64) #s(literal 13/12 binary64))","(*.f64 #s(literal 13/12 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 1 binary64) #s(literal 13/2 binary64))","(*.f64 (+.f64 #s(literal 1/4 binary64) #s(literal -36 binary64)) (/.f64 #s(literal 1 binary64) #s(literal -11/2 binary64)))","#s(literal 1/2 binary64)","(*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))","(*.f64 #s(literal 1/12 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 1 binary64) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) #s(literal 1 binary64))","(pow.f64 #s(literal 1/2 binary64) #s(literal 1 binary64))","#s(approx (+ (+ -2 (exp x)) (exp (neg x))) #s(literal 13/2 binary64))","#s(literal 10081/20160 binary64)","(neg.f64 (neg.f64 #s(literal 10081/20160 binary64)))","(+.f64 #s(literal 1/2 binary64) #s(literal 1/20160 binary64))","(+.f64 #s(literal 1/20160 binary64) #s(literal 1/2 binary64))","(+.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 10079/20160 binary64)) (neg.f64 (/.f64 #s(literal 1/406425600 binary64) #s(literal 10079/20160 binary64))))","(-.f64 #s(literal 1/2 binary64) #s(literal -1/20160 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 10079/20160 binary64)) (/.f64 #s(literal 1/406425600 binary64) #s(literal 10079/20160 binary64)))","(-.f64 (/.f64 #s(literal 1/406425600 binary64) #s(literal -10079/20160 binary64)) (/.f64 #s(literal 1/4 binary64) #s(literal -10079/20160 binary64)))","(*.f64 #s(literal 1 binary64) #s(literal 10081/20160 binary64))","(*.f64 (+.f64 #s(literal 1/4 binary64) #s(literal -1/406425600 binary64)) (/.f64 #s(literal 1 binary64) #s(literal 10079/20160 binary64)))","(*.f64 (-.f64 #s(literal 1/406425600 binary64) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) #s(literal -10079/20160 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 10079/20160 binary64)) (+.f64 #s(literal 1/4 binary64) #s(literal -1/406425600 binary64)))","(*.f64 #s(literal 10081/20160 binary64) (/.f64 #s(literal 10079/20160 binary64) #s(literal 10079/20160 binary64)))","(*.f64 (neg.f64 (+.f64 #s(literal 1/4 binary64) #s(literal -1/406425600 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 #s(literal 10079/20160 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1/4 binary64) #s(literal -1/406425600 binary64)) (+.f64 #s(literal 1/4 binary64) #s(literal -1/406425600 binary64))) #s(literal 10081/20160 binary64))","(neg.f64 (/.f64 (fma.f64 #s(literal 10081/20160 binary64) #s(literal 10081/20160 binary64) (neg.f64 #s(literal 4669921/129600 binary64))) (+.f64 (neg.f64 #s(literal 10081/20160 binary64)) #s(literal 2161/360 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 10081/20160 binary64) #s(literal 10081/20160 binary64) (neg.f64 #s(literal 4669921/129600 binary64)))) (+.f64 #s(literal 2005/4032 binary64) #s(literal -6 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal 10081/20160 binary64) #s(literal 10081/20160 binary64)) #s(literal 10081/20160 binary64) #s(literal 10091699281/46656000 binary64)) (neg.f64 (fma.f64 #s(literal 10081/20160 binary64) (+.f64 #s(literal 2005/4032 binary64) #s(literal -6 binary64)) #s(literal 4669921/129600 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 10081/20160 binary64) #s(literal 10081/20160 binary64)) #s(literal 10081/20160 binary64) #s(literal 10091699281/46656000 binary64))) (fma.f64 #s(literal 10081/20160 binary64) (+.f64 #s(literal 2005/4032 binary64) #s(literal -6 binary64)) #s(literal 4669921/129600 binary64))))","(+.f64 #s(literal 10081/20160 binary64) #s(literal 2161/360 binary64))","(+.f64 #s(literal 181/360 binary64) #s(literal 120961/20160 binary64))","(+.f64 #s(literal 3379/6720 binary64) #s(literal 6 binary64))","(+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64))","(+.f64 #s(literal 131041/20160 binary64) #s(literal 1/360 binary64))","(+.f64 #s(literal 40339/6720 binary64) #s(literal 1/2 binary64))","(+.f64 #s(literal 19/6720 binary64) #s(literal 13/2 binary64))","(+.f64 #s(literal 1/2 binary64) #s(literal 40339/6720 binary64))","(+.f64 #s(literal 2161/360 binary64) #s(literal 10081/20160 binary64))","(+.f64 #s(literal 120961/20160 binary64) #s(literal 181/360 binary64))","(+.f64 #s(literal 1/360 binary64) #s(literal 131041/20160 binary64))","#s(literal 2161/360 binary64)","(neg.f64 #s(literal -2161/360 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))","(+.f64 #s(literal 1/360 binary64) #s(literal 6 binary64))","(+.f64 (/.f64 #s(literal 36 binary64) #s(literal 2159/360 binary64)) (neg.f64 (/.f64 #s(literal 1/129600 binary64) #s(literal 2159/360 binary64))))","(-.f64 #s(literal 6 binary64) #s(literal -1/360 binary64))","(-.f64 (/.f64 #s(literal 36 binary64) #s(literal 2159/360 binary64)) (/.f64 #s(literal 1/129600 binary64) #s(literal 2159/360 binary64)))","(-.f64 (/.f64 #s(literal 1/129600 binary64) #s(literal -2159/360 binary64)) (/.f64 #s(literal 36 binary64) #s(literal -2159/360 binary64)))","(*.f64 #s(literal 1 binary64) #s(literal 2161/360 binary64))","(*.f64 #s(literal 2161/360 binary64) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))","(*.f64 (/.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/129600 binary64)) #s(literal 2161/360 binary64))","(*.f64 (/.f64 #s(literal 4665599/129600 binary64) #s(literal 10077695999/46656000 binary64)) (+.f64 #s(literal 4665601/129600 binary64) #s(literal 1/60 binary64)))","(*.f64 #s(literal 2161/360 binary64) (/.f64 #s(literal 2159/360 binary64) #s(literal 2159/360 binary64)))","(*.f64 #s(literal 4665599/129600 binary64) (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)))","#s(approx (+ (+ -2 (exp x)) (exp (neg x))) (+.f64 #s(literal 10081/20160 binary64) #s(literal 2161/360 binary64)))","#s(approx (+ (+ -2 (exp x)) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))))))","#s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))))","(*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/20160 binary64))","(*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))))","(*.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x #s(literal 1/20160 binary64))) x)","(*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) x) (*.f64 x #s(literal 1/20160 binary64)))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/20160 binary64)) (*.f64 x x))","(*.f64 x (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x #s(literal 1/20160 binary64))))","(*.f64 (*.f64 x #s(literal 1/20160 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) x))","(*.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/20160 binary64)))","(*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x))","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))))","(*.f64 (*.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64)))) (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))))","(*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/20160 binary64)) (pow.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))) (*.f64 x x)) (*.f64 x x))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x x))","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (pow.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) x) x)","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) x) (*.f64 (*.f64 x x) x))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x)","(*.f64 (pow.f64 (pow.f64 x #s(literal 1 binary64)) #s(literal 4 binary64)) (pow.f64 (pow.f64 x #s(literal 1 binary64)) #s(literal 4 binary64)))","(*.f64 (pow.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1 binary64)))","(*.f64 x (*.f64 (*.f64 (*.f64 x x) x) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 x (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) x))","(*.f64 (pow.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))))","(*.f64 (*.f64 (*.f64 x x) x) (*.f64 x (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))) x) (*.f64 (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))) x))","(*.f64 (*.f64 (*.f64 x x) (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64)))) (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))))","(neg.f64 (*.f64 (neg.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)) (*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))))","(+.f64 (*.f64 #s(literal 1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/129600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) #s(literal 1/406425600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/129600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) #s(literal 1/406425600 binary64)) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))) #s(literal 1/406425600 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal -1/360 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/129600 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal -1/360 binary64)))))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/406425600 binary64) x) (*.f64 (*.f64 x x) x) #s(literal -1/129600 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/20160 binary64) #s(literal 1/360 binary64))))","(*.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))))","(*.f64 (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))) (*.f64 (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/406425600 binary64) x) (*.f64 (*.f64 x x) x) #s(literal -1/129600 binary64)) (/.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal -1/360 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/20160 binary64) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64))) (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))))","(*.f64 (*.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -2 binary64))) (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))) (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -4 binary64)))) (pow.f64 x (/.f64 #s(literal -6 binary64) #s(literal -4 binary64))))"]],"time":9055.100830078125,"type":"rewrite"},{"compiler":[[9911,950]],"memory":[[4038528,19369824]],"time":25.982177734375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",27.10268250565233,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","done",28.30443459314316,"binary64"],["(+.f64 #s(approx (- (exp x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","fresh",28.857217607386417,"binary64"],["(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","next",61.2389381788545,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","next",61.21690193317979,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64)))","fresh",61.21690193317979,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",1.591566612043919,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","next",0.9710830646241724,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))","fresh",0.9867080646241724,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))))","fresh",0.9867080646241719,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))","next",28.92071067298557,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))) (*.f64 x x)) (*.f64 x x))))","fresh",28.92071067298557,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","fresh",0.9867080646241722,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","next",61.217338479360805,"binary64"],["#s(approx -1 #s(literal 6 binary64))","done",61.23251923239577,"binary64"]],"compiler":[[8,7],[12,10],[23,17],[5,5],[19,18],[12,11],[12,9],[62,35],[62,34],[74,35],[48,30],[48,30],[61,35],[10,9],[3,4],[23,17],[5,5],[19,18],[12,11],[62,35],[62,34],[74,35],[48,30],[48,30],[61,35],[10,9]],"count":[[209,15]],"kept":[{"done":[5,3],"fresh":[4,2],"new":[195,9],"picked":[5,1]}],"memory":[[4789632,12966880]],"min-error":[[0.00390625,"binary64"]],"time":12.573974609375,"type":"prune"},{"egraph":[[0,8840,272,0.134806697],[21,7666,280,0.032683056],[20,7666,280,0.049347584],[19,7666,280,0.050565856],[18,7666,280,0.04670104],[17,7650,280,0.048701648],[16,7555,280,0.04474533],[15,7234,280,0.039550716],[14,7117,280,0.02130985],[13,7115,280,0.019640482],[12,7066,280,0.01766615],[11,6418,280,0.021344726],[10,5592,280,0.023359269],[9,3972,280,0.025716742],[8,3311,280,0.015225229],[7,2708,280,0.01132327],[6,2224,280,0.009083475],[5,1615,280,0.007744286],[4,1185,280,0.006017447],[3,705,280,0.00415264],[2,281,288,0.002510223],[1,139,330,0.001132407],[0,77,354,0.000758372],[0,51,424,0.000624031]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))","(fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))","x","(+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","(fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))","(*.f64 x #s(literal 1/20160 binary64))","#s(literal 1/20160 binary64)","#s(literal 1/360 binary64)","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 x x)","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(literal 13/2 binary64)","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","#s(literal 6 binary64)","#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64)))","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","#s(literal 6 binary64)","#s(literal 1/12 binary64)","#s(literal 1/20160 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))","(/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64))","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal 4665599/129600 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64)))","(*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x)","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x))","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x x)","x","(*.f64 (*.f64 x x) x)","#s(literal 1/20160 binary64)"]],"locations":[["(*.f64 (*.f64 x x) x)","cost-diff",2],["(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x)","cost-diff",2],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x))","cost-diff",4],["(/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64))","cost-diff",2],["(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))","cost-diff",2],["(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64)))","cost-diff",2],["(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","cost-diff",3],["#s(approx -1 #s(literal 6 binary64))","cost-diff",0],["(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","cost-diff",0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","cost-diff",0],["(+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))","cost-diff",1],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","cost-diff",4]],"memory":[[1543664,61000752]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 3 binary64)) x) x)))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 3 binary64)) x) x))","(fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 3 binary64)) x) x)","x","(+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64)) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64)))","(fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64))","(fma.f64 (*.f64 #s(literal 1/20160 binary64) x) x #s(literal 1/360 binary64))","(*.f64 x #s(literal 1/20160 binary64))","(*.f64 #s(literal 1/20160 binary64) x)","#s(literal 1/20160 binary64)","#s(literal 1/360 binary64)","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(*.f64 x x)","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64))","#s(literal 1/12 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(literal 13/2 binary64)","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","(+.f64 #s(approx -1 #s(literal 6 binary64)) #s(literal 6 binary64))","#s(literal 6 binary64)","#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 43699/6720 binary64))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64)))","#s(literal 43699/6720 binary64)","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","#s(literal 10081/20160 binary64)","#s(literal 6 binary64)","#s(literal 1/12 binary64)","#s(literal 1/20160 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))","#s(literal 2161/360 binary64)","(/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64))","#s(literal 360/2159 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal 4665599/129600 binary64)","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64)))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))","(*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x)","(pow.f64 x #s(literal 8 binary64))","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x))","(pow.f64 x #s(literal 7 binary64))","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(*.f64 x x)","x","(*.f64 (*.f64 x x) x)","(pow.f64 x #s(literal 3 binary64))","#s(literal 1/20160 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":787.96484375,"type":"simplify"},{"compiler":[[299,47]],"locations":[["(*.f64 (*.f64 x x) x)","accuracy",0.08203125],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.12890625],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))","accuracy",0.9710830646241724],["#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64)))","accuracy",28.79009127332156],["(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","accuracy",1.0],["(/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64))","accuracy",1.0],["(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64)))","accuracy",1.0],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","accuracy",61.21690193317979],["(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","accuracy",0.0],["#s(approx -1 #s(literal 6 binary64))","accuracy",63.000352177480096],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","accuracy",61.217338479360805],["(*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","accuracy",0.05078125],["(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))","accuracy",0.06640625],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.12890625],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","accuracy",0.9710830646241724]],"memory":[[-1291984,71236128]],"mixsample":[[22.215087890625,"adjust",800],[3.876953125,"ival-div",0],[5.310546875,"ival-exp",0],[0.993408203125,"ival-sub",1600],[0.128173828125,"ival-assert",0],[1.442626953125,"ival-sub",0],[17.367919921875,"ival-exp",400],[1.371826171875,"ival-sub",400],[24.9365234375,"const",0],[6.900390625,"ival-pow",0],[14.67431640625,"adjust",2000],[23.425537109375,"ival-add",0],[37.817626953125,"ival-mult",0],[0.00390625,"ival-add",400],[0.319580078125,"ival-true",0],[43.84814453125,"ival-exp",1600],[0.758544921875,"exact",0],[1.078369140625,"ival-neg",0]],"outcomes":[[52.8095703125,1,"valid",75],[284.34716796875,2,"valid",172],[3.091796875,0,"valid",9]],"time":377.26513671875,"type":"localize"},{"count":[[19,20]],"inputs":[["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 x x) (*.f64 x x))","(+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","#s(approx -1 #s(literal 6 binary64))","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))","(/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64))","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x)","(*.f64 (*.f64 x x) x)","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))"]],"memory":[[-2434176,7582304]],"outputs":[["(pow x 6)","(pow x 4)","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (* 1/360 (pow x 2))))","(* (pow x 4) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 7)","(pow x 8)","(pow x 3)","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/20160 (pow x 2))))","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"series":[[3.485107421875,"((* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (+ (* (+ (* (* x 1/20160) x) 1/360) (* (* x x) (* (* x x) (* x x)))) (* (* (* x x) (* x x)) 1/12)) (+ (- (exp x) 2) (exp (neg x))) (+ (- (exp x) 2) (exp (neg x))) (+ 6 -1) -1 (+ (* 6 1/12) 1/20160) (+ (+ (* 6 1/12) 1/20160) (* (/ 1 2159/360) 4665599/129600)) (* (/ 1 2159/360) 4665599/129600) (/ 1 2159/360) (* (* (* x x) (* x x)) (* (* x x) x)) (* (* (* (* x x) (* x x)) (* (* x x) x)) x) (* (* x x) x) (* (* (* x x) (* x x)) 1/12) (* (+ (* (* x 1/20160) x) 1/360) (* (* x x) (* (* x x) (* x x)))) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+ (- (exp x) 2) (exp (neg x))))","x","-inf"],[5.3837890625,"((* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (+ (* (+ (* (* x 1/20160) x) 1/360) (* (* x x) (* (* x x) (* x x)))) (* (* (* x x) (* x x)) 1/12)) (+ (- (exp x) 2) (exp (neg x))) (+ (- (exp x) 2) (exp (neg x))) (+ 6 -1) -1 (+ (* 6 1/12) 1/20160) (+ (+ (* 6 1/12) 1/20160) (* (/ 1 2159/360) 4665599/129600)) (* (/ 1 2159/360) 4665599/129600) (/ 1 2159/360) (* (* (* x x) (* x x)) (* (* x x) x)) (* (* (* (* x x) (* x x)) (* (* x x) x)) x) (* (* x x) x) (* (* (* x x) (* x x)) 1/12) (* (+ (* (* x 1/20160) x) 1/360) (* (* x x) (* (* x x) (* x x)))) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+ (- (exp x) 2) (exp (neg x))))","x","inf"],[2.550048828125,"((* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (+ (* (+ (* (* x 1/20160) x) 1/360) (* (* x x) (* (* x x) (* x x)))) (* (* (* x x) (* x x)) 1/12)) (+ (- (exp x) 2) (exp (neg x))) (+ (- (exp x) 2) (exp (neg x))) (+ 6 -1) -1 (+ (* 6 1/12) 1/20160) (+ (+ (* 6 1/12) 1/20160) (* (/ 1 2159/360) 4665599/129600)) (* (/ 1 2159/360) 4665599/129600) (/ 1 2159/360) (* (* (* x x) (* x x)) (* (* x x) x)) (* (* (* (* x x) (* x x)) (* (* x x) x)) x) (* (* x x) x) (* (* (* x x) (* x x)) 1/12) (* (+ (* (* x 1/20160) x) 1/360) (* (* x x) (* (* x x) (* x x)))) (+ (- (exp x) 2) (exp (neg x))) (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+ (- (exp x) 2) (exp (neg x))))","x","0"]],"time":12.552001953125,"type":"series"},{"count":[[20,20]],"egraph":[[0,8074,166,0.073192951],[7,7776,182,0.01057985],[6,5405,182,0.02014873],[5,2683,182,0.017101628],[4,1712,182,0.008884932],[3,1119,182,0.005611879],[2,434,182,0.003609252],[1,177,190,0.001625106],[0,61,190,0.000566214]],"inputs":[["(pow x 6)","(pow x 4)","(* 1/12 (pow x 4))","(* (pow x 4) (+ 1/12 (* 1/360 (pow x 2))))","(* (pow x 4) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(pow x 7)","(pow x 8)","(pow x 3)","(* 1/360 (pow x 6))","(* (pow x 6) (+ 1/360 (* 1/20160 (pow x 2))))","(* 1/20160 (pow x 8))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(- (+ (exp x) (exp (neg x))) 2)","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(- (+ (exp x) (exp (* -1 x))) 2)"]],"memory":[[1808800,34629456]],"method":["egg-herbie"],"outputs":[["(pow x 6)","(pow.f64 x #s(literal 6 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* 1/12 (pow x 4))","(*.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/12 (* 1/360 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/360 binary64) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(fma.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x)","(pow x 7)","(pow.f64 x #s(literal 7 binary64))","(pow x 8)","(pow.f64 x #s(literal 8 binary64))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(* 1/360 (pow x 6))","(*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (+ 1/360 (* 1/20160 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(* 1/20160 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))","(* (pow x 8) (+ 1/20160 (* 1/360 (/ 1 (pow x 2)))))","(fma.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64) (*.f64 #s(literal 1/360 binary64) (pow.f64 x #s(literal 6 binary64))))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (* 1/360 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (pow.f64 x #s(literal 4 binary64)))","(- (+ (exp x) (exp (neg x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(* (pow x 8) (+ 1/20160 (+ (/ 1/12 (pow x 4)) (+ (* 1/360 (/ 1 (pow x 2))) (/ 1 (pow x 6))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x)","(- (+ (exp x) (exp (* -1 x))) 2)","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":253.171875,"type":"simplify"},{"count":[[19,187]],"inputs":[["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 x x) (*.f64 x x))","(+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","#s(approx -1 #s(literal 6 binary64))","(fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64))","(+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))","(/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64))","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x)","(*.f64 (*.f64 x x) x)","(*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","#s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))"]],"memory":[[-3421712,20743376]],"outputs":[["#s(literal 6 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal -1/12 binary64)","#s(literal 2159/720 binary64)","#s(literal -2159/360 binary64)","#s(literal 1/2 binary64)","#s(literal 4661281/129600 binary64)","#s(literal 54 binary64)","#s(literal 28 binary64)","#s(literal -1/2 binary64)","#s(literal -4661281/129600 binary64)","#s(literal -10063705679/46656000 binary64)","#s(literal -49 binary64)","#s(literal 1/288 binary64)","#s(literal 6 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal -1/12 binary64)","#s(literal 2159/720 binary64)","#s(literal -2159/360 binary64)","#s(literal 1/2 binary64)","#s(literal 4661281/129600 binary64)","#s(literal 54 binary64)","#s(literal 28 binary64)","#s(literal -1/2 binary64)","#s(literal -4661281/129600 binary64)","#s(literal -10063705679/46656000 binary64)","#s(literal -49 binary64)","#s(literal 1/288 binary64)","(neg.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","(+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64))","(+.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 6 binary64))","(+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) #s(literal 1/20160 binary64))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)))","(+.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 1/20160 binary64) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (+.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64))) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64))) (*.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64))))","(+.f64 #s(literal 1/20160 binary64) (neg.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)) (+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64))))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)) (+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)) #s(literal 6 binary64)))","#s(approx -1/12 #s(approx (+ -1/20160 1/360) (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64))))","#s(approx -1/12 #s(literal 13/2 binary64))","(+.f64 #s(literal 6 binary64) #s(approx -1/12 #s(literal 6 binary64)))","#s(approx -1/12 #s(literal 6 binary64))","#s(literal 1/20160 binary64)","#s(literal -1/20160 binary64)","#s(literal 1/241920 binary64)","#s(literal 10079/20160 binary64)","#s(literal -10079/20160 binary64)","#s(literal 1/40320 binary64)","#s(literal -2159/7257600 binary64)","#s(literal 2159/2949674434560000 binary64)","#s(literal -1/40320 binary64)","#s(literal 1/4877107200 binary64)","#s(literal 1/14158437285888000 binary64)","#s(literal -1/241920 binary64)","#s(literal 1/3360 binary64)","#s(literal 10081/20160 binary64)","#s(literal -1/406425600 binary64)","#s(literal 4665599/2612736000 binary64)","#s(literal -4665599/2612736000 binary64)","(neg.f64 #s(literal 4665599/2612736000 binary64))","(+.f64 #s(literal 1/20160 binary64) #s(literal 4665599/129600 binary64))","(+.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/129600 binary64))","(+.f64 #s(literal 4665599/2612736000 binary64) #s(literal 6 binary64))","(+.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64))","(+.f64 #s(literal 1/20160 binary64) #s(literal 4665599/2612736000 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 4665599/2612736000 binary64))","(+.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/2612736000 binary64))","(+.f64 #s(literal 4665599/129600 binary64) #s(literal 1/20160 binary64))","(+.f64 #s(literal 4665599/2612736000 binary64) #s(literal 1/20160 binary64))","(-.f64 #s(literal 1/20160 binary64) #s(literal 4665599/129600 binary64))","(-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 6 binary64))","(-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64))","#s(literal 4665599/129600 binary64)","#s(literal -4665599/129600 binary64)","#s(literal -21767814028801/16796160000 binary64)","#s(literal 4665599/259200 binary64)","#s(literal 473837727592465622857497601/282110990745600000000 binary64)","#s(literal 46996710488181359/6046617600000 binary64)","#s(literal 21767814028801/16796160000 binary64)","#s(literal -101559891364959916799/2176782336000000 binary64)","#s(literal 10314411534062459872146758687933002406401/4738381338321616896000000000000 binary64)","#s(literal 101559891364959916799/2176782336000000 binary64)","#s(literal 1047530514892872987109180057757735967962382225817375745030399/10314424798490535546171949056000000000000000000 binary64)","(neg.f64 #s(literal 4665599/129600 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 4665599/129600 binary64))","(+.f64 #s(literal 4665599/129600 binary64) #s(literal 6 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 4665599/129600 binary64))","#s(literal 6 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal -1/12 binary64)","#s(literal 2159/720 binary64)","#s(literal -2159/360 binary64)","#s(literal 1/2 binary64)","#s(literal 4661281/129600 binary64)","#s(literal 54 binary64)","#s(literal 28 binary64)","#s(literal -1/2 binary64)","#s(literal -4661281/129600 binary64)","#s(literal -10063705679/46656000 binary64)","#s(literal -49 binary64)","#s(literal 1/288 binary64)","#s(literal 6 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal -1/12 binary64)","#s(literal 2159/720 binary64)","#s(literal -2159/360 binary64)","#s(literal 1/2 binary64)","#s(literal 4661281/129600 binary64)","#s(literal 54 binary64)","#s(literal 28 binary64)","#s(literal -1/2 binary64)","#s(literal -4661281/129600 binary64)","#s(literal -10063705679/46656000 binary64)","#s(literal -49 binary64)","#s(literal 1/288 binary64)","#s(literal 6 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal -1/12 binary64)","#s(literal 2159/720 binary64)","#s(literal -2159/360 binary64)","#s(literal 1/2 binary64)","#s(literal 4661281/129600 binary64)","#s(literal 54 binary64)","#s(literal 28 binary64)","#s(literal -1/2 binary64)","#s(literal -4661281/129600 binary64)","#s(literal -10063705679/46656000 binary64)","#s(literal -49 binary64)","#s(literal 1/288 binary64)","#s(literal 6 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal -1/12 binary64)","#s(literal 2159/720 binary64)","#s(literal -2159/360 binary64)","#s(literal 1/2 binary64)","#s(literal 4661281/129600 binary64)","#s(literal 54 binary64)","#s(literal 28 binary64)","#s(literal -1/2 binary64)","#s(literal -4661281/129600 binary64)","#s(literal -10063705679/46656000 binary64)","#s(literal -49 binary64)","#s(literal 1/288 binary64)","#s(literal 6 binary64)","#s(literal 1 binary64)","#s(literal 2159/360 binary64)","#s(literal -1/12 binary64)","#s(literal 2159/720 binary64)","#s(literal -2159/360 binary64)","#s(literal 1/2 binary64)","#s(literal 4661281/129600 binary64)","#s(literal 54 binary64)","#s(literal 28 binary64)","#s(literal -1/2 binary64)","#s(literal -4661281/129600 binary64)","#s(literal -10063705679/46656000 binary64)","#s(literal -49 binary64)","#s(literal 1/288 binary64)","(neg.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64))","(+.f64 #s(literal 1/360 binary64) #s(literal 1/20160 binary64))","(+.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) #s(literal 6 binary64))","(+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) #s(literal 1/20160 binary64))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)))","(+.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)))","(+.f64 #s(literal 1/20160 binary64) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)))","(+.f64 (+.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64))) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64))) (*.f64 (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64))))","(+.f64 #s(literal 1/20160 binary64) (neg.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)) (+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)) (+.f64 #s(literal 1/20160 binary64) #s(literal 1/360 binary64))))","(+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/20160 binary64)) (+.f64 (+.f64 #s(literal 1/7257600 binary64) #s(literal 1/360 binary64)) #s(literal 6 binary64)))","#s(approx -1/12 #s(literal 4665599/2612736000 binary64))","#s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64))","#s(approx -1/12 #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))"]],"time":501.84912109375,"type":"rewrite"},{"compiler":[[3144,441]],"memory":[[74960,9958240]],"time":14.245849609375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",27.10268250565233,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","done",28.30443459314316,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))","fresh",29.189028312375047,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 1047530514892872987109180057757735967962382225817375745030399/10314424798490535546171949056000000000000000000 binary64)))","fresh",61.43209765065673,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 4665599/259200 binary64)))","fresh",61.232260978821856,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/2612736000 binary64)))","fresh",61.24557530474045,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 1/20160 binary64)))","fresh",61.24557399484381,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64)))","fresh",61.21690193317979,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 10081/20160 binary64) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","fresh",61.21690193317979,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","done",1.591566612043919,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","done",0.9710830646241724,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) #s(literal 54 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","fresh",61.17704012952378,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))","fresh",0.9867080646241724,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))))","fresh",0.9867080646241719,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))) (*.f64 x x)) (*.f64 x x))))","fresh",28.92071067298557,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","fresh",0.9867080646241722,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","fresh",61.200666099556045,"binary64"],["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","done",61.217338479360805,"binary64"]],"compiler":[[827,159],[8,7],[12,10],[12,10],[15,14],[15,14],[12,11],[12,11],[12,11],[16,15],[12,9],[62,35],[52,35],[62,34],[74,35],[48,30],[61,35],[14,13],[10,9]],"count":[[117,18]],"kept":[{"done":[4,3],"fresh":[6,5],"new":[102,8],"picked":[5,2]}],"memory":[[3698736,11994784]],"min-error":[[0.00390625,"binary64"]],"time":14.56201171875,"type":"prune"},{"accuracy":[0.9710830646241724],"baseline":[0.9710830646241724],"branch":[["x",0.9710830646241724,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.9710830646241724,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[32,1]],"inputs":[["#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/2612736000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 4665599/259200 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 1047530514892872987109180057757735967962382225817375745030399/10314424798490535546171949056000000000000000000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 10081/20160 binary64) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","(+.f64 #s(approx (- (exp x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))) (*.f64 x x)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) #s(literal 54 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 1/20160 binary64)) x) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))) (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/360 binary64)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64))))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/12 binary64) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/20160 binary64)))))))"]],"memory":[[1916400,9523440]],"oracle":[61.866954672232986],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))"]],"repr":["binary64"],"time":16.22607421875,"times":[[7.1650390625,"x"],[7.06591796875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[0.9867080646241722],"baseline":[0.9867080646241722],"branch":[["x",0.9867080646241722,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",0.9867080646241722,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[22,1]],"inputs":[["#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/2612736000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 4665599/259200 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 1047530514892872987109180057757735967962382225817375745030399/10314424798490535546171949056000000000000000000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 10081/20160 binary64) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","(+.f64 #s(approx (- (exp x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))) (*.f64 x x)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) #s(literal 54 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (+.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 x x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64)))))"]],"memory":[[-515984,7440016]],"oracle":[61.85889398914432],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))"]],"repr":["binary64"],"time":11.990966796875,"times":[[5.358154296875,"x"],[4.778076171875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[1.5915666120439194],"baseline":[1.591566612043919],"branch":[["x",1.5915666120439194,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",1.5915666120439194,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[20,1]],"inputs":[["#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/2612736000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64)) #s(literal 6 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 4665599/259200 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) #s(literal 1047530514892872987109180057757735967962382225817375745030399/10314424798490535546171949056000000000000000000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64)) (*.f64 #s(literal 6 binary64) #s(literal 1/12 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (+.f64 #s(literal 6 binary64) #s(literal 1/360 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 10081/20160 binary64) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","(+.f64 #s(approx (- (exp x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(approx (exp (neg x)) (-.f64 #s(literal 1 binary64) x)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 (fma.f64 #s(literal 6 binary64) #s(literal 1/12 binary64) #s(literal 1/20160 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) #s(literal 2159/360 binary64)) #s(literal 4665599/129600 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/20160 binary64))) (*.f64 x x)) (*.f64 x x))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) x)) x) #s(literal 1/20160 binary64))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) #s(literal 54 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))"]],"memory":[[-4737280,7043984]],"oracle":[61.85889398914432],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]],"repr":["binary64"],"time":14.774169921875,"times":[[5.041015625,"x"],[8.31201171875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[29.189028312375036],"baseline":[29.189028312375047],"branch":[["x",29.18902831237504,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",29.189028312375036,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[8,1]],"inputs":[["#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/2612736000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))","(+.f64 #s(literal 6 binary64) #s(approx -1 #s(literal 6 binary64)))"]],"memory":[[-3897072,4400480]],"oracle":[61.810274459556744],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))"]],"repr":["binary64"],"time":6.039794921875,"times":[[2.816162109375,"x"],[2.294921875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[61.20066609955588],"baseline":[61.200666099556045],"branch":[["x",61.20066609955588,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",61.20066609955603,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[6,1]],"inputs":[["#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 2341/360 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (+.f64 #s(literal 4665599/129600 binary64) #s(literal 4665599/2612736000 binary64)))"]],"memory":[[3886432,3886432]],"oracle":[61.2960362789369],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))"]],"repr":["binary64"],"time":4.58203125,"times":[[2.0458984375,"x"],[1.7939453125,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[61.2173384793608],"baseline":[61.217338479360805],"branch":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",61.2173384793608,1,"binary64"],["x",61.217338479360826,1,"binary64"]],"compiler":[[8,7],[1,1]],"count":[[2,1]],"inputs":[["#s(approx -1 #s(literal 6 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))"]],"memory":[[2927344,2927344]],"oracle":[61.23300229074176],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))"]],"repr":["binary64"],"time":2.966064453125,"times":[[1.169921875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"],[1.2958984375,"x"]],"type":"regimes"},{"accuracy":[61.23251923239579],"baseline":[61.23251923239577],"branch":[["x",61.23251923239599,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",61.23251923239579,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[1,1]],"inputs":[["#s(approx -1 #s(literal 6 binary64))"]],"link":["."],"memory":[[-5568880,2711328]],"name":["exp2 (problem 3.3.7)"],"oracle":[61.23251923239577],"outputs":[["#s(approx -1 #s(literal 6 binary64))"]],"repr":["binary64"],"time":2.675048828125,"times":[[1.072021484375,"x"],[1.090087890625,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"egraph":[[8,5982,170,0.027473851],[7,2152,170,0.023325631],[6,999,170,0.01445302],[5,569,170,0.005635472],[4,389,170,0.003073776],[3,275,170,0.002046884],[2,167,170,0.002034791],[1,92,170,0.000977142],[0,56,170,0.000966347]],"inputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(approx -1 #s(literal 6 binary64))"]],"memory":[[5069648,12859904]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))","#s(approx (+ (- (exp x) 2) (exp (neg x))) (-.f64 #s(literal 4665599/2612736000 binary64) #s(literal 4665599/2612736000 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 0 binary64))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))","#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))","#s(approx -1 #s(literal 6 binary64))"]],"stop":[["node limit",1]],"time":105.116943359375,"type":"simplify"},{"compiler":[[172,58]],"memory":[[1569936,1569936]],"stop":[["fuel",1]],"time":2.41796875,"type":"soundness"},{"compiler":[[172,58],[172,58],[11,7],[11,7],[8,7],[8,7],[62,35],[62,35],[62,35],[62,35]],"memory":[[-3199232,29169552]],"remove-preprocessing":[["(abs x)"],[],[],[],["(abs x)"],[],[],[]],"time":52.453125,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.015869140625,"type":"end"}]