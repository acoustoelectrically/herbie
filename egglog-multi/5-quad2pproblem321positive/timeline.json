[{"memory":[[16416,16416]],"time":0.06494140625,"type":"start"},{"compiler":[[15,12]],"memory":[[-279040,37277072]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":173.953857421875,"type":"analyze"},{"bogosity":[{"infinite":0.06320659879090247,"invalid":0.24769604460127764,"precondition":0.0014641286106780171,"valid":0.6876332279971419}],"memory":[[15676512,373640880]],"mixsample":[[6.1533203125,"ival-sub",1200],[0.1494140625,"ival-sub",4800],[111.785400390625,"ival-div",0],[57.140869140625,"adjust",800],[4.05322265625,"ival-mult",1200],[0.010986328125,"ival-sqrt",3200],[0.0439453125,"ival-div",400],[2.757568359375,"ival-sub",1600],[3.894775390625,"ival-assert",0],[0.0517578125,"ival-sub",3600],[0.37841796875,"ival-sqrt",4800],[56.873291015625,"ival-sub",0],[11.97119140625,"ival-sqrt",1200],[5.0009765625,"ival-sub",400],[76.92578125,"ival-sqrt",0],[4.734130859375,"ival-mult",800],[77.16357421875,"ival-add",0],[0.48095703125,"ival-sub",4400],[5.5927734375,"ival-sub",800],[0.72412109375,"ival-mult",1600],[0.038818359375,"ival-add",400],[2.848876953125,"adjust",2800],[0.005859375,"ival-div",2000],[0.089111328125,"ival-sqrt",3600],[0.220703125,"ival-sub",4000],[6.55419921875,"ival-sqrt",400],[5.67138671875,"ival-sqrt",2000],[0.106689453125,"ival-mult",2000],[8.379150390625,"ival-sqrt",800],[2.69580078125,"ival-sub",2000],[0.00390625,"ival-sub",3200],[0.572509765625,"ival-sqrt",4000],[0.004150390625,"ival-sub",6800],[0.014892578125,"ival-sqrt",6800],[1.20703125,"ival-sqrt",4400],[21.322509765625,"adjust",2000],[2.837890625,"ival-sub",2400],[144.015625,"ival-mult",0],[5.310546875,"ival-mult",400],[4.618408203125,"ival-sqrt",1600],[0.005126953125,"ival-add",2000],[0.024658203125,"ival-div",800],[8.05712890625,"ival-true",0],[5.7998046875,"ival-sqrt",2400],[0.020263671875,"ival-add",800],[61.726318359375,"ival-neg",0]],"outcomes":[[194.9228515625,1,"valid",1258],[86.790771484375,0,"invalid",1067],[242.087646484375,2,"valid",1167],[49.04443359375,3,"valid",185],[444.147216796875,0,"valid",5646]],"time":1392.4501953125,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[116,0,21,119]],"explanations":[["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",3,0,[["(*.f64 b_2 b_2)","underflow",51],["(*.f64 a c)","underflow",36],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[1,2]]],["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",3,0,[["(*.f64 b_2 b_2)","overflow",83],["(*.f64 a c)","overflow",22]],[[1,2,1]]],["/.f64","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",15,0,[["(*.f64 b_2 b_2)","underflow",51],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",26],["(*.f64 a c)","underflow",36],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[]]],["+.f64","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",55,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",95,0,[["(*.f64 b_2 b_2)","overflow",83],["(*.f64 a c)","overflow",22],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",95]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",3,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",98,0,false,0,false],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",55,0,false,0,false],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",15,0,false,0,false],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,2],[2,30],[1,105],[0,119]],"maybe-confusion":[[116,0,0,21,0,119]],"memory":[[-8973648,65985744]],"mixsample":[[0.44677734375,"ival-sub",1200],[0.33544921875,"ival-sqrt",2000],[3.7060546875,"adjust",800],[6.51904296875,"ival-div",0],[0.200439453125,"ival-mult",1200],[0.192626953125,"ival-sub",1600],[0.3740234375,"ival-sqrt",800],[0.169921875,"ival-sub",2000],[0.285888671875,"ival-assert",0],[3.27587890625,"ival-sub",0],[0.698486328125,"ival-sqrt",1200],[0.28369140625,"ival-sub",400],[4.71728515625,"ival-sqrt",0],[0.029296875,"ival-sqrt",4400],[1.6513671875,"adjust",2000],[0.23291015625,"ival-sub",2400],[0.012939453125,"ival-sub",4400],[0.299072265625,"ival-mult",800],[4.45849609375,"ival-add",0],[0.24658203125,"ival-sub",800],[0.379638671875,"ival-sqrt",1600],[8.267333984375,"ival-mult",0],[0.41796875,"ival-mult",400],[0.02490234375,"ival-mult",1600],[0.029052734375,"adjust",2800],[0.419921875,"ival-sqrt",2400],[0.548828125,"ival-true",0],[0.527587890625,"ival-sqrt",400],[2.7412109375,"ival-neg",0]],"outcomes":[[9.71240234375,1,"valid",52],[25.091796875,2,"valid",100],[0.603271484375,3,"valid",2],[32.8818359375,0,"valid",358]],"time":147.456787109375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"egraph":[[0,986,12,0.003653694],[12,986,12,0.00564013],[11,985,12,0.005457212],[10,974,12,0.006306834],[9,942,12,0.005924527],[8,828,12,0.005858598],[7,475,12,0.005254531],[6,322,12,0.002909729],[5,189,12,0.001710881],[4,113,12,0.001102331],[3,74,12,0.000486779],[2,45,12,0.000335464],[1,28,12,0.000223897],[0,17,13,0.000206476],[0,10,13,0.000128822]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[652672,17842864]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":214.175048828125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.0791015625,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",27.654537104570764,"binary64"]],"compiler":[[13,10]],"memory":[[338720,338720]],"time":0.658935546875,"type":"prune"},{"egraph":[[0,986,48,0.003200174],[12,986,48,0.004963574],[11,985,48,0.005140665],[10,974,48,0.00595413],[9,942,48,0.006794374],[8,828,48,0.007963947],[7,475,48,0.004940419],[6,322,48,0.002651503],[5,189,48,0.001534563],[4,113,48,0.000872226],[3,74,48,0.000494863],[2,45,48,0.000359082],[1,28,48,0.000346351],[0,17,50,0.000247371],[0,10,50,0.000136048]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",1]],"memory":[[2200688,2200688]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","(*.f64 c a)","a","c"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":56.742919921875,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.6015625000000001],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",3.6643789374575935],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",12.337640559668122],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",22.859055823038513]],"memory":[[-2968528,13168976]],"mixsample":[[0.1513671875,"ival-sub",1200],[0.1376953125,"ival-sqrt",2000],[1.4453125,"adjust",800],[2.717529296875,"ival-div",0],[0.072998046875,"ival-mult",1200],[0.090576171875,"ival-sub",1600],[0.18994140625,"ival-sqrt",800],[0.065673828125,"ival-sub",2000],[0.10205078125,"ival-assert",0],[1.251220703125,"ival-sub",0],[0.273193359375,"ival-sqrt",1200],[0.11669921875,"ival-sub",400],[1.92529296875,"ival-sqrt",0],[0.012939453125,"ival-sqrt",4400],[0.65087890625,"adjust",2000],[0.08447265625,"ival-sub",2400],[0.004150390625,"ival-sub",4400],[0.162841796875,"ival-mult",800],[1.81396484375,"ival-add",0],[0.09375,"ival-sub",800],[0.197509765625,"ival-sqrt",1600],[3.6796875,"ival-mult",0],[0.168701171875,"ival-mult",400],[0.011962890625,"ival-mult",1600],[0.011962890625,"adjust",2800],[0.1650390625,"ival-sqrt",2400],[0.16455078125,"ival-true",0],[0.188720703125,"ival-sqrt",400],[1.2880859375,"ival-neg",0]],"outcomes":[[3.8828125,1,"valid",26],[10.40869140625,2,"valid",50],[0.239013671875,3,"valid",1],[19.114013671875,0,"valid",179]],"time":42.88623046875,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-1429088,7193040]],"outputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[2.4189453125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[1.93505859375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[2.538818359375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[1.203125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.422119140625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[1.743896484375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[2.7060546875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[2.2578125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[1.406005859375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":24.493896484375,"type":"series"},{"count":[[98,97]],"egraph":[[0,8048,2611,0.095211589],[2,5550,2747,0.027137105],[1,1606,2798,0.015652881],[0,508,2832,0.004890632]],"inputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[-1308112,48971248]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a) b_2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 (*.f64 c a) #s(literal -1/2 binary64))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 c a) #s(literal -1/2 binary64)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 c a)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c) (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -2 (/ b_2 a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 c) a)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":257.9970703125,"type":"simplify"},{"count":[[5,75]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-8865728,18858576]],"outputs":[["(neg.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 #s(literal 0 binary64) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(-.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(neg.f64 (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (/.f64 #s(literal 16 binary64) a) b_2))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (/.f64 #s(literal 16 binary64) a)) (*.f64 b_2 (/.f64 #s(literal 16 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) b_2) (*.f64 (/.f64 #s(literal 16 binary64) a) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (*.f64 b_2 (/.f64 #s(literal 16 binary64) a)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (/.f64 #s(literal 16 binary64) a)))","(-.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 b_2 a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)))","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","b_2","(neg.f64 b_2)","(+.f64 b_2 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 16 binary64) b_2)","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 16 binary64) b_2))","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 b_2 (*.f64 (*.f64 b_2 b_2) b_2))","(neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c) (*.f64 (*.f64 b_2 b_2) b_2)))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (neg.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2))))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)) (/.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 #s(literal 16 binary64) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))"]],"time":429.385986328125,"type":"rewrite"},{"compiler":[[5328,849]],"memory":[[7785408,15396912]],"time":19.5888671875,"type":"eval"},{"alts":[["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","fresh",62.19429445457144,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",45.210759266708955,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.654537104570764,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",41.47079673263058,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","next",44.428964976892736,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","fresh",57.239601838298825,"binary64"],["(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","next",62.19004470976357,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",49.025705014671786,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","fresh",40.39535012979717,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","next",45.65375282987154,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c))","fresh",43.83879409834395,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","next",43.04479855919123,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","fresh",40.476342511937155,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","next",40.39535012979717,"binary64"]],"compiler":[[12,8],[31,16],[13,10],[18,13],[17,12],[22,15],[14,10],[21,15],[17,13],[30,20],[28,20],[19,14],[27,19],[19,14],[12,8],[31,16],[18,13],[17,12],[22,15],[14,10],[21,15],[17,13],[30,20],[28,20],[19,14],[27,19],[19,14]],"count":[[170,14]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[169,13],"picked":[1,1]}],"memory":[[-3861024,12064048]],"min-error":[[4.482433491840744,"binary64"]],"time":13.634033203125,"type":"prune"},{"egraph":[[0,8261,249,0.044197997],[8,5580,253,0.025963592],[7,2435,253,0.025368771],[6,1380,253,0.01111355],[5,1009,253,0.006384122],[4,619,254,0.004998573],[3,342,254,0.002785951],[2,179,257,0.001401115],[1,104,257,0.000833251],[0,62,262,0.000573603],[0,39,262,0.000373093]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","#s(literal -2 binary64)","(/.f64 b_2 a)","b_2","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(/.f64 c b_2)","c","b_2","#s(literal -1/2 binary64)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","b_2","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","#s(literal 16 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(literal -1/8 binary64) b_2)","#s(literal -1/8 binary64)","b_2","(/.f64 (*.f64 (*.f64 c c) a) b_2)","(*.f64 (*.f64 c c) a)","(*.f64 c c)","c","a","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)"]],"locations":[["(/.f64 #s(literal -1/8 binary64) b_2)","cost-diff",0],["(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","cost-diff",0],["(fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c))","cost-diff",2],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","cost-diff",0],["(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","cost-diff",0],["(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64))","cost-diff",0],["(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","cost-diff",2],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","cost-diff",1],["(/.f64 c b_2)","cost-diff",0],["(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","cost-diff",0],["(/.f64 b_2 a)","cost-diff",0],["(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","cost-diff",0]],"memory":[[3074288,26010000]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -2 binary64) a) b_2))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","#s(literal -2 binary64)","(/.f64 b_2 a)","b_2","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","c","b_2","#s(literal -1/2 binary64)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","a","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) a) b_2 (*.f64 (*.f64 c c) a)) #s(literal 16 binary64))","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64))","(*.f64 #s(literal 16 binary64) (+.f64 (fma.f64 (*.f64 c c) (*.f64 a a) b_2) b_2))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (fma.f64 (*.f64 c c) (*.f64 a a) b_2) b_2)","b_2","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(fma.f64 (*.f64 c c) (*.f64 a a) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","#s(literal 16 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (fma.f64 (*.f64 (/.f64 (/.f64 a b_2) b_2) c) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) b_2) c))","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(*.f64 (/.f64 (fma.f64 (*.f64 (/.f64 (/.f64 a b_2) b_2) c) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) b_2) c)","(fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 a b_2) b_2) c) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(/.f64 #s(literal -1/8 binary64) b_2)","#s(literal -1/8 binary64)","b_2","(/.f64 (*.f64 (*.f64 c c) a) b_2)","(*.f64 (*.f64 c c) a)","(*.f64 c c)","c","a","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":192.70703125,"type":"simplify"},{"compiler":[[225,34]],"locations":[["(fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c))","accuracy",2.844867307269848],["(/.f64 (*.f64 (*.f64 c c) a) b_2)","accuracy",4.670746425622674],["(*.f64 (*.f64 c c) a)","accuracy",8.864038108469774],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","accuracy",42.87004979855403],["(*.f64 a a)","accuracy",0.0],["(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","accuracy",0.00390625],["(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","accuracy",4.234065762664938],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","accuracy",12.502243728381623],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","accuracy",3.6643789374575935],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","accuracy",12.337640559668122],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","accuracy",19.806014940494894],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","accuracy",22.859055823038513],["(/.f64 c b_2)","accuracy",0.0],["(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","accuracy",0.0078125],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","accuracy",43.04089230919123],["(/.f64 b_2 a)","accuracy",0.0],["(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","accuracy",0.0078125],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","accuracy",40.39535012979717]],"memory":[[924400,36681424]],"mixsample":[[0.205810546875,"ival-sub",1200],[0.177978515625,"ival-sqrt",2000],[4.443115234375,"adjust",800],[13.53173828125,"ival-div",0],[0.081787109375,"ival-mult",1200],[0.111572265625,"ival-sub",1600],[0.23193359375,"ival-sqrt",800],[0.09326171875,"ival-sub",2000],[0.10693359375,"ival-assert",0],[0.885498046875,"ival-sqrt",1200],[1.3515625,"ival-sub",0],[0.147705078125,"ival-sub",400],[2.06640625,"ival-sqrt",0],[0.01318359375,"ival-sqrt",4400],[2.103271484375,"adjust",2000],[0.11083984375,"ival-sub",2400],[0.0048828125,"ival-sub",4400],[0.202880859375,"ival-mult",800],[5.85400390625,"ival-add",0],[0.12548828125,"ival-sub",800],[0.1904296875,"ival-sqrt",1600],[42.0859375,"ival-mult",0],[0.22021484375,"ival-mult",400],[0.012939453125,"ival-mult",1600],[0.032958984375,"adjust",2800],[0.18798828125,"ival-sqrt",2400],[0.244140625,"ival-true",0],[0.55126953125,"exact",0],[0.23876953125,"ival-sqrt",400],[1.430419921875,"ival-neg",0]],"outcomes":[[11.43212890625,1,"valid",26],[49.044921875,2,"valid",50],[0.94091796875,3,"valid",1],[45.852783203125,0,"valid",179]],"time":135.22802734375,"type":"localize"},{"count":[[22,146]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(/.f64 c b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/.f64 #s(literal -1/8 binary64) b_2)","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 a a)","(*.f64 (*.f64 c c) a)","(/.f64 (*.f64 (*.f64 c c) a) b_2)"]],"memory":[[-4773312,20020784]],"outputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ b_2 a)","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* 32 (/ b_2 a))","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) a)","(* 32 b_2)","(+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2))","(* 2 b_2)","(+ (* 2 b_2) (* (pow a 2) (pow c 2)))","(+ b_2 (* (pow a 2) (pow c 2)))","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(pow a 2)","(* a (pow c 2))","(/ (* a (pow c 2)) b_2)","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 16 (* a (pow c 2)))","(* a (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(* 16 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -32 (/ b_2 (pow a 2))) (* -16 (pow c 2)))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(/ c b_2)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* 16 (* a (pow c 2))) (* 32 (/ b_2 a)))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ -1/8 b_2)","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* 16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a))))","(* b_2 (+ 32 (* 16 (/ (* (pow a 2) (pow c 2)) b_2))))","(* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* -16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a)))))","(* -1 (* b_2 (- (* -16 (/ (* (pow a 2) (pow c 2)) b_2)) 32)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* 16 a) (* 32 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ (* 16 (pow a 2)) (* 32 (/ b_2 (pow c 2)))))","(* (pow c 2) (+ (* 2 (/ b_2 (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[11.154052734375,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","c","-inf"],[4.329833984375,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","c","inf"],[3.543212890625,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","c","0"],[4.9150390625,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","b_2","-inf"],[42.76611328125,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","b_2","inf"],[5.51416015625,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","b_2","0"],[4.835205078125,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","a","-inf"],[7.01611328125,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","a","inf"],[5.113037109375,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ c b_2) -1/2) (/ c b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (+ b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (/ -1/8 b_2) (- (* b_2 b_2) (* a c)) (* a a) (* (* c c) a) (/ (* (* c c) a) b_2))","a","0"]],"time":92.493896484375,"type":"series"},{"count":[[146,145]],"egraph":[[0,8661,3161,0.098977242],[2,6464,3328,0.031848081],[1,1984,3385,0.020000614],[0,626,3419,0.006094277]],"inputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ b_2 a)","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* 32 (/ b_2 a))","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) a)","(* 32 b_2)","(+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2))","(* 2 b_2)","(+ (* 2 b_2) (* (pow a 2) (pow c 2)))","(+ b_2 (* (pow a 2) (pow c 2)))","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(pow a 2)","(* a (pow c 2))","(/ (* a (pow c 2)) b_2)","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 16 (* a (pow c 2)))","(* a (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(* 16 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -32 (/ b_2 (pow a 2))) (* -16 (pow c 2)))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(/ c b_2)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* 16 (* a (pow c 2))) (* 32 (/ b_2 a)))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ -1/8 b_2)","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* 16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a))))","(* b_2 (+ 32 (* 16 (/ (* (pow a 2) (pow c 2)) b_2))))","(* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* -16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a)))))","(* -1 (* b_2 (- (* -16 (/ (* (pow a 2) (pow c 2)) b_2)) 32)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* 16 a) (* 32 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ (* 16 (pow a 2)) (* 32 (/ b_2 (pow c 2)))))","(* (pow c 2) (+ (* 2 (/ b_2 (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[9707856,52778656]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ b_2 a)","(/.f64 b_2 a)","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(* 32 (/ b_2 a))","(*.f64 (/.f64 #s(literal 32 binary64) a) b_2)","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) a)","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 16 binary64) (*.f64 #s(literal 32 binary64) b_2)) a)","(* 32 b_2)","(*.f64 #s(literal 32 binary64) b_2)","(+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2))","(fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 16 binary64) (*.f64 #s(literal 32 binary64) b_2))","(* 2 b_2)","(*.f64 #s(literal 2 binary64) b_2)","(+ (* 2 b_2) (* (pow a 2) (pow c 2)))","(fma.f64 (*.f64 (*.f64 c c) a) a (*.f64 #s(literal 2 binary64) b_2))","(+ b_2 (* (pow a 2) (pow c 2)))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(* -1/2 c)","(*.f64 #s(literal -1/2 binary64) c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(pow a 2)","(*.f64 a a)","(* a (pow c 2))","(*.f64 (*.f64 c c) a)","(/ (* a (pow c 2)) b_2)","(/.f64 (*.f64 (*.f64 c c) a) b_2)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* 16 (* a (pow c 2)))","(*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a))","(* a (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","(* 16 (* (pow a 2) (pow c 2)))","(*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 16 binary64))","(* (pow a 2) (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a) a)","(* (pow a 2) (pow c 2))","(*.f64 (*.f64 (*.f64 c c) a) a)","(* (pow a 2) (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 2 binary64) (*.f64 c c)) a) a)","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(*.f64 (*.f64 (fma.f64 c c (/.f64 (/.f64 b_2 a) a)) a) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(*.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 c (/.f64 c b_2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 (/.f64 c a) #s(literal -1/2 binary64))) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))))) a)) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a) b_2) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64))))) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -32 (/ b_2 (pow a 2))) (* -16 (pow c 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 (/.f64 c a) #s(literal -1/2 binary64))) a)","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(/ c b_2)","(/.f64 c b_2)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 16 (* a (pow c 2))) (* 32 (/ b_2 a)))","(fma.f64 (*.f64 (*.f64 #s(literal 16 binary64) a) c) c (*.f64 (/.f64 #s(literal 32 binary64) a) b_2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal -1/8 binary64) c) a (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)))) (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal -1/8 binary64) c) a (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 3 binary64)))","(/ -1/8 b_2)","(/.f64 #s(literal -1/8 binary64) b_2)","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c) (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 c a)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64)))) b_2 b_2)","(* b_2 (+ (* 16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b_2) #s(literal 16 binary64) (/.f64 #s(literal 32 binary64) a)) b_2)","(* b_2 (+ 32 (* 16 (/ (* (pow a 2) (pow c 2)) b_2))))","(*.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (*.f64 c c) a) b_2)) #s(literal 16 binary64) #s(literal 32 binary64)) b_2)","(* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2)))","(*.f64 (fma.f64 a (/.f64 (*.f64 (*.f64 c c) a) b_2) #s(literal 2 binary64)) b_2)","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(*.f64 (fma.f64 a (/.f64 (*.f64 (*.f64 c c) a) b_2) #s(literal 1 binary64)) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (/.f64 c b_2)) b_2)) b_2) b_2)","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) a) (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/2 binary64)))) b_2 b_2))","(* -1 (* b_2 (- (* -16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 #s(literal -16 binary64) a) (*.f64 c (/.f64 c b_2)) (/.f64 #s(literal -32 binary64) a)))","(* -1 (* b_2 (- (* -16 (/ (* (pow a 2) (pow c 2)) b_2)) 32)))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 a (/.f64 (*.f64 (*.f64 c c) a) b_2)) #s(literal -16 binary64) #s(literal -32 binary64)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2)))","(*.f64 (neg.f64 b_2) (-.f64 #s(literal -2 binary64) (*.f64 a (/.f64 (*.f64 (*.f64 c c) a) b_2))))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(*.f64 (*.f64 (fma.f64 a (/.f64 (*.f64 (*.f64 c c) a) b_2) #s(literal 1 binary64)) #s(literal 1 binary64)) b_2)","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* (pow c 2) (+ (* 16 a) (* 32 (/ b_2 (* a (pow c 2))))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (/.f64 b_2 a) c) c) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) a)) c) c)","(* (pow c 2) (+ (* 16 (pow a 2)) (* 32 (/ b_2 (pow c 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 b_2 c) c) #s(literal 32 binary64) (*.f64 (*.f64 #s(literal 16 binary64) a) a)) c) c)","(* (pow c 2) (+ (* 2 (/ b_2 (pow c 2))) (pow a 2)))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 b_2 c) c) #s(literal 2 binary64) (*.f64 a a)) c) c)","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(*.f64 (*.f64 (fma.f64 a a (/.f64 (/.f64 b_2 c) c)) c) c)","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(*.f64 (fma.f64 (/.f64 (/.f64 a b_2) b_2) #s(literal -1/8 binary64) (/.f64 #s(literal -1/2 binary64) c)) (*.f64 c c))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(*.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (/.f64 #s(literal -1/2 binary64) (*.f64 c b_2))) (*.f64 c c))","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64))))) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":272.6201171875,"type":"simplify"},{"count":[[22,225]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(/.f64 c b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/.f64 #s(literal -1/8 binary64) b_2)","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 a a)","(*.f64 (*.f64 c c) a)","(/.f64 (*.f64 (*.f64 c c) a) b_2)"]],"memory":[[-6004032,38929600]],"outputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(literal 0 binary64)","(neg.f64 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) #s(literal 0 binary64))","(+.f64 b_2 b_2)","(-.f64 #s(literal 16 binary64) #s(literal 16 binary64))","(-.f64 #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(-.f64 #s(literal 1/4 binary64) #s(literal 1/4 binary64))","(-.f64 #s(literal 8 binary64) #s(literal 8 binary64))","(-.f64 #s(literal 0 binary64) #s(literal 0 binary64))","(-.f64 b_2 b_2)","(*.f64 #s(literal 0 binary64) #s(literal -2 binary64))","(*.f64 b_2 #s(literal -2 binary64))","(*.f64 #s(literal 0 binary64) #s(literal -1 binary64))","(*.f64 #s(literal 0 binary64) #s(literal 16 binary64))","(*.f64 #s(literal 0 binary64) #s(literal -1/8 binary64))","(neg.f64 (/.f64 b_2 a))","(+.f64 #s(literal 0 binary64) (/.f64 b_2 a))","(-.f64 #s(literal 0 binary64) (/.f64 b_2 a))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (/.f64 b_2 a))","(*.f64 (/.f64 #s(literal -1 binary64) a) b_2)","(*.f64 (/.f64 #s(literal 16 binary64) a) b_2)","(*.f64 (/.f64 b_2 a) #s(literal -1 binary64))","(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 b_2 a))","(*.f64 #s(literal 16 binary64) (/.f64 b_2 a))","(*.f64 b_2 (/.f64 #s(literal -1 binary64) a))","(*.f64 b_2 (/.f64 #s(literal 16 binary64) a))","(*.f64 (pow.f64 (*.f64 (*.f64 b_2 b_2) a) (/.f64 #s(literal -1 binary64) #s(literal 8 binary64))) (pow.f64 (*.f64 (*.f64 b_2 b_2) a) (/.f64 #s(literal -1 binary64) #s(literal 8 binary64))))","(/.f64 b_2 a)","(/.f64 (*.f64 b_2 b_2) (*.f64 a b_2))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","(neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","(*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal -1/2 binary64))","(*.f64 (neg.f64 c) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2))","(*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 (/.f64 #s(literal -1/2 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 (/.f64 #s(literal -1/2 binary64) #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)) c)","(*.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)) (neg.f64 c))","(*.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)) (/.f64 c #s(literal 16 binary64)))","(*.f64 (*.f64 (*.f64 b_2 b_2) c) (/.f64 #s(literal -1/2 binary64) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 c (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)))","(neg.f64 (*.f64 (*.f64 b_2 b_2) c))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) (*.f64 (*.f64 b_2 b_2) c))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 (neg.f64 c) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) (neg.f64 c))","(*.f64 (*.f64 b_2 b_2) c)","(*.f64 (*.f64 b_2 b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 #s(literal 16 binary64) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 b_2 (*.f64 c b_2))","(*.f64 c (*.f64 b_2 b_2))","(*.f64 (*.f64 #s(literal 16 binary64) (neg.f64 c)) (*.f64 b_2 b_2))","(+.f64 b_2 (sqrt.f64 #s(approx (+ (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))))","(/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (+ (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","b_2","(neg.f64 b_2)","(+.f64 b_2 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 16 binary64) b_2)","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 b_2 (*.f64 (*.f64 b_2 b_2) b_2))","(*.f64 (pow.f64 b_2 (/.f64 #s(literal 16 binary64) #s(literal 8 binary64))) (pow.f64 b_2 (/.f64 #s(literal 16 binary64) #s(literal 8 binary64))))","(sqrt.f64 #s(approx (+ (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))","(neg.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a))","(+.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a) #s(literal 0 binary64))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (/.f64 #s(literal 16 binary64) a)) (/.f64 b_2 a))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 b_2 a))","(+.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a))","(+.f64 (/.f64 b_2 a) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (/.f64 #s(literal 16 binary64) a)))","(+.f64 (/.f64 b_2 a) (*.f64 (/.f64 #s(literal 16 binary64) a) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(-.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 b_2 a))","(-.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (neg.f64 a)) (/.f64 b_2 a))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a))","(-.f64 (/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) a) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(-.f64 (/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (neg.f64 a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)))","(*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (/.f64 #s(literal -1 binary64) a))","(neg.f64 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal -1 binary64)) b_2)","(+.f64 b_2 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal -1 binary64)))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (-.f64 b_2 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 c a) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (neg.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))","(neg.f64 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal -1 binary64)) b_2)","(+.f64 b_2 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal -1 binary64)))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (-.f64 b_2 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 c a) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (neg.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))","(neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 c a) (*.f64 b_2 b_2) b_2))","(+.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) b_2 b_2) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))))","(+.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) b_2 b_2) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) (*.f64 c c))))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) b_2 b_2))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) b_2 b_2))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (fma.f64 (*.f64 c a) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (*.f64 c a) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 c a) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 (*.f64 b_2 b_2) b_2)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c))))","(neg.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2) (*.f64 #s(literal -1/2 binary64) c))","(+.f64 (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2) (neg.f64 (*.f64 c #s(literal 1/2 binary64))))","(+.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2))","(+.f64 (neg.f64 (*.f64 c #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 a a)) #s(literal 1/64 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) b_2)) (neg.f64 (/.f64 (*.f64 (*.f64 c c) #s(literal -1/4 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c)))))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))))","(-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2))","(-.f64 (/.f64 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 a a)) #s(literal 1/64 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) b_2)))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 a a)) #s(literal 1/64 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) b_2)) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/4 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c))))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (/.f64 #s(literal 16 binary64) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (*.f64 b_2 b_2)))","(neg.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2) (*.f64 b_2 b_2)) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2)))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2) (*.f64 b_2 b_2)))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 a a)) b_2) (*.f64 b_2 #s(literal 1/64 binary64))) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) b_2)) (/.f64 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (*.f64 b_2 b_2)))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (*.f64 b_2 b_2)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 a a)) #s(literal 1/64 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) b_2)) b_2) (/.f64 (/.f64 (*.f64 (*.f64 c c) #s(literal -1/4 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c))) b_2))","(*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (*.f64 b_2 b_2))","(*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c)) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))))","(*.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal -1/2 binary64) c)))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (*.f64 b_2 b_2)) (/.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64)))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c c)) b_2 (*.f64 c #s(literal 1/2 binary64))) (*.f64 b_2 b_2)) #s(literal 16 binary64))","(neg.f64 (*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) (*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2))","(*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2)","(*.f64 (*.f64 b_2 b_2) #s(literal 1/8 binary64))","(*.f64 (*.f64 b_2 b_2) #s(literal -1/8 binary64))","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal -1/8 binary64) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2))","(*.f64 (/.f64 #s(literal 1/8 binary64) #s(literal -1 binary64)) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2) #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) (*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2))","(*.f64 #s(literal 1/8 binary64) (*.f64 b_2 b_2))","(*.f64 #s(literal 16 binary64) (*.f64 (*.f64 b_2 #s(literal -1/8 binary64)) b_2))","(*.f64 #s(literal -1/8 binary64) (*.f64 b_2 b_2))","(*.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 b_2 b_2) b_2)) (*.f64 b_2 b_2))","#s(approx (+ (* b_2 b_2) (* a c)) (*.f64 b_2 b_2))","(*.f64 a a)","(*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 a a)))","(*.f64 (exp.f64 (log.f64 a)) (exp.f64 (log.f64 a)))","(exp.f64 (*.f64 (log.f64 a) #s(literal 8 binary64)))","(pow.f64 a #s(literal 8 binary64))","(pow.f64 (*.f64 a a) #s(literal 16 binary64))","(pow.f64 (*.f64 (*.f64 a a) (*.f64 a a)) #s(literal 8 binary64))","(pow.f64 (exp.f64 (log.f64 a)) #s(literal 8 binary64))","(neg.f64 (*.f64 (neg.f64 a) (*.f64 c c)))","(neg.f64 (/.f64 (*.f64 (*.f64 c c) a) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 a) (*.f64 c c)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (/.f64 (*.f64 (*.f64 c c) a) #s(literal -1 binary64)))","(*.f64 (*.f64 c c) a)","(*.f64 (*.f64 c a) c)","(*.f64 a (*.f64 c c))","(*.f64 c (*.f64 c a))","(*.f64 (*.f64 (neg.f64 c) c) (neg.f64 a))","(*.f64 (*.f64 (neg.f64 c) c) (/.f64 a #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 a) (*.f64 c c)) (/.f64 #s(literal 16 binary64) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 c c) a) #s(literal 16 binary64))","(*.f64 (*.f64 #s(literal 16 binary64) (*.f64 c a)) c)","(*.f64 (*.f64 #s(literal 16 binary64) (*.f64 c c)) a)","(*.f64 (*.f64 a (*.f64 (*.f64 c c) (*.f64 c c))) (*.f64 (*.f64 c c) (*.f64 c c)))","(neg.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 b_2 b_2) a)))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 c c) (*.f64 (*.f64 b_2 b_2) a)))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) (*.f64 (*.f64 c c) (*.f64 (*.f64 b_2 b_2) a)))","(*.f64 (*.f64 c a) (*.f64 (*.f64 b_2 b_2) c))","(*.f64 (*.f64 c c) (*.f64 (*.f64 b_2 b_2) a))","(*.f64 (*.f64 (*.f64 b_2 b_2) a) (*.f64 c c))","(*.f64 (*.f64 (*.f64 b_2 b_2) c) (*.f64 c a))","(*.f64 (*.f64 (neg.f64 c) c) (*.f64 (*.f64 b_2 b_2) a))","(*.f64 (*.f64 (neg.f64 a) (*.f64 c c)) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 c c) a) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64))","(*.f64 (*.f64 (*.f64 c a) (*.f64 b_2 b_2)) (/.f64 c #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 c a) (*.f64 b_2 b_2)) c)","(*.f64 (*.f64 (*.f64 c a) (*.f64 c b_2)) b_2)","(*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 c c)) a)"]],"time":2729.661865234375,"type":"rewrite"},{"compiler":[[10764,1556]],"memory":[[-1467520,33617456]],"time":87.4111328125,"type":"eval"},{"alts":[["(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","fresh",58.20048975065661,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",45.210759266708955,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.654537104570764,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","next",41.47079673263058,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","fresh",57.239601838298825,"binary64"],["(/.f64 (*.f64 (+.f64 b_2 #s(approx (+ (* (* a a) (* c c)) b_2) (*.f64 (*.f64 (fma.f64 a a (/.f64 (/.f64 b_2 c) c)) c) c))) #s(literal 16 binary64)) a)","fresh",62.49370936283949,"binary64"],["(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","fresh",62.4196934479089,"binary64"],["#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","fresh",59.592647200076605,"binary64"],["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","next",57.48596577707846,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","fresh",43.39557919732336,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","fresh",42.8756383603136,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","fresh",43.04089230919123,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","fresh",61.886604977563536,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","fresh",59.59143348937131,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","fresh",59.59359030904942,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","next",59.44570514585575,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","fresh",60.01926832915646,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","fresh",61.91702190231896,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",40.39535012979717,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","next",54.237165973109946,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (fma.f64 (*.f64 (*.f64 #s(literal 16 binary64) a) c) c (*.f64 (/.f64 #s(literal 32 binary64) a) b_2)))","fresh",62.066053194709234,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","next",62.18634155972701,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","fresh",56.26155066786244,"binary64"]],"compiler":[[11,9],[31,16],[13,10],[18,13],[22,15],[28,17],[19,14],[15,12],[9,9],[30,20],[44,29],[35,24],[17,12],[23,17],[23,17],[21,15],[21,15],[17,13],[19,14],[21,16],[28,19],[30,20],[23,16],[11,9],[31,16],[18,13],[22,15],[28,17],[19,14],[15,12],[9,9],[30,20],[44,29],[35,24],[17,12],[23,17],[23,17],[21,15],[21,15],[17,13],[21,16],[28,19],[30,20],[23,16]],"count":[[363,23]],"kept":[{"done":[1,1],"fresh":[8,3],"new":[349,18],"picked":[5,1]}],"memory":[[-1162672,23758544]],"min-error":[[4.22978167817641,"binary64"]],"time":24.033935546875,"type":"prune"},{"egraph":[[0,8341,219,0.048763713],[8,6068,222,0.025390803],[7,3897,222,0.020952707],[6,1922,222,0.020711275],[5,902,222,0.009219902],[4,548,224,0.003546212],[3,358,226,0.002158286],[2,211,226,0.001440601],[1,110,226,0.000865587],[0,65,234,0.000570258],[0,47,234,0.000348537]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","(*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2))","(*.f64 c #s(literal 1/2 binary64))","c","#s(literal 1/2 binary64)","(*.f64 b_2 b_2)","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)))","#s(literal -2 binary64)","(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","(/.f64 b_2 a)","b_2","a","#s(literal 16 binary64)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","(fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c)))","(/.f64 (/.f64 b_2 a) a)","(/.f64 b_2 a)","b_2","a","#s(literal 32 binary64)","(*.f64 #s(literal 16 binary64) (*.f64 c c))","#s(literal 16 binary64)","(*.f64 c c)","c"]],"locations":[["(/.f64 (/.f64 b_2 a) a)","cost-diff",0],["(fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c)))","cost-diff",0],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","cost-diff",0],["(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","cost-diff",2],["(/.f64 b_2 a)","cost-diff",0],["(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","cost-diff",0],["(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)))","cost-diff",2],["(*.f64 b_2 b_2)","cost-diff",0],["(*.f64 c #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","cost-diff",0],["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","cost-diff",1]],"memory":[[3841104,26852800]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c b_2) (*.f64 #s(literal 1/2 binary64) b_2)))","(*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2))","(*.f64 (*.f64 c b_2) (*.f64 #s(literal 1/2 binary64) b_2))","(*.f64 c #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) c)","c","#s(literal 1/2 binary64)","(*.f64 b_2 b_2)","b_2","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -32 binary64) a) b_2))","(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)))","(*.f64 (/.f64 #s(literal -32 binary64) a) b_2)","#s(literal -2 binary64)","(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","(*.f64 #s(literal 16 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","b_2","a","#s(literal 16 binary64)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) a) b_2 (*.f64 (*.f64 c c) a)) #s(literal 16 binary64)))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) a) b_2 (*.f64 (*.f64 c c) a)) #s(literal 16 binary64))","(fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c)))","(*.f64 (fma.f64 #s(literal 2 binary64) (/.f64 (/.f64 b_2 a) a) (*.f64 c c)) #s(literal 16 binary64))","(/.f64 (/.f64 b_2 a) a)","(/.f64 b_2 a)","b_2","a","#s(literal 32 binary64)","(*.f64 #s(literal 16 binary64) (*.f64 c c))","(*.f64 (*.f64 #s(literal 16 binary64) c) c)","#s(literal 16 binary64)","(*.f64 c c)","c"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":204.843017578125,"type":"simplify"},{"compiler":[[185,39]],"locations":[["(*.f64 #s(literal 16 binary64) (*.f64 c c))","accuracy",0.03289869049286255],["(/.f64 (/.f64 b_2 a) a)","accuracy",0.12109375],["(fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c)))","accuracy",2.0976438649812352],["(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","accuracy",12.586726799566616],["(/.f64 b_2 a)","accuracy",0.0],["(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)))","accuracy",0.00390625],["(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","accuracy",0.014003759768442016],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","accuracy",54.237165973109946],["(*.f64 c #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 b_2 b_2)","accuracy",0.0],["(*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2))","accuracy",9.026669019073717],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","accuracy",59.45965437016097],["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","accuracy",31.595293798335142],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","accuracy",3.6643789374575935],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","accuracy",12.337640559668122],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","accuracy",22.859055823038513],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","accuracy",40.402695027626]],"memory":[[3962112,39699312]],"mixsample":[[0.188720703125,"ival-sub",1200],[0.151123046875,"ival-sqrt",2000],[10.669677734375,"ival-div",0],[3.916259765625,"adjust",800],[0.106689453125,"ival-mult",1200],[0.10498046875,"ival-sub",1600],[0.2236328125,"ival-sqrt",800],[0.089111328125,"ival-sub",2000],[0.098876953125,"ival-assert",0],[0.350341796875,"ival-sqrt",1200],[1.2763671875,"ival-sub",0],[0.124267578125,"ival-sub",400],[1.961669921875,"ival-sqrt",0],[0.012939453125,"ival-sqrt",4400],[6.47900390625,"ival-pow",0],[2.307861328125,"adjust",2000],[0.14306640625,"ival-sub",2400],[0.0048828125,"ival-sub",4400],[0.09912109375,"ival-mult",800],[6.964111328125,"ival-add",0],[0.099609375,"ival-sub",800],[23.155517578125,"ival-mult",0],[0.193115234375,"ival-sqrt",1600],[0.123291015625,"ival-mult",400],[0.01416015625,"ival-mult",1600],[0.0380859375,"adjust",2800],[0.18408203125,"ival-sqrt",2400],[0.227294921875,"ival-true",0],[0.707763671875,"exact",0],[0.222412109375,"ival-sqrt",400],[2.28466796875,"ival-neg",0]],"outcomes":[[13.2734375,1,"valid",26],[51.1337890625,2,"valid",50],[0.6220703125,3,"valid",1],[47.16064453125,0,"valid",179]],"time":135.949951171875,"type":"localize"},{"count":[[19,121]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","(*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2))","(*.f64 c #s(literal 1/2 binary64))","(*.f64 b_2 b_2)","(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","(/.f64 b_2 a)","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","(fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c)))","(/.f64 (/.f64 b_2 a) a)","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 #s(literal 16 binary64) (*.f64 c c))"]],"memory":[[-4826064,20435888]],"outputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* (pow a 7) (pow c 8))","(* -32 (/ b_2 a))","(* 16 (/ b_2 a))","(/ b_2 a)","(* 32 (/ b_2 a))","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) a)","(* 32 (/ b_2 (pow a 2)))","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) (pow a 2))","(/ b_2 (pow a 2))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 16 (* a (pow c 2)))","(* a (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(* 16 (pow c 2))","(+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -32 (/ b_2 (pow a 2))) (* -16 (pow c 2)))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(* 1/2 (* (pow b_2 2) c))","(+ (* 16 (* a (pow c 2))) (* 32 (/ b_2 a)))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* 16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a))))","(* b_2 (+ (* 16 (/ (pow c 2) b_2)) (* 32 (/ 1 (pow a 2)))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* -16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a)))))","(* -1 (* b_2 (- (* -16 (/ (pow c 2) b_2)) (* 32 (/ 1 (pow a 2))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* 1/2 c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* 16 a) (* 32 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ 16 (* 32 (/ b_2 (* (pow a 2) (pow c 2))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[4.818115234375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","c","-inf"],[4.760986328125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","c","inf"],[4.123046875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","c","0"],[3.9931640625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","b_2","-inf"],[5.280029296875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","b_2","inf"],[3.35107421875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","b_2","0"],[4.053955078125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","a","-inf"],[3.516845703125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","a","inf"],[5.56396484375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (pow (* a c) 8) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* c 1/2) (* b_2 b_2)) (* c 1/2) (* b_2 b_2) (* -2 (* (/ b_2 a) 16)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) 16) (/ b_2 a) (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (/ (/ b_2 a) a) (- (* b_2 b_2) (* a c)) (* 16 (* c c)))","a","0"]],"time":42.406982421875,"type":"series"},{"count":[[121,120]],"egraph":[[0,8380,2880,0.094642434],[2,6049,3027,0.026965079],[1,1781,3042,0.020365284],[0,566,3076,0.005340563]],"inputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* (pow a 7) (pow c 8))","(* -32 (/ b_2 a))","(* 16 (/ b_2 a))","(/ b_2 a)","(* 32 (/ b_2 a))","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) a)","(* 32 (/ b_2 (pow a 2)))","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) (pow a 2))","(/ b_2 (pow a 2))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 16 (* a (pow c 2)))","(* a (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(* 16 (pow c 2))","(+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -32 (/ b_2 (pow a 2))) (* -16 (pow c 2)))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(* 1/2 (* (pow b_2 2) c))","(+ (* 16 (* a (pow c 2))) (* 32 (/ b_2 a)))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* 16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a))))","(* b_2 (+ (* 16 (/ (pow c 2) b_2)) (* 32 (/ 1 (pow a 2)))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* -16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a)))))","(* -1 (* b_2 (- (* -16 (/ (pow c 2) b_2)) (* 32 (/ 1 (pow a 2))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* 1/2 c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* 16 a) (* 32 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ 16 (* 32 (/ b_2 (* (pow a 2) (pow c 2))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[5325552,49875264]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(* (pow a 7) (pow c 8))","(*.f64 (pow.f64 c #s(literal 8 binary64)) (pow.f64 a #s(literal 7 binary64)))","(* -32 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -32 binary64))","(* 16 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","(/ b_2 a)","(/.f64 b_2 a)","(* 32 (/ b_2 a))","(*.f64 (/.f64 #s(literal 32 binary64) a) b_2)","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) a)","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 16 binary64) (*.f64 #s(literal 32 binary64) b_2)) a)","(* 32 (/ b_2 (pow a 2)))","(*.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64))","(/ (+ (* 16 (* (pow a 2) (pow c 2))) (* 32 b_2)) (pow a 2))","(/.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 16 binary64) (*.f64 #s(literal 32 binary64) b_2)) a) a)","(/ b_2 (pow a 2))","(/.f64 (/.f64 b_2 a) a)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* 16 (* a (pow c 2)))","(*.f64 (*.f64 (*.f64 c c) a) #s(literal 16 binary64))","(* a (+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a)","(* 16 (pow c 2))","(*.f64 (*.f64 c c) #s(literal 16 binary64))","(+ (* 16 (pow c 2)) (* 32 (/ b_2 (pow a 2))))","(fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 (*.f64 c c) #s(literal 16 binary64)))","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) a) b_2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* a (+ (* -32 (/ b_2 (pow a 2))) (* -16 (pow c 2)))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal -16 binary64) (*.f64 c c) (*.f64 (/.f64 (/.f64 b_2 a) a) #s(literal -32 binary64))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(* 1/2 (* (pow b_2 2) c))","(*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 1/2 binary64))","(+ (* 16 (* a (pow c 2))) (* 32 (/ b_2 a)))","(fma.f64 (*.f64 (*.f64 #s(literal 16 binary64) a) c) c (*.f64 (/.f64 #s(literal 32 binary64) a) b_2))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 #s(literal -1/2 binary64) (*.f64 c a))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 c a)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 c a (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))))) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 c (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)))) (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* b_2 (+ (* 16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b_2) #s(literal 16 binary64) (/.f64 #s(literal 32 binary64) a)) b_2)","(* b_2 (+ (* 16 (/ (pow c 2) b_2)) (* 32 (/ 1 (pow a 2)))))","(*.f64 (fma.f64 (*.f64 c (/.f64 c b_2)) #s(literal 16 binary64) (/.f64 (/.f64 #s(literal 32 binary64) a) a)) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -2 (/ b_2 a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* -1 (* b_2 (- (* -16 (/ (* a (pow c 2)) b_2)) (* 32 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 #s(literal -16 binary64) a) (*.f64 c (/.f64 c b_2)) (/.f64 #s(literal -32 binary64) a)))","(* -1 (* b_2 (- (* -16 (/ (pow c 2) b_2)) (* 32 (/ 1 (pow a 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 c (/.f64 c b_2)) #s(literal -16 binary64) (/.f64 #s(literal -32 binary64) (*.f64 a a))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* 1/2 c)","(*.f64 #s(literal 1/2 binary64) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* (pow c 2) (+ (* 16 a) (* 32 (/ b_2 (* a (pow c 2))))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (/.f64 b_2 c) a) c) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) a)) c) c)","(* (pow c 2) (+ 16 (* 32 (/ b_2 (* (pow a 2) (pow c 2))))))","(*.f64 (*.f64 (fma.f64 (/.f64 b_2 (*.f64 (*.f64 (*.f64 c c) a) a)) #s(literal 32 binary64) #s(literal 16 binary64)) c) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 c) a)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":263.675048828125,"type":"simplify"},{"count":[[19,173]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","(*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2))","(*.f64 c #s(literal 1/2 binary64))","(*.f64 b_2 b_2)","(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","(*.f64 (/.f64 b_2 a) #s(literal 16 binary64))","(/.f64 b_2 a)","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","(fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c)))","(/.f64 (/.f64 b_2 a) a)","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 #s(literal 16 binary64) (*.f64 c c))"]],"memory":[[-831136,18720832]],"outputs":[["(+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 16 binary64)","#s(literal 32 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","(sqrt.f64 #s(approx (neg c) (neg.f64 c)))","#s(approx (neg c) #s(literal 0 binary64))","#s(approx (neg c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(neg.f64 (*.f64 c c))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) c)","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) (*.f64 c c))","(*.f64 #s(literal 0 binary64) c)","(*.f64 c #s(literal 0 binary64))","(*.f64 (neg.f64 c) #s(literal 0 binary64))","(*.f64 #s(literal 0 binary64) (*.f64 c c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(neg.f64 (*.f64 c c))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) c)","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) (*.f64 c c))","(*.f64 #s(literal 0 binary64) c)","(*.f64 c #s(literal 0 binary64))","(*.f64 (neg.f64 c) #s(literal 0 binary64))","(*.f64 #s(literal 0 binary64) (*.f64 c c))","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 16 binary64)","#s(literal 32 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 16 binary64)","#s(literal 32 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(approx (neg c) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 16 binary64)","#s(literal 32 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 16 binary64)","#s(literal 32 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","(neg.f64 c)","(neg.f64 (neg.f64 c))","(neg.f64 (*.f64 c c))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) c)","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) (*.f64 c c))","(*.f64 #s(literal 0 binary64) c)","(*.f64 c #s(literal 0 binary64))","(*.f64 (neg.f64 c) #s(literal 0 binary64))","(*.f64 #s(literal 0 binary64) (*.f64 c c))","#s(approx (neg c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(neg.f64 (*.f64 c c))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) c)","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) (*.f64 c c))","(*.f64 #s(literal 0 binary64) c)","(*.f64 c #s(literal 0 binary64))","(*.f64 (neg.f64 c) #s(literal 0 binary64))","(*.f64 #s(literal 0 binary64) (*.f64 c c))","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal -2 binary64)","#s(literal 16 binary64)","#s(literal 32 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(approx (neg c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(neg.f64 (*.f64 c c))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) c)","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 c))","(-.f64 #s(literal 0 binary64) (*.f64 c c))","(*.f64 #s(literal 0 binary64) c)","(*.f64 c #s(literal 0 binary64))","(*.f64 (neg.f64 c) #s(literal 0 binary64))","(*.f64 #s(literal 0 binary64) (*.f64 c c))"]],"time":303.744140625,"type":"rewrite"},{"compiler":[[5433,810]],"memory":[[-1657088,13769632]],"time":18.91796875,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",45.210759266708955,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.654537104570764,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",41.47079673263058,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","fresh",57.239601838298825,"binary64"],["(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","next",44.86811568050224,"binary64"],["(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) a)","fresh",61.300746014918815,"binary64"],["(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","fresh",62.4196934479089,"binary64"],["#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","fresh",59.592647200076605,"binary64"],["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","done",57.48596577707846,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","fresh",43.39557919732336,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","next",42.8756383603136,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","next",43.04089230919123,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","next",60.66892465789692,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","fresh",61.886604977563536,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","fresh",59.59143348937131,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","fresh",59.59359030904942,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","done",59.44570514585575,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","fresh",60.01926832915646,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","fresh",61.91702190231896,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",40.39535012979717,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","fresh",57.37030904097299,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","fresh",62.32489202012484,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","next",60.66820312850232,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","fresh",54.237165973109946,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64))) a))","fresh",62.42820925047848,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","fresh",56.26155066786244,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) #s(approx (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (/.f64 b_2 c) a) c) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) a)) c) c)))","fresh",62.24480389739819,"binary64"]],"compiler":[[31,16],[13,10],[18,13],[22,15],[17,13],[10,10],[19,14],[15,12],[9,9],[30,20],[44,29],[35,24],[19,13],[17,12],[23,17],[23,17],[21,15],[21,15],[17,13],[19,14],[18,13],[17,13],[16,12],[27,20],[39,24],[37,23],[48,29],[31,16],[22,15],[17,13],[10,10],[19,14],[15,12],[30,20],[44,29],[35,24],[19,13],[17,12],[23,17],[23,17],[21,15],[17,13],[18,13],[17,13],[16,12],[27,20],[39,24],[37,23],[48,29]],"count":[[176,27]],"kept":[{"done":[2,2],"fresh":[16,12],"new":[153,10],"picked":[5,3]}],"memory":[[-911088,17258800]],"min-error":[[4.216275102345497,"binary64"]],"time":22.96484375,"type":"prune"},{"egraph":[[0,8373,307,0.135347628],[15,7327,307,0.024225903],[14,7327,307,0.02750803],[13,7319,307,0.025519864],[12,7119,307,0.026161048],[11,6985,307,0.019699826],[10,6952,307,0.013046116],[9,6851,307,0.01307358],[8,6472,307,0.016342285],[7,5578,307,0.017739673],[6,3307,307,0.024310605],[5,1219,307,0.014338207],[4,591,307,0.00510095],[3,366,307,0.002657778],[2,182,307,0.00151503],[1,100,325,0.000927118],[0,58,331,0.001152567],[0,42,337,0.000348218]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c))","(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64))","(/.f64 (*.f64 a (/.f64 c b_2)) b_2)","(*.f64 a (/.f64 c b_2))","a","(/.f64 c b_2)","c","b_2","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","(+.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c","b_2","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","#s(literal 0 binary64)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c"]],"locations":[["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","cost-diff",0],["(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","cost-diff",0],["(+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","cost-diff",2],["(*.f64 #s(literal -1/2 binary64) c)","cost-diff",0],["#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","cost-diff",0],["(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","cost-diff",0],["(neg.f64 c)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","cost-diff",0],["(+.f64 (neg.f64 c) (neg.f64 c))","cost-diff",2],["(neg.f64 c)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","cost-diff",0],["(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","cost-diff",0],["#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","cost-diff",0]],"memory":[[10396480,52094032]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2)","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c))","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c))","(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64))","(fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64))","(/.f64 (*.f64 a (/.f64 c b_2)) b_2)","(/.f64 (*.f64 (/.f64 c b_2) a) b_2)","(*.f64 a (/.f64 c b_2))","(*.f64 (/.f64 c b_2) a)","a","(/.f64 c b_2)","c","b_2","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) c))","(+.f64 (neg.f64 c) (neg.f64 c))","(*.f64 #s(literal -2 binary64) c)","(neg.f64 c)","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c","b_2","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a)","(+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(literal 0 binary64)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":501.912109375,"type":"simplify"},{"compiler":[[225,35]],"locations":[["(neg.f64 a)","accuracy",0.0],["(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","accuracy",0.09375],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","accuracy",22.859055823038513],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","accuracy",40.402695027626],["(*.f64 #s(literal -1/2 binary64) c)","accuracy",0.0],["(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","accuracy",0.4797459304095816],["#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","accuracy",21.839351498464673],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","accuracy",42.87004979855403],["(+.f64 (neg.f64 c) (neg.f64 c))","accuracy",0.0],["(neg.f64 c)","accuracy",0.0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","accuracy",60.66892465789692],["(neg.f64 c)","accuracy",0.0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","accuracy",60.66820312850232],["(/.f64 (*.f64 a (/.f64 c b_2)) b_2)","accuracy",0.9327624221768123],["(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","accuracy",2.356649530314132],["(*.f64 a (/.f64 c b_2))","accuracy",5.175424365011903],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","accuracy",42.87004979855403]],"memory":[[-8907696,35803616]],"mixsample":[[0.18603515625,"ival-sub",1200],[0.146240234375,"ival-sqrt",2000],[4.203125,"adjust",800],[24.437255859375,"ival-div",0],[0.080322265625,"ival-mult",1200],[0.107177734375,"ival-sub",1600],[0.255859375,"ival-sqrt",800],[0.06884765625,"ival-sub",2000],[0.1044921875,"ival-assert",0],[0.314453125,"ival-sqrt",1200],[1.307861328125,"ival-sub",0],[0.13720703125,"ival-sub",400],[2.018310546875,"ival-sqrt",0],[0.012939453125,"ival-sqrt",4400],[2.31982421875,"adjust",2000],[0.09423828125,"ival-sub",2400],[0.006103515625,"ival-sub",4400],[0.154052734375,"ival-mult",800],[7.0703125,"ival-add",0],[0.119140625,"ival-sub",800],[0.19580078125,"ival-sqrt",1600],[15.9248046875,"ival-mult",0],[0.21630859375,"ival-mult",400],[0.01318359375,"ival-mult",1600],[0.037841796875,"adjust",2800],[0.182373046875,"ival-sqrt",2400],[0.2333984375,"ival-true",0],[0.418701171875,"exact",0],[0.258056640625,"ival-sqrt",400],[3.364013671875,"ival-neg",0]],"outcomes":[[11.888671875,1,"valid",28],[155.052734375,2,"valid",48],[0.887939453125,3,"valid",1],[42.512451171875,0,"valid",179]],"time":234.182861328125,"type":"localize"},{"count":[[19,116]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c))","(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","(+.f64 (neg.f64 c) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","(+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 a (/.f64 c b_2))","(/.f64 (*.f64 a (/.f64 c b_2)) b_2)","(neg.f64 a)"]],"memory":[[-1466976,15734704]],"outputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ b_2 a)","(/ (+ b_2 (* -1/2 (/ (* a c) b_2))) a)","(/ (+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))) a)","(/ (+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))) a)","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(/ (* a c) b_2)","(/ (* a c) (pow b_2 2))","(* -1 a)","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a)))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (/ 1 a)))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (/ 1 a))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* -1 c)","(* -2 c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* -1/2 (/ c b_2)) (/ b_2 a))","(+ (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (/ b_2 a))","(+ (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))) (/ b_2 a))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[4.833984375,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","c","-inf"],[4.492919921875,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","c","inf"],[2.489013671875,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","c","0"],[2.833984375,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","b_2","-inf"],[2.953857421875,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","b_2","inf"],[2.968017578125,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","b_2","0"],[4.150146484375,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","a","-inf"],[4.6689453125,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","a","inf"],[2.585205078125,"((/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* (+ (* (/ (* a (/ c b_2)) b_2) -1/8) -1/2) c) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (+ (neg c) (neg c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) b_2) (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (* -1/2 c) (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (* a (/ c b_2)) (/ (* a (/ c b_2)) b_2) (neg a))","a","0"]],"time":35.731201171875,"type":"series"},{"count":[[116,115]],"egraph":[[0,8322,2946,0.111968145],[2,5712,3105,0.027327014],[1,1626,3177,0.017336749],[0,515,3211,0.005244184]],"inputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ b_2 a)","(/ (+ b_2 (* -1/2 (/ (* a c) b_2))) a)","(/ (+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))) a)","(/ (+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))) a)","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(/ (* a c) b_2)","(/ (* a c) (pow b_2 2))","(* -1 a)","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a)))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (/ 1 a)))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (/ 1 a))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* -1 c)","(* -2 c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* -1/2 (/ c b_2)) (/ b_2 a))","(+ (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (/ b_2 a))","(+ (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))) (/ b_2 a))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[9662224,53210432]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(* -1/2 c)","(*.f64 #s(literal -1/2 binary64) c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(/ b_2 a)","(/.f64 b_2 a)","(/ (+ b_2 (* -1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2) a)","(/ (+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2) a)","(/ (+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2) a)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(/ (* a c) b_2)","(*.f64 (/.f64 c b_2) a)","(/ (* a c) (pow b_2 2))","(/.f64 (*.f64 (/.f64 c b_2) a) b_2)","(* -1 a)","(neg.f64 a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 (neg.f64 a)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 (neg.f64 a))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 (neg.f64 a)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(*.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(*.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 (/.f64 c a) #s(literal -1/2 binary64))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a c))","(*.f64 (neg.f64 c) a)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))))) a)) a)))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 a))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal 1/2 binary64) (/.f64 c a))) (neg.f64 a))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a)))) (neg.f64 a))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))) (neg.f64 a))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))) (neg.f64 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 (/.f64 c a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1))))))","(fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 (/.f64 c a))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal -1/2 binary64)) (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal -1/8 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)))) (pow.f64 b_2 #s(literal 3 binary64)))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal -1/8 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64)))) (*.f64 b_2 b_2))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c) (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)) b_2)","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 1 binary64) a))) b_2)","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (/ 1 a)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) a) (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 1 binary64) a)))) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (fma.f64 (neg.f64 a) (/.f64 (/.f64 c b_2) b_2) #s(literal 1 binary64)) b_2) b_2)","(* -2 (/ b_2 a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) a) (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 b_2)","(neg.f64 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* -1 (/ b_2 a))","(/.f64 b_2 (neg.f64 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 1 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) a) (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 1 binary64) a)))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c a)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 c b_2) a) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(* -1 c)","(neg.f64 c)","(* -2 c)","(*.f64 #s(literal -2 binary64) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ (* -1/2 (/ c b_2)) (/ b_2 a))","(fma.f64 (/.f64 c b_2) #s(literal -1/2 binary64) (/.f64 b_2 a))","(+ (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (/ b_2 a))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c (/.f64 b_2 a))","(+ (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))) (/ b_2 a))","(fma.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c (/.f64 b_2 a))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 (neg.f64 a)) c)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 (neg.f64 a)) c))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 (neg.f64 a)) c)))) c)","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(*.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (/.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)) (*.f64 c c))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 a b_2) (/.f64 #s(literal -1/2 binary64) c)) (*.f64 c c))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 b_2 (neg.f64 a))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 7 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":276.968994140625,"type":"simplify"},{"count":[[19,117]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c))","(*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","(+.f64 (neg.f64 c) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","(+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 a (/.f64 c b_2))","(/.f64 (*.f64 a (/.f64 c b_2)) b_2)","(neg.f64 a)"]],"memory":[[-2379536,17603984]],"outputs":[["#s(approx -1/2 (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","(/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64))","#s(approx -1/2 #s(literal -1/8 binary64))","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -5/8 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 7/8 binary64)","#s(approx -1/2 #s(literal -1/8 binary64))","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -5/8 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 7/8 binary64)","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -5/8 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 7/8 binary64)","#s(approx -1/2 #s(literal -1/8 binary64))","#s(approx -1/2 (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","(/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64))","#s(approx -1/2 #s(literal -1/8 binary64))","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -5/8 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 7/8 binary64)","(+.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx -1/2 #s(literal -1/8 binary64))))","(/.f64 (+.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx -1/2 #s(literal -1/8 binary64)))) #s(literal -1/8 binary64))","(sqrt.f64 #s(approx -1/2 #s(literal -1/8 binary64)))","#s(approx -1/2 #s(literal -1/8 binary64))","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -5/8 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 7/8 binary64)","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -5/8 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 7/8 binary64)","#s(literal -1/8 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal -5/8 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 7/8 binary64)"]],"time":427.57080078125,"type":"rewrite"},{"compiler":[[5360,708]],"memory":[[-3268736,11987632]],"time":19.580078125,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",45.210759266708955,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",27.654537104570764,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",41.47079673263058,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","fresh",57.239601838298825,"binary64"],["(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",44.86811568050224,"binary64"],["(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) a)","fresh",61.300746014918815,"binary64"],["(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","fresh",53.71358505499534,"binary64"],["(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","fresh",62.4196934479089,"binary64"],["#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","fresh",59.592647200076605,"binary64"],["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","done",57.48596577707846,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","fresh",46.460408814375484,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","done",42.8756383603136,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","done",43.04089230919123,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","fresh",61.885211005473806,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","fresh",61.88524829826461,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","fresh",61.78721521687885,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","fresh",61.775124564310545,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","fresh",61.77735561702871,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","fresh",61.53518900510256,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","fresh",61.886604977563536,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","fresh",59.59143348937131,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","fresh",59.59359030904942,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","fresh",60.01926832915646,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","fresh",61.91702190231896,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",40.39535012979717,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","fresh",57.37030904097299,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","fresh",62.32489202012484,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","done",60.66820312850232,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","fresh",60.66892465789692,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","fresh",54.237165973109946,"binary64"],["#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","fresh",62.41959641614847,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","fresh",56.26155066786244,"binary64"],["#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) #s(approx (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (/.f64 b_2 c) a) c) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) a)) c) c)))","fresh",62.24480389739819,"binary64"]],"compiler":[[1219,255],[31,16],[13,10],[18,13],[22,15],[17,13],[10,10],[15,12],[19,14],[15,12],[9,9],[30,20],[44,29],[35,24],[33,23],[33,23],[33,23],[33,23],[33,23],[19,15],[17,12],[23,17],[23,17],[21,15],[17,13],[19,14],[18,13],[17,13],[16,12],[23,16],[27,20],[16,12],[37,23],[48,29]],"count":[[162,33]],"kept":[{"done":[5,4],"fresh":[17,15],"new":[135,10],"picked":[5,4]}],"memory":[[-1611456,20056256]],"min-error":[[4.172780575356543,"binary64"]],"time":66.76708984375,"type":"prune"},{"accuracy":[6.329586342083541],"baseline":[27.654537104570764],"branch":[["a",27.65453710457077,1,"binary64"],["b_2",6.329586342083541,3,"binary64"],["c",27.65453710457076,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",14.138925944707431,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[52,3]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64))) a))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (fma.f64 (*.f64 (*.f64 #s(literal 16 binary64) a) c) c (*.f64 (/.f64 #s(literal 32 binary64) a) b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) #s(approx (* (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) a) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (/.f64 b_2 c) a) c) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) a)) c) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (*.f64 (+.f64 b_2 #s(approx (+ (* (* a a) (* c c)) b_2) (*.f64 (*.f64 (fma.f64 a a (/.f64 (/.f64 b_2 c) c)) c) c))) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c))"]],"memory":[[-5717152,27084528]],"oracle":[63.89465358808866],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))"]],"repr":["binary64"],"time":54.200927734375,"times":[[12.587158203125,"a"],[12.849853515625,"b_2"],[12.5029296875,"c"],[12.472900390625,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[6.359909693252442],"baseline":[27.654537104570764],"branch":[["b_2",6.359909693252442,3,"binary64"]],"compiler":[[1,3]],"count":[[44,3]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64))) a))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (fma.f64 (*.f64 (*.f64 #s(literal 16 binary64) a) c) c (*.f64 (/.f64 #s(literal 32 binary64) a) b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64) (*.f64 #s(literal 16 binary64) (*.f64 c c))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a))))"]],"memory":[[8016720,8016720]],"oracle":[63.81875534141271],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))"]],"repr":["binary64"],"time":12.91796875,"times":[[10.1337890625,"b_2"]],"type":"regimes"},{"accuracy":[9.153853849074556],"baseline":[40.39535012979717],"branch":[["b_2",9.153853849074556,3,"binary64"]],"compiler":[[1,3]],"count":[[41,3]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64))) a))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (fma.f64 (*.f64 (*.f64 #s(literal 16 binary64) a) c) c (*.f64 (/.f64 #s(literal 32 binary64) a) b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)"]],"memory":[[-751536,7521408]],"oracle":[63.81414609857445],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))"]],"repr":["binary64"],"time":12.926025390625,"times":[[10.051025390625,"b_2"]],"type":"regimes"},{"accuracy":[9.34214184076051],"baseline":[40.39535012979717],"branch":[["b_2",9.34214184076051,3,"binary64"]],"compiler":[[1,3]],"count":[[38,3]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (/.f64 (/.f64 b_2 a) a) #s(literal 32 binary64))) a))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (fma.f64 (*.f64 (*.f64 #s(literal 16 binary64) a) c) c (*.f64 (/.f64 #s(literal 32 binary64) a) b_2)))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)"]],"memory":[[-1062912,7121632]],"oracle":[63.81414609857445],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))"]],"repr":["binary64"],"time":11.908935546875,"times":[[9.421875,"b_2"]],"type":"regimes"},{"accuracy":[20.940415689220494],"baseline":[40.39535012979717],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",30.918689781107183,3,"binary64"],["b_2",20.940415689220494,2,"binary64"]],"compiler":[[13,10],[1,3]],"count":[[33,2]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) (*.f64 #s(literal 32 binary64) b_2)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal 16 binary64)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (*.f64 (/.f64 b_2 a) #s(literal 16 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)"]],"memory":[[2349232,10584304]],"oracle":[63.751331553047905],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))"]],"repr":["binary64"],"time":18.964111328125,"times":[[7.846923828125,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[8.580078125,"b_2"]],"type":"regimes"},{"accuracy":[20.944321939220494],"baseline":[40.39535012979717],"branch":[["b_2",20.944321939220494,2,"binary64"]],"compiler":[[1,3]],"count":[[24,2]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"memory":[[-3321152,5064384]],"oracle":[63.42801120345802],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":8.3720703125,"times":[[6.31103515625,"b_2"]],"type":"regimes"},{"accuracy":[35.63066833786292],"baseline":[40.39535012979717],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",40.39535012979717,1,"binary64"],["a",40.395350129797166,1,"binary64"],["c",40.395350129797166,1,"binary64"],["b_2",35.63066833786292,2,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[23,2]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))"]],"memory":[[-1076800,15179664]],"oracle":[63.42218942961501],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"repr":["binary64"],"time":26.079833984375,"times":[[5.737060546875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[5.821044921875,"a"],[5.875,"c"],[6.508056640625,"b_2"]],"type":"regimes"},{"accuracy":[48.94934027611558],"baseline":[53.71358505499534],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",53.713585054995335,1,"binary64"],["a",52.47860691862871,2,"binary64"],["c",51.23615597175192,3,"binary64"],["b_2",48.94934027611558,2,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[22,2]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))","(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (* (+ b_2 (+ (* (* a a) (* c c)) b_2)) 16) a) (*.f64 #s(approx (+ (* (/ (/ b_2 a) a) 32) (* 16 (* c c))) (*.f64 (*.f64 c c) #s(literal 16 binary64))) a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 b_2 (*.f64 c b_2)) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c #s(literal 1/2 binary64)) (*.f64 b_2 b_2)))","#s(approx (/ (pow (* a c) 8) a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* -2 (* (/ b_2 a) 16)) (*.f64 (/.f64 b_2 a) #s(literal -32 binary64))))"]],"memory":[[-2557712,14788576]],"oracle":[63.42218942961501],"outputs":[["(/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a)","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"repr":["binary64"],"time":24.676025390625,"times":[[5.532958984375,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[5.5029296875,"a"],[6.0400390625,"c"],[5.611083984375,"b_2"]],"type":"regimes"},{"accuracy":[57.37030904097297],"baseline":[57.37030904097299],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",57.370309040972984,1,"binary64"],["a",57.37030904097297,1,"binary64"],["c",57.370309040972984,1,"binary64"],["b_2",57.37030904097298,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[15,1]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 b_2 a))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx -1/2 #s(literal -1/8 binary64)) #s(literal -1/8 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal -1/8 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 1/2 binary64)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) #s(literal 6 binary64)) b_2))"]],"memory":[[3882256,11983984]],"oracle":[63.379827035935115],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))"]],"repr":["binary64"],"time":18.117919921875,"times":[[4.1669921875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[4.31884765625,"a"],[3.921875,"c"],[3.9970703125,"b_2"]],"type":"regimes"},{"accuracy":[56.43918502071198],"baseline":[57.48596577707846],"branch":[["c",57.485965777078476,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",57.48596577707845,1,"binary64"],["b_2",56.43918502071198,2,"binary64"],["a",57.48596577707843,1,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[6,2]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 #s(literal -2 binary64)))"]],"memory":[[28704,8265680]],"oracle":[63.132241807195356],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c)))","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"repr":["binary64"],"time":10.01904296875,"times":[[2.1630859375,"c"],[2.069091796875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[2.5390625,"b_2"],[2.14208984375,"a"]],"type":"regimes"},{"accuracy":[56.439716190227884],"baseline":[57.48596577707846],"branch":[["b_2",56.439716190227884,2,"binary64"]],"compiler":[[1,3]],"count":[[4,2]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 b_2 b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (neg.f64 c)))"]],"memory":[[2164128,2164128]],"oracle":[63.036693147454436],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"repr":["binary64"],"time":2.70703125,"times":[[2.182861328125,"b_2"]],"type":"regimes"},{"accuracy":[57.48596577707841],"baseline":[57.48596577707846],"branch":[["b_2",57.48596577707841,1,"binary64"]],"compiler":[[1,3]],"count":[[1,1]],"inputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"link":["."],"memory":[[-8248128,1718880]],"name":["quad2p (problem 3.2.1, positive)"],"oracle":[57.48596577707846],"outputs":[["#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"repr":["binary64"],"time":2.574951171875,"times":[[2.172119140625,"b_2"]],"type":"regimes"},{"bstep":[[17.35986328125,2.3050115543930826e-76,1.0470581566517574e-74],[6.911865234375,-2.382755809375509e+162,-3.0546712141670872e+153]],"compiler":[[44,30],[13,11],[44,30],[13,11],[44,30],[13,11],[44,30],[13,11],[44,30],[13,11],[44,30],[13,11],[44,30],[13,11],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[15,13],[1,3]],"memory":[[667824,8594672]],"method":["binary-search","binary-search"],"mixsample":[[0.810546875,"adjust",800],[1.7744140625,"ival-div",0],[0.011962890625,"ival-mult",800],[1.249755859375,"ival-add",0],[0.18505859375,"ival-sqrt",1600],[0.2333984375,"ival-mult",400],[2.546875,"ival-mult",0],[0.100830078125,"ival-sub",1600],[0.07470703125,"ival-assert",0],[0.994140625,"ival-sub",0],[0.145263671875,"ival-true",0],[0.210693359375,"ival-sub",400],[1.475341796875,"ival-sqrt",0],[0.323974609375,"adjust",2000],[1.002197265625,"ival-neg",0],[0.330322265625,"ival-sqrt",400]],"outcomes":[[1.94384765625,1,"valid",15],[4.177001953125,2,"valid",25],[1.70556640625,0,"invalid",20],[9.25,0,"valid",136]],"stop":[["narrow-enough",1],["predicate-same",1]],"time":28.52197265625,"type":"bsearch"},{"bstep":[[11.538818359375,2.3050115543930826e-76,1.0470581566517574e-74],[0.548095703125,-2.382755809375509e+162,-3.0546712141670872e+153]],"compiler":[[35,25],[13,11],[35,25],[13,11],[35,25],[13,11],[35,25],[13,11],[35,25],[13,11],[35,25],[13,11],[35,25],[13,11],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[15,13],[1,3]],"memory":[[4479216,4479216]],"method":["binary-search","binary-search"],"mixsample":[[0.493408203125,"adjust",800],[0.90234375,"ival-div",0],[0.007080078125,"ival-mult",800],[0.649658203125,"ival-add",0],[0.199462890625,"ival-mult",400],[1.201904296875,"ival-mult",0],[0.078857421875,"ival-sqrt",1600],[0.0498046875,"ival-sub",1600],[0.02783203125,"ival-assert",0],[0.3857421875,"ival-sub",0],[0.06103515625,"ival-true",0],[0.130615234375,"ival-sub",400],[0.57177734375,"ival-sqrt",0],[0.212890625,"ival-sqrt",400],[0.161865234375,"adjust",2000],[0.410400390625,"ival-neg",0]],"outcomes":[[1.5966796875,1,"valid",13],[2.3017578125,2,"valid",12],[1.6201171875,0,"invalid",23],[2.663330078125,0,"valid",39]],"stop":[["narrow-enough",1],["predicate-same",1]],"time":14.2431640625,"type":"bsearch"},{"bstep":[[0.96484375,2.3050115543930826e-76,1.0470581566517574e-74],[18.076171875,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[35,25],[18,14],[35,25],[18,14],[35,25],[18,14],[35,25],[18,14],[35,25],[18,14],[35,25],[18,14],[35,25],[18,14],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[15,13],[1,3]],"memory":[[-1004992,7033392]],"method":["binary-search","binary-search"],"mixsample":[[0.874267578125,"ival-sub",0],[1.176513671875,"ival-div",0],[0.12451171875,"ival-true",0],[0.803955078125,"ival-add",0],[3.02783203125,"ival-mult",0],[1.233154296875,"ival-sqrt",0],[0.055419921875,"ival-assert",0],[0.894287109375,"ival-neg",0]],"outcomes":[[2.1357421875,0,"invalid",33],[10.570556640625,0,"valid",144]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":21.635986328125,"type":"bsearch"},{"bstep":[[1.787109375,2.3050115543930826e-76,1.0470581566517574e-74],[15.218017578125,-4.6600030368670275e-92,-8.457447311889557e-95]],"compiler":[[35,25],[17,14],[35,25],[17,14],[35,25],[17,14],[35,25],[17,14],[35,25],[17,14],[35,25],[17,14],[35,25],[17,14],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[17,14],[19,15],[15,13],[1,3]],"memory":[[-1770848,6262000]],"method":["binary-search","binary-search"],"mixsample":[[0.74853515625,"ival-sub",0],[1.035888671875,"ival-div",0],[0.09619140625,"ival-true",0],[0.757080078125,"ival-add",0],[1.98583984375,"ival-mult",0],[1.0634765625,"ival-sqrt",0],[0.061767578125,"ival-assert",0],[0.827880859375,"ival-neg",0]],"outcomes":[[1.6845703125,0,"invalid",26],[8.5595703125,0,"valid",128]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":19.31005859375,"type":"bsearch"},{"bstep":[[20.760009765625,9.613422409770773e-302,2.7510561972670532e-294]],"compiler":[[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[15,13],[1,3]],"memory":[[-1324224,7751552]],"method":["binary-search"],"mixsample":[[1.076904296875,"ival-sub",0],[1.45947265625,"ival-div",0],[0.137451171875,"ival-true",0],[1.052490234375,"ival-add",0],[2.677734375,"ival-mult",0],[1.469970703125,"ival-sqrt",0],[0.073486328125,"ival-assert",0],[1.039306640625,"ival-neg",0]],"outcomes":[[4.849365234375,0,"invalid",70],[9.3359375,0,"valid",144]],"stop":[["narrow-enough",1]],"time":24.766845703125,"type":"bsearch"},{"bstep":[[1.201171875,9.613422409770773e-302,2.7510561972670532e-294]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[736752,736752]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.677001953125,"type":"bsearch"},{"bstep":[[4.135986328125,8.942634870099602e-141,9.656785812525123e-141]],"compiler":[[9,10],[19,15],[9,10],[19,15],[15,13],[1,3]],"memory":[[1623424,1623424]],"method":["binary-search"],"mixsample":[[0.11572265625,"adjust",800],[0.303466796875,"ival-div",0],[0.2119140625,"ival-add",0],[0.01806640625,"ival-sqrt",1600],[0.01318359375,"ival-mult",400],[0.43896484375,"ival-mult",0],[0.009033203125,"ival-sub",1600],[0.0068359375,"ival-assert",0],[0.181396484375,"ival-sub",0],[0.030517578125,"ival-true",0],[0.031982421875,"ival-sub",400],[0.293212890625,"ival-sqrt",0],[0.02490234375,"adjust",2000],[0.17626953125,"ival-neg",0],[0.0458984375,"ival-sqrt",400]],"outcomes":[[0.459228515625,1,"valid",4],[0.321044921875,2,"valid",2],[0.391357421875,0,"invalid",6],[1.660400390625,0,"valid",26]],"stop":[["narrow-enough",1]],"time":5.178955078125,"type":"bsearch"},{"bstep":[[0.322021484375,8.942634870099602e-141,9.656785812525123e-141]],"compiler":[[9,10],[15,13],[9,10],[15,13],[15,13],[1,3]],"memory":[[282800,282800]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":0.754150390625,"type":"bsearch"},{"bstep":[[27.696044921875,5.179708300616521e+31,3.727695501052262e+42]],"compiler":[[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[9,10],[23,17],[15,13],[1,3]],"memory":[[1057568,9026320]],"method":["binary-search"],"mixsample":[[1.912841796875,"adjust",800],[2.432861328125,"ival-div",0],[0.2958984375,"ival-sub",1600],[0.015625,"ival-sqrt",800],[0.012939453125,"ival-mult",2000],[0.054443359375,"ival-assert",0],[0.009033203125,"ival-sub",3600],[0.049072265625,"ival-sqrt",4000],[0.8408203125,"ival-sub",0],[0.669189453125,"ival-sub",400],[1.196044921875,"ival-sqrt",0],[1.10546875,"adjust",2000],[2.39697265625,"ival-add",0],[0.09228515625,"ival-mult",800],[0.01025390625,"ival-sub",800],[0.323486328125,"ival-mult",400],[0.570068359375,"ival-sqrt",1600],[2.14404296875,"ival-mult",0],[0.01220703125,"ival-mult",1600],[0.005859375,"ival-div",800],[0.072265625,"adjust",2800],[0.110107421875,"ival-true",0],[0.02294921875,"ival-sqrt",3600],[0.0458984375,"ival-sub",4000],[0.005126953125,"ival-add",800],[0.90673828125,"ival-sqrt",400],[0.774169921875,"ival-neg",0]],"outcomes":[[6.291748046875,1,"valid",46],[0.373291015625,0,"invalid",4],[10.8115234375,2,"valid",62],[1.4150390625,3,"valid",6],[3.028076171875,0,"valid",46]],"stop":[["narrow-enough",1]],"time":31.364013671875,"type":"bsearch"},{"bstep":[[0.93798828125,5.179708300616521e+31,3.727695501052262e+42]],"compiler":[[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[9,10],[16,13],[15,13],[1,3]],"memory":[[643008,643008]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.370849609375,"type":"bsearch"},{"egraph":[[7,7786,539,0.014158636],[6,3889,539,0.032724099],[5,1397,539,0.018631502],[4,566,539,0.005962224],[3,363,539,0.003450399],[2,215,549,0.002783878],[1,145,549,0.002128021],[0,100,565,0.001945443]],"inputs":[["(if (<=.f64 b_2 #s(literal -40000000000000001477901827522329061639236719319370753807691114208602174637388878388866052438821633309786047014748930669257348013398293616684184769793097728 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 1298610434913235/127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))))","(if (<=.f64 b_2 #s(literal -40000000000000001477901827522329061639236719319370753807691114208602174637388878388866052438821633309786047014748930669257348013398293616684184769793097728 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal -75278419573747/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal -4039493242370993/4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal 4524042903795331/377003575316277553052632783947358479815640765734281611362288441560101396530857955835685848633641608981764089063400052322800846281248691448694119974860434438887084693231743502178167752441192448774799271819130974018130465379775860716808779827596916922071594850183201524526501846714374614008118077197384100897810808832 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)))","(if (<=.f64 b_2 #s(literal 4524042903795331/377003575316277553052632783947358479815640765734281611362288441560101396530857955835685848633641608981764089063400052322800846281248691448694119974860434438887084693231743502178167752441192448774799271819130974018130465379775860716808779827596916922071594850183201524526501846714374614008118077197384100897810808832 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))","(if (<=.f64 b_2 #s(literal 965362170955867/107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","(if (<=.f64 b_2 #s(literal 965362170955867/107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768 binary64)) (/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","(if (<=.f64 b_2 #s(literal 760000000000000027923441438910795382521856 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c))) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","(if (<=.f64 b_2 #s(literal 760000000000000027923441438910795382521856 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c)) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"memory":[[1755616,9913776]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -40000000000000001477901827522329061639236719319370753807691114208602174637388878388866052438821633309786047014748930669257348013398293616684184769793097728 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 1298610434913235/127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))))","(if (<=.f64 b_2 #s(literal -40000000000000001477901827522329061639236719319370753807691114208602174637388878388866052438821633309786047014748930669257348013398293616684184769793097728 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal -75278419573747/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal -4039493242370993/4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal -4039493242370993/4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal 4524042903795331/377003575316277553052632783947358479815640765734281611362288441560101396530857955835685848633641608981764089063400052322800846281248691448694119974860434438887084693231743502178167752441192448774799271819130974018130465379775860716808779827596916922071594850183201524526501846714374614008118077197384100897810808832 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)))","(if (<=.f64 b_2 #s(literal 4524042903795331/377003575316277553052632783947358479815640765734281611362288441560101396530857955835685848633641608981764089063400052322800846281248691448694119974860434438887084693231743502178167752441192448774799271819130974018130465379775860716808779827596916922071594850183201524526501846714374614008118077197384100897810808832 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))","(if (<=.f64 b_2 #s(literal 965362170955867/107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","(if (<=.f64 b_2 #s(literal 965362170955867/107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768 binary64)) (/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 c) c))","(if (<=.f64 b_2 #s(literal 760000000000000027923441438910795382521856 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c))) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","(if (<=.f64 b_2 #s(literal 760000000000000027923441438910795382521856 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c)) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))","#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]],"stop":[["node limit",1]],"time":103.05810546875,"type":"simplify"},{"compiler":[[568,101]],"memory":[[-5337888,2838496]],"stop":[["fuel",1]],"time":9.14306640625,"type":"soundness"},{"compiler":[[568,101],[568,101],[89,26],[89,26],[13,10],[13,10]],"memory":[[5354304,53662688]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":81.259033203125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.019775390625,"type":"end"}]