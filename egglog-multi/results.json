{"branch":"varun10p-egglog-multi","commit":"debf1aed9e26cbfa45cab9e280b538180329feb3","date":1733878121,"flags":["rules:arithmetic","rules:polynomials","rules:fractions","rules:exponents","rules:trigonometry","rules:hyperbolic","rules:numerics","rules:special","rules:bools","rules:branches","generate:rr","generate:taylor","generate:simplify","generate:proofs","generate:egglog","localize:costs","localize:errors","reduce:regimes","reduce:binary-search","reduce:branch-expressions","setup:simplify","setup:search"],"hostname":"Varuns-MacBook-Pro-2.local","iterations":4,"merged-cost-accuracy":[[1.0,0.35373325617550144],[[0.29122304130564775,0.9574020310887681],[0.3145679583574142,0.9573819408209431],[0.3374815659982649,0.957345216585395],[0.354673912970373,0.9573103674154018],[0.3895832052569907,0.9572443178358263],[0.4054718140290087,0.9572090974142593],[0.45915729619156986,0.9570866618526805],[0.4631196207795902,0.9570393682057982],[0.4868082555109433,0.9566882777472449],[0.4914519446382101,0.9566215465431633],[0.5217680748910589,0.9561444976227219],[0.54846635934179,0.9557648054700582],[0.5490378598175084,0.9557557299775097],[0.5588397462461936,0.9555683691477878],[0.5658781068247868,0.9554373222719608],[0.5744740324422939,0.9552785366816511],[0.5925635796892891,0.9549076422627745],[0.5993653377602733,0.9547485060802444],[0.6124759394867196,0.9544458472970558],[0.6126041709683149,0.9544428537604946],[0.6133172364736799,0.9544258881631159],[0.614572141001058,0.9543951078139274],[0.6154204611382956,0.9543730554763065],[0.6232960840599426,0.9541703128145372],[0.6282278913188467,0.9540259470088661],[1.0403676168640228,0.9465840713215523],[1.0565830366949232,0.946393592007408],[1.073411322538957,0.9461780784011019],[1.075491744421879,0.946151623967616],[1.0793565232750182,0.9460888362386307],[1.0830011911901776,0.9460260506915265],[1.1416687532354317,0.94494817796096],[1.1558752604210116,0.9446450863979621],[1.158634677645785,0.9445739245785839],[1.1610589362646928,0.9445089820468039],[1.164090424994382,0.9444273102940512],[1.1647922487541555,0.9444072970908002],[1.165494919275861,0.944385146612965],[1.1697456729679188,0.9442246189154535],[1.1710922129896661,0.9441668427969632],[1.1756760737781036,0.9439667837759609],[1.1785309583590438,0.943824636653321],[1.1818954520299643,0.94364058548653],[1.2884477965872467,0.9379291579911857],[1.2909001749250522,0.9378042846956358],[1.2940705812979634,0.9376218904516982],[1.2970678980995287,0.9374430286595083],[1.303454353036886,0.9370643325538552],[1.3065233124879136,0.9368782147144072],[1.4739836617292688,0.9260436775014934],[1.4873993006048032,0.925261965730598],[1.4896930567235265,0.9251031264988853],[1.4950727657050897,0.9246568580580301],[1.5173532013481263,0.9227435829112023],[1.9778356472935017,0.8904021166830179],[2.1026424998379993,0.88400756250258],[2.2475078794077117,0.8770607066303793],[2.4017984374189183,0.8703380419459337],[2.5611614070819577,0.8636080717689344],[2.67120783223512,0.8586832800649494],[2.6991031450307195,0.8574492804255018],[2.960962344807504,0.8454776442974379],[2.9822919441987974,0.8445641238353515],[3.3571358244799026,0.828502735597759],[3.814518824313761,0.8069563361241164],[4.277294347599568,0.7896505700640892],[5.031628294541609,0.7660474398400976],[5.677042095362467,0.7498630659069001],[5.69292626084179,0.7494750542954545],[6.410265471439237,0.7294027588098172],[7.210891007582149,0.710325604539204],[8.401786236875806,0.6882209186385126],[9.484091953608853,0.6660565531136384],[10.88647111305398,0.6433190021632246],[13.72146325810182,0.6100136972085015],[18.038603376575377,0.5769422102028382],[25.367003754092586,0.5417835959371607],[36.1624784252602,0.5070315085028404],[40.04845834411847,0.4983170681473934],[41.780599761446176,0.49146138301127706],[50.96519423157044,0.4620578497537192],[54.30796730142412,0.45207497646493233],[56.950540876007715,0.43524450744127374],[61.95072095855958,0.4062513093960868],[64.57214353102798,0.38945061695805616],[68.38125700785997,0.356699501056979],[72.66794197730653,0.3236104194912819]]],"note":false,"points":256,"seed":"1835695063","tests":[{"bits":64,"conversions":[],"cost-accuracy":[[13760,30.32387440917572],[6784,0.2901550781475357],[[30658,26.349778623572753,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))"],[29954,26.35451637113636,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))"],[29250,26.370951256967594,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))"],[28546,26.471900792903238,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))"],[28226,52.17377072892276,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) x) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))"],[14145,56.88872739362421,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64)))"],[14145,57.31537281282677,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -8096090132292425/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64)))"],[14145,57.666150814303585,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -664132393664613/1581267603963364205878869896241541461324661326282360299663291859589299527874963647593440497667477535118649045814975093057732880760826511538023542187037019608761854877160674698159897716735103252665935684988068320848140683464255411707953932466009059033912578566502802887127604801681488301032705683661296923932091466727292928 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64)))"],[14145,58.81607606270346,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -2264377454892925/30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64)))"],[64,59.5963536177946,"#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))"],[64,59.55425979229621,"#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))"],[64,59.61339633296751,"#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))"]]],"end":0.2901550781475357,"end-est":0.3203888672213043,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (sin x))","link":"0-tanhfexample34","name":"tanhf (example 3.4)","output":"#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (sin x))","start":30.32387440917572,"start-est":27.32617806815606,"status":"eq-target","target":[[7168,0.2901550781475357]],"target-prog":"(((! :herbie-platform default (tan (/ x 2))) . #t))","time":8257.451904296875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14912,41.40862244381741],[7296,0.035530166311319986],[[17793,0.6787425470705583,"(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 2476979795053773/2251799813685248 binary64)) #s(literal 1 binary64) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))"],[16065,0.7793825106507425,"(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))))"],[15681,0.9266425051325772,"(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))"],[15489,0.9260271285554119,"(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))))"],[15297,1.2869407853060832,"(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 6530219459687219/4503599627370496 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))))"],[64,34.22179061925021,"#s(literal 1 binary64)"]]],"end":0.035530166311319986,"end-est":0.00390625,"identifier":"#f","input":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","link":"1-sqrtexpproblem344","name":"sqrtexp (problem 3.4.4)","output":"(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","start":41.40862244381741,"start-est":40.62036072959973,"status":"imp-start","target":[],"target-prog":"()","time":8780.494140625,"vars":["x"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,63.14498430541666],[2176,0.024833332816631463],[[1472,0.07223967762349334,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"],[768,0.18861669457331207,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"],[64,0.5221398628641926,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]]],"end":0.024833332816631463,"end-est":0.09500931001684312,"identifier":"#f","input":"(/ (- eps (sin eps)) (- eps (tan eps)))","link":"2-sintanproblem345","name":"sintan (problem 3.4.5)","output":"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","pre":"(and (<= -0.4 eps) (<= eps 0.4))","prec":"binary64","preprocess":"()","spec":"(/ (- eps (sin eps)) (- eps (tan eps)))","start":63.14498430541666,"start-est":62.91346974596035,"status":"gt-target","target":[[896,0.18861669457331207]],"target-prog":"(((! :herbie-platform default (- (* 9/40 eps eps) 1/2)) . #t))","time":17871.786865234375,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,29.979477505204045],[3842,8.874555096178314],[[3458,12.130287854219455,"(if (<=.f64 b #s(literal -3912846279507389/29642774844752946028434172162224104410437116074403984394101141506025761187823616 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[3330,12.398863534102983,"(if (<=.f64 b #s(literal -8062834757772801/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[3330,12.472774577303737,"(if (<=.f64 b #s(literal -8062834757772801/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[1281,20.921570210704942,"(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))"],[1281,35.96367843725986,"(if (<=.f64 b #s(literal 4100000000000000000 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b)))"],[1153,54.73229523328185,"(if (<=.f64 b #s(literal 31999999999999998070693323891301714755584 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b)) #s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b)))"],[704,60.147233348111264,"#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))"],[64,61.66726151384655,"#s(approx 9/2 #s(literal -16 binary64))"]]],"end":8.874555096178314,"end-est":9.657478927095932,"identifier":"#f","input":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"3-quadpp42positive","name":"quadp (p42, positive)","output":"(if (<=.f64 b #s(literal -58000000000000002676923995920896076157083808631134052859290848425287790524599496622058040470419841859490069071078153965548148102011549026091008 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":29.979477505204045,"start-est":30.152302746684423,"status":"lt-target","target":[[18050,0.20714210625757198]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ (- sqtD (/ b 2)) a) (/ (- c) (+ (/ b 2) sqtD))))) . #t))","time":8332.16015625,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,30.479311076745475],[3970,9.518855843041749],[[3458,11.984438039618748,"(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 8285774290710419/6277101735386680763835789423207666416102355444464034512896 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))"],[3330,18.195606505749673,"(if (<=.f64 b #s(literal -3509704541618749/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3515176971816541/25108406941546723055343157692830665664409421777856138051584 binary64)) (/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))"],[2049,20.819930909580144,"(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))"],[1281,20.977896934386585,"(if (<=.f64 b #s(literal -8460967100219639/4127301024497384737127654569660285988428494734657199391624693039270889863724412964643884811622321780427143710884821317803768340308614730759769835769241715444596770968742227220068214981847081570726751819595399909407406471037121576084674975771617472472574520163263578112 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))"],[1281,40.859934679602134,"(if (<=.f64 b #s(literal -8460967100219639/4127301024497384737127654569660285988428494734657199391624693039270889863724412964643884811622321780427143710884821317803768340308614730759769835769241715444596770968742227220068214981847081570726751819595399909407406471037121576084674975771617472472574520163263578112 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c c)))"],[449,56.28457884114324,"(if (<=.f64 b #s(literal -10500000000000000582832916394549268735476163421552061412410607920233846978744994073588342036889600 binary64)) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) #s(literal 0 binary64)) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) c))"],[64,60.696439954960994,"#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) c)"],[64,61.68219125591507,"#s(literal -1/2 binary64)"],[64,61.68775137126547,"#s(literal -4096 binary64)"]]],"end":9.518855843041749,"end-est":10.821237353423136,"identifier":"#f","input":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"4-quadmp42negative","name":"quadm (p42, negative)","output":"(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1250000000000 binary64)) (/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":30.479311076745475,"start-est":29.95382500309717,"status":"lt-target","target":[[18050,0.20601710625757194]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ c (- sqtD (/ b 2))) (/ (+ (/ b 2) sqtD) (- a))))) . #t))","time":7055.61083984375,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,29.786457030008275],[3970,8.838437291466196],[[3330,8.726451197964943,"(if (<=.f64 b_2 #s(literal -40000000000000001477901827522329061639236719319370753807691114208602174637388878388866052438821633309786047014748930669257348013398293616684184769793097728 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))"],[2946,12.035039273363088,"(if (<=.f64 b_2 #s(literal -75278419573747/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))"],[2626,12.1550402610804,"(if (<=.f64 b_2 #s(literal -4039493242370993/4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 6314811526636907/1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688 binary64)) (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))"],[1473,20.980266994621335,"(if (<=.f64 b_2 #s(literal 4524042903795331/377003575316277553052632783947358479815640765734281611362288441560101396530857955835685848633641608981764089063400052322800846281248691448694119974860434438887084693231743502178167752441192448774799271819130974018130465379775860716808779827596916922071594850183201524526501846714374614008118077197384100897810808832 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)))"],[1473,20.983391994621336,"(if (<=.f64 b_2 #s(literal 4524042903795331/377003575316277553052632783947358479815640765734281611362288441560101396530857955835685848633641608981764089063400052322800846281248691448694119974860434438887084693231743502178167752441192448774799271819130974018130465379775860716808779827596916922071594850183201524526501846714374614008118077197384100897810808832 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))"],[1473,35.8799764055734,"(if (<=.f64 b_2 #s(literal 965362170955867/107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))"],[1281,48.8400238813928,"(if (<=.f64 b_2 #s(literal 965362170955867/107262463439540776796592199985646769019834926564739147021788491549774112240588375814414994385335227421520254865491888406830031062495572559571469192048672768 binary64)) (/.f64 #s(approx (+ 0 (sqrt (- (* b_2 b_2) (* a c)))) (neg.f64 b_2)) a) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))"],[769,56.01083176445678,"(if (<=.f64 b_2 #s(literal 760000000000000027923441438910795382521856 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (neg c) (neg c)) (*.f64 #s(literal -2 binary64) c))) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))"],[577,56.00904004723513,"(if (<=.f64 b_2 #s(literal 760000000000000027923441438910795382521856 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c)) #s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64)))"],[512,57.4513178687886,"#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 c) c))"],[64,56.94982050488326,"#s(approx (/ (pow (* a c) 8) a) #s(literal 0 binary64))"]]],"end":8.838437291466196,"end-est":6.329586342083539,"identifier":"#f","input":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"5-quad2pproblem321positive","name":"quad2p (problem 3.2.1, positive)","output":"(if (<=.f64 b_2 #s(literal -40000000000000001477901827522329061639236719319370753807691114208602174637388878388866052438821633309786047014748930669257348013398293616684184769793097728 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 1298610434913235/127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ -1/8 b_2) (/ (* (* c c) a) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 a (/.f64 c b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":29.786457030008275,"start-est":27.654537104570764,"status":"lt-target","target":[[16642,0.23943688457524326]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ (- sqtD b_2) a) (/ (- c) (+ b_2 sqtD))))) . #t))","time":9408.84814453125,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,30.546050687444655],[3713,9.184987720413439],[[3330,8.976586557764522,"(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))"],[2946,11.871218465416199,"(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 496527519231531/127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))"],[2561,20.86201482991776,"(if (<=.f64 b_2 #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))"],[1601,21.0352662352598,"(if (<=.f64 b_2 #s(literal -428247786965671/251910462920982955146951572855242064723418868082104455055218081010186148908960752236565235084370225856148908135059894885483907489539473312974233140212507046179002134322645704349866637075627537275802723363977045251916898867011814946574400376685636747593659677933568 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"],[1473,21.036693114947212,"(if (<=.f64 b_2 #s(literal -428247786965671/251910462920982955146951572855242064723418868082104455055218081010186148908960752236565235084370225856148908135059894885483907489539473312974233140212507046179002134322645704349866637075627537275802723363977045251916898867011814946574400376685636747593659677933568 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"],[1473,40.01194828719755,"(if (<=.f64 b_2 #s(literal -2948408144391829/235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a)))"],[1217,55.10303704812599,"(if (<=.f64 b_2 #s(literal -499999999999999995414783701180638281843304424991242455992046113258834575832799818100521466993270785184801126587914991362494731124736 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 0 binary64)) #s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a)))"],[897,56.06411784429369,"(if (<=.f64 b_2 #s(literal -21000000000000000766183124920357663259632428563130840731039768744007748021361323319876386816 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 0 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 c) c)))"],[449,55.925079571391066,"(if (<=.f64 b_2 #s(literal -16500000000000000478579587786781753344 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 0 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c))"],[64,60.6482902489863,"#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)"],[64,61.68191806387204,"#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))"],[64,61.68351360643523,"#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))"]]],"end":9.184987720413439,"end-est":7.013543850161827,"identifier":"#f","input":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"6-quad2mproblem321negative","name":"quad2m (problem 3.2.1, negative)","output":"(if (<=.f64 b_2 #s(literal -1479767320250067/3794275180128377091639574036764685364535950857523710002444946112771297432041422848 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":30.546050687444655,"start-est":29.565797997504585,"status":"lt-target","target":[[16642,0.2512810145763717]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ c (- sqtD b_2)) (/ (+ b_2 sqtD) (- a))))) . #t))","time":7717.2890625,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,61.27775494064251],[13696,0.02373120312590145],[[3712,0.3105655228923707,"(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"],[1216,0.35948180998759427,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"],[832,0.46301661432215746,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"],[256,0.6867895599476398,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"],[64,1.3821063676582588,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"],[64,51.999836147403556,"#s(literal -2 binary64)"]]],"end":0.02373120312590145,"end-est":0.015625,"identifier":"#f","input":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","link":"7-qlogexample310","name":"qlog (example 3.10)","output":"(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","start":61.27775494064251,"start-est":61.2872463790274,"status":"eq-target","target":[[13696,0.02373120312590145]],"target-prog":"(((! :herbie-platform default (/ (log1p (- x)) (log1p x))) . #t))","time":8276.6201171875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14272,63.006546818681045],[6464,0.000125],[[768,60.822572540274514,"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))"],[64,63.00436176409404,"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]]],"end":0.000125,"end-est":0.0,"identifier":"#f","input":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","link":"8-logsexample38","name":"logs (example 3.8)","output":"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","pre":"(> n 6.8e+15)","prec":"binary64","preprocess":"()","spec":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","start":63.006546818681045,"start-est":62.9680567244349,"status":"eq-target","target":[[16768,0.0]],"target-prog":"(((! :herbie-platform default (- (log (+ n 1)) (- (/ 1 (* 2 n)) (- (/ 1 (* 3 (* n n))) (/ 4 (pow n 3)))))) . #t))","time":7748.9599609375,"vars":["n"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7552,58.469731572085465],[2496,0.19195450907907546],[[1792,0.2471128948247765,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"],[1088,0.3596285051663329,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"],[384,0.718134270802504,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]]],"end":0.19195450907907546,"end-est":0.12836878985425212,"identifier":"#f","input":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","link":"9-logqproblem343","name":"logq (problem 3.4.3)","output":"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","pre":"(< (fabs eps) 1.0)","prec":"binary64","preprocess":"()","spec":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","start":58.469731572085465,"start-est":58.90447876746536,"status":"lt-target","target":[[13184,0.006875]],"target-prog":"(((! :herbie-platform default (- (log1p (- eps)) (log1p eps))) . #t))","time":8120.4970703125,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[8064,59.83778731102458],[4608,0.33534329309545335],[[1792,0.3034190651820298,"#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))"],[1088,0.4159307655928664,"#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))"],[384,0.7035963995336374,"#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"],[64,52.65940729650867,"#s(approx (* x (tan x)) x)"]]],"end":0.33534329309545335,"end-est":0.30150262494062763,"identifier":"#f","input":"(- (/ 1.0 x) (/ 1.0 (tan x)))","link":"10-invcotexample39","name":"invcot (example 3.9)","output":"#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","pre":"(and (< -0.026 x) (< x 0.026))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 x) (/ 1.0 (tan x)))","start":59.83778731102458,"start-est":59.76210434317813,"status":"lt-target","target":[[8577,0.09281552580745839]],"target-prog":"(((! :herbie-platform default (if (< (fabs x) 13/500) (* (/ x 3) (+ 1 (/ (* x x) 15))) (- (/ 1 x) (/ 1 (tan x))))) . #t))","time":18165.8779296875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[22336,63.992715013784746],[7424,0.027415241011860922],[[6913,24.518839683205087,"(if (<=.f64 b #s(literal 6843660926433293/4562440617622195218641171605700291324893228507248559930579192517899275167208677386505912811317371399778642309573594407310688704721375437998252661319722214188251994674360264950082874192246603776 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64))))"],[6528,32.63990950948872,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))"],[64,62.30315592331371,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))"],[64,62.32719459374722,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)"]]],"end":0.027415241011860922,"end-est":0.04296875,"identifier":"#f","input":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","link":"11-expq3problem342","name":"expq3 (problem 3.4.2)","output":"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))))","pre":"(and (and (<= (fabs a) 710.0) (<= (fabs b) 710.0)) (and (<= (* 1e-27 (fmin (fabs a) (fabs b))) eps) (<= eps (fmin (fabs a) (fabs b)))))","prec":"binary64","preprocess":"()","spec":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","start":63.992715013784746,"start-est":64.0,"status":"eq-target","target":[[1664,0.02666524101186092]],"target-prog":"(((! :herbie-platform default (+ (/ 1 a) (/ 1 b))) . #t))","time":20714.364990234375,"vars":["a","b","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13760,40.349470874523554],[13568,0.012125],[[14593,0.22593324659743752,"(if (<=.f64 (exp.f64 x) #s(literal 8106479329266893/9007199254740992 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[14593,0.44637215070878294,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[13889,0.48624405045748154,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[13505,0.7484347151923911,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))"],[13313,1.2031984939697042,"(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64))))"],[64,42.308934361393064,"#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))"],[64,61.924346697463335,"#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))"]]],"end":0.012125,"end-est":0.010097509768442016,"identifier":"#f","input":"(/ (exp x) (- (exp x) 1.0))","link":"12-expq2section311","name":"expq2 (section 3.11)","output":"(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","pre":"(> 710.0 x)","prec":"binary64","preprocess":"()","spec":"(/ (exp x) (- (exp x) 1.0))","start":40.349470874523554,"start-est":40.866965701637646,"status":"eq-target","target":[[7424,0.009]],"target-prog":"(((! :herbie-platform default (/ (- 1) (expm1 (- x)))) . #t))","time":4588.198974609375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6656,58.554699353038636],[6464,0.0],[[1536,0.2845437778349607,"#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))"],[1152,0.4120657581605896,"#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))"],[768,0.6667934019312624,"#s(approx (+ (exp x) -1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"],[64,1.3454168232617028,"#s(approx (+ (exp x) -1) x)"]]],"end":0.0,"end-est":0.0,"identifier":"#f","input":"(- (exp x) 1.0)","link":"13-expm1example37","name":"expm1 (example 3.7)","output":"#s(approx (+ (exp x) -1) (expm1.f64 x))","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(- (exp x) 1.0)","start":58.554699353038636,"start-est":58.382248224493026,"status":"eq-target","target":[[6464,0.0]],"target-prog":"(((! :herbie-platform default (expm1 x)) . #t))","time":5597.400146484375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6976,29.211022675328607],[6784,0.018747482309727802],[[2112,21.077539794440174,"#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))"],[2112,21.084464713042173,"#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))"],[384,21.471919423800298,"#s(approx (- (exp (* a x)) 1) (*.f64 x a))"],[256,51.57876027275132,"(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]]],"end":0.018747482309727802,"end-est":0.0078125,"identifier":"#f","input":"(- (exp (* a x)) 1.0)","link":"14-expaxsection35","name":"expax (section 3.5)","output":"#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","pre":"(> 710.0 (* a x))","prec":"binary64","preprocess":"()","spec":"(- (exp (* a x)) 1.0)","start":29.211022675328607,"start-est":30.980191765151368,"status":"eq-target","target":[[6784,0.018747482309727802]],"target-prog":"(((! :herbie-platform default (expm1 (* a x))) . #t))","time":12478.761962890625,"vars":["a","x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13376,29.722639905928794],[4544,0.5007549547515718],[[4416,0.5061193722693648,"#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* x x) (+ (* (pow x 4) 1/12) (+ (* 1/360 (pow x 6)) (* 1/20160 (pow x 8))))) (fma.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x)))))"],[384,1.0492594531615507,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"],[64,31.20945994355785,"#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 0 binary64))"],[64,61.19342834696545,"#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ -1/20160 1/360) #s(literal 1/20160 binary64)))"],[64,61.25741084844148,"#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(literal 13/2 binary64))"],[64,61.25658995290253,"#s(approx -1 #s(literal 6 binary64))"]]],"end":0.5007549547515718,"end-est":0.9710830646241724,"identifier":"#f","input":"(+ (- (exp x) 2.0) (exp (- x)))","link":"15-exp2problem337","name":"exp2 (problem 3.3.7)","output":"#s(approx (+ (- (exp x) 2) (exp (neg x))) #s(approx (+ (* (pow x 6) (+ (* 1/20160 (* x x)) 1/360)) (+ (* (pow x 4) 1/12) (* x x))) (fma.f64 x x (+.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/20160 binary64)) x #s(literal 1/360 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64))))))","pre":"(<= (fabs x) 710.0)","prec":"binary64","preprocess":"()","spec":"(+ (- (exp x) 2.0) (exp (- x)))","start":29.722639905928794,"start-est":27.155824062115393,"status":"lt-target","target":[[14912,0.04174097813022836]],"target-prog":"(((! :herbie-platform default (* 4 (* (sinh (/ x 2)) (sinh (/ x 2))))) . #t))","time":18485.130126953125,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7680,31.66176731885915],[8449,0.2597052608575274],[[8065,0.5802255924616403,"(if (<=.f64 x #s(literal 1498797955988901/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))"],[7233,13.182053579761599,"(if (<=.f64 x #s(literal 3 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (pow.f64 (*.f64 x x) #s(literal -1 binary64)))"],[2561,12.928693729064843,"(if (<=.f64 x #s(literal 4728779608739021/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))"],[2241,12.968783629274652,"(if (<=.f64 x #s(literal 3039929748475085/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))"],[1857,12.968670848772694,"(if (<=.f64 x #s(literal 3039929748475085/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))"],[1473,13.028991315445193,"(if (<=.f64 x #s(literal 5404319552844595/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))"],[1473,13.31475146126552,"(if (<=.f64 x #s(literal 3602879701896397/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 x x)))"],[1473,13.956393343217343,"(if (<=.f64 x #s(literal 7/2 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/720 binary64) (*.f64 x x)))"],[641,15.240318669335311,"(if (<=.f64 x #s(literal 140000000000000000160666652390804640313986050345482420611089958357404152233984 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))"],[64,30.856595786296474,"#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]]],"end":0.2597052608575274,"end-est":16.883434282661124,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (* x x))","link":"16-cos2problem341","name":"cos2 (problem 3.4.1)","output":"(if (<=.f64 x #s(literal 1498797955988901/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) #s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","pre":"(TRUE)","prec":"binary64","preprocess":"((abs x))","spec":"(/ (- 1.0 (cos x)) (* x x))","start":31.66176731885915,"start-est":31.377274188421485,"status":"imp-start","target":[],"target-prog":"()","time":8343.738037109375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2944,19.549739775350048],[21888,0.6602083693417173],[[14464,19.598720216676814,"(+.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))"],[14272,20.362865858507675,"(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64))) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))"],[10048,0.7226580819694722,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64))))"],[8448,0.8422403996836287,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))"],[7616,20.504667697363566,"(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))"],[7232,1.1835793306303224,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))"],[64,20.59907001617184,"#s(literal 0 binary64)"]]],"end":0.6602083693417173,"end-est":0.8249440684800454,"identifier":"#f","input":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","link":"17-3fracproblem333","name":"3frac (problem 3.3.3)","output":"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","pre":"(> (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","start":19.549739775350048,"start-est":19.208265184017158,"status":"lt-target","target":[[1600,0.5080271881726496]],"target-prog":"(((! :herbie-platform default (/ 2 (* x (- (* x x) 1)))) . #t))","time":6662.112060546875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,24.018392923304845],[216768,0.19048045199967095],[[155072,0.22491029225653206,"#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal -6 binary64) eps) (sin.f64 x) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)))"],[129344,0.2387308411271151,"#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) 6) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 6 binary64) (sin.f64 x)) eps (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))"],[122496,0.22648221194217175,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2))))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 eps)) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"],[122240,0.22648221194217175,"#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) #s(approx (+ (* (* (sin x) eps) (- (/ (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -2/3) -2/3) (cos x)) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 3)))) (- (+ (* (/ (pow (sin x) 2) (pow (cos x) 2)) -1/3) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)))) (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))"],[42176,0.29229204204441883,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 #s(approx (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) #s(literal 1/3 binary64)) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"],[41344,0.3571733313025543,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(approx (+ (/ (* (sin x) eps) (cos x)) 1) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))) eps))"],[41088,0.35000466184332396,"#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (*.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)))))"],[26880,0.6225456794235168,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps))"],[26880,0.6225450451846253,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))"],[16128,0.853437064819839,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))"],[11840,0.8846942864152378,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))"],[10432,0.9021745831061023,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 #s(approx (pow (sin x) 2) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/3 binary64) (*.f64 x x))) #s(approx (pow (cos x) 2) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps eps))"],[3200,0.9214461437718633,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/315 binary64) (*.f64 x x) #s(literal 17/45 binary64)) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))"],[2496,0.9377094264187747,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/45 binary64) (*.f64 x x) #s(literal 2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))"],[1792,0.9681117769214371,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)) eps eps))"],[960,1.0076295659382717,"#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) eps) (fma.f64 (*.f64 eps (+.f64 eps x)) x eps)))"],[768,1.0434932261641752,"#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 #s(approx (/ (pow (sin x) 2) (pow (cos x) 2)) (*.f64 x x)) eps eps))"],[384,1.328133129393587,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1)) #s(literal 1 binary64)) eps))"],[64,60.62376729512287,"#s(approx 4 #s(literal 2 binary64))"]]],"end":0.19048045199967095,"end-est":0.28899315415879956,"identifier":"#f","input":"(- (tan (+ x eps)) (tan x))","link":"18-2tanproblem332","name":"2tan (problem 3.3.2)","output":"#s(approx (- (tan (+ x eps)) (tan x)) #s(approx (* (+ (* (* (neg (+ (* (* (sin x) (+ (* (/ (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (cos x)) -1/3) (/ (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))) (cos x)))) eps) (+ (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3) (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (neg (pow (cos x) 2)))))) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (*.f64 (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal -2/3 binary64)) (cos.f64 x)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))) eps)))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (tan (+ x eps)) (tan x))","start":24.018392923304845,"start-est":24.80525489337457,"status":"gt-target","target":[[13696,0.6226711982751947]],"target-prog":"(((! :herbie-platform default (+ eps (* eps (tan x) (tan x)))) . #t))","time":21439.599853515625,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1728,59.60348111809956],[35392,0.5305952661837892],[[23168,0.6489561127829525,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))"],[9216,0.8683606391319321,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))"],[7488,1.4107251786058426,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))"],[64,59.36663265951232,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))"],[64,59.50162777158969,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))"],[64,61.150075687535455,"x"]]],"end":0.5305952661837892,"end-est":0.5312457886036037,"identifier":"#f","input":"(- (sqrt (+ x 1.0)) (sqrt x))","link":"19-2sqrtexample31","name":"2sqrt (example 3.1)","output":"#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (pow.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1 binary64))) #s(literal 1/16 binary64))))))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (sqrt (+ x 1.0)) (sqrt x))","start":59.60348111809956,"start-est":59.26144231184912,"status":"gt-target","target":[[6848,1.2835680163443963]],"target-prog":"(((! :herbie-platform default (* 1/2 (pow x -1/2))) . #t))","time":7058.611083984375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,24.0123560423963],[22144,0.0794881122876781],[[21440,0.10726187441564704,"(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))"],[20736,0.17922998361487866,"(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))"],[13888,0.3143241137695403,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))"],[6784,0.5994961528632682,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))"],[3200,0.8751463613525562,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))"],[1280,0.9856965353636793,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))"],[1088,1.0253901916442867,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))"],[384,1.3522406767804933,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))"],[384,53.62676423467236,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))"],[384,54.03960567630443,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))"],[64,60.042240371510864,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))"],[64,62.49539285598123,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))"],[64,62.4998500078311,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))"]]],"end":0.0794881122876781,"end-est":0.09463533213905531,"identifier":"#f","input":"(- (sin (+ x eps)) (sin x))","link":"20-2sinexample33","name":"2sin (example 3.3)","output":"(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (sin (+ x eps)) (sin x))","start":24.0123560423963,"start-est":24.812160495108284,"status":"eq-target","target":[[14656,0.06068516180254366]],"target-prog":"(((! :herbie-platform default (* (cos (* 1/2 (- eps (* -2 x)))) (sin (* 1/2 eps)) 2)) . #t))","time":19108.94189453125,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14784,28.767607339740522],[14977,5.041716749412964],[[42886,24.229754052452368,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -4717453031026927/235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -5648027917416435/11296055834832869987796435368818511453405415647406310098733607723450775321444793999623495683980919987883591461993135986312493187463513563790506212353947784425723184365930864482290528289970814110895029437915338121462939648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1723641332219371/172364133221937103085272756482216056112753534658909761028039668631756215232006744379020625060744018369805777923479247838020220755974022884986972234404720831691332769255536872593544438018353486799545737272878084128768 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 6189700196426901/1237940039285380274899124224 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))))"],[29378,25.977102216070552,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))"],[29188,29.590300232087106,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))"],[29060,30.51972638247573,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5000000000000000265830098313298245178016947287622550486678486493521945761146082797297502145674652454512860840906256046981475222569026826936584608154510201938349585198667111756724875341881416615617731891764574033605618465285179569078272 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))))))"],[22339,25.977271621669857,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))"],[22339,26.08583351536134,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))"],[15940,18.315840701240887,"(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2780529385113647/302231454903657293676544 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n))))))"],[15235,19.314598730442945,"(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))"],[14849,4.744441687178076,"(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)))"],[14785,5.044168563708942,"(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)))"],[14339,19.354391662083955,"(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))"],[14339,25.338602981584277,"(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64)))))))"],[8772,30.360831658039718,"(if (<=.f64 n #s(literal -8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 n #s(literal -402035394363357/436994993873214129706097166956708350993678881411295357199729151951767944417616335439228580716318181998128654620651240845861768505204366709906692902245553277900892247131030458103436298545516643924637451297481464347472084863384057367177715867713536 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 n #s(literal 4439030107363619/14319451959237480602209391966837419245360869586085326264720724851155532002676452079672642132912314187714679754609499860037198430378536688350222513020782289810256437153989606051133400630739489388122520004115872623737965276803368791807679393553237147648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 n #s(literal 1100 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))))))"],[8515,25.356636735505905,"(if (<=.f64 x #s(literal 2316864376136271/35644067325173400145634153169533525975728347712879374457649941546088087243817792082077443838416964060770643043543706307114755505635745609361348916560329798345718708393439569922522454626926592 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 x #s(literal 8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64))))))"],[8451,25.508047223414895,"(if (<=.f64 x #s(literal 2316864376136271/35644067325173400145634153169533525975728347712879374457649941546088087243817792082077443838416964060770643043543706307114755505635745609361348916560329798345718708393439569922522454626926592 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 x #s(literal 3242591731706757/4503599627370496 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64))))))"],[7105,39.422342925260054,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x))"],[6913,39.379889916173,"(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))"],[64,43.35558954394544,"#s(approx (- x x) #s(literal 0 binary64))"],[64,62.0661131618108,"#s(approx x x)"]]],"end":5.041716749412964,"end-est":5.063485084063485,"identifier":"#f","input":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","link":"21-2nthrtproblem346","name":"2nthrt (problem 3.4.6)","output":"(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","start":28.767607339740522,"start-est":30.321848337453496,"status":"imp-start","target":[],"target-prog":"()","time":21042.640869140625,"vars":["x","n"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,48.69943888866998],[21057,0.4366932373700532],[[6528,9.961861948626272,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))"],[3456,2.368241170545228,"#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))"],[2560,3.1679542165575643,"#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))"],[1664,4.8049828846163205,"#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))"],[64,57.49611448216006,"#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))"]]],"end":0.4366932373700532,"end-est":0.3670780564758402,"identifier":"#f","input":"(- (log (+ N 1.0)) (log N))","link":"22-2logproblem336","name":"2log (problem 3.3.6)","output":"(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 7378697629483821/36893488147419103232 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)) (neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))))","pre":"(and (> N 1.0) (< N 1e+40))","prec":"binary64","preprocess":"()","spec":"(- (log (+ N 1.0)) (log N))","start":48.69943888866998,"start-est":48.635551032466616,"status":"gt-target","target":[[23808,2.402439933520774]],"target-prog":"(((! :herbie-platform default (+ (/ 1 N) (/ -1 (* 2 (pow N 2))) (/ 1 (* 3 (pow N 3))) (/ -1 (* 4 (pow N 4))))) . #t))","time":8399.14599609375,"vars":["N"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3136,38.86516939630133],[25216,0.7969860099585525],[[16384,0.8601010054067485,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal -3/8 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64)))) x)) x)))"],[8192,1.5405093429801149,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(approx (+ (* -1/2 (+ (* 3/4 (/ (sqrt (/ 1 x)) x)) (neg (sqrt (/ 1 x))))) (/ (* (/ 1/4 x) (sqrt (/ 1 x))) x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))) x)))"],[2048,11.775387414637006,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(approx (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))"],[1153,39.42738370998292,"(if (<=.f64 x #s(literal 9200000000000000518545305213024033598426264470011267738519857070493786661378473380073103507677649297895503436806787926142187353037583420782826193300750336 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 #s(literal 1/4 binary64) x))) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64)))"],[64,40.7777855029271,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(literal 0 binary64))"],[64,61.82463720958196,"x"]]],"end":0.7969860099585525,"end-est":0.853627050237989,"identifier":"#f","input":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","link":"23-2isqrtexample36","name":"2isqrt (example 3.6)","output":"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (/ (* -1/2 (+ (- (* (+ (* 1/2 x) 1) (sqrt (/ 1 (pow x 5)))) (+ (* (+ (* 1/4 x) 1) (sqrt (/ 1 (pow x 3)))) (sqrt x))) (sqrt (/ 1 x)))) (* x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 3/4 binary64) (/.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) x) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))))) x)))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","start":38.86516939630133,"start-est":40.97099483279758,"status":"gt-target","target":[[13376,38.836146896427245]],"target-prog":"(((! :herbie-platform default (- (pow x -1/2) (pow (+ x 1) -1/2))) . #t))","time":8232.448974609375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1856,14.301140634430599],[40770,0.11042773733321677],[[40770,0.3838725682977917,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -6338253001141147/1267650600228229401496703205376 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))"],[34626,0.9652994027642555,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x)))))"],[34626,1.2997953665743556,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 #s(literal -1 binary64) x)))))"],[34306,1.3459385817462033,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))))"],[34114,1.4493457347161436,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -100 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))"],[7490,15.525648340345843,"(if (<=.f64 x #s(literal -1 binary64)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x) (if (<=.f64 x #s(literal 1/2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)))"],[1538,15.701968127874979,"(if (<=.f64 x #s(literal -1 binary64)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x) (if (<=.f64 x #s(literal 4500000000000000207549832449720666175124697331421700090370076134636293935103540159089361458000161669120 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)))"],[448,46.279879252380056,"(-.f64 #s(approx (+ 1 x) (+.f64 x #s(literal -1 binary64))) x)"],[64,46.71390090744364,"#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal 0 binary64))"],[64,61.611812718851446,"#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) #s(literal -10 binary64))"],[64,61.60973868034278,"#s(approx (+ (+ x -1) -1) #s(literal -2 binary64))"],[64,62.0994653167596,"#s(approx (+ 6 (+ x 1)) #s(literal 7 binary64))"]]],"end":0.11042773733321677,"end-est":0.18111707012021167,"identifier":"#f","input":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","link":"24-2fracproblem331","name":"2frac (problem 3.3.1)","output":"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -3022314549036573/151115727451828646838272 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","start":14.301140634430599,"start-est":13.131148238209098,"status":"gt-target","target":[[1280,0.40521463281593995]],"target-prog":"(((! :herbie-platform default (/ 1 (* x (- -1 x)))) . #t))","time":4572.698974609375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,30.767784897192104],[21824,0.2554762165976868],[[14912,0.3402264318110742,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))"],[14016,0.4299811330801259,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))"],[8384,0.7086408121748932,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))"],[8000,0.7087173843895883,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))"],[7296,0.7035412817014984,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))"],[2624,0.9622448054641224,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))"],[2496,1.0357676236027595,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"],[1792,1.1086005863968234,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"],[1792,1.435984005383422,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"],[896,1.438420277286341,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))"],[512,13.723808041206805,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"],[64,31.613116974712753,"#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))"],[64,61.76643376339821,"#s(approx -1/2 #s(literal 1/6 binary64))"]]],"end":0.2554762165976868,"end-est":0.3139078864440439,"identifier":"#f","input":"(- (cos (+ x eps)) (cos x))","link":"25-2cosproblem335","name":"2cos (problem 3.3.5)","output":"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (cos (+ x eps)) (cos x))","start":30.767784897192104,"start-est":28.92463127624881,"status":"gt-target","target":[[27392,0.44236754059768896]],"target-prog":"(((! :herbie-platform default (pow (cbrt (* -2 (sin (* 1/2 (fma 2 x eps))) (sin (* 1/2 eps)))) 3)) . #t))","time":17292.073974609375,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,59.430920969114055],[33664,30.490671971509258],[[13952,31.155314770136226,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal 1/3 binary64)))"],[13568,32.02746461658863,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 #s(approx (/ (/ 1 x) x) (pow.f64 (*.f64 x x) #s(literal -1 binary64)))) #s(literal 1/3 binary64)))"],[6528,58.92690542882626,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ x (* x x)) (pow.f64 x #s(literal -1 binary64))))"],[64,59.937322491902094,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 5/81 binary64))"],[64,61.341374101206696,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(literal 0 binary64))"]]],"end":30.490671971509258,"end-est":31.384708065312605,"identifier":"#f","input":"(- (cbrt (+ x 1.0)) (cbrt x))","link":"26-2cbrtproblem334","name":"2cbrt (problem 3.3.4)","output":"#s(approx (- (cbrt (+ x 1)) (cbrt x)) #s(approx (/ (+ (* (cbrt (pow x 4)) 1/3) (+ (* (cbrt (/ (/ 1 x) x)) 5/81) (* -1/9 (cbrt x)))) (* x x)) (fma.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal 1/3 binary64) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1 binary64))) #s(literal -1/9 binary64)))))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (cbrt (+ x 1.0)) (cbrt x))","start":59.430920969114055,"start-est":59.152946064706825,"status":"lt-target","target":[[41088,0.5943248188015673]],"target-prog":"(((! :herbie-platform default (/ 1 (+ (* (cbrt (+ x 1)) (cbrt (+ x 1))) (* (cbrt x) (cbrt (+ x 1))) (* (cbrt x) (cbrt x))))) . #t))","time":7341.7958984375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,58.3410597071928],[7104,0.25514624062518027],[[6912,2.3455425387330755,"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))"],[6848,4.490816788920835,"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))"],[6720,58.93579333254278,"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))"],[6528,59.90358591706998,"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))"],[6528,59.93217849994075,"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))"],[64,59.938252719488766,"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))"],[64,61.37064105145587,"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))"]]],"end":0.25514624062518027,"end-est":0.26009750976844204,"identifier":"#f","input":"(- (atan (+ N 1.0)) (atan N))","link":"27-2atanexample35","name":"2atan (example 3.5)","output":"#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","pre":"(and (> N 1.0) (< N 1e+100))","prec":"binary64","preprocess":"()","spec":"(- (atan (+ N 1.0)) (atan N))","start":58.3410597071928,"start-est":57.215401607333305,"status":"eq-target","target":[[7104,0.25514624062518027]],"target-prog":"(((! :herbie-platform default (atan2 1 (fma N (+ 1 N) 1))) . #t))","time":5736.841796875,"vars":["N"],"warnings":[]}]}