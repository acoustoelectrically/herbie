[{"memory":[[20384,20384]],"time":0.037841796875,"type":"start"},{"compiler":[[19,16]],"memory":[[-4974720,44677008]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":145.34716796875,"type":"analyze"},{"bogosity":[{"infinite":0.0629130763277435,"invalid":0.24685662658201335,"precondition":0.0014641286106780171,"valid":0.6887661684795652}],"memory":[[-38322480,443494080]],"mixsample":[[7.25634765625,"ival-sub",1200],[0.175048828125,"ival-sub",4800],[64.668701171875,"adjust",800],[110.18701171875,"ival-div",0],[4.10400390625,"ival-mult",1200],[0.010009765625,"ival-sqrt",3200],[0.0126953125,"ival-div",400],[2.536376953125,"ival-sub",1600],[3.83154296875,"ival-assert",0],[0.027099609375,"ival-sub",3600],[52.733642578125,"ival-sub",0],[11.5625,"ival-sqrt",1200],[0.4091796875,"ival-sqrt",4800],[78.6376953125,"ival-sqrt",0],[4.10498046875,"ival-sub",400],[78.871337890625,"ival-add",0],[4.77734375,"ival-mult",800],[0.563720703125,"ival-sub",4400],[5.42626953125,"ival-sub",800],[0.90185546875,"ival-mult",1600],[0.01025390625,"ival-add",400],[3.12744140625,"adjust",2800],[0.006103515625,"ival-div",2000],[0.06201171875,"ival-sqrt",3600],[0.24462890625,"ival-sub",4000],[6.79931640625,"ival-sqrt",400],[5.68212890625,"ival-sqrt",2000],[0.088134765625,"ival-mult",2000],[2.924072265625,"ival-sub",2000],[8.744873046875,"ival-sqrt",800],[0.005126953125,"ival-sub",3200],[0.58935546875,"ival-sqrt",4000],[0.0048828125,"ival-sub",6800],[0.01611328125,"ival-sqrt",6800],[1.329833984375,"ival-sqrt",4400],[24.83544921875,"adjust",2000],[3.2568359375,"ival-sub",2400],[268.10205078125,"ival-mult",0],[5.119140625,"ival-mult",400],[4.484130859375,"ival-sqrt",1600],[0.005859375,"ival-add",2000],[0.0400390625,"ival-div",800],[6.612060546875,"ival-sqrt",2400],[8.00634765625,"ival-true",0],[0.0048828125,"ival-sub",2800],[0.02978515625,"ival-add",800],[11.445068359375,"exact",0],[55.30224609375,"ival-neg",0]],"outcomes":[[202.625732421875,1,"valid",1235],[281.63916015625,2,"valid",1216],[91.7275390625,0,"invalid",912],[54.81494140625,3,"valid",183],[529.9228515625,0,"valid",5622]],"time":1762.48486328125,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[126,1,13,116]],"explanations":[["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",8,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",35],["(*.f64 a c)","overflow",35]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",9,0,[["(*.f64 b b)","underflow",63],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",35],["(*.f64 a c)","underflow",35],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",9]],[[1,2]]],["/.f64","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",18,0,[["(*.f64 b b)","underflow",63],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",35],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",27],["(*.f64 a c)","underflow",35],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",9]],[[]]],["+.f64","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",40,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",99,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",35],["(*.f64 a c)","overflow",35],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",99]],[[1,2]]]],"fperrors":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",18,0,false,0,false],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",8,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",109,0,false,1,[6.4407263546189735e-270,-3.102143099060293e-158,3.90761189829843e-102]],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",40,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[3,1],[2,33],[1,105],[0,117]],"maybe-confusion":[[126,0,1,13,0,116]],"memory":[[3290464,87161104]],"mixsample":[[0.283935546875,"ival-sub",1200],[5.166748046875,"ival-div",0],[0.465087890625,"ival-sqrt",2000],[3.12451171875,"adjust",800],[0.162109375,"ival-mult",1200],[0.09326171875,"ival-sub",1600],[0.169921875,"ival-sub",2000],[0.451416015625,"ival-sqrt",800],[0.233154296875,"ival-assert",0],[0.02392578125,"ival-sqrt",4000],[0.468017578125,"ival-sqrt",1200],[2.467041015625,"ival-sub",0],[0.154296875,"ival-sub",400],[4.11474609375,"ival-sqrt",0],[0.101318359375,"ival-sqrt",4400],[1.249267578125,"adjust",2000],[0.161376953125,"ival-sub",2400],[0.0400390625,"ival-sub",4400],[3.580078125,"ival-add",0],[0.1591796875,"ival-mult",800],[0.18994140625,"ival-sqrt",1600],[0.28759765625,"ival-mult",400],[12.93798828125,"ival-mult",0],[0.242919921875,"ival-sub",800],[0.02294921875,"ival-mult",1600],[0.1591796875,"adjust",2800],[0.385986328125,"ival-sqrt",2400],[0.5771484375,"ival-true",0],[0.00830078125,"ival-sub",4000],[0.52685546875,"exact",0],[0.258544921875,"ival-sqrt",400],[2.36328125,"ival-neg",0]],"outcomes":[[7.990966796875,1,"valid",46],[16.970458984375,2,"valid",70],[3.689208984375,3,"valid",12],[37.78369140625,0,"valid",384]],"time":163.81396484375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"egraph":[[0,2793,15,0.007432819],[14,2793,16,0.016722145],[13,2787,16,0.016923719],[12,2787,16,0.015250717],[11,2786,16,0.013263347],[10,2731,16,0.014613796],[9,2611,16,0.015259859],[8,2291,16,0.017976112],[7,1131,16,0.013420226],[6,657,16,0.006335742],[5,370,16,0.003027274],[4,232,16,0.001624795],[3,156,16,0.001093167],[2,74,16,0.00071055],[1,41,16,0.000314825],[0,23,17,0.000274097],[0,14,17,0.000153505]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-4332688,20786560]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":349.237060546875,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[53392,53392]],"time":0.129150390625,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",30.152302746684423,"binary64"]],"compiler":[[17,14]],"memory":[[352400,352400]],"time":0.56298828125,"type":"prune"},{"egraph":[[0,2793,64,0.00760952],[14,2793,68,0.015831194],[13,2787,68,0.015620837],[12,2787,68,0.012341982],[11,2786,68,0.012626565],[10,2731,68,0.015151169],[9,2611,68,0.016404716],[8,2291,68,0.016983941],[7,1131,68,0.013013257],[6,657,68,0.006372584],[5,370,68,0.003149481],[4,232,68,0.001495519],[3,156,68,0.00102359],[2,74,68,0.000647975],[1,41,68,0.00037216],[0,23,70,0.000283374],[0,14,70,0.000167007]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",1]],"memory":[[-3552800,4678304]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":157.976806640625,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",1.5937500000000002],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.253025817795225],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",9.006581795530096],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",25.411130893416303]],"memory":[[8300640,16188480]],"mixsample":[[0.15380859375,"ival-sub",1200],[2.7646484375,"ival-div",0],[0.18505859375,"ival-sqrt",2000],[1.530029296875,"adjust",800],[0.1025390625,"ival-mult",1200],[0.048583984375,"ival-sub",1600],[0.08740234375,"ival-sub",2000],[0.234619140625,"ival-sqrt",800],[0.08642578125,"ival-assert",0],[0.010986328125,"ival-sqrt",4000],[0.3193359375,"ival-sqrt",1200],[1.38720703125,"ival-sub",0],[0.079345703125,"ival-sub",400],[1.967529296875,"ival-sqrt",0],[0.049072265625,"ival-sqrt",4400],[0.671875,"adjust",2000],[0.0849609375,"ival-sub",2400],[0.019775390625,"ival-sub",4400],[1.9541015625,"ival-add",0],[0.0859375,"ival-mult",800],[0.098388671875,"ival-sqrt",1600],[0.152099609375,"ival-mult",400],[17.980712890625,"ival-mult",0],[0.131103515625,"ival-sub",800],[0.013916015625,"ival-mult",1600],[0.080078125,"adjust",2800],[0.135986328125,"ival-sqrt",2400],[0.236083984375,"ival-true",0],[0.00390625,"ival-sub",4000],[0.285888671875,"exact",0],[0.131103515625,"ival-sqrt",400],[1.43505859375,"ival-neg",0]],"outcomes":[[4.8046875,1,"valid",23],[8.665771484375,2,"valid",35],[1.79296875,3,"valid",6],[30.8798828125,0,"valid",192]],"time":58.43505859375,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[-1456336,8254928]],"outputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[3.385009765625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[2.0869140625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[1.392822265625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[1.18798828125,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[3.588134765625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[3.08984375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[2.708984375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[3.215087890625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[11.0400390625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":33.80712890625,"type":"series"},{"count":[[98,97]],"egraph":[[0,8386,2654,0.106208591],[2,6121,2789,0.025723357],[1,1738,2817,0.019968239],[0,545,2858,0.004910716]],"inputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[1211936,51577904]],"method":["egg-herbie"],"outputs":[["(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) #s(literal -2 binary64))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (neg.f64 c) (/.f64 c (pow.f64 b #s(literal 3 binary64))))) a (/.f64 (neg.f64 c) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) #s(literal -2 binary64))) a b)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))))) a)","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) #s(literal 2 binary64)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) a) b) a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 a))) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64)))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) b)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64))))","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(neg.f64 (fma.f64 b (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (/.f64 (neg.f64 c) (*.f64 b b)) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64)))))) (/.f64 b a)))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) (*.f64 a a) (/.f64 a b)) #s(literal -2 binary64)) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) c) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 c b)) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) (*.f64 a a) (/.f64 a b)) #s(literal -2 binary64)) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) #s(literal 2 binary64)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) c) b) c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":279.310791015625,"type":"simplify"},{"count":[[5,75]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[-336880,19886656]],"outputs":[["(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(+.f64 #s(literal 0 binary64) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)))","(+.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) #s(literal 0 binary64)) b)","(+.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (neg.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))))","(-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(-.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))))","(-.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) #s(literal 0 binary64)) b)","(-.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))","(*.f64 (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64))","(*.f64 #s(literal 4 binary64) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)))","(neg.f64 (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 a) c))","(+.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b))))","(+.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (neg.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(-.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)))","(-.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)))","(*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(*.f64 #s(literal -16 binary64) (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(neg.f64 (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (*.f64 #s(literal 4 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(+.f64 (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) b))","(+.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))) (*.f64 b (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))))","(+.f64 (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) b) (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)))","(+.f64 (*.f64 b (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))) (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","b","(neg.f64 b)","(+.f64 b #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b)","(-.f64 #s(literal 0 binary64) b)","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(*.f64 b #s(literal 4 binary64))","(*.f64 b #s(literal -16 binary64))","(*.f64 #s(literal 4 binary64) b)","(*.f64 #s(literal -16 binary64) b)","(*.f64 (*.f64 b b) (/.f64 #s(literal 4 binary64) b))","(*.f64 (*.f64 b b) (*.f64 b b))","(*.f64 (*.f64 (*.f64 b b) b) b)","(*.f64 b (*.f64 (*.f64 b b) b))","(neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) #s(literal 0 binary64))","(+.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(*.f64 (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))) (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (fma.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c) (*.f64 (*.f64 b b) b)))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))"]],"time":470.208984375,"type":"rewrite"},{"compiler":[[6041,884]],"memory":[[560912,15891200]],"time":21.425048828125,"type":"eval"},{"alts":[["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",61.22797237134082,"binary64"],["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",38.27069613105964,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","next",30.152302746684423,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",42.68118291347719,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",48.91361187502208,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","next",39.20587259782627,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",53.54999059776221,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","next",51.357642391382996,"binary64"],["(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","fresh",55.918600779292056,"binary64"],["(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","fresh",61.22016092913733,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.4323767300291,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","fresh",46.02382952019442,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","next",42.425131346333224,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (neg.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b))) c))","fresh",46.725145142952215,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","next",47.034020121875294,"binary64"]],"compiler":[[16,10],[18,15],[26,19],[32,23],[21,16],[23,18],[36,24],[25,19],[17,13],[18,12],[29,20],[22,17],[22,17],[31,23],[31,21],[16,10],[18,15],[26,19],[32,23],[21,16],[23,18],[36,24],[25,19],[17,13],[18,12],[29,20],[22,17],[22,17],[31,23],[31,21]],"count":[[169,15]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[168,15],"picked":[1,0]}],"memory":[[3068448,13069024]],"min-error":[[7.299888024475212,"binary64"]],"time":14.277099609375,"type":"prune"},{"egraph":[[0,8096,359,0.038161106],[12,7857,359,0.02187622],[11,7823,359,0.018236865],[10,7785,359,0.017477636],[9,7638,359,0.020545128],[8,7211,359,0.019514476],[7,6190,359,0.027351818],[6,3368,359,0.033682425],[5,1552,359,0.015531098],[4,778,359,0.006435968],[3,417,359,0.002755836],[2,216,359,0.001651476],[1,116,359,0.000914941],[0,66,367,0.000672008],[0,43,379,0.000459757]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","#s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)","(fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)","(/.f64 c b)","c","b","(/.f64 (*.f64 c a) b)","(*.f64 c a)","a"]],"locations":[["(fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)","cost-diff",0],["(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)","cost-diff",0],["(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","cost-diff",1],["(*.f64 (/.f64 a b) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","cost-diff",0],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(/.f64 (neg.f64 b) a)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","cost-diff",1]],"memory":[[-4171120,18469808]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) b))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) b)","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","#s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 a b))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (neg.f64 a) b) b) c #s(literal -1 binary64)) b) c))","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(*.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (neg.f64 a) b) b) c #s(literal -1 binary64)) b) c)","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)","(/.f64 (fma.f64 (*.f64 (/.f64 c b) a) (/.f64 c b) c) b)","(fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)","(fma.f64 (*.f64 (/.f64 c b) a) (/.f64 c b) c)","(/.f64 c b)","c","b","(/.f64 (*.f64 c a) b)","(*.f64 (/.f64 c b) a)","(*.f64 c a)","a"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":286.31005859375,"type":"simplify"},{"compiler":[[290,31]],"locations":[["(fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)","accuracy",0.04296875],["(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)","accuracy",0.744256778971943],["(/.f64 (*.f64 c a) b)","accuracy",6.730267275280463],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","accuracy",45.92601394089891],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.253025817795225],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","accuracy",9.006581795530096],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","accuracy",25.411130893416303],["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","accuracy",34.60888424352628],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","accuracy",4.253025817795225],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","accuracy",5.5427136274834625],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","accuracy",46.02460291353066],["(/.f64 (neg.f64 b) a)","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","accuracy",42.425131346333224],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",1.5937500000000002],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.253025817795225],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","accuracy",9.006581795530096],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","accuracy",25.411130893416303]],"memory":[[-1078432,37607856]],"mixsample":[[0.1630859375,"ival-sub",1200],[11.6875,"ival-div",0],[0.19189453125,"ival-sqrt",2000],[2.64892578125,"adjust",800],[0.08642578125,"ival-mult",1200],[0.05224609375,"ival-sub",1600],[0.092529296875,"ival-sub",2000],[0.272705078125,"ival-sqrt",800],[0.0830078125,"ival-assert",0],[0.011962890625,"ival-sqrt",4000],[0.245361328125,"ival-sqrt",1200],[5.105712890625,"ival-sub",0],[0.076171875,"ival-sub",400],[2.00537109375,"ival-sqrt",0],[0.050048828125,"ival-sqrt",4400],[1.19384765625,"adjust",2000],[0.079833984375,"ival-sub",2400],[0.02099609375,"ival-sub",4400],[4.442626953125,"ival-add",0],[0.09423828125,"ival-mult",800],[0.102294921875,"ival-sqrt",1600],[0.164306640625,"ival-mult",400],[14.0205078125,"ival-mult",0],[0.13916015625,"ival-sub",800],[0.01708984375,"ival-mult",1600],[0.174072265625,"adjust",2800],[0.14111328125,"ival-sqrt",2400],[0.219482421875,"ival-true",0],[0.005126953125,"ival-sub",4000],[0.55078125,"exact",0],[0.130615234375,"ival-sqrt",400],[2.385009765625,"ival-neg",0]],"outcomes":[[8.291015625,1,"valid",23],[17.48974609375,2,"valid",35],[3.580322265625,3,"valid",6],[47.495361328125,0,"valid",192]],"time":165.666015625,"type":"localize"},{"count":[[21,131]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)","(fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 #s(literal 2 binary64) a)","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(/.f64 (*.f64 c a) b)"]],"memory":[[670496,17211360]],"outputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 (/ b a))","(* -2 (/ a b))","(- (* -1 (/ (* a (pow c 2)) (pow b 3))) (/ c b))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","c","(+ c (/ (* a (pow c 2)) (pow b 2)))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 2 a)","(/ (* a c) b)","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (/ (* a (pow c 2)) (pow b 3)))","(* a (- (* -1 (/ c (* a b))) (/ (pow c 2) (pow b 3))))","(/ (* a (pow c 2)) (pow b 3))","(* a (+ (/ c (* a b)) (/ (pow c 2) (pow b 3))))","(/ (* a (pow c 2)) (pow b 2))","(* a (+ (/ c a) (/ (pow c 2) (pow b 2))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (- (/ c (* a b)) (* -1 (/ (pow c 2) (pow b 3))))))","(* -1 (* a (+ (* -1 (/ c (* a b))) (* -1 (/ (pow c 2) (pow b 3))))))","(* -1 (* a (+ (* -1 (/ c a)) (* -1 (/ (pow c 2) (pow b 2))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (- (* -1 (* (pow b 2) c)) (* a (pow c 2))) (pow b 3))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 3))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 2))","(- (pow b 2) (* 4 (* a c)))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (- (* -1 (/ (* a (pow c 2)) (pow b 2))) c) b)","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ (- (/ (* a (pow c 2)) (pow b 2)) (* -1 c)) b))","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ 1 (/ (* a c) (pow b 2))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* (pow c 2) (+ (/ 1 (* b c)) (/ a (pow b 3)))))","(* (pow c 2) (+ (/ 1 (* b c)) (/ a (pow b 3))))","(* (pow c 2) (+ (/ 1 c) (/ a (pow b 2))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"series":[[3.05322265625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","c","-inf"],[3.219970703125,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","c","inf"],[3.9248046875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","c","0"],[3.17578125,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","b","-inf"],[3.244140625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","b","inf"],[3.683837890625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","b","0"],[3.968994140625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","a","-inf"],[5.962890625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","a","inf"],[6.364013671875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg (/ (+ (* (/ c b) (/ (* c a) b)) c) b)) (/ (+ (* (/ c b) (/ (* c a) b)) c) b) (+ (* (/ c b) (/ (* c a) b)) c) (+ (* -4 (* c a)) (* b b)) (* 2 a) (- (* b b) (* 4 (* a c))) (/ (* c a) b))","a","0"]],"time":39.947998046875,"type":"series"},{"count":[[131,129]],"egraph":[[0,8108,2976,0.096632156],[2,6540,3127,0.029367915],[1,1953,3198,0.020911214],[0,606,3235,0.006216345]],"inputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 (/ b a))","(* -2 (/ a b))","(- (* -1 (/ (* a (pow c 2)) (pow b 3))) (/ c b))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","c","(+ c (/ (* a (pow c 2)) (pow b 2)))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 2 a)","(/ (* a c) b)","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (/ (* a (pow c 2)) (pow b 3)))","(* a (- (* -1 (/ c (* a b))) (/ (pow c 2) (pow b 3))))","(/ (* a (pow c 2)) (pow b 3))","(* a (+ (/ c (* a b)) (/ (pow c 2) (pow b 3))))","(/ (* a (pow c 2)) (pow b 2))","(* a (+ (/ c a) (/ (pow c 2) (pow b 2))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (- (/ c (* a b)) (* -1 (/ (pow c 2) (pow b 3))))))","(* -1 (* a (+ (* -1 (/ c (* a b))) (* -1 (/ (pow c 2) (pow b 3))))))","(* -1 (* a (+ (* -1 (/ c a)) (* -1 (/ (pow c 2) (pow b 2))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (- (* -1 (* (pow b 2) c)) (* a (pow c 2))) (pow b 3))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 3))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 2))","(- (pow b 2) (* 4 (* a c)))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (- (* -1 (/ (* a (pow c 2)) (pow b 2))) c) b)","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ (- (/ (* a (pow c 2)) (pow b 2)) (* -1 c)) b))","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ 1 (/ (* a c) (pow b 2))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* (pow c 2) (+ (/ 1 (* b c)) (/ a (pow b 3)))))","(* (pow c 2) (+ (/ 1 (* b c)) (/ a (pow b 3))))","(* (pow c 2) (+ (/ 1 c) (/ a (pow b 2))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"memory":[[4818560,48682752]],"method":["egg-herbie"],"outputs":[["(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 a #s(literal -2 binary64)) (*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a)","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(*.f64 (neg.f64 c) (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (*.f64 (neg.f64 c) (/.f64 c (pow.f64 b #s(literal 3 binary64))))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (neg.f64 c) (/.f64 c (pow.f64 b #s(literal 3 binary64))))) a (/.f64 (neg.f64 c) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c))) a b)","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(- (* -1 (/ (* a (pow c 2)) (pow b 3))) (/ c b))","(*.f64 (neg.f64 c) (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)))","(/ c b)","(/.f64 c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c)","c","(+ c (/ (* a (pow c 2)) (pow b 2)))","(fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) c c)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* 2 a)","(*.f64 #s(literal 2 binary64) a)","(/ (* a c) b)","(/.f64 (*.f64 c a) b)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b a)))) a)","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))))) a)","(* -1 (/ (* a (pow c 2)) (pow b 3)))","(*.f64 (*.f64 (neg.f64 a) c) (/.f64 c (pow.f64 b #s(literal 3 binary64))))","(* a (- (* -1 (/ c (* a b))) (/ (pow c 2) (pow b 3))))","(*.f64 (neg.f64 a) (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (/.f64 c a) b)))","(/ (* a (pow c 2)) (pow b 3))","(*.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c)","(* a (+ (/ c (* a b)) (/ (pow c 2) (pow b 3))))","(*.f64 a (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) c (/.f64 (/.f64 c a) b)))","(/ (* a (pow c 2)) (pow b 2))","(*.f64 (*.f64 (/.f64 (/.f64 a b) b) c) c)","(* a (+ (/ c a) (/ (pow c 2) (pow b 2))))","(*.f64 a (fma.f64 (/.f64 (/.f64 c b) b) c (/.f64 c a)))","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64)))))) a) b) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/128 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))))) (neg.f64 a))) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/512 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64))))) (pow.f64 b #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (/ c (* a b)) (* -1 (/ (pow c 2) (pow b 3))))))","(*.f64 (neg.f64 a) (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (/.f64 c a) b)))","(* -1 (* a (+ (* -1 (/ c (* a b))) (* -1 (/ (pow c 2) (pow b 3))))))","(*.f64 a (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) c (/.f64 (/.f64 c a) b)))","(* -1 (* a (+ (* -1 (/ c a)) (* -1 (/ (pow c 2) (pow b 2))))))","(*.f64 a (fma.f64 (/.f64 (/.f64 c b) b) c (/.f64 c a)))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 #s(literal -1/4 binary64) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(/ (- (* -1 (* (pow b 2) c)) (* a (pow c 2))) (pow b 3))","(/.f64 (neg.f64 (*.f64 c (fma.f64 b b (*.f64 c a)))) (pow.f64 b #s(literal 3 binary64)))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 3))","(/.f64 (*.f64 c (fma.f64 b b (*.f64 c a))) (pow.f64 b #s(literal 3 binary64)))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 2))","(/.f64 (*.f64 c (fma.f64 b b (*.f64 c a))) (*.f64 b b))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) c c)) b))","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) c c)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) c c))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(*.f64 (neg.f64 c) (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)))","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (neg.f64 c) (fma.f64 (/.f64 a b) (/.f64 c b) #s(literal 1 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (neg.f64 (fma.f64 (/.f64 a b) (/.f64 c b) #s(literal 1 binary64))) c (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -2 binary64)) (pow.f64 b #s(literal 4 binary64))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) #s(literal 1 binary64))) b)","(/ (- (* -1 (/ (* a (pow c 2)) (pow b 2))) c) b)","(*.f64 (neg.f64 c) (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) #s(literal 2 binary64))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(-.f64 (*.f64 (/.f64 (/.f64 c b) b) b) (/.f64 b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (neg.f64 c) c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (/.f64 c b) b))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 (neg.f64 c) c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (/.f64 c b) b)))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (*.f64 a (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) #s(literal 1 binary64))))","(* -1 (/ (- (/ (* a (pow c 2)) (pow b 2)) (* -1 c)) b))","(*.f64 (neg.f64 c) (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)))","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 c) (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 c b)) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)) b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(*.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ 1 (/ (* a c) (pow b 2))))","(fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) c c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* (pow c 2) (+ (/ 1 (* b c)) (/ a (pow b 3)))))","(*.f64 (*.f64 (neg.f64 c) c) (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) c) (/.f64 a (pow.f64 b #s(literal 3 binary64)))))","(* (pow c 2) (+ (/ 1 (* b c)) (/ a (pow b 3))))","(*.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) c) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (*.f64 c c))","(* (pow c 2) (+ (/ 1 c) (/ a (pow b 2))))","(fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) c c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))) c) b) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 #s(literal -1/128 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c)))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/512 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64))))) (pow.f64 b #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":260.369873046875,"type":"simplify"},{"count":[[21,161]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)","(fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 #s(literal 2 binary64) a)","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(/.f64 (*.f64 c a) b)"]],"memory":[[1081024,28803088]],"outputs":[["(+.f64 b (sqrt.f64 #s(approx (+ (* c a) b) (fma.f64 c a b))))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (+ (* c a) b) (fma.f64 c a b)))) (*.f64 #s(literal 2 binary64) a))","b","(neg.f64 b)","(+.f64 b #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b)","(-.f64 #s(literal 0 binary64) b)","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -4 binary64)) b)","(*.f64 b b)","(*.f64 b #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) b)","(*.f64 (pow.f64 #s(literal -4 binary64) (/.f64 #s(literal 6 binary64) #s(literal 2 binary64))) b)","(*.f64 (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))))","(*.f64 b (pow.f64 #s(literal -4 binary64) (/.f64 #s(literal 6 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 b (/.f64 (/.f64 #s(literal 6 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 b (/.f64 (/.f64 #s(literal 6 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 b #s(literal -4 binary64))","(/.f64 #s(literal -4 binary64) b)","(sqrt.f64 #s(approx (+ (* c a) b) (fma.f64 c a b)))","#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (*.f64 b a))","(neg.f64 (*.f64 b a))","(+.f64 #s(literal 0 binary64) (*.f64 b a))","(+.f64 (*.f64 (/.f64 #s(literal -4 binary64) a) #s(literal 0 binary64)) (*.f64 b a))","(-.f64 #s(literal 0 binary64) (*.f64 b a))","(*.f64 b a)","(*.f64 a b)","(*.f64 (*.f64 b a) #s(literal -4 binary64))","(*.f64 (*.f64 b a) b)","(*.f64 (/.f64 #s(literal -4 binary64) a) b)","(*.f64 #s(literal -4 binary64) (*.f64 b a))","(*.f64 b (*.f64 b a))","(*.f64 b (/.f64 #s(literal -4 binary64) a))","(*.f64 (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))))","(*.f64 b (/.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64)))","(*.f64 b (pow.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64)))","(/.f64 #s(approx (+ (+ b b) (* c a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (+ b b) (* c a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))","(*.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 c a))","(*.f64 (*.f64 c #s(literal 2 binary64)) (*.f64 b a))","(*.f64 (*.f64 b a) (*.f64 c #s(literal 2 binary64)))","(*.f64 (*.f64 c a) (*.f64 b #s(literal 2 binary64)))","(*.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64)) c)","(*.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) c) b)","(*.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)) b)","(*.f64 (*.f64 (*.f64 b #s(literal 2 binary64)) c) a)","(*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))","(*.f64 (/.f64 (*.f64 c #s(literal 2 binary64)) #s(literal -4 binary64)) (*.f64 b a))","(*.f64 #s(literal 2 binary64) (*.f64 (*.f64 b a) c))","(*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","(*.f64 a (*.f64 (*.f64 b #s(literal 2 binary64)) c))","(neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64)))","(*.f64 (*.f64 b a) #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) b)","(*.f64 (*.f64 b #s(literal 2 binary64)) a)","(*.f64 (*.f64 b a) (/.f64 #s(literal 2 binary64) #s(literal -4 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) #s(literal -4 binary64)) (*.f64 b a))","(*.f64 #s(literal 2 binary64) (*.f64 b a))","(*.f64 a (*.f64 b #s(literal 2 binary64)))","(*.f64 b (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64)) b)","(*.f64 #s(literal -4 binary64) (*.f64 (*.f64 b a) #s(literal 2 binary64)))","(*.f64 b (/.f64 #s(literal 2 binary64) (/.f64 #s(literal -4 binary64) a)))","(/.f64 (*.f64 #s(literal 2 binary64) a) b)","(/.f64 (*.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -4 binary64) a))","(/.f64 #s(literal 2 binary64) (*.f64 b a))","(+.f64 b (sqrt.f64 #s(approx (+ (* c a) b) (*.f64 c a))))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (+ (* c a) b) (*.f64 c a)))) (*.f64 #s(literal 2 binary64) a))","(sqrt.f64 #s(approx (+ (* c a) b) (*.f64 c a)))","#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(+.f64 (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 c b))","(+.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(+.f64 (*.f64 c b) (*.f64 (*.f64 b a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b) (*.f64 (*.f64 b a) (*.f64 c c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b) c))","(+.f64 (*.f64 (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b)) (*.f64 c (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c)) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b)) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)) (*.f64 (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)))","(+.f64 (*.f64 (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)) (*.f64 (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(-.f64 (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))) (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) c)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(-.f64 (/.f64 (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))) b) (/.f64 (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) c)) b))","(neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(+.f64 (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 c b))","(+.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(+.f64 (*.f64 c b) (*.f64 (*.f64 b a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b) (*.f64 (*.f64 b a) (*.f64 c c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b) c))","(+.f64 (*.f64 (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b)) (*.f64 c (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b (*.f64 c c)) b)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c)) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b)) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b) (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)) (*.f64 (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)))","(+.f64 (*.f64 (*.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) b) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)) (*.f64 (*.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c) c) (*.f64 (fma.f64 (*.f64 (*.f64 a a) c) (*.f64 (*.f64 b a) (*.f64 c c)) (*.f64 (*.f64 c c) c)) b)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(-.f64 (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))) (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) c)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(-.f64 (/.f64 (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))) b) (/.f64 (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) c)) b))","(neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) c))","(+.f64 (*.f64 (*.f64 b a) (*.f64 c c)) c)","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) c))","(+.f64 c (*.f64 (*.f64 b a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (*.f64 b a) (*.f64 c c)) #s(literal -4 binary64)) c)","(+.f64 c (*.f64 (*.f64 (*.f64 b a) (*.f64 c c)) #s(literal -4 binary64)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))) (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) c)))","(+.f64 (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))) (neg.f64 (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) c))))","(-.f64 (*.f64 (*.f64 b a) (*.f64 c c)) c)","(-.f64 (fma.f64 (*.f64 b a) (*.f64 c c) #s(literal 0 binary64)) c)","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 b a) (*.f64 c c) c))","(-.f64 c (*.f64 (*.f64 b a) (*.f64 c c)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -4 binary64)) (fma.f64 (*.f64 b a) (*.f64 c c) c))","(-.f64 (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))) (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) c)))","(-.f64 (/.f64 (*.f64 c c) (fma.f64 (*.f64 b a) (*.f64 c c) c)) (/.f64 (*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 a a)) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(neg.f64 (fma.f64 c a b))","(+.f64 (-.f64 b #s(literal 0 binary64)) (*.f64 c a))","(+.f64 (*.f64 c a) b)","(+.f64 (fma.f64 c a b) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 c a b))","(+.f64 b (*.f64 c a))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b)","(+.f64 (*.f64 (*.f64 c a) (fma.f64 c a b)) (fma.f64 (*.f64 b a) c b))","(+.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 a a) a)) b)","(+.f64 (fma.f64 (*.f64 b a) c b) (*.f64 (*.f64 c a) (fma.f64 c a b)))","(+.f64 (/.f64 #s(literal -4 binary64) (*.f64 c a)) b)","(+.f64 b (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 a a) a)))","(+.f64 b (/.f64 #s(literal -4 binary64) (*.f64 c a)))","(+.f64 b (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a b)) (fma.f64 (*.f64 b a) c b))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","(*.f64 a #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 a (/.f64 #s(literal 2 binary64) #s(literal -4 binary64)))","(/.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -4 binary64))","(/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)))))","(fma.f64 #s(literal 0 binary64) (/.f64 #s(literal -4 binary64) a) (*.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal 0 binary64) #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal 0 binary64) #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (* c a) b) (*.f64 c a))","(neg.f64 (*.f64 (*.f64 b a) c))","(+.f64 (*.f64 (*.f64 (*.f64 b a) c) #s(literal 0 binary64)) (*.f64 (*.f64 b a) c))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 (*.f64 b a) c)) (*.f64 (*.f64 b a) c))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 c a)) (*.f64 (*.f64 b a) c))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b a) c))","(*.f64 (*.f64 b a) c)","(*.f64 (*.f64 b a) (*.f64 c b))","(*.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) c))","(*.f64 (*.f64 c a) b)","(*.f64 (*.f64 c b) (/.f64 #s(literal -4 binary64) a))","(*.f64 (*.f64 c b) (*.f64 b a))","(*.f64 (*.f64 c b) a)","(*.f64 (/.f64 #s(literal -4 binary64) a) (*.f64 c b))","(*.f64 (/.f64 #s(literal -4 binary64) c) (*.f64 b a))","(*.f64 a (*.f64 c b))"]],"time":1317.294921875,"type":"rewrite"},{"compiler":[[11267,1376]],"memory":[[-4201632,30172128]],"time":78.03515625,"type":"eval"},{"alts":[["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",38.27069613105964,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","done",30.152302746684423,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 c a)) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.348913616141004,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",42.68118291347719,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","fresh",39.23733002285868,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","done",39.20587259782627,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",44.143746336388546,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",58.53944871995218,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -4 binary64)))","fresh",58.435307042774525,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","done",51.357642391382996,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","fresh",60.44905510404361,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","fresh",61.534763864510545,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.46237684122134,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","next",61.46429416097619,"binary64"],["(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","next",61.22016092913733,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.4323767300291,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","fresh",60.43455870575875,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))) a))","fresh",58.07872737676906,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 #s(literal -4 binary64) (/.f64 #s(literal 6 binary64) #s(literal 2 binary64))) b) a))","fresh",55.827452858865335,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","fresh",57.25107003055859,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","next",55.430935153117076,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","fresh",46.02382952019442,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",42.425131346333224,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","fresh",62.311516888501785,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))))","fresh",59.31243986179913,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -4 binary64) a) b))","fresh",55.43113653346702,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","fresh",60.14732134800578,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","fresh",61.78858955464748,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64))))","fresh",62.312029576235666,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","next",62.45838749402276,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","fresh",62.041161123071085,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","done",47.034020121875294,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (/.f64 (*.f64 c (fma.f64 b b (*.f64 c a))) (*.f64 b b))) b)))","fresh",57.415969181507315,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (*.f64 a (fma.f64 (/.f64 (/.f64 c b) b) c (/.f64 c a)))) b)))","fresh",48.33191886265765,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","fresh",61.791358298096185,"binary64"],["#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","fresh",62.55801252698216,"binary64"]],"compiler":[[18,15],[26,19],[25,19],[32,23],[27,20],[23,18],[22,17],[25,18],[27,21],[25,19],[25,18],[26,19],[27,19],[26,18],[18,12],[29,20],[23,18],[31,21],[27,22],[23,17],[23,18],[22,17],[22,17],[21,16],[33,21],[23,18],[23,17],[23,18],[25,19],[21,16],[29,20],[31,21],[45,28],[45,28],[22,17],[22,14],[18,15],[25,19],[32,23],[27,20],[22,17],[25,18],[27,21],[25,18],[26,19],[27,19],[26,18],[18,12],[29,20],[23,18],[31,21],[27,22],[23,17],[23,18],[22,17],[21,16],[33,21],[23,18],[23,17],[23,18],[25,19],[21,16],[29,20],[45,28],[45,28],[22,17],[22,14]],"count":[[338,36]],"kept":[{"done":[0,0],"fresh":[10,5],"new":[323,26],"picked":[5,5]}],"memory":[[1426272,29124736]],"min-error":[[7.024585585666829,"binary64"]],"time":34.281982421875,"type":"prune"},{"egraph":[[0,8093,237,0.063457246],[6,7774,250,0.015615857],[5,3893,250,0.031164474],[4,1545,252,0.016808211],[3,790,252,0.008169923],[2,290,252,0.002848353],[1,121,252,0.001209611],[0,63,262,0.000704422],[0,41,266,0.000372438]],"inputs":[["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","(*.f64 b a)","b","a","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","(/.f64 (*.f64 b #s(literal -4 binary64)) a)","(*.f64 b #s(literal -4 binary64))","b","#s(literal -4 binary64)","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(*.f64 c b)","c","b","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","b","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","#s(literal 4 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","cost-diff",0],["(/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","cost-diff",2],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","cost-diff",2],["(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","cost-diff",2],["(*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))","cost-diff",0],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))))","cost-diff",0],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","cost-diff",1],["(*.f64 b #s(literal -4 binary64))","cost-diff",0],["(/.f64 (*.f64 b #s(literal -4 binary64)) a)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","cost-diff",0],["(*.f64 b a)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","cost-diff",0],["(*.f64 b #s(literal -16 binary64))","cost-diff",0],["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",1]],"memory":[[3356112,32254032]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 #s(literal -16 binary64) b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(fma.f64 #s(literal -16 binary64) b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 b #s(literal -16 binary64))","(*.f64 #s(literal -16 binary64) b)","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 a b))","(*.f64 b a)","(*.f64 a b)","b","a","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -4 binary64) a) b))","(/.f64 (*.f64 b #s(literal -4 binary64)) a)","(*.f64 (/.f64 #s(literal -4 binary64) a) b)","(*.f64 b #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) b)","b","#s(literal -4 binary64)","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) b) (*.f64 c a))) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) b) (*.f64 c a)))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","(*.f64 (*.f64 #s(literal -2 binary64) b) (*.f64 c a))","(*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))","(*.f64 (*.f64 #s(literal 2 binary64) c) (*.f64 a b))","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(*.f64 c b)","c","b","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal 4 binary64) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(+.f64 (fma.f64 (*.f64 c a) (*.f64 c a) b) b)","b","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(fma.f64 (*.f64 c a) (*.f64 c a) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 2 binary64) a)","#s(literal 4 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":216.18408203125,"type":"simplify"},{"compiler":[[243,34]],"locations":[["(neg.f64 a)","accuracy",0.0],["(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","accuracy",0.0078125],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","accuracy",0.12337875976844202],["(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","accuracy",4.115662684098371],["(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","accuracy",0.0],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.253025817795225],["(*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))","accuracy",5.533678311711029],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))))","accuracy",60.128903417685336],["(/.f64 (*.f64 b #s(literal -4 binary64)) a)","accuracy",0.0],["(*.f64 b #s(literal -4 binary64))","accuracy",0.0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","accuracy",55.430935153117076],["(*.f64 b a)","accuracy",0.0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","accuracy",62.45838749402276],["(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",0.02734375],["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.1875],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",1.5937500000000002],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",25.411130893416303]],"memory":[[-4575664,37862768]],"mixsample":[[0.143310546875,"ival-sub",1200],[3.215576171875,"adjust",800],[9.04296875,"ival-div",0],[0.083251953125,"ival-mult",1200],[0.05859375,"ival-sub",1600],[0.069091796875,"adjust",4000],[0.0908203125,"ival-assert",0],[1.391357421875,"ival-sub",0],[0.24951171875,"ival-sqrt",1200],[2.269775390625,"ival-sqrt",0],[0.098876953125,"ival-sub",400],[0.020263671875,"ival-sub",4400],[0.0986328125,"ival-mult",800],[6.529296875,"ival-add",0],[0.173828125,"ival-sub",800],[0.012939453125,"ival-mult",1600],[0.02392578125,"ival-add",400],[0.3056640625,"adjust",2800],[0.01513671875,"ival-sub",4000],[0.18408203125,"ival-sqrt",400],[0.246826171875,"ival-sqrt",2000],[0.30615234375,"ival-sqrt",800],[0.125,"ival-sub",2000],[0.035888671875,"ival-sqrt",4000],[0.0498046875,"ival-sqrt",4400],[0.009033203125,"ival-add",4000],[1.559814453125,"adjust",2000],[0.0830078125,"ival-sub",2400],[20.169189453125,"ival-mult",0],[0.155517578125,"ival-mult",400],[0.10400390625,"ival-sqrt",1600],[0.01318359375,"ival-add",2000],[0.271728515625,"ival-true",0],[0.139404296875,"ival-sqrt",2400],[0.56298828125,"exact",0],[0.013671875,"ival-add",800],[3.15380859375,"ival-neg",0]],"outcomes":[[9.95166015625,1,"valid",23],[19.0712890625,2,"valid",34],[4.7177734375,3,"valid",7],[1.548095703125,4,"valid",2],[49.0595703125,0,"valid",190]],"time":110.52197265625,"type":"localize"},{"count":[[19,185]],"inputs":[["(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 b #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","(*.f64 b a)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","(/.f64 (*.f64 b #s(literal -4 binary64)) a)","(*.f64 b #s(literal -4 binary64))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))))","(*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(neg.f64 a)"]],"memory":[[-3532592,16473760]],"outputs":[["(+ b (* -16 b))","(+ b (+ (* -16 b) (* -2 (/ (* a c) b))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (+ b (* -16 b)) a))","(/ (+ (* -1 (/ (* a c) b)) (* 1/2 (+ b (* -16 b)))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* a b)","(* -4 (/ b a))","(* -2 (* a (* b c)))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(* 2 (* a (* b c)))","(* 4 (/ b a))","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","b","(+ b (* (pow a 2) (pow c 2)))","(/ 2 a)","(* 2 b)","(+ (* 2 b) (* (pow a 2) (pow c 2)))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 a)","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -16 (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -16 (/ b a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -8 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* 2 (* a (pow c 2)))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b (pow a 2)) (pow c 2)))","(* (pow a 2) (+ (* 2 (/ b (pow a 2))) (pow c 2)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* 16 (/ b a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -8 (/ b a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 8 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 8 (/ 1 a)))))","(* -16 b)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -4 b)","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -15 b)","(* b (- (* -2 (/ (* a c) (pow b 2))) 15))","(* b (- (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 15))","(* b (- (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))) 15))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -15/2 (/ b a))","(* b (- (* -1 (/ c (pow b 2))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4)))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4))))) (* 15/2 (/ 1 a))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(* b (+ 1 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ 2 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -17 b)","(* -1 (* b (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 17 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -17/2 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (* 17/2 (/ 1 a)))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a)))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1)))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 2)))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))))","(+ (* -1 (/ c b)) (* 1/2 (/ (+ b (* -16 b)) a)))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -16 (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -16 (/ b c)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -8 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(* (pow c 2) (+ (/ b (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* 2 (/ b (pow c 2))) (pow a 2)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* 16 (/ b c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 8 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[49.843017578125,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","c","-inf"],[3.22509765625,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","c","inf"],[2.574951171875,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","c","0"],[3.8349609375,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","b","-inf"],[4.108154296875,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","b","inf"],[5.718017578125,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","b","0"],[4.02099609375,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","a","-inf"],[9.80810546875,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","a","inf"],[3.778076171875,"((+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (* b -4) a) (* b -4) (neg (* (* 2 a) (* c b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* 2 a) (* c b)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ 4 (* 2 a)) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (sqrt (- (* b b) (* 4 (* a c)))) (neg a))","a","0"]],"time":90.87890625,"type":"series"},{"count":[[185,184]],"egraph":[[0,8258,4465,0.10760537],[1,2496,4698,0.032127978],[0,783,4786,0.007902939]],"inputs":[["(+ b (* -16 b))","(+ b (+ (* -16 b) (* -2 (/ (* a c) b))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (+ b (* -16 b)) a))","(/ (+ (* -1 (/ (* a c) b)) (* 1/2 (+ b (* -16 b)))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* a b)","(* -4 (/ b a))","(* -2 (* a (* b c)))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(* 2 (* a (* b c)))","(* 4 (/ b a))","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","b","(+ b (* (pow a 2) (pow c 2)))","(/ 2 a)","(* 2 b)","(+ (* 2 b) (* (pow a 2) (pow c 2)))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 a)","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -16 (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -16 (/ b a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -8 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* 2 (* a (pow c 2)))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b (pow a 2)) (pow c 2)))","(* (pow a 2) (+ (* 2 (/ b (pow a 2))) (pow c 2)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* 16 (/ b a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -8 (/ b a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 8 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 8 (/ 1 a)))))","(* -16 b)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -4 b)","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -15 b)","(* b (- (* -2 (/ (* a c) (pow b 2))) 15))","(* b (- (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 15))","(* b (- (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))) 15))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -15/2 (/ b a))","(* b (- (* -1 (/ c (pow b 2))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4)))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4))))) (* 15/2 (/ 1 a))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(* b (+ 1 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ 2 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -17 b)","(* -1 (* b (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 17 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -17/2 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (* 17/2 (/ 1 a)))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a)))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1)))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 2)))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))))","(+ (* -1 (/ c b)) (* 1/2 (/ (+ b (* -16 b)) a)))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -16 (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -16 (/ b c)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -8 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(* (pow c 2) (+ (/ b (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* 2 (/ b (pow c 2))) (pow a 2)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* 16 (/ b c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 8 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[10883552,56563168]],"method":["egg-herbie"],"outputs":[["(+ b (* -16 b))","(*.f64 #s(literal -15 binary64) b)","(+ b (+ (* -16 b) (* -2 (/ (* a c) b))))","(fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (*.f64 #s(literal -15 binary64) b))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) (*.f64 #s(literal -15 binary64) b))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a (*.f64 #s(literal -15 binary64) b))","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* 1/2 (/ (+ b (* -16 b)) a))","(*.f64 #s(literal -15/2 binary64) (/.f64 b a))","(/ (+ (* -1 (/ (* a c) b)) (* 1/2 (+ b (* -16 b)))) a)","(/.f64 (fma.f64 #s(literal -15/2 binary64) b (*.f64 (neg.f64 a) (/.f64 c b))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/.f64 (fma.f64 #s(literal -15/2 binary64) b (*.f64 (neg.f64 a) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b)) a (*.f64 #s(literal -15/2 binary64) b)) a)","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(* a b)","(*.f64 a b)","(* -4 (/ b a))","(*.f64 (/.f64 b a) #s(literal -4 binary64))","(* -2 (* a (* b c)))","(*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (*.f64 c c) (/.f64 #s(literal -2 binary64) (pow.f64 b #s(literal 3 binary64))))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a)","(* 2 (* a (* b c)))","(*.f64 (*.f64 (*.f64 c b) a) #s(literal 2 binary64))","(* 4 (/ b a))","(*.f64 (/.f64 b a) #s(literal 4 binary64))","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) b)) a)","b","(+ b (* (pow a 2) (pow c 2)))","(fma.f64 (*.f64 a a) (*.f64 c c) b)","(/ 2 a)","(/.f64 #s(literal 2 binary64) a)","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(+ (* 2 b) (* (pow a 2) (pow c 2)))","(fma.f64 (*.f64 (*.f64 c c) a) a (*.f64 #s(literal 2 binary64) b))","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b)","(* -1 a)","(neg.f64 a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (/.f64 b a) #s(literal -16 binary64))) a)","(* a (+ (* -16 (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (/.f64 b a) #s(literal -16 binary64)))) a)","(* a (+ (* -16 (/ b a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (/.f64 b a) #s(literal -16 binary64))))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -8 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))","(+ (* -8 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a))))","(+ (* -8 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 a))) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 a)))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 a))))) a)","(* 2 (* a (pow c 2)))","(*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b a) a) #s(literal 4 binary64) (*.f64 (*.f64 c c) #s(literal 2 binary64))) a)","(* (pow a 2) (pow c 2))","(*.f64 (*.f64 (*.f64 c c) a) a)","(* (pow a 2) (+ (/ b (pow a 2)) (pow c 2)))","(*.f64 (*.f64 (fma.f64 c c (/.f64 (/.f64 b a) a)) a) a)","(* (pow a 2) (+ (* 2 (/ b (pow a 2))) (pow c 2)))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 b a) a) #s(literal 2 binary64) (*.f64 c c)) a) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))))) a)","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* 16 (/ b a)))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal 16 binary64))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 #s(literal -16 binary64) b)) (neg.f64 a))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal -16 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) (neg.f64 a))) (neg.f64 a))) (neg.f64 a))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a)))) (neg.f64 a))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -8 (/ b a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))","(-.f64 (*.f64 #s(literal -8 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 8 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 8 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 8 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 a))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 a))) a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) (neg.f64 a)) b) a)) (neg.f64 a))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b a) a) #s(literal -4 binary64) (*.f64 (*.f64 c c) #s(literal -2 binary64))) (neg.f64 a))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 a))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 a))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 a))","(+ (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (*.f64 #s(literal -16 binary64) b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -16 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -16 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -8 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 8 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -8 binary64) a)) b))","(* -16 b)","(*.f64 #s(literal -16 binary64) b)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(* -4 b)","(*.f64 #s(literal -4 binary64) b)","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(fma.f64 (*.f64 (*.f64 c c) #s(literal 2 binary64)) a (*.f64 (/.f64 b a) #s(literal 4 binary64)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 #s(literal -1/4 binary64) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(* -15 b)","(*.f64 #s(literal -15 binary64) b)","(* b (- (* -2 (/ (* a c) (pow b 2))) 15))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal -15 binary64)) b)","(* b (- (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 15))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -15 binary64)) b)","(* b (- (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))) 15))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -15 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -15/2 (/ b a))","(*.f64 #s(literal -15/2 binary64) (/.f64 b a))","(* b (- (* -1 (/ c (pow b 2))) (* 15/2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c b) (/.f64 #s(literal -15/2 binary64) a)) b)","(* b (- (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4)))) (* 15/2 (/ 1 a))))","(*.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 #s(literal -15/2 binary64) a)) b)","(* b (- (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4))))) (* 15/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -1 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 #s(literal -15/2 binary64) a))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (neg.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c)))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (*.f64 c (/.f64 c b)) (*.f64 c a))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (*.f64 c (/.f64 c b)) (*.f64 c a)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (*.f64 c (/.f64 c b)) (*.f64 c a))))) b)","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal 2 binary64) (/.f64 #s(literal 4 binary64) a)) b)","(* b (+ 1 (/ (* (pow a 2) (pow c 2)) b)))","(*.f64 (fma.f64 a (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal 1 binary64)) b)","(* b (+ 2 (/ (* (pow a 2) (pow c 2)) b)))","(*.f64 (fma.f64 a (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal 2 binary64)) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) b)","(* -17 b)","(*.f64 #s(literal -17 binary64) b)","(* -1 (* b (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 17 binary64)))","(* -1 (* b (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 17 binary64)))","(* -1 (* b (+ 17 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 17 binary64))))","(* -17/2 (/ b a))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (* 17/2 (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 17/2 binary64) a) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 17/2 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a)))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 17/2 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b))))","(* -1 (/ b a))","(/.f64 b (neg.f64 a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(neg.f64 (fma.f64 (neg.f64 (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) b (/.f64 b a)))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b))))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64))))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 c (/.f64 c b)) (/.f64 #s(literal -4 binary64) a)))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1)))","(*.f64 (neg.f64 b) (fma.f64 (neg.f64 (*.f64 a a)) (*.f64 c (/.f64 c b)) #s(literal -1 binary64)))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 2)))","(*.f64 (neg.f64 b) (fma.f64 (neg.f64 (*.f64 a a)) (*.f64 c (/.f64 c b)) #s(literal -2 binary64)))","(* -1 b)","(neg.f64 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)) (*.f64 #s(literal -15 binary64) b))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c (*.f64 #s(literal -15 binary64) b))","(+ (* -1 (/ c b)) (* 1/2 (/ (+ b (* -16 b)) a)))","(fma.f64 #s(literal -15/2 binary64) (/.f64 b a) (/.f64 (neg.f64 c) b))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))))","(fma.f64 (neg.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 c a)) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)) b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (/.f64 b c) #s(literal -16 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -16 (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (/.f64 b c) #s(literal -16 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -16 (/ b c)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (/.f64 b c) #s(literal -16 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* c (+ (* -8 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -8 binary64))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -8 binary64)))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -8 binary64))))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)))) c)","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (/.f64 b c) a) c) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) c) c)","(* (pow c 2) (+ (/ b (pow c 2)) (pow a 2)))","(*.f64 (*.f64 (fma.f64 a a (/.f64 (/.f64 b c) c)) c) c)","(* (pow c 2) (+ (* 2 (/ b (pow c 2))) (pow a 2)))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 b c) c) #s(literal 2 binary64) (*.f64 a a)) c) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* 16 (/ b c)))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 b c) #s(literal 16 binary64))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 #s(literal -16 binary64) b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (fma.f64 #s(literal -16 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c)))) (neg.f64 c))","(* -1 (* c (+ (* 8 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 8 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal -8 binary64) (/.f64 b a))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -8 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c))) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) (neg.f64 c)) b) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":270.6669921875,"type":"simplify"},{"count":[[19,229]],"inputs":[["(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 b #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","(*.f64 b a)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","(/.f64 (*.f64 b #s(literal -4 binary64)) a)","(*.f64 b #s(literal -4 binary64))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))))","(*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(neg.f64 a)"]],"memory":[[-7089392,20161856]],"outputs":[["#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(approx 9/2 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(approx 9/2 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","#s(approx 9/2 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 12 binary64)"]],"time":263.013916015625,"type":"rewrite"},{"compiler":[[7984,1047]],"memory":[[2627728,17748912]],"time":27.757080078125,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","done",30.152302746684423,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",42.68118291347719,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","next",39.23733002285868,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","done",39.20587259782627,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","next",44.143746336388546,"binary64"],["(/.f64 #s(approx (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","fresh",55.586828229668455,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",58.53944871995218,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","fresh",60.44905510404361,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","fresh",61.534763864510545,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.46237684122134,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (neg (* (* 2 a) (* c b))) (*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.46429416097619,"binary64"],["(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","fresh",61.656224786714034,"binary64"],["(/.f64 #s(literal 12 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.507611618886244,"binary64"],["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.511085659362486,"binary64"],["(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.526289092735325,"binary64"],["(*.f64 #s(approx (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (*.f64 #s(literal 2 binary64) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","fresh",62.303169527354946,"binary64"],["#s(approx (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","fresh",55.586828229668455,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.4323767300291,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","next",60.43455870575875,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))) a))","fresh",58.07872737676906,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 #s(literal -4 binary64) (/.f64 #s(literal 6 binary64) #s(literal 2 binary64))) b) a))","fresh",55.827452858865335,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","fresh",57.25107003055859,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c)) b))","fresh",46.273736501081714,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","fresh",46.02382952019442,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",42.425131346333224,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","fresh",62.311516888501785,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))))","fresh",59.31243986179913,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","fresh",60.14732134800578,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","fresh",61.78858955464748,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","done",62.45838749402276,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","fresh",62.041161123071085,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (/.f64 (*.f64 c (fma.f64 b b (*.f64 c a))) (*.f64 b b))) b)))","fresh",57.415969181507315,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (*.f64 a (fma.f64 (/.f64 (/.f64 c b) b) c (/.f64 c a)))) b)))","fresh",48.33191886265765,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","fresh",61.791358298096185,"binary64"],["#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","fresh",62.55801252698216,"binary64"],["#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","next",62.302667171040056,"binary64"],["#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","fresh",56.887695059584786,"binary64"],["#s(approx 9/2 #s(literal -16 binary64))","next",61.71382567026973,"binary64"]],"compiler":[[26,19],[32,23],[27,20],[23,18],[22,17],[22,18],[25,18],[25,18],[26,19],[27,19],[34,25],[5,7],[5,7],[5,7],[5,7],[23,15],[24,19],[29,20],[23,18],[31,21],[27,22],[23,17],[31,21],[22,17],[22,17],[21,16],[33,21],[23,17],[23,18],[21,16],[29,20],[45,28],[45,28],[22,17],[22,14],[25,17],[27,18],[3,6],[32,23],[27,20],[22,17],[22,18],[25,18],[25,18],[26,19],[27,19],[34,25],[5,7],[5,7],[5,7],[5,7],[23,15],[24,19],[29,20],[23,18],[31,21],[27,22],[23,17],[31,21],[22,17],[21,16],[33,21],[23,17],[23,18],[29,20],[45,28],[45,28],[22,17],[22,14],[25,17],[27,18],[3,6]],"count":[[235,38]],"kept":[{"done":[5,3],"fresh":[26,22],"new":[199,12],"picked":[5,1]}],"memory":[[-3163936,23163856]],"min-error":[[6.9392861058072866,"binary64"]],"time":30.053955078125,"type":"prune"},{"egraph":[[0,8117,239,0.061185179],[5,6298,249,0.024201817],[4,2035,251,0.026139747],[3,724,251,0.00953846],[2,254,251,0.003439974],[1,116,251,0.001201938],[0,59,258,0.000765192],[0,43,268,0.000429359]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx 9/2 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","(*.f64 (/.f64 b a) #s(literal 4 binary64))","(/.f64 b a)","b","a","#s(literal 4 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","(/.f64 (/.f64 #s(literal -4 binary64) b) a)","(/.f64 #s(literal -4 binary64) b)","#s(literal -4 binary64)","b","a","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","cost-diff",0],["(+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","cost-diff",0],["(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(/.f64 #s(literal -4 binary64) b)","cost-diff",0],["(/.f64 (/.f64 #s(literal -4 binary64) b) a)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["(*.f64 (/.f64 b a) #s(literal 4 binary64))","cost-diff",0],["#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","cost-diff",0],["#s(approx 9/2 #s(literal -16 binary64))","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","cost-diff",0],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","cost-diff",1],["(/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))","cost-diff",2],["(/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a)))","cost-diff",2]],"memory":[[5729520,29150528]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) b))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) b)","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 2 binary64) a)","(/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -2 binary64) a)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx 9/2 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","(*.f64 (/.f64 b a) #s(literal 4 binary64))","(/.f64 b a)","b","a","#s(literal 4 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","(/.f64 (/.f64 #s(literal -4 binary64) b) a)","(/.f64 #s(literal -4 binary64) b)","#s(literal -4 binary64)","b","a","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) b) (/.f64 #s(literal 1/2 binary64) a))","(+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":243.85107421875,"type":"simplify"},{"compiler":[[208,37]],"locations":[["(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.1231409090810107],["(+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","accuracy",13.112651304621604],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","accuracy",25.411130893416303],["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","accuracy",34.60888424352628],["(/.f64 #s(literal -4 binary64) b)","accuracy",0.0],["(/.f64 (/.f64 #s(literal -4 binary64) b) a)","accuracy",0.2109375],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","accuracy",60.43455870575875],["(/.f64 b a)","accuracy",0.0],["(*.f64 (/.f64 b a) #s(literal 4 binary64))","accuracy",0.00390625],["#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","accuracy",29.486444204134518],["#s(approx 9/2 #s(literal -16 binary64))","accuracy",63.002902896400066],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","accuracy",4.253025817795225],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","accuracy",9.006581795530096],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","accuracy",25.411130893416303],["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","accuracy",34.60888424352628]],"memory":[[150672,42597184]],"mixsample":[[0.350830078125,"ival-sub",1200],[0.0048828125,"ival-sub",4800],[18.563720703125,"ival-div",0],[6.125,"adjust",800],[0.187744140625,"ival-mult",1200],[0.092529296875,"ival-sub",1600],[0.187744140625,"ival-assert",0],[1.24072265625,"ival-sub",0],[0.539794921875,"ival-sqrt",1200],[0.012939453125,"ival-sqrt",4800],[2.0478515625,"ival-sqrt",0],[0.164306640625,"ival-sub",400],[0.236572265625,"ival-mult",800],[7.23291015625,"ival-add",0],[0.035888671875,"ival-sub",4400],[0.323974609375,"ival-sub",800],[0.02685546875,"ival-mult",1600],[0.364501953125,"adjust",2800],[0.010986328125,"ival-sub",4000],[0.279296875,"ival-sqrt",400],[0.320556640625,"ival-sqrt",2000],[0.1884765625,"ival-sub",2000],[0.521240234375,"ival-sqrt",800],[0.02294921875,"ival-sqrt",4000],[0.0859375,"ival-sqrt",4400],[2.889892578125,"adjust",2000],[0.146728515625,"ival-sub",2400],[17.25390625,"ival-mult",0],[0.400390625,"ival-mult",400],[0.181884765625,"ival-sqrt",1600],[0.203125,"ival-true",0],[0.26318359375,"ival-sqrt",2400],[0.621826171875,"exact",0],[2.432373046875,"ival-neg",0]],"outcomes":[[25.870361328125,1,"valid",66],[33.525146484375,2,"valid",65],[8.646728515625,3,"valid",11],[27.728271484375,0,"valid",114]],"time":119.179931640625,"type":"localize"},{"count":[[15,167]],"inputs":[["(/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","#s(approx 9/2 #s(literal -16 binary64))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","(*.f64 (/.f64 b a) #s(literal 4 binary64))","(/.f64 b a)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","(/.f64 (/.f64 #s(literal -4 binary64) b) a)","(/.f64 #s(literal -4 binary64) b)","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))"]],"memory":[[-5148320,12307920]],"outputs":[["(* 2 a)","(/ -2 a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* 4 (/ b a))","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","(/ b a)","(/ -4 (* a b))","(/ (+ b (* -1 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* 2 (* a (pow c 2)))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 b) (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1/2 b)) a)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(/ -4 b)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(- (pow b 2) (* 4 (* a c)))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(/ c b)","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b))","(* 2 (/ (* a c) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ (* -1 (/ c b)) (/ b a))","(+ (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))) (/ b a))","(+ (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"series":[[2.676025390625,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","c","-inf"],[1.85302734375,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","c","inf"],[1.427978515625,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","c","0"],[2.651123046875,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","b","-inf"],[2.654052734375,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","b","inf"],[2.62890625,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","b","0"],[3.052001953125,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","a","-inf"],[4.583984375,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","a","inf"],[2.8818359375,"((/ -4 (/ -4 (* 2 a))) (/ -4 (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) 9/2 (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (* (/ b a) 4) (/ b a) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ -4 b) a) (/ -4 b) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (- (* b b) (* 4 (* a c))))","a","0"]],"time":27.657958984375,"type":"series"},{"count":[[167,166]],"egraph":[[0,8546,4261,0.11398877],[2,7497,4483,0.029945872],[1,2228,4519,0.024623526],[0,693,4596,0.007081975]],"inputs":[["(* 2 a)","(/ -2 a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* 4 (/ b a))","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","(/ b a)","(/ -4 (* a b))","(/ (+ b (* -1 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* 2 (* a (pow c 2)))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 b) (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1/2 b)) a)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(/ -4 b)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(- (pow b 2) (* 4 (* a c)))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(/ c b)","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b))","(* 2 (/ (* a c) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ (* -1 (/ c b)) (/ b a))","(+ (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))) (/ b a))","(+ (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"memory":[[9712480,60507328]],"method":["egg-herbie"],"outputs":[["(* 2 a)","(*.f64 #s(literal 2 binary64) a)","(/ -2 a)","(/.f64 #s(literal -2 binary64) a)","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (*.f64 c c) (/.f64 #s(literal -2 binary64) (pow.f64 b #s(literal 3 binary64))))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a)","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(/.f64 (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) b)","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(* 4 (/ b a))","(*.f64 (/.f64 #s(literal 4 binary64) a) b)","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) b)) a)","(/ b a)","(/.f64 b a)","(/ -4 (* a b))","(/.f64 #s(literal -4 binary64) (*.f64 b a))","(/ (+ b (* -1 (/ (* a c) b))) a)","(/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) b) a b) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b)) a b) a)","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a (*.f64 #s(literal 2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)))) a)","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* 2 (* a (pow c 2)))","(*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b a) a) #s(literal 4 binary64) (*.f64 (*.f64 c c) #s(literal 2 binary64))) a)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(*.f64 #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a)))","(+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))))","(fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a)))))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a)) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) (neg.f64 a)) b) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 a))) a)))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (/.f64 b a) a) #s(literal -4 binary64) (*.f64 (*.f64 c c) #s(literal -2 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ b a)))","(-.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 b) (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 a))) a)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) b) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) a)) (neg.f64 a))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a)))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(fma.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) c) c (*.f64 (/.f64 #s(literal 4 binary64) a) b))","(/ -4 b)","(/.f64 #s(literal -4 binary64) b)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 b #s(literal 1/4 binary64)) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) (*.f64 b b) (*.f64 #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b a))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) b)","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 #s(literal 1/2 binary64) b) b))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal 1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)))) b)","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal 2 binary64) (/.f64 #s(literal 4 binary64) a)) b)","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (/.f64 c b) b)) b)","(* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b)) b)","(* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b))) b)","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 2 binary64)) b)","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64)) b)","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64))))","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b))))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 c (/.f64 c b)) (/.f64 #s(literal -4 binary64) a)))","(/ c b)","(/.f64 c b)","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c))) (neg.f64 b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)))) (neg.f64 b))","(* 2 (/ (* a c) b))","(*.f64 (/.f64 (*.f64 c a) b) #s(literal 2 binary64))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(*.f64 #s(literal 2 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)))) (neg.f64 b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a))))) (neg.f64 b))","(* -1 b)","(neg.f64 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 c b)) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(+ (* -1 (/ c b)) (/ b a))","(-.f64 (/.f64 b a) (/.f64 c b))","(+ (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))) (/ b a))","(fma.f64 (neg.f64 (fma.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c (/.f64 b a))","(+ (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(fma.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c (/.f64 b a))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)) (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c (*.f64 #s(literal 2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b)) b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c))))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))))) c)","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (/.f64 b c) a) c) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) c) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal 1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b c) a)))","(* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b c) a)))) c)","(* c (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b c) a))))) c)","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c))) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c)) b) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) b) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) c)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c)))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":317.878173828125,"type":"simplify"},{"count":[[15,99]],"inputs":[["(/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","#s(approx 9/2 #s(literal -16 binary64))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","(*.f64 (/.f64 b a) #s(literal 4 binary64))","(/.f64 b a)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","(/.f64 (/.f64 #s(literal -4 binary64) b) a)","(/.f64 #s(literal -4 binary64) b)","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))"]],"memory":[[-12155264,14133408]],"outputs":[["#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","(+.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c))))","(/.f64 (+.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) #s(literal -4 binary64))","#s(approx 9 #s(literal -4 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(approx (neg c) #s(literal -4 binary64))","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 9/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","(/.f64 (+.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) #s(literal -4 binary64))","(+.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c))))","(sqrt.f64 #s(approx (neg c) (neg.f64 c)))","#s(approx (neg c) (neg.f64 c))"]],"time":324.432861328125,"type":"rewrite"},{"compiler":[[9585,1011]],"memory":[[3813120,18805280]],"time":25.822998046875,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","done",30.152302746684423,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) #s(approx (/ -4 (* 2 a)) (/.f64 #s(literal -2 binary64) a))))","fresh",39.23733002285868,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","done",39.20587259782627,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -1/2 binary64))","fresh",62.42787200249399,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -16 binary64))","fresh",62.435009282059355,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",54.95239560825206,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","done",44.143746336388546,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",62.36450387999981,"binary64"],["(/.f64 #s(approx (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","fresh",55.586828229668455,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",58.53944871995218,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","fresh",60.44905510404361,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","fresh",61.534763864510545,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","fresh",42.5262155376925,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.46237684122134,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (neg (* (* 2 a) (* c b))) (*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.46429416097619,"binary64"],["(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","fresh",61.656224786714034,"binary64"],["(/.f64 #s(literal 12 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.507611618886244,"binary64"],["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.511085659362486,"binary64"],["(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.526289092735325,"binary64"],["#s(approx (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","fresh",55.586828229668455,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) (/.f64 (neg.f64 c) b))","fresh",46.02382952019442,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.4323767300291,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","done",60.43455870575875,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))) a))","fresh",58.07872737676906,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 #s(literal -4 binary64) (/.f64 #s(literal 6 binary64) #s(literal 2 binary64))) b) a))","fresh",55.827452858865335,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","fresh",57.25107003055859,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c)) b))","fresh",46.273736501081714,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",42.425131346333224,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","fresh",62.311516888501785,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))))","fresh",59.31243986179913,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","fresh",60.14732134800578,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","fresh",61.78858955464748,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","done",62.45838749402276,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","fresh",62.041161123071085,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (/.f64 (*.f64 c (fma.f64 b b (*.f64 c a))) (*.f64 b b))) b)))","fresh",57.415969181507315,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (*.f64 a (fma.f64 (/.f64 (/.f64 c b) b) c (/.f64 c a)))) b)))","fresh",48.33191886265765,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","fresh",61.791358298096185,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (/ -4 b) a) (/.f64 #s(literal -4 binary64) (*.f64 b a))))","fresh",60.196979703532875,"binary64"],["#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","fresh",58.41708185249435,"binary64"],["#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","fresh",62.55801252698216,"binary64"],["#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","done",62.302667171040056,"binary64"],["#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 #s(literal 4 binary64) a) b))","fresh",62.303169527354946,"binary64"],["#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","fresh",56.887695059584786,"binary64"],["#s(approx (neg c) #s(literal -4 binary64))","fresh",61.7155247996372,"binary64"],["#s(approx 9/2 #s(literal -16 binary64))","done",61.71382567026973,"binary64"]],"compiler":[[1537,293],[26,19],[31,24],[23,18],[21,17],[21,17],[31,22],[22,17],[12,11],[22,18],[25,18],[25,18],[26,19],[35,25],[27,19],[34,25],[5,7],[5,7],[5,7],[5,7],[24,19],[26,20],[29,20],[23,18],[31,21],[27,22],[23,17],[31,21],[22,17],[21,16],[33,21],[23,17],[23,18],[21,16],[29,20],[45,28],[45,28],[22,17],[29,22],[20,15],[22,14],[25,17],[25,17],[27,18],[4,6],[3,6]],"count":[[260,45]],"kept":[{"done":[4,4],"fresh":[29,26],"new":[222,11],"picked":[5,4]}],"memory":[[1481552,28130512]],"min-error":[[6.938911796079451,"binary64"]],"time":33.902099609375,"type":"prune"},{"accuracy":[9.657478927095934],"baseline":[30.152302746684423],"branch":[["a",30.152302746684427,1,"binary64"],["b",9.657478927095934,3,"binary64"],["c",30.152302746684413,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",15.90657347952171,6,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[65,3]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) (/.f64 (neg.f64 c) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 #s(literal 4 binary64) a) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (/ -4 b) a) (/.f64 #s(literal -4 binary64) (*.f64 b a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -4 binary64) a) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","#s(approx (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 12 binary64) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(/.f64 #s(approx (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(*.f64 #s(approx (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (*.f64 #s(literal 2 binary64) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (neg (* (* 2 a) (* c b))) (*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -16 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -1/2 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -4 binary64)))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (/.f64 (*.f64 c (fma.f64 b b (*.f64 c a))) (*.f64 b b))) b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c)) b))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 c a)) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (*.f64 a (fma.f64 (/.f64 (/.f64 c b) b) c (/.f64 c a)))) b)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) #s(approx (/ -4 (* 2 a)) (/.f64 #s(literal -2 binary64) a))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal -4 binary64) (/.f64 #s(literal -4 binary64) (*.f64 #s(literal 2 binary64) a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 #s(literal -4 binary64) (/.f64 #s(literal 6 binary64) #s(literal 2 binary64))) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (neg.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b))) c))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64))) (pow.f64 b (/.f64 #s(literal -4 binary64) #s(literal 2 binary64)))) a))"]],"memory":[[1632576,32543168]],"oracle":[63.89926731450249],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":78.462890625,"times":[[18.922119140625,"a"],[18.590087890625,"b"],[17.18798828125,"c"],[17.718994140625,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[11.957883427798151],"baseline":[39.20587259782627],"branch":[["b",11.957883427798151,3,"binary64"]],"compiler":[[1,3]],"count":[[50,3]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) (/.f64 (neg.f64 c) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 #s(literal 4 binary64) a) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (/ -4 b) a) (/.f64 #s(literal -4 binary64) (*.f64 b a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -4 binary64) a) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","#s(approx (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 12 binary64) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(/.f64 #s(approx (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(*.f64 #s(approx (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (*.f64 #s(literal 2 binary64) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (neg (* (* 2 a) (* c b))) (*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -16 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -1/2 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -4 binary64)))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 #s(approx (+ (* (/ c b) (/ (* c a) b)) c) (/.f64 (*.f64 c (fma.f64 b b (*.f64 c a))) (*.f64 b b))) b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c)) b))"]],"memory":[[1413840,8849184]],"oracle":[63.856038428385034],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":16.947021484375,"times":[[13.265869140625,"b"]],"type":"regimes"},{"accuracy":[12.125700858999956],"baseline":[42.425131346333224],"branch":[["b",12.125700858999956,3,"binary64"]],"compiler":[[1,3]],"count":[[43,3]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) (/.f64 (neg.f64 c) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 #s(literal 4 binary64) a) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (/ -4 b) a) (/.f64 #s(literal -4 binary64) (*.f64 b a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -4 binary64) a) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","#s(approx (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 12 binary64) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(/.f64 #s(approx (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(*.f64 #s(approx (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (*.f64 #s(literal 2 binary64) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (neg (* (* 2 a) (* c b))) (*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -16 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -1/2 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))"]],"memory":[[-2913632,7893184]],"oracle":[63.81860591454935],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":14.324951171875,"times":[[11.376220703125,"b"]],"type":"regimes"},{"accuracy":[12.353010074274898],"baseline":[42.425131346333224],"branch":[["b",12.353010074274898,3,"binary64"]],"compiler":[[1,3]],"count":[[42,3]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) (/.f64 (neg.f64 c) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 #s(literal 4 binary64) a) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (/ -4 b) a) (/.f64 #s(literal -4 binary64) (*.f64 b a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -4 binary64) a) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","#s(approx (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 12 binary64) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(/.f64 #s(approx (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(*.f64 #s(approx (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (*.f64 #s(literal 2 binary64) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (neg (* (* 2 a) (* c b))) (*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -16 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -1/2 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[458736,7952320]],"oracle":[63.81062315409463],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":13.47607421875,"times":[[10.535888671875,"b"]],"type":"regimes"},{"accuracy":[25.971333855585318],"baseline":[42.425131346333224],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",35.34978257625754,3,"binary64"],["b",25.971333855585318,2,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[40,2]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ -4 (/ -4 (* 2 a)))) (/.f64 (neg.f64 c) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 #s(literal 4 binary64) a) b))","#s(approx (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ 4 (* 2 a))) (*.f64 (/.f64 b a) #s(literal 4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (/ -4 b) a) (/.f64 #s(literal -4 binary64) (*.f64 b a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -4 binary64) a) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b #s(literal -4 binary64)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b b) a))","#s(approx (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 12 binary64) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (* a 8) (+ (+ b b) (* c a))) (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b)))","(/.f64 #s(approx (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal -4 binary64) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (fma.f64 (*.f64 b a) (*.f64 c c) (*.f64 c b))))","(*.f64 #s(approx (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (*.f64 #s(literal 2 binary64) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 (/.f64 #s(literal -4 binary64) a) #s(literal -4 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) #s(approx (neg (* (* 2 a) (* c b))) (*.f64 (*.f64 (*.f64 c b) a) #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (*.f64 b a) c) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 2 binary64))) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 c b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -16 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) #s(literal -1/2 binary64))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 b a)) c)) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[4300352,12204768]],"oracle":[63.81062315409463],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":22.505126953125,"times":[[9.240966796875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[10.30712890625,"b"]],"type":"regimes"},{"accuracy":[38.70366227469065],"baseline":[42.425131346333224],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",42.42513134633326,1,"binary64"],["a",42.42513134633322,1,"binary64"],["c",42.425131346333224,1,"binary64"],["b",38.70366227469065,2,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[10,2]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"memory":[[-9688208,9856432]],"oracle":[63.38510791451582],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))"]],"repr":["binary64"],"time":16.380859375,"times":[[4.43701171875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[3.62890625,"a"],[3.5009765625,"c"],[3.360107421875,"b"]],"type":"regimes"},{"accuracy":[56.46192729214327],"baseline":[58.41708185249435],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",58.41708185249433,1,"binary64"],["c",58.41708185249436,1,"binary64"],["a",58.417081852494334,1,"binary64"],["b",56.46192729214327,2,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[9,2]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 #s(approx 9/2 #s(literal -16 binary64)) #s(literal -16 binary64))"]],"memory":[[1252256,9569568]],"oracle":[63.34952340909845],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b))"]],"repr":["binary64"],"time":13.054931640625,"times":[[3.110107421875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.80810546875,"c"],[3.001953125,"a"],[2.89892578125,"b"]],"type":"regimes"},{"accuracy":[60.147321348005775],"baseline":[60.14732134800578],"branch":[["c",60.14732134800584,1,"binary64"],["a",60.14732134800579,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",60.147321348005775,1,"binary64"],["b",60.14732134800586,1,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[6,1]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))"]],"memory":[[-656,8277984]],"oracle":[63.0763890925245],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))"]],"repr":["binary64"],"time":10.22216796875,"times":[[2.5009765625,"c"],[2.2099609375,"a"],[2.266845703125,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.204833984375,"b"]],"type":"regimes"},{"accuracy":[61.71382567026974],"baseline":[61.71382567026973],"branch":[["b",61.71382567026975,1,"binary64"],["c",61.713825670269784,1,"binary64"],["a",61.71382567026974,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",61.713825670269756,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[5,1]],"inputs":[["#s(approx 9/2 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (*.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) #s(literal -4 binary64)))"]],"link":["."],"memory":[[-369184,7929504]],"name":["quadp (p42, positive)"],"oracle":[63.0377761986233],"outputs":[["#s(approx 9/2 #s(literal -16 binary64))"]],"repr":["binary64"],"time":9.324951171875,"times":[[2.2041015625,"b"],[1.950927734375,"c"],[2.10888671875,"a"],[1.96484375,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"bstep":[[25.552001953125,1.4097194582387623e-45,4.821222550120029e-38],[17.1689453125,-3.400864647364505e+144,-6.527336114012874e+141]],"compiler":[[22,18],[26,20],[22,18],[26,20],[22,18],[26,20],[22,18],[26,20],[22,18],[26,20],[22,18],[26,20],[22,18],[26,20],[22,18],[26,20],[22,18],[26,20],[26,20],[29,21],[26,20],[29,21],[26,20],[29,21],[26,20],[29,21],[26,20],[29,21],[26,20],[29,21],[26,20],[29,21],[26,20],[29,21],[19,17],[1,3]],"memory":[[6623968,14904064]],"method":["binary-search","binary-search"],"mixsample":[[2.773681640625,"ival-div",0],[1.07763671875,"adjust",800],[0.100341796875,"ival-sub",1600],[0.1005859375,"ival-assert",0],[1.499755859375,"ival-sub",0],[2.1806640625,"ival-sqrt",0],[0.250732421875,"ival-sub",400],[0.31787109375,"adjust",2000],[1.958740234375,"ival-add",0],[0.025390625,"ival-mult",800],[7.19482421875,"ival-mult",0],[0.197509765625,"ival-sqrt",1600],[0.283935546875,"ival-mult",400],[0.23291015625,"ival-true",0],[0.360595703125,"exact",0],[1.515625,"ival-neg",0],[0.538818359375,"ival-sqrt",400]],"outcomes":[[5.184814453125,1,"valid",31],[4.541748046875,2,"valid",22],[2.28271484375,0,"invalid",27],[18.161865234375,0,"valid",219]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":48.717041015625,"type":"bsearch"},{"bstep":[[1.06201171875,1.4097194582387623e-45,4.821222550120029e-38],[19.52392578125,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[23,19],[29,21],[23,19],[29,21],[23,19],[29,21],[23,19],[29,21],[23,19],[29,21],[23,19],[29,21],[23,19],[29,21],[23,19],[29,21],[23,19],[29,21],[19,17],[1,3]],"memory":[[310624,8256624]],"method":["binary-search","binary-search"],"mixsample":[[1.1005859375,"ival-div",0],[0.7841796875,"ival-add",0],[4.049072265625,"ival-mult",0],[0.0458984375,"ival-assert",0],[0.807373046875,"ival-sub",0],[0.115966796875,"ival-true",0],[1.139404296875,"ival-sqrt",0],[0.157958984375,"exact",0],[0.74365234375,"ival-neg",0]],"outcomes":[[1.7138671875,0,"invalid",21],[11.940673828125,0,"valid",144]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":24.073974609375,"type":"bsearch"},{"bstep":[[1.05810546875,1.4097194582387623e-45,4.821222550120029e-38],[14.27197265625,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[19,17],[1,3]],"memory":[[-1970688,6213392]],"method":["binary-search","binary-search"],"mixsample":[[0.786865234375,"ival-div",0],[0.530517578125,"ival-add",0],[2.775634765625,"ival-mult",0],[0.03564453125,"ival-assert",0],[0.5654296875,"ival-sub",0],[0.07421875,"ival-true",0],[0.82763671875,"ival-sqrt",0],[0.09521484375,"exact",0],[0.536376953125,"ival-neg",0]],"outcomes":[[1.653564453125,0,"invalid",20],[7.54638671875,0,"valid",96]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":18.19287109375,"type":"bsearch"},{"bstep":[[1.0029296875,1.4097194582387623e-45,4.821222550120029e-38],[1.2978515625,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[1532192,1532192]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":3.010986328125,"type":"bsearch"},{"bstep":[[21.0810546875,-6.355589725081623e-307,3.4134071165552678e-304]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[130992,8250112]],"method":["binary-search"],"mixsample":[[1.238525390625,"ival-div",0],[0.89501953125,"ival-add",0],[4.271240234375,"ival-mult",0],[0.060302734375,"ival-assert",0],[0.926513671875,"ival-sub",0],[0.134033203125,"ival-true",0],[1.3837890625,"ival-sqrt",0],[0.1669921875,"exact",0],[0.8603515625,"ival-neg",0]],"outcomes":[[3.396484375,0,"invalid",43],[11.394287109375,0,"valid",144]],"stop":[["narrow-enough",1]],"time":24.714111328125,"type":"bsearch"},{"bstep":[[23.7939453125,51411040289024670.0,5.609655073383143e+19]],"compiler":[[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[19,17],[1,3]],"memory":[[-1324480,8059216]],"method":["binary-search"],"mixsample":[[1.6240234375,"adjust",800],[1.979248046875,"ival-div",0],[0.193115234375,"ival-sub",1600],[0.007080078125,"ival-mult",2000],[0.0673828125,"ival-assert",0],[0.013916015625,"ival-sub",3600],[1.430908203125,"ival-sub",0],[0.351318359375,"ival-sub",400],[1.129150390625,"ival-sqrt",0],[0.55517578125,"adjust",2000],[1.279052734375,"ival-add",0],[0.069580078125,"ival-mult",800],[3.2119140625,"ival-mult",0],[0.357177734375,"ival-sqrt",1600],[0.197021484375,"ival-mult",400],[0.070068359375,"adjust",2800],[0.0986328125,"ival-true",0],[0.033935546875,"ival-sqrt",3600],[0.15576171875,"exact",0],[0.657470703125,"ival-sqrt",400],[0.6591796875,"ival-neg",0]],"outcomes":[[4.97265625,1,"valid",34],[0.967529296875,0,"invalid",10],[7.260009765625,2,"valid",35],[1.267822265625,3,"valid",5],[4.518310546875,0,"valid",54]],"stop":[["narrow-enough",1]],"time":27.426025390625,"type":"bsearch"},{"bstep":[[35.467041015625,2.0725659790641196e+21,6.7687020900261895e+44]],"compiler":[[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[20,16],[23,18],[19,17],[1,3]],"memory":[[-4403280,11630528]],"method":["binary-search"],"mixsample":[[2.478515625,"adjust",800],[2.789306640625,"ival-div",0],[0.0048828125,"ival-div",400],[0.309326171875,"ival-sub",1600],[0.020751953125,"ival-sqrt",800],[0.02490234375,"ival-mult",2000],[0.080322265625,"ival-assert",0],[0.00390625,"ival-sub",3600],[0.1318359375,"ival-sqrt",4000],[0.9873046875,"ival-sub",0],[1.419921875,"ival-sqrt",0],[0.655517578125,"ival-sub",400],[1.001953125,"adjust",2000],[1.966064453125,"ival-add",0],[0.103271484375,"ival-mult",800],[0.02001953125,"ival-sub",800],[5.55224609375,"ival-mult",0],[0.412109375,"ival-mult",400],[0.543212890625,"ival-sqrt",1600],[0.01318359375,"ival-mult",1600],[0.00390625,"ival-add",400],[0.159912109375,"adjust",2800],[0.138427734375,"ival-true",0],[0.010986328125,"ival-sqrt",3600],[0.109130859375,"ival-sub",4000],[0.223388671875,"exact",0],[1.03515625,"ival-sqrt",400],[1.052490234375,"ival-neg",0]],"outcomes":[[7.8984375,1,"valid",54],[0.60009765625,0,"invalid",7],[12.050537109375,2,"valid",58],[3.193115234375,3,"valid",12],[4.6494140625,0,"valid",52]],"stop":[["narrow-enough",1]],"time":40.652099609375,"type":"bsearch"},{"egraph":[[7,6068,476,0.039906028],[6,2386,476,0.037419611],[5,526,476,0.009587144],[4,335,476,0.003214295],[3,236,476,0.002250276],[2,146,476,0.001834859],[1,100,476,0.001483675],[0,73,489,0.001168036]],"inputs":[["(if (<=.f64 b #s(literal -58000000000000002676923995920896076157083808631134052859290848425287790524599496622058040470419841859490069071078153965548148102011549026091008 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -3912846279507389/29642774844752946028434172162224104410437116074403984394101141506025761187823616 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -8062834757772801/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -8062834757772801/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 4100000000000000000 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b)))","(if (<=.f64 b #s(literal 31999999999999998070693323891301714755584 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b)) #s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx 9/2 #s(literal -16 binary64))"]],"memory":[[6137104,13664784]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -58000000000000002676923995920896076157083808631134052859290848425287790524599496622058040470419841859490069071078153965548148102011549026091008 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -3912846279507389/29642774844752946028434172162224104410437116074403984394101141506025761187823616 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -8062834757772801/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -8062834757772801/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (if (<=.f64 b #s(literal 1915619426082361/95780971304118053647396689196894323976171195136475136 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 4100000000000000000 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b)))","(if (<=.f64 b #s(literal 31999999999999998070693323891301714755584 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b)) #s(approx (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (*.f64 b a) b))","#s(approx 9/2 #s(literal -16 binary64))"]],"stop":[["node limit",1]],"time":124.0029296875,"type":"simplify"},{"compiler":[[489,74]],"memory":[[-8128096,1957216]],"stop":[["fuel",1]],"time":3.06591796875,"type":"soundness"},{"compiler":[[489,74],[489,74],[105,28],[105,28],[17,14],[17,14]],"memory":[[6294240,46641392]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[]],"time":82.721923828125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02099609375,"type":"end"}]