[{"memory":[[15408,15408]],"time":0.055908203125,"type":"start"},{"compiler":[[15,10]],"memory":[[1413616,51308544]],"method":["search"],"sampling":[[12,{"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"unknown":0.41365824081003666,"valid":0.48390209302306175}],[11,{"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"unknown":0.41365824081003666,"valid":0.48390209302306175}],[10,{"invalid":0.07804872468113899,"precondition":0.0009763240814208984,"unknown":0.45268260315060616,"valid":0.46829234808683395}],[9,{"invalid":0.07804872468113899,"precondition":0.0009763240814208984,"unknown":0.45268260315060616,"valid":0.46829234808683395}],[8,{"invalid":0.031219489872455597,"precondition":0.0009763240814208984,"unknown":0.5307313278317451,"valid":0.43707285821437836}],[7,{"invalid":0.031219489872455597,"precondition":0.0009763240814208984,"unknown":0.5307313278317451,"valid":0.43707285821437836}],[6,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.6243897974491119,"valid":0.37463387846946716}],[5,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.6243897974491119,"valid":0.37463387846946716}],[4,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.7492677569389343,"valid":0.24975591897964478}],[3,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.7492677569389343,"valid":0.24975591897964478}],[2,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}]],"time":304.048095703125,"type":"analyze"},{"bogosity":[{"exit":0.4691721897629134,"infinite":0.09313913742805016,"invalid":0.10146334208548069,"precondition":0.0009763240814208984,"valid":0.33524900664213486}],"memory":[[43837024,1340311456]],"mixsample":[[396.525146484375,"adjust",800],[3.50830078125,"ival-pow",5600],[267.026123046875,"ival-pow",2800],[150.46044921875,"adjust",4000],[0.0771484375,"ival-sub",400],[0.0009765625,"exact",2400],[20.594970703125,"ival-add",400],[14.0078125,"ival-div",4000],[0.01806640625,"ival-add",2400],[0.006103515625,"ival-add",6400],[16.840576171875,"ival-div",2400],[10.312255859375,"ival-add",1200],[14.064697265625,"ival-div",8400],[4.06201171875,"ival-pow",6400],[12.8876953125,"ival-pow",5200],[1.1650390625,"ival-pow",3600],[1031.099365234375,"ival-pow",2000],[0.00390625,"ival-add",4000],[2.0361328125,"ival-div",3200],[0.006103515625,"ival-add",6800],[9.53662109375,"ival-div",2800],[32.022216796875,"ival-div",1200],[2.943359375,"ival-add",1600],[9.25439453125,"ival-div",8800],[573.89990234375,"ival-pow",4800],[0.005126953125,"ival-add",2800],[0.0009765625,"ival-assert",400],[0.0009765625,"exact",6400],[5.717529296875,"ival-div",3600],[18.764404296875,"ival-true",0],[0.006103515625,"ival-add",7200],[0.32763671875,"ival-div",5200],[2265.501220703125,"ival-pow",4000],[0.03564453125,"ival-div",6000],[0.00390625,"ival-true",400],[4.045654296875,"ival-pow",6800],[168.170166015625,"ival-div",0],[0.01220703125,"ival-add",4800],[0.0,"exact",4000],[176.9794921875,"adjust",4800],[23.67236328125,"ival-div",400],[1254.206787109375,"ival-pow",1600],[23.6015625,"ival-div",1600],[7.880615234375,"ival-assert",0],[0.001220703125,"ival-true",2000],[255.427490234375,"ival-sub",0],[1.23046875,"ival-div",7200],[673.6982421875,"ival-pow",800],[12.3291015625,"ival-div",4800],[1283.528076171875,"ival-pow",0],[1.774658203125,"ival-div",9200],[148.9755859375,"ival-add",0],[0.020751953125,"ival-sub",800],[565.506591796875,"ival-pow",4400],[5.5205078125,"ival-div",7600],[0.474853515625,"ival-pow",3200],[145.565673828125,"adjust",2800],[0.0009765625,"exact",1600],[22.1015625,"ival-div",2000],[0.0009765625,"exact",3200],[1415.921630859375,"ival-pow",400],[311.929443359375,"ival-pow",2400],[0.0048828125,"ival-add",6000],[0.0009765625,"ival-assert",800],[0.012939453125,"ival-div",9600],[0.094970703125,"ival-div",6400],[0.0048828125,"ival-sub",2000],[15.54296875,"ival-div",4400],[12.158935546875,"ival-div",8000],[0.0009765625,"ival-true",800],[0.0,"ival-assert",2000],[0.031005859375,"ival-div",6800],[1.02001953125,"ival-pow",6000],[0.008056640625,"ival-div",5600],[0.0048828125,"ival-add",3200],[214.4990234375,"adjust",2000],[239.20849609375,"ival-pow",1200],[0.277099609375,"ival-add",2000],[32.64501953125,"ival-div",800],[24.058837890625,"ival-add",800],[13.085693359375,"exact",0]],"outcomes":[[943.89501953125,1,"valid",2730],[199.09326171875,0,"exit",1576],[2.0537109375,3,"exit",3],[480.2353515625,1,"exit",2418],[29.847900390625,4,"exit",8],[1599.12109375,2,"valid",2813],[9403.434326171875,5,"exit",5032],[320.71337890625,0,"valid",2713],[6.40185546875,2,"exit",5]],"time":14222.119873046875,"type":"sample"},{"compiler":[[13,8],[36,10],[36,10]],"confusion":[[131,0,55,70]],"explanations":[["pow.f64","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","sensitivity",71,0,[],[[1]]],["-.f64","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cancellation",115,0,[],[[]]]],"fperrors":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",115,0,false,0,false],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))",38,33,[4.2691679475695044e-225,-7.333310095151706e-109],0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))",0,0,false,0,false],["n",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) n)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,186],[0,70]],"maybe-confusion":[[131,0,0,55,0,70]],"memory":[[-4975920,64061392]],"mixsample":[[0.3115234375,"ival-add",1200],[11.53466796875,"adjust",800],[5.013427734375,"ival-div",0],[1.00390625,"ival-div",400],[33.73779296875,"ival-pow",1600],[0.202392578125,"ival-assert",0],[0.725341796875,"ival-div",1600],[5.846923828125,"ival-sub",0],[3.691650390625,"adjust",2000],[36.057373046875,"ival-pow",0],[0.75,"ival-div",1200],[3.80419921875,"ival-add",0],[0.07861328125,"ival-add",1600],[1.124267578125,"ival-div",800],[0.470458984375,"ival-add",400],[0.5283203125,"ival-true",0],[0.428955078125,"ival-div",2000],[47.69189453125,"ival-pow",400],[0.7958984375,"ival-add",800],[0.3984375,"exact",0],[0.09912109375,"ival-div",2400]],"outcomes":[[94.191650390625,1,"valid",268],[79.081298828125,2,"valid",148],[9.35986328125,0,"valid",96]],"time":261.240966796875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,8]],"egraph":[[0,185,13,0.000750605],[10,185,13,0.000908129],[9,177,13,0.00114619],[8,161,13,0.000908892],[7,112,13,0.000852209],[6,83,13,0.000844494],[5,51,13,0.00045773],[4,36,13,0.000241229],[3,28,13,0.000195329],[2,22,13,0.000149292],[1,18,13,0.000132566],[0,13,13,0.000167856],[0,8,13,0.000107611]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[-1799344,15484208]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":151.966064453125,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[46064,46064]],"time":0.089111328125,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",30.321848337453496,"binary64"]],"compiler":[[13,8]],"memory":[[323056,323056]],"time":1.6240234375,"type":"prune"},{"egraph":[[0,185,34,0.000650868],[10,185,34,0.000778225],[9,177,34,0.000917207],[8,161,34,0.000856614],[7,112,34,0.00076113],[6,83,34,0.000953225],[5,51,34,0.000491187],[4,36,34,0.000253161],[3,28,34,0.000200859],[2,22,34,0.000161845],[1,18,34,0.000270762],[0,13,34,0.000167574],[0,8,34,0.000103906]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) n)","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"locations":[["(/.f64 #s(literal 1 binary64) n)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0]],"memory":[[907120,907120]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(pow.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) n)","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.782958984375,"type":"simplify"},{"compiler":[[36,10]],"locations":[["(/.f64 #s(literal 1 binary64) n)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","accuracy",8.936021691306316],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",26.432067085998362]],"memory":[[5908240,13889408]],"mixsample":[[0.1572265625,"ival-add",1200],[6.729736328125,"adjust",800],[2.501220703125,"ival-div",0],[0.57275390625,"ival-div",400],[17.136474609375,"ival-pow",1600],[0.09716796875,"ival-assert",0],[0.312744140625,"ival-div",1600],[2.8583984375,"ival-sub",0],[1.899658203125,"adjust",2000],[17.723388671875,"ival-pow",0],[0.33544921875,"ival-div",1200],[2.09326171875,"ival-add",0],[0.037353515625,"ival-add",1600],[0.581787109375,"ival-div",800],[0.252685546875,"ival-add",400],[0.204833984375,"ival-true",0],[0.187255859375,"ival-div",2000],[23.567626953125,"ival-pow",400],[0.415771484375,"ival-add",800],[0.165771484375,"exact",0],[0.049072265625,"ival-div",2400]],"outcomes":[[47.223876953125,1,"valid",134],[40.395263671875,2,"valid",74],[4.719970703125,0,"valid",48]],"time":101.5849609375,"type":"localize"},{"count":[[4,43]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)"]],"memory":[[-4799824,3134016]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","x","(* x (+ 1 (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))"]],"series":[[1.25390625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","n","-inf"],[1.27783203125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","n","inf"],[0.365966796875,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","n","0"],[3.10498046875,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","x","-inf"],[2.302978515625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","x","inf"],[1.2451171875,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (+ x 1) (/ 1 n))","x","0"]],"time":10.72900390625,"type":"series"},{"count":[[43,42]],"egraph":[[0,8318,1082,0.089158319],[3,7118,1182,0.023232573],[2,2006,1182,0.024068813],[1,700,1251,0.006594594],[0,240,1357,0.00216969]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","x","(* x (+ 1 (/ 1 x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))"]],"memory":[[52704,48966672]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (+.f64 (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x))) x)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(+.f64 (/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (+.f64 (-.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (log.f64 x))) (log1p.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (log1p.f64 x))) (-.f64 (-.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (log.f64 x))) (*.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (pow.f64 (log.f64 x) #s(literal 4 binary64))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1/2 binary64) n) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n))) n)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64) (*.f64 #s(literal -1/24 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n))) (neg.f64 n))) n)) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal -1/6 binary64))) n) (log1p.f64 x)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":285.69287109375,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) n)"]],"memory":[[3699248,19889392]],"outputs":[["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n)) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n)))) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n))) (pow.f64 x (/.f64 #s(literal 2 binary64) n))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 3 binary64) n)) (pow.f64 x (/.f64 #s(literal 3 binary64) n))) (neg.f64 (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n))))))","(+.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)))","(+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n))))","(+.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))))","(+.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n)))) (neg.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n))))))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) #s(literal 0 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n)))) (/.f64 (pow.f64 x (/.f64 #s(literal 3 binary64) n)) (+.f64 (+.f64 (pow.f64 x (/.f64 #s(literal 2 binary64) n)) (pow.f64 (fma.f64 x x x) (/.f64 #s(literal 1 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) n)))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))))","(*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))) (pow.f64 x (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))) (pow.f64 x (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n)))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 n #s(literal 2 binary64)))) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 2 binary64) (*.f64 n #s(literal 2 binary64)))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) n)))","(*.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) n))))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) n)))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 n #s(literal 2 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 n #s(literal 2 binary64))) #s(literal 2 binary64))))","(*.f64 (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))) (/.f64 #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))) (/.f64 #s(literal 2 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) n)))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) n)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 n #s(literal 2 binary64)))) (pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x (+.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 n #s(literal 2 binary64)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x (+.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) n)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(exp.f64 (*.f64 (log1p.f64 x) (/.f64 #s(literal 2 binary64) (*.f64 n #s(literal 2 binary64)))))","(exp.f64 (*.f64 (/.f64 (log1p.f64 x) (*.f64 n #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (+.f64 (/.f64 (log1p.f64 x) (*.f64 n #s(literal 2 binary64))) (/.f64 (log1p.f64 x) (*.f64 n #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) n))))","(neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal -1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x (+.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) (fma.f64 x (+.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) n))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) n))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 n)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) n))","(*.f64 (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 n (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) n)","(/.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))"]],"time":336.43310546875,"type":"rewrite"},{"compiler":[[3323,493]],"memory":[[-110752,11068384]],"time":16.657958984375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",30.321848337453496,"binary64"],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",26.44652192864735,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",53.730100730833506,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",50.60950446467771,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",44.324575499534376,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",40.022655829940405,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",44.12383595470416,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","next",41.00747489864979,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",39.178074500973054,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","next",21.85680045488769,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","next",26.865091275848883,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","next",27.05631658619846,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",30.273220424955,"binary64"]],"compiler":[[13,8],[11,9],[48,27],[31,18],[19,13],[15,11],[86,47],[40,21],[58,31],[34,20],[23,14],[21,13],[23,14],[11,9],[48,27],[31,18],[19,13],[15,11],[86,47],[40,21],[58,31],[34,20],[23,14],[21,13],[23,14]],"count":[[117,13]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[116,12],"picked":[1,1]}],"memory":[[2135968,10281856]],"min-error":[[0.14961075218878211,"binary64"]],"time":12.0361328125,"type":"prune"},{"egraph":[[0,8452,352,0.063258527],[6,6800,355,0.022927376],[5,3029,367,0.025253907],[4,825,367,0.010527346],[3,318,373,0.002837456],[2,154,373,0.001520098],[1,95,373,0.000756345],[0,62,373,0.000556754],[0,37,373,0.000397796]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 x) #s(literal 2 binary64))","(log1p.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(log.f64 x)","n","#s(literal 1/2 binary64)","(-.f64 (log1p.f64 x) (log.f64 x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)"]],"locations":[["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","cost-diff",0],["(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","cost-diff",0],["(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","cost-diff",5],["(log1p.f64 x)","cost-diff",0],["(-.f64 (log1p.f64 x) (log.f64 x))","cost-diff",0],["(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","cost-diff",0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","cost-diff",0],["(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","cost-diff",0],["(/.f64 #s(literal 1 binary64) n)","cost-diff",0],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","cost-diff",0],["#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","cost-diff",0],["(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","cost-diff",0],["(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","cost-diff",2]],"memory":[[1008000,31684736]],"method":["egg-herbie"],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (*.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 1/2 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(*.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 1/2 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(*.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log1p.f64 x)) n) #s(literal 1/2 binary64) #s(literal 1 binary64)) (-.f64 (log1p.f64 x) (log.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 x) #s(literal 2 binary64))","(log1p.f64 x)","x","#s(literal 2 binary64)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(log.f64 x)","n","#s(literal 1/2 binary64)","(-.f64 (log1p.f64 x) (log.f64 x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","#s(literal 1 binary64)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (*.f64 n x)))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (*.f64 n x))","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","x","(log.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n) (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x))) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/.f64 (*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n) (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x))) x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(*.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n) (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","x","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","n","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (/.f64 #s(literal -1 binary64) n) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":205.183837890625,"type":"simplify"},{"compiler":[[333,33]],"locations":[["(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","accuracy",0.09375],["(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","accuracy",0.28222203836091364],["(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","accuracy",8.209270850805307],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","accuracy",27.12584233035058],["(log.f64 x)","accuracy",0.0],["(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","accuracy",0.19140625],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","accuracy",18.32640376786803],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",24.456573631964407],["(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) n)","accuracy",0.0],["(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","accuracy",0.109375],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","accuracy",26.81431044120303],["(pow.f64 x (/.f64 #s(literal 1 binary64) n))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) n)","accuracy",0.0],["#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","accuracy",13.915846177140715],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",26.432067085998362],["(pow.f64 (log.f64 x) #s(literal 2 binary64))","accuracy",0.46455004884221013],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","accuracy",18.400750445260016],["(-.f64 (log1p.f64 x) (log.f64 x))","accuracy",24.456573631964407],["(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","accuracy",24.532185848264188]],"memory":[[523984,58428400]],"mixsample":[[0.0888671875,"ival-sub",1200],[27.84912109375,"ival-div",0],[15.87646484375,"adjust",800],[0.097900390625,"ival-mult",1200],[1.69091796875,"ival-div",400],[0.816162109375,"ival-pow2",400],[18.021484375,"ival-pow",1600],[0.1259765625,"ival-assert",0],[0.375732421875,"ival-div",1600],[8.160400390625,"ival-sub",0],[0.34912109375,"ival-pow2",1200],[0.636474609375,"ival-sub",400],[1.652587890625,"ival-log",1600],[0.032958984375,"ival-log1p",400],[3.396240234375,"ival-log1p",1200],[13.427490234375,"ival-pow",0],[0.195556640625,"ival-mult",800],[2.908935546875,"ival-log",1200],[6.48046875,"ival-add",0],[0.1376953125,"ival-sub",800],[0.209228515625,"ival-add",400],[4.3125,"ival-log1p",0],[0.223388671875,"ival-div",2000],[23.344482421875,"ival-pow",400],[0.096435546875,"ival-div",2400],[7.7138671875,"ival-pow2",0],[0.24658203125,"ival-add",1200],[0.587158203125,"ival-pow2",800],[0.086669921875,"ival-pow2",2000],[1.96630859375,"ival-log1p",1600],[0.009033203125,"ival-div",3200],[0.057861328125,"ival-div",2800],[0.265380859375,"ival-log",2000],[4.925048828125,"adjust",2000],[0.59033203125,"ival-div",1200],[0.298095703125,"ival-mult",400],[6.79345703125,"ival-mult",0],[0.061767578125,"ival-add",1600],[0.02490234375,"ival-log",400],[0.69482421875,"ival-pow2",1600],[0.30810546875,"ival-log1p",2000],[0.713134765625,"ival-div",800],[5.019775390625,"ival-log",0],[0.283935546875,"ival-true",0],[0.54296875,"exact",0],[0.329833984375,"ival-add",800]],"outcomes":[[100.747314453125,1,"valid",137],[88.52978515625,2,"valid",72],[13.454833984375,0,"exit",39],[3.023193359375,0,"valid",8]],"time":241.9580078125,"type":"localize"},{"count":[[22,185]],"inputs":[["(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(log.f64 x)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))"]],"memory":[[45984,79893840]],"outputs":[["(- (* -1/2 (/ (pow (log x) 2) n)) (log x))","(- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (* 1/2 (/ 1 n)) 1/2))))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (+ (* 1/2 (/ 1 n)) (* x (- 1/3 (* 1/2 (/ 1 n))))) 1/2))))) (log x))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(/ (- (* -1/2 (/ (pow (log x) 2) n)) (log x)) n)","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (/ x n)) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (* 1/3 (/ 1 n)) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(* -1 (/ (pow (log x) 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (/ (pow x 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* -1 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* x (- (* 11/12 (/ x n)) (/ 1 n))) (/ 1 n))))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(exp (/ (log x) n))","(/ (exp (/ (log x) n)) (* n x))","(/ (exp (/ (log x) n)) x)","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) (pow x 2))","(* -1 (pow (log x) 2))","(- (pow x 2) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* -1 x))) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* x (- (* 11/12 x) 1)))) (pow (log x) 2))","(pow (log x) 2)","(log x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2)))))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (pow x 3))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2))))))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (/ 1 n))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (* n (pow x 3)))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))))))) (+ (/ 1/4 (* n (pow x 3))) (/ 1/2 (* n x)))) x)","(* -2 (/ (log (/ 1 x)) (* n x)))","(/ (+ (* -2 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))) (/ 1 (* n (pow x 2)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (/ 11/12 (* n (pow x 3))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))))) (/ 1 (* n (pow x 2)))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) n)","(+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* -2 (/ (log (/ 1 x)) x))","(/ (+ (* -2 (log (/ 1 x))) (+ (/ 1 x) (/ (log (/ 1 x)) x))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (/ 1 x) (/ (log (/ 1 x)) x)))) (/ 1 (pow x 2))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (* 1/2 (/ (log (/ 1 x)) (pow x 3))) (+ (/ 1 x) (+ (* 11/12 (/ 1 (pow x 3))) (/ (log (/ 1 x)) x)))))) (/ 1 (pow x 2))) x)","(pow (log (/ 1 x)) 2)","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n)))) 1/4) x)) (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) n)) (* 1/4 (/ 1 n))) x)) (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n x)))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x)) (/ 1 n))) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) x)) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) x)) (/ 1 n))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)","(+ (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n) (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) x)))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (/ (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) x)) (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) x)))) x))) x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow n 2)))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) (pow n 2))","(/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n)","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) x)))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) x)) (* n (+ (exp (/ (log x) n)) (* -1/2 (/ (exp (/ (log x) n)) x))))) (pow n 2))","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) (pow x 2))))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) (pow x 2))) (* n (+ (* -1/2 (/ (exp (/ (log x) n)) (pow x 2))) (/ (exp (/ (log x) n)) x)))) (pow n 2))","(/ 1/2 (pow n 2))","(- (log (+ 1 x)) (log x))","(- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x)) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(/ (- 1 (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (/ 1/2 (* n x)) (/ (log x) n)))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n))))))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n)))))))))) (* 1/2 (/ 1 x))) n)","(/ (- 1 (* 1/2 (/ 1 x))) (* n x))","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x)))))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) (pow x 2)))) (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))))))))) (/ 1/2 (pow x 2))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (+ (* -1 (- (log (+ 1 x)) (log x))) (* -1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x)))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) x)) (+ (* 1/6 (pow (log x) 3)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x))))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) (pow x 2))) (+ (* 1/6 (/ (pow (log x) 3) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2)))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))"]],"series":[[34.883056640625,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (log x) (/ 1/2 (* n n)))","n","-inf"],[28.114990234375,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (log x) (/ 1/2 (* n n)))","n","inf"],[55.526123046875,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (log x) (/ 1/2 (* n n)))","n","0"],[60.51611328125,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (log x) (/ 1/2 (* n n)))","x","-inf"],[28.77392578125,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (log x) (/ 1/2 (* n n)))","x","inf"],[35.333984375,"((+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n)) (/ 1 n) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ (pow x (/ 1 n)) x) n) (/ (pow x (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow (log x) 2) (log x) (/ 1/2 (* n n)))","x","0"]],"time":249.2080078125,"type":"series"},{"count":[[185,184]],"egraph":[[0,8308,4550,0.091027886],[1,2922,4801,0.027338607],[0,939,5170,0.008457339]],"inputs":[["(- (* -1/2 (/ (pow (log x) 2) n)) (log x))","(- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (* 1/2 (/ 1 n)) 1/2))))) (log x))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (+ (* 1/2 (/ 1 n)) (* x (- 1/3 (* 1/2 (/ 1 n))))) 1/2))))) (log x))","(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(/ (- (* -1/2 (/ (pow (log x) 2) n)) (log x)) n)","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (/ x n)) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (* 1/3 (/ 1 n)) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(* -1 (/ (pow (log x) 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (/ (pow x 2) n))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* -1 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* x (- (* 11/12 (/ x n)) (/ 1 n))) (/ 1 n))))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(exp (/ (log x) n))","(/ (exp (/ (log x) n)) (* n x))","(/ (exp (/ (log x) n)) x)","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) (pow x 2))","(* -1 (pow (log x) 2))","(- (pow x 2) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* -1 x))) (pow (log x) 2))","(- (* (pow x 2) (+ 1 (* x (- (* 11/12 x) 1)))) (pow (log x) 2))","(pow (log x) 2)","(log x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2)))))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (pow x 3))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2))))))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (/ 1 n))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))))) (/ 1/2 (* n x))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (* n (pow x 3)))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))))))) (+ (/ 1/4 (* n (pow x 3))) (/ 1/2 (* n x)))) x)","(* -2 (/ (log (/ 1 x)) (* n x)))","(/ (+ (* -2 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))) (/ 1 (* n (pow x 2)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (/ 11/12 (* n (pow x 3))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))))) (/ 1 (* n (pow x 2)))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) n)","(+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* -2 (/ (log (/ 1 x)) x))","(/ (+ (* -2 (log (/ 1 x))) (+ (/ 1 x) (/ (log (/ 1 x)) x))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (/ 1 x) (/ (log (/ 1 x)) x)))) (/ 1 (pow x 2))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (* 1/2 (/ (log (/ 1 x)) (pow x 3))) (+ (/ 1 x) (+ (* 11/12 (/ 1 (pow x 3))) (/ (log (/ 1 x)) x)))))) (/ 1 (pow x 2))) x)","(pow (log (/ 1 x)) 2)","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n)))) 1/4) x)) (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) n)) (* 1/4 (/ 1 n))) x)) (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n x)))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x)) (/ 1 n))) x))) x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) x)) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) x)) (/ 1 n))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)","(+ (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n) (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) x)))) x))) x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (/ (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) x)) (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) x)))) x))) x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow n 2)))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) (pow n 2))","(/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n)","(exp (/ (log (+ 1 x)) n))","(/ 1 n)","(/ (- (log (+ 1 x)) (log x)) n)","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) x)))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) x)) (* n (+ (exp (/ (log x) n)) (* -1/2 (/ (exp (/ (log x) n)) x))))) (pow n 2))","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) (pow x 2))))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) (pow x 2))) (* n (+ (* -1/2 (/ (exp (/ (log x) n)) (pow x 2))) (/ (exp (/ (log x) n)) x)))) (pow n 2))","(/ 1/2 (pow n 2))","(- (log (+ 1 x)) (log x))","(- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x)) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(/ (- 1 (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (/ 1/2 (* n x)) (/ (log x) n)))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n))))))) (* 1/2 (/ 1 x))) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n)))))))))) (* 1/2 (/ 1 x))) n)","(/ (- 1 (* 1/2 (/ 1 x))) (* n x))","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x)))))))) (/ 1/2 (pow x 2))) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) (pow x 2)))) (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))))))))) (/ 1/2 (pow x 2))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (+ (* -1 (- (log (+ 1 x)) (log x))) (* -1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x)))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) x)) (+ (* 1/6 (pow (log x) 3)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x))))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) (* n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) (pow x 2))) (+ (* 1/6 (/ (pow (log x) 3) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2)))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))"]],"memory":[[9857872,56215584]],"method":["egg-herbie"],"outputs":[["(- (* -1/2 (/ (pow (log x) 2) n)) (log x))","(-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))","(- (+ x (* -1/2 (/ (pow (log x) 2) n))) (log x))","(fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (-.f64 x (log.f64 x)))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (* 1/2 (/ 1 n)) 1/2))))) (log x))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)))","(- (+ (* -1/2 (/ (pow (log x) 2) n)) (* x (+ 1 (* x (- (+ (* 1/2 (/ 1 n)) (* x (- 1/3 (* 1/2 (/ 1 n))))) 1/2))))) (log x))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) n)) x (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) x #s(literal 1 binary64)) x (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)))","(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) x (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(/ (- (* -1/2 (/ (pow (log x) 2) n)) (log x)) n)","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n)","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (/ x n)) (/ (log x) n))","(+.f64 (/.f64 x n) (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(fma.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(- (+ (* -1/2 (/ (pow (log x) 2) (pow n 2))) (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (* 1/3 (/ 1 n)) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (/ (log x) n))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) x (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(* -1 (/ (pow (log x) 2) n))","(/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n))","(+ (* -1 (/ (pow (log x) 2) n)) (/ (pow x 2) n))","(fma.f64 (/.f64 x n) x (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n)))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* -1 (/ x n)) (/ 1 n))))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 x n)) (*.f64 x x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n)))","(+ (* -1 (/ (pow (log x) 2) n)) (* (pow x 2) (+ (* x (- (* 11/12 (/ x n)) (/ 1 n))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) (/.f64 x n) (/.f64 #s(literal -1 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) (*.f64 x x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (neg.f64 n)))","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) x (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(exp (/ (log x) n))","(exp.f64 (/.f64 (log.f64 x) n))","(/ (exp (/ (log x) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (exp (/ (log x) n)) x)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(-.f64 (*.f64 (fma.f64 (/.f64 x n) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) n)) x) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(-.f64 (fma.f64 (fma.f64 (/.f64 x n) #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (*.f64 x x) (/.f64 x n)) (/.f64 (log.f64 x) n))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x) (log.f64 x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x) (log.f64 x))","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)","(*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) x)","(/.f64 (fma.f64 x (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) x)","(/ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))","(*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x)))","(/ (+ (* (exp (/ (log x) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ (* x (exp (/ (log x) n))) n)) (pow x 2))","(/.f64 (fma.f64 x (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (*.f64 (exp.f64 (/.f64 (log.f64 x) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) (*.f64 x x))","(* -1 (pow (log x) 2))","(neg.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(- (pow x 2) (pow (log x) 2))","(-.f64 (*.f64 x x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(- (* (pow x 2) (+ 1 (* -1 x))) (pow (log x) 2))","(-.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(- (* (pow x 2) (+ 1 (* x (- (* 11/12 x) 1)))) (pow (log x) 2))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow (log x) 2)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(log x)","(log.f64 x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) x)","(/.f64 (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2)))))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x))) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (+ (* -1 (/ (log (/ 1 x)) n)) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (pow x 3))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) x)) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (pow x 2))) (/ 1/3 (pow x 2))))))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal -1/2 binary64) (/.f64 #s(literal 11/12 binary64) n)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x))) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n)))) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) x))) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (*.f64 x x)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (*.f64 x x)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))) x)","(/ (+ 1 (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (/.f64 (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)) x) n)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (/ 1 n))) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) n) (fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) n) #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2)))))))) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) n) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) n) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 (*.f64 n x) x))) (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)))) x)","(/ (- (+ (* -1 (/ (log (/ 1 x)) (pow n 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (log (/ 1 x)) n)) (* 11/12 (/ 1 n))) (* n (pow x 3)))) (+ (* 1/2 (/ (+ (/ 1 n) (/ (log (/ 1 x)) n)) (* n x))) (+ (* 1/2 (/ (- (* -2/3 (/ (log (/ 1 x)) n)) (/ 1 n)) (* n (pow x 2)))) (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))))))) (+ (/ 1/4 (* n (pow x 3))) (/ 1/2 (* n x)))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal -1/2 binary64) (/.f64 #s(literal 11/12 binary64) n)) n) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (log.f64 x) n)) x) n) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 (*.f64 n x) x))) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 #s(literal 1 binary64) n)) (/.f64 (/.f64 (log.f64 x) n) n)))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n) (/.f64 (/.f64 #s(literal 1/2 binary64) x) n))) x)","(* -2 (/ (log (/ 1 x)) (* n x)))","(*.f64 (/.f64 (/.f64 (log.f64 x) n) x) #s(literal 2 binary64))","(/ (+ (* -2 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x)))) x)","(/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (/.f64 (log.f64 x) n) x))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))) (/ 1 (* n (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64) (+.f64 (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (/.f64 (log.f64 x) n) x)) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x)))) x)","(/ (- (+ (* -2 (/ (log (/ 1 x)) n)) (+ (* -2/3 (/ (log (/ 1 x)) (* n (pow x 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* n (pow x 3)))) (+ (/ 11/12 (* n (pow x 3))) (+ (/ 1 (* n x)) (/ (log (/ 1 x)) (* n x))))))) (/ 1 (* n (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (log.f64 x) n) #s(literal 2 binary64) (+.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (neg.f64 (log.f64 x)) n) (+.f64 (/.f64 #s(literal 11/12 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (/.f64 (log.f64 x) n) x)))) (/.f64 (fma.f64 #s(literal 2/3 binary64) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) n)) (*.f64 x x)))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(exp.f64 (/.f64 (log.f64 x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x)) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) (*.f64 x x))) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) x)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x) n)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(+.f64 (log.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (log.f64 x) (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) n)","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)","(+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n))","(* -2 (/ (log (/ 1 x)) x))","(*.f64 (/.f64 (log.f64 x) x) #s(literal 2 binary64))","(/ (+ (* -2 (log (/ 1 x))) (+ (/ 1 x) (/ (log (/ 1 x)) x))) x)","(/.f64 (fma.f64 #s(literal 2 binary64) (log.f64 x) (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (log.f64 x) x))) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (/ 1 x) (/ (log (/ 1 x)) x)))) (/ 1 (pow x 2))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -2/3 binary64) x) (/.f64 (neg.f64 (log.f64 x)) x) (fma.f64 #s(literal 2 binary64) (log.f64 x) (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (log.f64 x) x)))) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x)","(/ (- (+ (* -2 (log (/ 1 x))) (+ (* -2/3 (/ (log (/ 1 x)) (pow x 2))) (+ (* 1/2 (/ (log (/ 1 x)) (pow x 3))) (+ (/ 1 x) (+ (* 11/12 (/ 1 (pow x 3))) (/ (log (/ 1 x)) x)))))) (/ 1 (pow x 2))) x)","(/.f64 (-.f64 (fma.f64 #s(literal 2 binary64) (log.f64 x) (fma.f64 (/.f64 #s(literal -2/3 binary64) x) (/.f64 (neg.f64 (log.f64 x)) x) (fma.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (+.f64 (-.f64 (/.f64 #s(literal 11/12 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (log.f64 x) x)) (/.f64 #s(literal 1 binary64) x))))) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x)","(pow (log (/ 1 x)) 2)","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal -1 binary64) #s(literal 1 binary64)) x)","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/2) x))) 1) x))","(/.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/2 binary64))) (neg.f64 x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) #s(literal -1 binary64) #s(literal 1 binary64)) x)","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1/3 binary64))) x)) #s(literal 1/2 binary64)) x) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) #s(literal -1 binary64)) (neg.f64 x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n)))) 1/4) x)) (* 1/2 (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/3) x)) (* 1/2 (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)))) 1/2) x))) 1) x))","(/.f64 (-.f64 (-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (-.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/4 binary64) (-.f64 (/.f64 #s(literal 11/24 binary64) n) #s(literal 1/4 binary64))) x)) #s(literal 1/3 binary64)) x)) #s(literal 1/2 binary64)) (neg.f64 x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) #s(literal 1 binary64)) (neg.f64 x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (neg.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n))) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (-.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) (neg.f64 x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (fma.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x)))) x)) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) 1) (* n x)))","(/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) (neg.f64 (*.f64 n x)))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) n)) x) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) n)) (neg.f64 x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n)) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 #s(literal 1/3 binary64) n)) x)) (/.f64 #s(literal 1/2 binary64) n)) x) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) n)) (neg.f64 x))","(* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow n 2))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) n)) (* 1/4 (/ 1 n))) x)) (* 1/2 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) n))) (* 1/2 (/ 1 n))) x))) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) (/.f64 #s(literal 1/2 binary64) n)) n) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/4 binary64) (/.f64 #s(literal 11/24 binary64) n)) n) (/.f64 #s(literal 1/4 binary64) n)) x)) (/.f64 #s(literal 1/3 binary64) n)) x)) (/.f64 #s(literal 1/2 binary64) n)) x) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (neg.f64 n)) #s(literal 1 binary64)) n)) (neg.f64 x))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (* n x)))","(*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (*.f64 n x)) #s(literal 2 binary64))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x))) x))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) x)) (neg.f64 x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n)) x)) (/ 1 n))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) n)) x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 x))) (neg.f64 x))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* 11/12 (/ 1 n))) x)) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ 1 n))) x)) (/ 1 n))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) n)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n) #s(literal -1/2 binary64) (/.f64 #s(literal 11/12 binary64) n)) x)) x)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 x))) (neg.f64 x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(-.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (neg.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n))) x))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(-.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (neg.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x)) (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)))) (neg.f64 x)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) x)","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) n) x) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) n) x) (/.f64 #s(literal 1/3 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1/2 binary64) n)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) n)) (neg.f64 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) x))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)","(+ (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n) (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))","(fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) x))","(*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) x) #s(literal 2 binary64))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 x)))))) x))) x))","(/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) x)) (neg.f64 x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 x)))))) x)))) x))) x))","(/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64)) x)) (neg.f64 x))) (neg.f64 x))","(* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 x))))) (* -1 (/ (+ 1 (+ (* -1 (/ (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 x)))))) x)) (* -2/3 (+ (log -1) (* -1 (log (/ -1 x))))))) x)))) x))) x))","(/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) x) #s(literal -1 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal -2/3 binary64) #s(literal 1 binary64))) x)) (neg.f64 x))) (neg.f64 x))","(pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) n)","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) n)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) (pow n 2)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 n n)) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (- (pow (log (+ 1 x)) 2) (pow (log x) 2))) (* n (- (log (+ 1 x)) (log x)))) (pow n 2))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) (*.f64 n n))","(/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) x)))","(*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 (*.f64 n x) n)) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) x)) (* n (+ (exp (/ (log x) n)) (* -1/2 (/ (exp (/ (log x) n)) x))))) (pow n 2))","(/.f64 (fma.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal -1/2 binary64) (exp.f64 (/.f64 (log.f64 x) n))) n (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) #s(literal 1/2 binary64))) (*.f64 n n))","(* 1/2 (/ (exp (/ (log x) n)) (* (pow n 2) (pow x 2))))","(*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 (*.f64 (*.f64 n x) n) x)) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (/ (exp (/ (log x) n)) (pow x 2))) (* n (+ (* -1/2 (/ (exp (/ (log x) n)) (pow x 2))) (/ (exp (/ (log x) n)) x)))) (pow n 2))","(/.f64 (fma.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) #s(literal -1/2 binary64) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x)) n (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) #s(literal 1/2 binary64))) (*.f64 n n))","(/ 1/2 (pow n 2))","(/.f64 (/.f64 #s(literal 1/2 binary64) n) n)","(- (log (+ 1 x)) (log x))","(-.f64 (log1p.f64 x) (log.f64 x))","(- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (log.f64 x)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/24 binary64) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/24 binary64) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (log.f64 x))))) n)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) (log x)) n)","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(+ 1 (/ (log x) n))","(+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))))","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))) n)","(+ (/ 1 x) (/ (log x) (* n x)))","(+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))","(+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))","(fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))","(+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))))","(fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))))","(/ (- 1 (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (/ 1/2 (* n x)) (/ (log x) n)))) (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (/.f64 (/.f64 (log.f64 x) n) x) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1/2 binary64) x) n))) (/.f64 (log.f64 x) n)) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n))))))) (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) x) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n)) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) n) (/.f64 (log.f64 x) n))))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- (+ 1 (+ (* -1/2 (/ (log x) (* n x))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) x))) (+ (* 1/2 (/ (log x) (* (pow n 2) x))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (/ 1/2 (* n x)) (/ (log x) n)))))))))) (* 1/2 (/ 1 x))) n)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (fma.f64 (/.f64 #s(literal -1/12 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (pow.f64 n #s(literal 3 binary64))) #s(literal 1/4 binary64) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) x) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n)) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) n) (/.f64 (log.f64 x) n)))))))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) n)","(/ (- 1 (* 1/2 (/ 1 x))) (* n x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))) (/ 1/2 (pow x 2))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n) (+.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x)))))))) (/ 1/2 (pow x 2))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) (*.f64 x x)) (/.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) x)) (+.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) n)","(/ (- (+ (* -1/2 (/ (log x) (* n (pow x 2)))) (+ (* -1/4 (/ (pow (log x) 2) (* (pow n 2) (pow x 2)))) (+ (* -1/12 (/ (pow (log x) 3) (* (pow n 3) (pow x 2)))) (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/4 (/ (pow (log x) 2) (* (pow n 3) (pow x 2)))) (+ (* 1/2 (/ (log x) (* (pow n 2) (pow x 2)))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n (pow x 2))) (+ (/ 1 x) (/ (log x) (* n x))))))))))) (/ 1/2 (pow x 2))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (log.f64 x) n) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) (fma.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 x x)) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 x x)) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) (pow.f64 n #s(literal 3 binary64))) (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (log.f64 x) n) n) (*.f64 x x)) (/.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) x)) (+.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) n) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))))))))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log.f64 x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal -1/2 binary64) (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (+.f64 (-.f64 (/.f64 (+.f64 (/.f64 (*.f64 #s(literal 1/6 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64)))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (neg.f64 n)) (log1p.f64 x)) (log.f64 x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (+.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (*.f64 #s(literal -1/24 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64)))) n) (*.f64 #s(literal -1/6 binary64) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))))) n) #s(literal -1 binary64) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (neg.f64 n)) (log1p.f64 x)) (log.f64 x)) (neg.f64 n))","(* -1 (/ (+ (* -1 (- (log (+ 1 x)) (log x))) (* -1/2 (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal -1/2 binary64) (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log.f64 x))) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (neg.f64 n)) (log1p.f64 x)) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x)) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 x) #s(literal 2 binary64)))) (neg.f64 n)) (log.f64 x)) n))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (log.f64 x) n) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) x) #s(literal 1/2 binary64) (/.f64 (log.f64 x) x)) n) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (log.f64 x) x) (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) x) #s(literal -1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) n)) n) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1/2 (/ (pow (log x) 2) (* n x)))) n)) (/ 1 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) (/.f64 (neg.f64 (log.f64 x)) x)) n))","(+ (* -1 (/ (+ (* -1 (/ (log x) x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) (* n x))) (* 1/2 (/ (pow (log x) 2) x))) n))) n)) (/ 1 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) x) #s(literal 1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (neg.f64 n)) (/.f64 (log.f64 x) x)) n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) n))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) n)","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x)))) n)) (* 1/2 (/ 1 x))) 1) n))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x)) (log.f64 x)) n)) #s(literal 1 binary64)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(/.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (-.f64 (log.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (log.f64 x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/4 binary64))) n)) (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x))) n)) #s(literal -1 binary64) #s(literal 1 binary64)) n)","(* -1 (/ (- (+ (* -1 (/ (+ (log x) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) x)) (+ (* 1/6 (pow (log x) 3)) (* 1/4 (/ (pow (log x) 2) x)))) n)) (+ (* -1/2 (/ (log x) x)) (+ (* -1/2 (pow (log x) 2)) (* 1/4 (/ (pow (log x) 2) x))))) n)) (+ (* -1/2 (/ (log x) x)) (* 1/2 (/ 1 x))))) n)) (* 1/2 (/ 1 x))) 1) n))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (+.f64 (-.f64 (fma.f64 (/.f64 (log.f64 x) x) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (log.f64 x) x) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/4 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) #s(literal -1/12 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal 1/4 binary64) (*.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal 1/6 binary64)))) (neg.f64 n)))) n)) (log.f64 x)) n)) #s(literal 1 binary64)) (neg.f64 n))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) (* n x)))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) x) (+.f64 (/.f64 (log.f64 x) x) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))) n) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) x) (+.f64 (/.f64 (log.f64 x) x) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (log.f64 x) x) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x)) (*.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) x) #s(literal 1/4 binary64))) n)) (neg.f64 n)) #s(literal -1 binary64) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x)) n)","(* -1 (/ (- (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/12 (/ (pow (log x) 3) (pow x 2))) (+ (* 1/6 (/ (pow (log x) 3) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* -1/2 (/ (pow (log x) 2) x)) (* 1/4 (/ (pow (log x) 2) (pow x 2)))))) n)) (+ (* -1/2 (/ (log x) (pow x 2))) (+ (* 1/2 (/ 1 (pow x 2))) (/ (log x) x)))) n)) (/ 1/2 (pow x 2))) (/ 1 x)) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (log.f64 x) x) (+.f64 (/.f64 (log.f64 x) x) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))) (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (log.f64 x) x) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x)) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) x) #s(literal 1/4 binary64) (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) x) #s(literal -1/12 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) x) #s(literal 1/4 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) x) #s(literal 1/6 binary64)))) (neg.f64 n)))) n)) n) #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)) (neg.f64 n))"]],"stop":[["iter limit",1],["node limit",1]],"time":243.928955078125,"type":"simplify"},{"count":[[22,246]],"inputs":[["(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","(/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64))","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","(/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (log1p.f64 x) (log.f64 x))","(log1p.f64 x)","(fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 (log.f64 x) #s(literal 2 binary64))","(log.f64 x)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))"]],"memory":[[252096,24128112]],"outputs":[["(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","#s(approx x (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","(-.f64 #s(approx x #s(literal 2 binary64)) x)","#s(approx x #s(literal 2 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 2 binary64))","(+.f64 x x)","(+.f64 #s(literal 2 binary64) x)","(-.f64 x #s(literal 2 binary64))","(-.f64 x x)","(-.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","(*.f64 x x)","(*.f64 #s(literal 2 binary64) x)","(/.f64 x #s(literal 2 binary64))","(/.f64 x x)","(/.f64 #s(literal 2 binary64) x)","(exp.f64 (log.f64 x))","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/8 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(approx x x)","x","(neg.f64 x)","(+.f64 x #s(literal 2 binary64))","(+.f64 x x)","(+.f64 #s(literal 2 binary64) x)","(-.f64 x #s(literal 2 binary64))","(-.f64 x x)","(-.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","(*.f64 x x)","(*.f64 #s(literal 2 binary64) x)","(/.f64 x #s(literal 2 binary64))","(/.f64 x x)","(/.f64 #s(literal 2 binary64) x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 2 binary64))","(+.f64 x x)","(+.f64 #s(literal 2 binary64) x)","(-.f64 x #s(literal 2 binary64))","(-.f64 x x)","(-.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","(*.f64 x x)","(*.f64 #s(literal 2 binary64) x)","(/.f64 x #s(literal 2 binary64))","(/.f64 x x)","(/.f64 #s(literal 2 binary64) x)","(exp.f64 (log.f64 x))","#s(approx x (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","x","(neg.f64 x)","(+.f64 x #s(literal 2 binary64))","(+.f64 x x)","(+.f64 #s(literal 2 binary64) x)","(-.f64 x #s(literal 2 binary64))","(-.f64 x x)","(-.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","(*.f64 x x)","(*.f64 #s(literal 2 binary64) x)","(/.f64 x #s(literal 2 binary64))","(/.f64 x x)","(/.f64 #s(literal 2 binary64) x)","(exp.f64 (log.f64 x))","#s(approx x x)","x","(neg.f64 x)","(+.f64 x #s(literal 2 binary64))","(+.f64 x x)","(+.f64 #s(literal 2 binary64) x)","(-.f64 x #s(literal 2 binary64))","(-.f64 x x)","(-.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","(*.f64 x x)","(*.f64 #s(literal 2 binary64) x)","(/.f64 x #s(literal 2 binary64))","(/.f64 x x)","(/.f64 #s(literal 2 binary64) x)","(exp.f64 (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","(neg.f64 (log.f64 x))","(+.f64 (log.f64 x) (log.f64 x))","(+.f64 (log.f64 x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 x))","(-.f64 (log.f64 x) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (log.f64 x))","(*.f64 (log.f64 x) (log.f64 x))","(*.f64 (log.f64 x) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (log.f64 x))","(/.f64 (log.f64 x) #s(literal 2 binary64))","(/.f64 (log.f64 x) (log.f64 x))","(/.f64 #s(literal 2 binary64) (log.f64 x))","(exp.f64 (log.f64 (log.f64 x)))","(log.f64 x)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/8 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)"]],"time":432.980224609375,"type":"rewrite"},{"compiler":[[16537,1838]],"memory":[[-12752240,38220768]],"time":102.410888671875,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",30.321848337453496,"binary64"],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","next",26.44652192864735,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",50.60950446467771,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",44.324575499534376,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",40.022655829940405,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","fresh",45.56703955617931,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","fresh",57.887895267056976,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","fresh",62.071176035957755,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","fresh",57.67640930460609,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","fresh",61.56548510355467,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","fresh",62.256972195159655,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","fresh",57.8884477355419,"binary64"],["(-.f64 #s(approx x #s(literal 2 binary64)) x)","fresh",61.523581159467625,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",39.178074500973054,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",38.36445906576136,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",38.24247527423564,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",46.56151785036033,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","next",45.85242999088469,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",26.865091275848883,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","fresh",35.57780446508705,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","fresh",39.76169838530061,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","fresh",58.76834911911841,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","fresh",52.80744460667911,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","fresh",58.82123490911341,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","fresh",44.08688036959228,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","fresh",44.26654562544607,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","fresh",43.97960144726985,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","fresh",26.926414880419227,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","next",46.546067041278036,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","fresh",33.7047026789813,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","next",37.53102506431383,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","fresh",43.90167296593211,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","fresh",46.570764947287074,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","fresh",38.814447464411884,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",30.273220424955,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","fresh",46.632270493880256,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","fresh",42.01880554159236,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","fresh",46.55063993520331,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (-.f64 (fma.f64 (fma.f64 (/.f64 x n) #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (*.f64 x x) (/.f64 x n)) (/.f64 (log.f64 x) n))))","fresh",44.068487322534025,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) (*.f64 n n))))","fresh",34.04854575181306,"binary64"],["#s(approx x x)","next",62.073419481208,"binary64"]],"compiler":[[13,8],[11,9],[31,18],[19,13],[15,11],[13,10],[13,11],[13,11],[13,10],[13,11],[13,11],[11,9],[5,5],[58,31],[38,23],[38,23],[38,23],[36,21],[23,14],[21,13],[21,13],[21,12],[21,13],[19,11],[33,21],[30,19],[19,12],[23,14],[42,27],[35,23],[27,17],[28,17],[49,25],[51,30],[23,14],[49,32],[41,26],[33,21],[44,25],[62,35],[3,3],[11,9],[31,18],[19,13],[13,10],[13,11],[13,11],[13,10],[13,11],[13,11],[11,9],[5,5],[58,31],[38,23],[38,23],[38,23],[36,21],[21,13],[21,13],[21,12],[21,13],[19,11],[33,21],[30,19],[19,12],[23,14],[42,27],[35,23],[27,17],[28,17],[49,25],[51,30],[23,14],[49,32],[41,26],[33,21],[44,25],[62,35],[3,3]],"count":[[397,41]],"kept":[{"done":[1,1],"fresh":[7,5],"new":[384,33],"picked":[5,2]}],"memory":[[-2235344,32848800]],"min-error":[[0.10658360241743065,"binary64"]],"time":47.10888671875,"type":"prune"},{"egraph":[[0,8037,346,0.041632377],[6,6886,349,0.015967071],[5,2626,349,0.028153075],[4,729,349,0.012889675],[3,343,349,0.003251764],[2,173,353,0.00244838],[1,113,365,0.001037566],[0,76,368,0.000674698],[0,48,376,0.000497726]],"inputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","x","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","#s(approx x x)","x","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x)","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)","(-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) x)","#s(literal 1/4 binary64)","x","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","(neg.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(/.f64 x x)","x","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","n","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)"]],"locations":[["(/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","cost-diff",0],["(/.f64 x x)","cost-diff",2],["(fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","cost-diff",2],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","cost-diff",0],["(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64))","cost-diff",1],["(fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64))","cost-diff",1],["(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","cost-diff",1],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","cost-diff",0],["#s(approx x x)","cost-diff",0],["(log1p.f64 x)","cost-diff",0],["(/.f64 (log1p.f64 x) n)","cost-diff",0],["(exp.f64 (/.f64 (log1p.f64 x) n))","cost-diff",0],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","cost-diff",0]],"memory":[[1178224,23820896]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","x","n","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","#s(approx x x)","x","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal -1 binary64)) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n)","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal -1 binary64)) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x)))","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal -1 binary64)) x))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal -1 binary64)) x)","(fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x)","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64))","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)","(-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) x)","#s(literal 1/4 binary64)","x","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","(neg.f64 x)","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(/.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","(fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(/.f64 x x)","#s(literal 1 binary64)","x","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","#s(literal 1/2 binary64)","(*.f64 n n)","n","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)","(pow.f64 x (/.f64 #s(literal 1 binary64) n))","(/.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":168.339111328125,"type":"simplify"},{"compiler":[[292,42]],"locations":[["(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","accuracy",0.30175328836091364],["(/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","accuracy",2.7163948376034646],["(fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","accuracy",5.785108774094733],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","accuracy",40.09245130189701],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)","accuracy",0.23046875],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n)","accuracy",0.234375],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","accuracy",27.450815857387084],["#s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x)))","accuracy",36.99727343441758],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","accuracy",0.234375],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","accuracy",27.450815857387084],["#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","accuracy",35.84323266325006],["#s(approx x x)","accuracy",0.0],["(log1p.f64 x)","accuracy",0.0],["(exp.f64 (/.f64 (log1p.f64 x) n))","accuracy",0.014454842648988641],["(/.f64 (log1p.f64 x) n)","accuracy",0.08984375],["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","accuracy",26.432067085998362]],"memory":[[4420576,63164000]],"mixsample":[[33.802734375,"ival-div",0],[16.814208984375,"adjust",800],[2.989990234375,"ival-exp",0],[0.850830078125,"ival-div",400],[16.690673828125,"ival-pow",1600],[0.396484375,"ival-div",1600],[0.121337890625,"ival-assert",0],[11.62451171875,"ival-sub",0],[0.004150390625,"ival-sub",400],[2.196044921875,"ival-log1p",800],[6.068603515625,"const",0],[2.0947265625,"ival-log",1600],[3.42333984375,"ival-log1p",400],[1.777099609375,"ival-log1p",1200],[12.82763671875,"ival-pow",0],[9.29296875,"ival-add",0],[0.16064453125,"ival-add",400],[0.273193359375,"ival-div",2000],[3.664306640625,"ival-exp",1600],[4.150390625,"ival-log1p",0],[23.1015625,"ival-pow",400],[0.07958984375,"ival-div",2400],[0.139892578125,"ival-add",1200],[2.867431640625,"ival-exp",400],[2.58154296875,"ival-log1p",1600],[0.01416015625,"ival-div",2800],[7.01220703125,"adjust",2000],[0.850830078125,"ival-div",1200],[10.811767578125,"ival-mult",0],[0.03173828125,"ival-add",1600],[2.87451171875,"ival-log",400],[0.1796875,"ival-log1p",2000],[0.86962890625,"ival-div",800],[4.89111328125,"ival-log",0],[0.28662109375,"ival-true",0],[0.031005859375,"ival-log",800],[0.81396484375,"exact",0],[0.237060546875,"ival-add",800],[1.111083984375,"ival-neg",0]],"outcomes":[[121.455322265625,1,"valid",121],[115.024658203125,2,"valid",89],[17.540283203125,0,"valid",46]],"time":293.572021484375,"type":"localize"},{"count":[[21,136]],"inputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","#s(approx x x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","(fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(/.f64 x x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))"]],"memory":[[-708176,71561200]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(/ x n)","(* x (+ (* -1/2 (/ x n)) (/ 1 n)))","(* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n)))","(* x (+ (* x (- (* x (+ (* -1/4 (/ x n)) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 n)))) (/ 1 n)))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(/ 1 x)","(/ -1/4 (pow x 4))","(/ (- (* 1/3 x) 1/4) (pow x 4))","(/ (- (* x (+ 1/3 (* -1/2 x))) 1/4) (pow x 4))","(/ (- (* x (+ 1/3 (* x (- x 1/2)))) 1/4) (pow x 4))","(/ 1/4 (pow x 3))","(/ (+ 1/4 (* -1/3 x)) (pow x 3))","(/ (+ 1/4 (* x (- (* 1/2 x) 1/3))) (pow x 3))","(/ (+ 1/4 (* x (- (* x (+ 1/2 (* -1 x))) 1/3))) (pow x 3))","(/ -1/4 (pow x 2))","(/ (- (* 1/3 x) 1/4) (pow x 2))","(/ (- (* x (+ 1/3 (* -1/2 x))) 1/4) (pow x 2))","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (log x) n)) n)) (* 1/2 (/ 1 n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (log x) n)) n)) (* 1/2 (/ 1 n))) x)","(/ 1/4 (pow x 2))","(/ (+ 1/4 (* -1/3 x)) (pow x 2))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(* -1 (/ (log (/ 1 x)) n))","(+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x)))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x))) (/ 1/2 (* n (pow x 2))))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (* 1/3 (/ 1 (* n (pow x 3)))))) (* 1/2 (/ 1 (* n (pow x 2)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","-1","(- (* 1/2 (/ 1 x)) 1)","(- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2))))","(- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2))))","-1/2","(- (* 1/3 (/ 1 x)) 1/2)","(- (* 1/3 (/ 1 x)) (+ 1/2 (/ 1/4 (pow x 2))))","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) n)) (* 1/2 (/ 1 n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) n)) (* 1/2 (/ 1 n))) x)","(/ -1/3 x)","(/ (- (* 1/4 (/ 1 x)) 1/3) x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (/ 1 (* n x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x)) (/ (log -1) n)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1)","(- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2)","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* 1/2 (/ 1 n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* 1/2 (/ 1 n))) x)","(* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ (log (+ 1 x)) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ 1/2 (pow n 2))","(/ (+ 1/2 (* n (- (exp (/ (log x) n)) 1/2))) (pow n 2))","(/ 1/2 (* (pow n 2) x))","(/ (+ (* n (- (/ (exp (/ (log x) n)) x) (* 1/2 (/ 1 x)))) (* 1/2 (/ 1 x))) (pow n 2))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(/ 1/2 n)","(/ (+ 1/2 (+ (* 1/2 (/ 1 n)) (/ (log x) n))) n)","(/ (+ 1/2 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ (log x) n)))) n)","(/ (+ 1/2 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ (log x) n))))) n)","(/ 1/2 (* n x))","(/ (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x)))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x))))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (+ 1/2 (log x)) n)) 1/2) n))","(* -1 (/ (- (* -1 (/ (+ 1/2 (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)) 1/2) n))","(* -1 (/ (- (* -1 (/ (+ 1/2 (+ (log x) (* -1 (/ (+ (* -1/2 (pow (log x) 2)) (* -1/6 (/ (pow (log x) 3) n))) n)))) n)) 1/2) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ 1 x)) (/ (log x) x)) n)) (* 1/2 (/ 1 x))) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ 1 x)) (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x))) n)) (* 1/2 (/ 1 x))) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (+ (* 1/2 (/ 1 x)) (/ (log x) x))) n)) (* 1/2 (/ 1 x))) n))"]],"series":[[26.058837890625,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) x (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (/ (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (neg x)) (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (log (+ 1 x)) (log x)) (/ (- (log (+ 1 x)) (log x)) n) (/ (- (/ 1/4 x) 1/3) x) (/ 1/2 (* n n)))","n","-inf"],[24.22900390625,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) x (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (/ (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (neg x)) (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (log (+ 1 x)) (log x)) (/ (- (log (+ 1 x)) (log x)) n) (/ (- (/ 1/4 x) 1/3) x) (/ 1/2 (* n n)))","n","inf"],[17.714111328125,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) x (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (/ (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (neg x)) (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (log (+ 1 x)) (log x)) (/ (- (log (+ 1 x)) (log x)) n) (/ (- (/ 1/4 x) 1/3) x) (/ 1/2 (* n n)))","n","0"],[15.603759765625,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) x (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (/ (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (neg x)) (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (log (+ 1 x)) (log x)) (/ (- (log (+ 1 x)) (log x)) n) (/ (- (/ 1/4 x) 1/3) x) (/ 1/2 (* n n)))","x","-inf"],[15.43505859375,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) x (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (/ (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (neg x)) (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (log (+ 1 x)) (log x)) (/ (- (log (+ 1 x)) (log x)) n) (/ (- (/ 1/4 x) 1/3) x) (/ 1/2 (* n n)))","x","inf"],[12.662109375,"((- (exp (/ (log (+ 1 x)) n)) (pow x (/ 1 n))) (exp (/ (log (+ 1 x)) n)) (/ (log (+ 1 x)) n) (log (+ 1 x)) x (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (/ 1 x) (/ (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (neg x)) (+ (* (/ (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) x) -1) -1) (+ (* (/ (- (/ 1/4 x) 1/3) x) -1) -1/2) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) x) (- (log (+ 1 x)) (log x)) (/ (- (log (+ 1 x)) (log x)) n) (/ (- (/ 1/4 x) 1/3) x) (/ 1/2 (* n n)))","x","0"]],"time":115.825927734375,"type":"series"},{"count":[[136,135]],"egraph":[[0,8120,2275,0.082309189],[2,4262,2423,0.028386937],[1,1551,2537,0.014905468],[0,525,2701,0.00489892]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","1","(+ 1 (/ x n))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(/ x n)","(* x (+ (* -1/2 (/ x n)) (/ 1 n)))","(* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n)))","(* x (+ (* x (- (* x (+ (* -1/4 (/ x n)) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 n)))) (/ 1 n)))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(/ 1 x)","(/ -1/4 (pow x 4))","(/ (- (* 1/3 x) 1/4) (pow x 4))","(/ (- (* x (+ 1/3 (* -1/2 x))) 1/4) (pow x 4))","(/ (- (* x (+ 1/3 (* x (- x 1/2)))) 1/4) (pow x 4))","(/ 1/4 (pow x 3))","(/ (+ 1/4 (* -1/3 x)) (pow x 3))","(/ (+ 1/4 (* x (- (* 1/2 x) 1/3))) (pow x 3))","(/ (+ 1/4 (* x (- (* x (+ 1/2 (* -1 x))) 1/3))) (pow x 3))","(/ -1/4 (pow x 2))","(/ (- (* 1/3 x) 1/4) (pow x 2))","(/ (- (* x (+ 1/3 (* -1/2 x))) 1/4) (pow x 2))","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (log x) n)) n)) (* 1/2 (/ 1 n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (log x) n)) n)) (* 1/2 (/ 1 n))) x)","(/ 1/4 (pow x 2))","(/ (+ 1/4 (* -1/3 x)) (pow x 2))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(* -1 (/ (log (/ 1 x)) n))","(+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x)))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x))) (/ 1/2 (* n (pow x 2))))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (* 1/3 (/ 1 (* n (pow x 3)))))) (* 1/2 (/ 1 (* n (pow x 2)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ 1 (* n x))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","-1","(- (* 1/2 (/ 1 x)) 1)","(- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2))))","(- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2))))","-1/2","(- (* 1/3 (/ 1 x)) 1/2)","(- (* 1/3 (/ 1 x)) (+ 1/2 (/ 1/4 (pow x 2))))","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) n)) (* 1/2 (/ 1 n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) n)) (* 1/2 (/ 1 n))) x)","(/ -1/3 x)","(/ (- (* 1/4 (/ 1 x)) 1/3) x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (/ 1 (* n x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)) (/ (log -1) n)))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x)) (/ (log -1) n)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1)","(- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2)","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* 1/2 (/ 1 n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* 1/2 (/ 1 n))) x)","(* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(exp (/ (log (+ 1 x)) n))","(/ (log (+ 1 x)) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ 1/2 (pow n 2))","(/ (+ 1/2 (* n (- (exp (/ (log x) n)) 1/2))) (pow n 2))","(/ 1/2 (* (pow n 2) x))","(/ (+ (* n (- (/ (exp (/ (log x) n)) x) (* 1/2 (/ 1 x)))) (* 1/2 (/ 1 x))) (pow n 2))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(/ 1/2 n)","(/ (+ 1/2 (+ (* 1/2 (/ 1 n)) (/ (log x) n))) n)","(/ (+ 1/2 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ (log x) n)))) n)","(/ (+ 1/2 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ (log x) n))))) n)","(/ 1/2 (* n x))","(/ (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x)))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x))))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x)))))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (+ 1/2 (log x)) n)) 1/2) n))","(* -1 (/ (- (* -1 (/ (+ 1/2 (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)) 1/2) n))","(* -1 (/ (- (* -1 (/ (+ 1/2 (+ (log x) (* -1 (/ (+ (* -1/2 (pow (log x) 2)) (* -1/6 (/ (pow (log x) 3) n))) n)))) n)) 1/2) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ 1 x)) (/ (log x) x)) n)) (* 1/2 (/ 1 x))) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ 1 x)) (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x))) n)) (* 1/2 (/ 1 x))) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (+ (* 1/2 (/ 1 x)) (/ (log x) x))) n)) (* 1/2 (/ 1 x))) n))"]],"memory":[[2038832,48206912]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (+.f64 (/.f64 x n) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x (-.f64 #s(literal 1 binary64) (exp.f64 (/.f64 (log.f64 x) n))))","1","#s(literal 1 binary64)","(+ 1 (/ x n))","(+.f64 (/.f64 x n) #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))","(/ x n)","(/.f64 x n)","(* x (+ (* -1/2 (/ x n)) (/ 1 n)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (/.f64 x n))","(* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n)))","(*.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x)","(* x (+ (* x (- (* x (+ (* -1/4 (/ x n)) (* 1/3 (/ 1 n)))) (* 1/2 (/ 1 n)))) (/ 1 n)))","(*.f64 (fma.f64 (fma.f64 (/.f64 x n) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) (/.f64 #s(literal -1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (/.f64 x n) (/.f64 (neg.f64 (log.f64 x)) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x) (log.f64 x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x) (log.f64 x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ -1/4 (pow x 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 4 binary64)))","(/ (- (* 1/3 x) 1/4) (pow x 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ (- (* x (+ 1/3 (* -1/2 x))) 1/4) (pow x 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ (- (* x (+ 1/3 (* x (- x 1/2)))) 1/4) (pow x 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 1/3 binary64)) x #s(literal -1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ 1/4 (pow x 3))","(/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 1/4 (* -1/3 x)) (pow x 3))","(/.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 1/4 (* x (- (* 1/2 x) 1/3))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/3 binary64)) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 1/4 (* x (- (* x (+ 1/2 (* -1 x))) 1/3))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1/2 binary64) x) x #s(literal -1/3 binary64)) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ -1/4 (pow x 2))","(/.f64 (/.f64 #s(literal -1/4 binary64) x) x)","(/ (- (* 1/3 x) 1/4) (pow x 2))","(/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) x)) x)","(/ (- (* x (+ 1/3 (* -1/2 x))) 1/4) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/4 binary64)) x) x)","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (log x) n)) n)) (* 1/2 (/ 1 n)))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (log x) n)) n)) (* 1/2 (/ 1 n))) x)","(/.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x)","(/ 1/4 (pow x 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 x x))","(/ (+ 1/4 (* -1/3 x)) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/4 binary64)) x) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(exp.f64 (/.f64 (log.f64 x) n))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2))))","(fma.f64 (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) x) #s(literal 1 binary64)) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","(+ (exp (* -1 (/ (log (/ 1 x)) n))) (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x)) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (pow x 2)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 3)))))","(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)) (exp.f64 (/.f64 (log.f64 x) n))))","(* -1 (/ (log (/ 1 x)) n))","(/.f64 (log.f64 x) n)","(+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x)))","(+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (log.f64 x) n))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (/ 1 (* n x))) (/ 1/2 (* n (pow x 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x) (/.f64 (log.f64 x) n))","(- (+ (* -1 (/ (log (/ 1 x)) n)) (+ (/ 1 (* n x)) (* 1/3 (/ 1 (* n (pow x 3)))))) (* 1/2 (/ 1 (* n (pow x 2)))))","(+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)) (/.f64 (log.f64 x) n))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)","-1","#s(literal -1 binary64)","(- (* 1/2 (/ 1 x)) 1)","(-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(- (* 1/2 (/ 1 x)) (+ 1 (/ 1/3 (pow x 2))))","(fma.f64 (/.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) x)) #s(literal -1 binary64))","(- (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3)))) (+ 1 (/ 1/3 (pow x 2))))","(+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x))","-1/2","#s(literal -1/2 binary64)","(- (* 1/3 (/ 1 x)) 1/2)","(-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))","(- (* 1/3 (/ 1 x)) (+ 1/2 (/ 1/4 (pow x 2))))","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x))","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) n)) (* 1/2 (/ 1 n)))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (* -1 (/ (log (/ 1 x)) n))) n)) (* 1/2 (/ 1 n))) x)","(/.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x)","(/ -1/3 x)","(/.f64 #s(literal -1/3 binary64) x)","(/ (- (* 1/4 (/ 1 x)) 1/3) x)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (fma.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x))) (neg.f64 x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x)) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x)))","(+.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(+ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x)))","(+.f64 (/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (/ 1 (* n x)) (/ (log -1) n)))","(+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x)) (/ (log -1) n)))","(fma.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) x) (/.f64 #s(literal 1 binary64) n)) x) #s(literal -1 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (* -1 (/ (log (/ -1 x)) n)) (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x)) (/ (log -1) n)))","(+.f64 (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) n) (/.f64 (/.f64 #s(literal -1/2 binary64) n) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)))) x) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))","(- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x))","(- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x))","(- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x))","(- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* 1/2 (/ 1 n)))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)))","(/ (- (+ (* 1/2 (/ 1 (pow n 2))) (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* 1/2 (/ 1 n))) x)","(/.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x)","(* -1 (/ (- 1/3 (* 1/4 (/ 1 x))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(exp (/ (log (+ 1 x)) n))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/ (log (+ 1 x)) n)","(/.f64 (log1p.f64 x) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/ 1/2 (pow n 2))","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))","(/ (+ 1/2 (* n (- (exp (/ (log x) n)) 1/2))) (pow n 2))","(/.f64 (fma.f64 (-.f64 (exp.f64 (/.f64 (log.f64 x) n)) #s(literal 1/2 binary64)) n #s(literal 1/2 binary64)) (*.f64 n n))","(/ 1/2 (* (pow n 2) x))","(/.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) x)","(/ (+ (* n (- (/ (exp (/ (log x) n)) x) (* 1/2 (/ 1 x)))) (* 1/2 (/ 1 x))) (pow n 2))","(/.f64 (fma.f64 (-.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) (/.f64 #s(literal 1/2 binary64) x)) n (/.f64 #s(literal 1/2 binary64) x)) (*.f64 n n))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (log1p.f64 x)) (log.f64 x)) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))))) n)","(+ 1 (/ (log (+ 1 x)) n))","(+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log (+ 1 x)) 2) (pow n 2))) (/ (log (+ 1 x)) n))))","(fma.f64 (pow.f64 (/.f64 (log1p.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log1p.f64 x) n) #s(literal 1 binary64))))","(/ 1/2 n)","(/.f64 #s(literal 1/2 binary64) n)","(/ (+ 1/2 (+ (* 1/2 (/ 1 n)) (/ (log x) n))) n)","(/.f64 (+.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (log.f64 x) n)) (/.f64 #s(literal 1/2 binary64) n)) n)","(/ (+ 1/2 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ (log x) n)))) n)","(/.f64 (fma.f64 (fma.f64 (log.f64 x) (/.f64 (log.f64 x) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1/2 binary64))) n)","(/ (+ 1/2 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ (log x) n))))) n)","(/.f64 (fma.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (fma.f64 (log.f64 x) (/.f64 (log.f64 x) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) n) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1/2 binary64)))) n)","(/ 1/2 (* n x))","(/.f64 (/.f64 #s(literal 1/2 binary64) n) x)","(/ (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x)))) n)","(/.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 (log.f64 x) n) x)) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1/2 binary64) x))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1/2 (* n x)) (+ (* 1/2 (/ 1 x)) (/ (log x) (* n x)))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1/2 binary64) x)))) n)","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (log.f64 x) (+.f64 (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/24 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64))) (neg.f64 n))) n) (log1p.f64 x))) (neg.f64 n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1/2 (/ (pow (log (+ 1 x)) 2) n))) n)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64) (neg.f64 (log1p.f64 x))) n))","(+ 1 (* -1 (/ (+ (* -1 (log (+ 1 x))) (* -1 (/ (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) n)) (* 1/2 (pow (log (+ 1 x)) 2))) n))) n)))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) n) (log1p.f64 x)) n) #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (+ 1/2 (log x)) n)) 1/2) n))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (log.f64 x)) n)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (+ 1/2 (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)) 1/2) n))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (log.f64 x))) n)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (+ 1/2 (+ (log x) (* -1 (/ (+ (* -1/2 (pow (log x) 2)) (* -1/6 (/ (pow (log x) 3) n))) n)))) n)) 1/2) n))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (log.f64 x)) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal -1/6 binary64) (*.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))) n)) n)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ 1 x)) (/ (log x) x)) n)) (* 1/2 (/ 1 x))) n))","(/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (log.f64 x) x) (/.f64 #s(literal 1/2 binary64) x)) n) (/.f64 #s(literal 1/2 binary64) x)) n)","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ 1 x)) (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x))) n)) (* 1/2 (/ 1 x))) n))","(/.f64 (+.f64 (/.f64 (fma.f64 (fma.f64 (log.f64 x) (/.f64 (log.f64 x) n) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x) (/.f64 (log.f64 x) x)) n) (/.f64 #s(literal 1/2 binary64) x)) n)","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (+ (* 1/2 (/ 1 x)) (/ (log x) x))) n)) (* 1/2 (/ 1 x))) n))","(/.f64 (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 (log.f64 x) x) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) x) #s(literal -1/6 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) n)) n) (/.f64 #s(literal 1/2 binary64) x)) n)"]],"stop":[["iter limit",1],["node limit",1]],"time":264.76708984375,"type":"simplify"},{"count":[[21,0]],"inputs":[["(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(exp.f64 (/.f64 (log1p.f64 x) n))","(/.f64 (log1p.f64 x) n)","(log1p.f64 x)","#s(approx x x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","(fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n))","(/.f64 x x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x)","#s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)","(/.f64 #s(literal 1/2 binary64) (*.f64 n n))"]],"memory":[[-1452368,14479344]],"outputs":[[]],"time":142.301025390625,"type":"rewrite"},{"compiler":[[5517,793]],"memory":[[-3378336,13172432]],"time":20.990966796875,"type":"eval"},{"alts":[["(-.f64 (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",30.717393350947304,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",44.324575499534376,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",40.022655829940405,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","fresh",45.56703955617931,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","fresh",57.887895267056976,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","fresh",62.071176035957755,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","fresh",57.67640930460609,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","fresh",61.56548510355467,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","fresh",62.256972195159655,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","fresh",57.8884477355419,"binary64"],["(-.f64 #s(approx x #s(literal 2 binary64)) x)","next",61.523581159467625,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",39.178074500973054,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",38.24247527423564,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",46.56151785036033,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",26.865091275848883,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","fresh",35.57780446508705,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","fresh",39.76169838530061,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","fresh",58.76834911911841,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","fresh",52.80744460667911,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","next",58.82123490911341,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","next",44.08688036959228,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","fresh",44.26654562544607,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","fresh",43.97960144726985,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","next",26.926414880419227,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","fresh",33.7047026789813,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","fresh",46.546067041278036,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","done",37.53102506431383,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","fresh",43.90167296593211,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","fresh",46.570764947287074,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","fresh",38.814447464411884,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","fresh",51.11154755227729,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",30.273220424955,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))))","fresh",44.068487322534025,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","next",33.68821448602885,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)))","fresh",46.592202920261705,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","fresh",42.01880554159236,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","fresh",46.55063993520331,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) (*.f64 n n))))","fresh",34.04854575181306,"binary64"],["#s(approx x x)","done",62.073419481208,"binary64"]],"compiler":[[17,13],[19,13],[15,11],[13,10],[13,11],[13,11],[13,10],[13,11],[13,11],[11,9],[5,5],[58,31],[38,23],[38,23],[23,14],[21,13],[21,13],[21,12],[21,13],[19,11],[33,21],[30,19],[19,12],[23,14],[35,23],[39,26],[27,17],[28,17],[49,25],[51,30],[43,23],[23,14],[44,26],[40,25],[49,32],[41,26],[33,21],[62,35],[3,3],[17,13],[19,13],[13,10],[13,11],[13,11],[13,10],[13,11],[13,11],[11,9],[5,5],[58,31],[38,23],[38,23],[21,13],[21,13],[21,12],[21,13],[19,11],[33,21],[30,19],[19,12],[23,14],[35,23],[39,26],[28,17],[49,25],[51,30],[43,23],[23,14],[44,26],[40,25],[49,32],[41,26],[33,21],[62,35]],"count":[[171,39]],"kept":[{"done":[3,2],"fresh":[33,28],"new":[130,7],"picked":[5,2]}],"memory":[[4848576,21428208]],"min-error":[[0.10658360241743065,"binary64"]],"time":36.583984375,"type":"prune"},{"egraph":[[0,8523,287,0.057754234],[8,7654,299,0.017124513],[7,4577,299,0.028614419],[6,2634,299,0.018368929],[5,1350,299,0.014350947],[4,686,299,0.008614995],[3,309,307,0.00374161],[2,155,307,0.002019546],[1,98,311,0.001126473],[0,67,311,0.000816215],[0,44,317,0.000591792]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(exp.f64 (/.f64 (log.f64 x) n))","(/.f64 (log.f64 x) n)","(log.f64 x)","x","n","(*.f64 n x)","(-.f64 #s(approx x #s(literal 2 binary64)) x)","#s(approx x #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","(/.f64 (/.f64 x x) n)","(/.f64 x x)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","(fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","(-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))","(/.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","(/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n)","(-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))","#s(literal 1/3 binary64)","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","(log.f64 x)","n"]],"locations":[["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","cost-diff",0],["(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","cost-diff",0],["#s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","cost-diff",0],["(fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n))","cost-diff",3],["(/.f64 (/.f64 x x) n)","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","cost-diff",0],["(/.f64 x x)","cost-diff",2],["#s(approx x #s(literal 2 binary64))","cost-diff",0],["(-.f64 #s(approx x #s(literal 2 binary64)) x)","cost-diff",0],["(/.f64 (log.f64 x) n)","cost-diff",0],["(exp.f64 (/.f64 (log.f64 x) n))","cost-diff",0],["(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","cost-diff",0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","cost-diff",0]],"memory":[[-1460256,29030176]],"method":["egg-herbie"],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(exp.f64 (/.f64 (log.f64 x) n))","(/.f64 (log.f64 x) n)","(log.f64 x)","x","n","(*.f64 n x)","(-.f64 #s(approx x #s(literal 2 binary64)) x)","#s(approx x #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1 binary64) n))","(/.f64 (/.f64 x x) n)","(/.f64 #s(literal 1 binary64) n)","(/.f64 x x)","#s(literal 1 binary64)","x","n","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x) n)))","#s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))","#s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x) n))","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","(/.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x) n)","(fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) x) #s(literal 1/2 binary64)) (*.f64 n x))","(/.f64 (/.f64 #s(literal 1 binary64) x) n)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","n","(-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64))","(/.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) n)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","(/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n)","(-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))","#s(literal 1/3 binary64)","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","(log.f64 x)","n"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":230.030029296875,"type":"simplify"},{"compiler":[[212,37]],"locations":[["(/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n)","accuracy",0.234375],["(-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x))","accuracy",24.21860612092749],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",25.65667368331157],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","accuracy",27.2051718641007],["(/.f64 (/.f64 #s(literal 1 binary64) x) n)","accuracy",0.19140625],["(/.f64 #s(literal 1/3 binary64) x)","accuracy",0.328125],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","accuracy",27.2051718641007],["#s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))","accuracy",35.512688866420845],["(/.f64 (/.f64 x x) n)","accuracy",0.0],["(/.f64 x x)","accuracy",0.0],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","accuracy",58.575431295952946],["(-.f64 #s(approx x #s(literal 2 binary64)) x)","accuracy",0.0],["#s(approx x #s(literal 2 binary64))","accuracy",60.30180942495994],["(exp.f64 (/.f64 (log.f64 x) n))","accuracy",0.0],["(/.f64 (log.f64 x) n)","accuracy",0.22265625],["(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","accuracy",3.812479359562208],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","accuracy",26.81431044120303]],"memory":[[1508624,55492496]],"mixsample":[[0.02099609375,"const",800],[26.38232421875,"ival-div",0],[15.303466796875,"adjust",800],[4.070556640625,"ival-exp",0],[0.90185546875,"ival-div",400],[0.06298828125,"adjust",4800],[0.12890625,"adjust",4000],[17.547607421875,"ival-pow",1600],[0.236572265625,"ival-assert",0],[0.40673828125,"ival-div",1600],[9.32177734375,"ival-sub",0],[7.360107421875,"const",0],[2.11865234375,"ival-log",1600],[2.95654296875,"ival-log1p",400],[0.01416015625,"ival-div",4800],[13.541015625,"ival-pow",0],[0.0048828125,"ival-mult",800],[8.212890625,"ival-add",0],[0.2890625,"ival-add",400],[0.06201171875,"adjust",2800],[2.87060546875,"ival-log1p",0],[0.250244140625,"ival-div",2000],[24.108154296875,"ival-pow",400],[0.09912109375,"ival-div",2400],[0.037841796875,"const",4000],[0.197021484375,"ival-add",1200],[0.0048828125,"ival-mult",2000],[0.014892578125,"const",400],[2.051513671875,"ival-log1p",1600],[0.00390625,"ival-add",4000],[6.5419921875,"adjust",2000],[0.03564453125,"ival-div",2800],[0.70556640625,"ival-div",1200],[0.005859375,"ival-mult",400],[12.77978515625,"ival-mult",0],[0.048583984375,"ival-add",1600],[3.080322265625,"ival-log",400],[0.004150390625,"ival-add",2000],[0.74609375,"ival-div",800],[0.02490234375,"const",2000],[4.87890625,"ival-log",0],[0.25732421875,"ival-true",0],[0.790771484375,"ival-log",800],[0.57177734375,"exact",0],[0.356689453125,"ival-add",800],[0.006103515625,"ival-mult",4000]],"outcomes":[[94.052978515625,1,"valid",118],[102.83349609375,2,"valid",91],[1.326904296875,5,"exit",1],[15.519775390625,0,"valid",46]],"time":275.31396484375,"type":"localize"},{"count":[[19,90]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(exp.f64 (/.f64 (log.f64 x) n))","(/.f64 (log.f64 x) n)","(-.f64 #s(approx x #s(literal 2 binary64)) x)","#s(approx x #s(literal 2 binary64))","(/.f64 x x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","(/.f64 (/.f64 x x) n)","(fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","(/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n)","(-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 #s(literal 1/3 binary64) x)","(/.f64 (/.f64 #s(literal 1 binary64) x) n)"]],"memory":[[-1250576,71191760]],"outputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(/ (exp (/ (log x) n)) (* n x))","(exp (/ (log x) n))","(/ (log x) n)","0","x","1","(/ 1 n)","(/ 1/3 (* n (pow x 2)))","(/ (+ (* -1/2 (/ x n)) (* 1/3 (/ 1 n))) (pow x 2))","(/ (+ (* x (- (/ x n) (* 1/2 (/ 1 n)))) (* 1/3 (/ 1 n))) (pow x 2))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(/ 1/3 (* n (pow x 3)))","(/ (+ (* -1/2 (/ x n)) (* 1/3 (/ 1 n))) (pow x 3))","(/ (+ (* x (- (/ x n) (* 1/2 (/ 1 n)))) (* 1/3 (/ 1 n))) (pow x 3))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(/ 1/3 x)","(/ 1 (* n x))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(* -1 (/ (log (/ 1 x)) n))","(- (/ 1 n) (* 1/2 (/ 1 (* n x))))","(- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x)))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(+ (* -1 (/ (- (* 1/2 (/ 1 n)) (* 1/3 (/ 1 (* n x)))) x)) (/ 1 n))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ (- (+ 1 (* 1/3 (/ 1 (pow x 2)))) (* 1/2 (/ 1 x))) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ 1 (* 1/3 (/ 1 (pow x 2)))) (* 1/2 (/ 1 x))) (* n x))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) n))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) (* n x)))"]],"series":[[27.39697265625,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (exp (/ (log x) n)) (* n x)) (exp (/ (log x) n)) (/ (log x) n) (- x x) x (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ x x) n) (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (/ (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (/ 1/3 x) (/ (/ 1 x) n))","n","-inf"],[25.955078125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (exp (/ (log x) n)) (* n x)) (exp (/ (log x) n)) (/ (log x) n) (- x x) x (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ x x) n) (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (/ (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (/ 1/3 x) (/ (/ 1 x) n))","n","inf"],[20.199951171875,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (exp (/ (log x) n)) (* n x)) (exp (/ (log x) n)) (/ (log x) n) (- x x) x (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ x x) n) (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (/ (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (/ 1/3 x) (/ (/ 1 x) n))","n","0"],[14.841064453125,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (exp (/ (log x) n)) (* n x)) (exp (/ (log x) n)) (/ (log x) n) (- x x) x (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ x x) n) (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (/ (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (/ 1/3 x) (/ (/ 1 x) n))","x","-inf"],[15.860107421875,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (exp (/ (log x) n)) (* n x)) (exp (/ (log x) n)) (/ (log x) n) (- x x) x (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ x x) n) (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (/ (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (/ 1/3 x) (/ (/ 1 x) n))","x","inf"],[12.239990234375,"((- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (exp (/ (log x) n)) (* n x)) (exp (/ (log x) n)) (/ (log x) n) (- x x) x (/ x x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (/ x x) n) (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (/ (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) x) (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/ (- (log (+ 1 x)) (log x)) n) (- (log (+ 1 x)) (log x)) (log (+ 1 x)) (/ 1/3 x) (/ (/ 1 x) n))","x","0"]],"time":118.637939453125,"type":"series"},{"count":[[90,89]],"egraph":[[0,8354,1463,0.09035407],[2,3381,1556,0.029444122],[1,1230,1640,0.012126156],[0,408,1749,0.00380409]],"inputs":[["(- 1 (exp (/ (log x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(/ (exp (/ (log x) n)) (* n x))","(exp (/ (log x) n))","(/ (log x) n)","0","x","1","(/ 1 n)","(/ 1/3 (* n (pow x 2)))","(/ (+ (* -1/2 (/ x n)) (* 1/3 (/ 1 n))) (pow x 2))","(/ (+ (* x (- (/ x n) (* 1/2 (/ 1 n)))) (* 1/3 (/ 1 n))) (pow x 2))","(* -1 (/ (log x) n))","(+ (* -1 (/ (log x) n)) (/ x n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(/ 1/3 (* n (pow x 3)))","(/ (+ (* -1/2 (/ x n)) (* 1/3 (/ 1 n))) (pow x 3))","(/ (+ (* x (- (/ x n) (* 1/2 (/ 1 n)))) (* 1/3 (/ 1 n))) (pow x 3))","(* -1 (log x))","(- x (log x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(/ 1/3 x)","(/ 1 (* n x))","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(* -1 (/ (log (/ 1 x)) n))","(- (/ 1 n) (* 1/2 (/ 1 (* n x))))","(- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x)))","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(+ (* -1 (/ (- (* 1/2 (/ 1 n)) (* 1/3 (/ 1 (* n x)))) x)) (/ 1 n))","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(/ (- (+ 1 (* 1/3 (/ 1 (pow x 2)))) (* 1/2 (/ 1 x))) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/ (- (+ 1 (* 1/3 (/ 1 (pow x 2)))) (* 1/2 (/ 1 x))) (* n x))","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(+ 1 (/ (log x) n))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) n))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) (* n x)))"]],"memory":[[11434352,49203824]],"method":["egg-herbie"],"outputs":[["(- 1 (exp (/ (log x) n)))","(-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (/ x n)) (exp (/ (log x) n)))","(-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))","(- (+ 1 (* x (+ (* x (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(- (+ 1 (* x (+ (* x (- (+ (* 1/2 (/ 1 (pow n 2))) (* x (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2)))))) (* 1/2 (/ 1 n)))) (/ 1 n)))) (exp (/ (log x) n)))","(fma.f64 (*.f64 x x) (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(/ (exp (/ (log x) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(exp (/ (log x) n))","(exp.f64 (/.f64 (log.f64 x) n))","(/ (log x) n)","(/.f64 (log.f64 x) n)","0","#s(literal 0 binary64)","x","1","#s(literal 1 binary64)","(/ 1 n)","(/.f64 #s(literal 1 binary64) n)","(/ 1/3 (* n (pow x 2)))","(/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))","(/ (+ (* -1/2 (/ x n)) (* 1/3 (/ 1 n))) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 x n) (/.f64 #s(literal 1/3 binary64) n)) x) x)","(/ (+ (* x (- (/ x n) (* 1/2 (/ 1 n)))) (* 1/3 (/ 1 n))) (pow x 2))","(/.f64 (fma.f64 (/.f64 x n) (+.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal 1/3 binary64) n)) (*.f64 x x))","(* -1 (/ (log x) n))","(/.f64 (neg.f64 (log.f64 x)) n)","(+ (* -1 (/ (log x) n)) (/ x n))","(-.f64 (/.f64 x n) (/.f64 (log.f64 x) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* -1/2 (/ x n)) (/ 1 n))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (/.f64 x n) (/.f64 (neg.f64 (log.f64 x)) n))","(+ (* -1 (/ (log x) n)) (* x (+ (* x (- (* 1/3 (/ x n)) (* 1/2 (/ 1 n)))) (/ 1 n))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (/.f64 x n) (/.f64 #s(literal -1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))","(/ 1/3 (* n (pow x 3)))","(/.f64 #s(literal 1/3 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))","(/ (+ (* -1/2 (/ x n)) (* 1/3 (/ 1 n))) (pow x 3))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 x n) (/.f64 #s(literal 1/3 binary64) n)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* x (- (/ x n) (* 1/2 (/ 1 n)))) (* 1/3 (/ 1 n))) (pow x 3))","(/.f64 (fma.f64 (/.f64 x n) (+.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal 1/3 binary64) n)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (log x))","(neg.f64 (log.f64 x))","(- x (log x))","(-.f64 x (log.f64 x))","(- (* x (+ 1 (* -1/2 x))) (log x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))","(- (* x (+ 1 (* x (- (* 1/3 x) 1/2)))) (log x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x) x (-.f64 x (log.f64 x)))","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(/ 1/3 x)","(/.f64 #s(literal 1/3 binary64) x)","(/ 1 (* n x))","(/.f64 (/.f64 #s(literal 1 binary64) n) x)","(/ (exp (* -1 (/ (log (/ 1 x)) n))) (* n x))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x)) x)","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2)))) x)","(/.f64 (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(/ (+ (/ (exp (* -1 (/ (log (/ 1 x)) n))) n) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x) (+ (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) (pow x 3)) (/ (* (exp (* -1 (/ (log (/ 1 x)) n))) (- (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))) (* 1/2 (/ 1 (pow n 2))))) (pow x 2))))) x)","(/.f64 (fma.f64 (exp.f64 (/.f64 (log.f64 x) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) n)) x)","(exp (* -1 (/ (log (/ 1 x)) n)))","(exp.f64 (/.f64 (log.f64 x) n))","(* -1 (/ (log (/ 1 x)) n))","(/.f64 (log.f64 x) n)","(- (/ 1 n) (* 1/2 (/ 1 (* n x))))","(-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x))","(- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x)))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x))) n)","(/ (- (/ 1 n) (* 1/2 (/ 1 (* n x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(/ (- (+ (/ 1/3 (* n (pow x 2))) (/ 1 n)) (/ 1/2 (* n x))) x)","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) (neg.f64 x))","(/ (- (+ (/ 1 n) (* 1/3 (/ 1 (* n (pow x 2))))) (+ (/ 1/2 (* n x)) (* 1/4 (/ 1 (* n (pow x 3)))))) x)","(/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 1/3 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 1/4 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) (-.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))))","(/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (* n x))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (*.f64 n x))","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n)))) x))) x))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) x))) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(* -1 (/ (+ (* -1 (/ (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) n)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (+ (* 1/24 (/ 1 (pow n 4))) (* 11/24 (/ 1 (pow n 2)))) (+ (* 1/4 (/ 1 n)) (* 1/4 (/ 1 (pow n 3)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (+ (* 1/6 (/ 1 (pow n 3))) (* 1/3 (/ 1 n)))))) x)) (* (exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n)) (- (* 1/2 (/ 1 (pow n 2))) (* 1/2 (/ 1 n))))) x))) x))","(/.f64 (+.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (*.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64))))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) x))) x)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)) n)) x)","(exp (/ (+ (log -1) (* -1 (log (/ -1 x)))) n))","(exp.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n))","(/ (+ (log -1) (* -1 (log (/ -1 x)))) n)","(/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) n)","(+ (* -1 (/ (- (* 1/2 (/ 1 n)) (* 1/3 (/ 1 (* n x)))) x)) (/ 1 n))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x))) n)","(* -1 (/ (- (* 1/2 (/ 1 (* n x))) (/ 1 n)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) n) (/.f64 (/.f64 #s(literal 1/2 binary64) n) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (* n x))) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 (* n x))) (* 1/3 (/ 1 n))) x)) (* 1/2 (/ 1 n))) x)) (/ 1 n)) x))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) n) x) (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)))) x) (/.f64 #s(literal 1 binary64) n)) x)","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) (neg.f64 x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 x)) 1/3) x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x)) (neg.f64 x))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(- (exp (/ (log (+ 1 x)) n)) (exp (/ (log x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(/ (- (+ 1 (* 1/3 (/ 1 (pow x 2)))) (* 1/2 (/ 1 x))) n)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)","(/ (- (log (+ 1 x)) (log x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(/ (- (+ 1 (* 1/3 (/ 1 (pow x 2)))) (* 1/2 (/ 1 x))) (* n x))","(/.f64 (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n) x)","(/ (- (+ (log (+ 1 x)) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))) (+ (log x) (* 1/2 (/ (pow (log x) 2) n)))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) (-.f64 (log1p.f64 x) (log.f64 x))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n)))) (+ (log x) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n))))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)))))) n)","(/ (- (+ (log (+ 1 x)) (+ (* 1/24 (/ (pow (log (+ 1 x)) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log (+ 1 x)) 3) (pow n 2))) (* 1/2 (/ (pow (log (+ 1 x)) 2) n))))) (+ (log x) (+ (* 1/24 (/ (pow (log x) 4) (pow n 3))) (+ (* 1/6 (/ (pow (log x) 3) (pow n 2))) (* 1/2 (/ (pow (log x) 2) n)))))) n)","(/.f64 (-.f64 (fma.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) n) (/.f64 #s(literal 1/6 binary64) n) (fma.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log1p.f64 x)))) (fma.f64 (pow.f64 (log.f64 x) #s(literal 4 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/6 binary64) n) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x))))) n)","(/ (+ (/ 1 x) (/ (log x) (* n x))) n)","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)) n)","(/ (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x)))) n)","(/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x))) n)","(/ (+ (* 1/6 (/ (pow (log x) 3) (* (pow n 3) x))) (+ (* 1/2 (/ (pow (log x) 2) (* (pow n 2) x))) (+ (/ 1 x) (/ (log x) (* n x))))) n)","(/.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)))) n)","(+ 1 (/ (log x) n))","(+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))","(+ 1 (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n)))","(fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64)))","(+ 1 (+ (* 1/6 (/ (pow (log x) 3) (pow n 3))) (+ (* 1/2 (/ (pow (log x) 2) (pow n 2))) (/ (log x) n))))","(fma.f64 (pow.f64 (/.f64 (log.f64 x) n) #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) n) #s(literal 1/2 binary64) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))))","(* -1 (/ (- (* -1 (log (+ 1 x))) (* -1 (log x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (* 1/2 (pow (log (+ 1 x)) 2)) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) (-.f64 (log.f64 x) (log1p.f64 x))) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (* -1/6 (pow (log (+ 1 x)) 3)) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64))) n)) (neg.f64 n))","(* -1 (/ (- (+ (* -1 (log (+ 1 x))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/24 (pow (log (+ 1 x)) 4)) (* 1/24 (pow (log x) 4))) n)) (* -1/6 (pow (log (+ 1 x)) 3))) (* -1/6 (pow (log x) 3))) n)) (* 1/2 (pow (log (+ 1 x)) 2))) (* 1/2 (pow (log x) 2))) n))) (* -1 (log x))) n))","(/.f64 (-.f64 (-.f64 (log.f64 x) (log1p.f64 x)) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -1/24 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 4 binary64)) (pow.f64 (log.f64 x) #s(literal 4 binary64))) n) (*.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 3 binary64)) (pow.f64 (log.f64 x) #s(literal 3 binary64))) #s(literal -1/6 binary64))) (neg.f64 n))) n)) (neg.f64 n))","(* -1 (/ (- (* -1 (/ (log x) (* n x))) (/ 1 x)) n))","(/.f64 (+.f64 (/.f64 (/.f64 (log.f64 x) n) x) (/.f64 #s(literal 1 binary64) x)) n)","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (/ (pow (log x) 2) (* n x))) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) x) #s(literal 1/2 binary64) (/.f64 (log.f64 x) x)) n) (/.f64 #s(literal 1 binary64) x)) n)","(* -1 (/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (pow (log x) 2) x)) (* -1/6 (/ (pow (log x) 3) (* n x)))) n)) (/ (log x) x)) n)) (/ 1 x)) n))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (log.f64 x) x) (/.f64 (fma.f64 (/.f64 #s(literal -1/6 binary64) x) (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) n)) n) (/.f64 #s(literal 1 binary64) x)) n)","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1/2 (/ (pow (log x) 2) n))) n)))","(+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal 1/2 binary64) (log.f64 x)) n) #s(literal 1 binary64))","(+ 1 (* -1 (/ (+ (* -1 (log x)) (* -1 (/ (+ (* 1/6 (/ (pow (log x) 3) n)) (* 1/2 (pow (log x) 2))) n))) n)))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)) n) #s(literal 1/6 binary64) (*.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) n) (log.f64 x)) n) #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) n))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x))) n)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) (* n x)))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":239.317138671875,"type":"simplify"},{"count":[[19,145]],"inputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))","(exp.f64 (/.f64 (log.f64 x) n))","(/.f64 (log.f64 x) n)","(-.f64 #s(approx x #s(literal 2 binary64)) x)","#s(approx x #s(literal 2 binary64))","(/.f64 x x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","(/.f64 (/.f64 x x) n)","(fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","(/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n)","(-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 #s(literal 1/3 binary64) x)","(/.f64 (/.f64 #s(literal 1 binary64) x) n)"]],"memory":[[-10514016,15409440]],"outputs":[["#s(approx (+ (exp n) (exp n)) (*.f64 (exp.f64 n) n))","(neg.f64 (*.f64 (exp.f64 n) n))","(-.f64 (*.f64 (exp.f64 n) n) (*.f64 (exp.f64 n) n))","(-.f64 (exp.f64 n) (*.f64 (exp.f64 n) n))","(-.f64 #s(literal 2 binary64) (*.f64 (exp.f64 n) n))","(-.f64 n (*.f64 (exp.f64 n) n))","(*.f64 (exp.f64 n) n)","(*.f64 n (exp.f64 n))","(*.f64 (*.f64 (exp.f64 n) n) (exp.f64 n))","(*.f64 (*.f64 (exp.f64 n) n) (*.f64 (exp.f64 n) n))","(*.f64 (*.f64 (exp.f64 n) n) #s(literal 2 binary64))","(*.f64 (*.f64 (exp.f64 n) n) n)","(*.f64 (exp.f64 n) (*.f64 (exp.f64 n) n))","(*.f64 #s(literal 2 binary64) (*.f64 (exp.f64 n) n))","(/.f64 (exp.f64 n) n)","(/.f64 n (exp.f64 n))","(neg.f64 (exp.f64 n))","(+.f64 #s(literal 2 binary64) (exp.f64 n))","(-.f64 #s(literal 2 binary64) (exp.f64 n))","(*.f64 (exp.f64 n) (exp.f64 n))","(*.f64 (exp.f64 n) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (exp.f64 n))","(/.f64 (exp.f64 n) (exp.f64 n))","(/.f64 (exp.f64 n) #s(literal 2 binary64))","(/.f64 #s(literal 2 binary64) (exp.f64 n))","(/.f64 (exp.f64 n) (+.f64 #s(literal 2 binary64) (+.f64 (exp.f64 n) (exp.f64 n))))","(exp.f64 n)","(exp.f64 (+.f64 n #s(literal 2 binary64)))","(pow.f64 #s(literal 2 binary64) n)","(pow.f64 (exp.f64 n) #s(literal 2 binary64))","(pow.f64 (exp.f64 n) n)","n","(neg.f64 n)","(+.f64 n n)","(+.f64 #s(literal 2 binary64) n)","(-.f64 n n)","(-.f64 #s(literal 2 binary64) n)","(*.f64 n #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) n)","(*.f64 n n)","(/.f64 #s(literal 2 binary64) n)","(/.f64 n #s(literal 2 binary64))","(/.f64 n n)","(/.f64 (+.f64 n #s(literal 2 binary64)) n)","(/.f64 (-.f64 n #s(literal 2 binary64)) n)","(exp.f64 (log.f64 n))","(-.f64 #s(approx 2 #s(literal 2 binary64)) #s(literal 2 binary64))","#s(approx 2 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 6 binary64)","#s(literal 2/3 binary64)","#s(literal 5/6 binary64)","#s(approx (+ (exp n) (exp n)) n)","n","(neg.f64 n)","(+.f64 n n)","(+.f64 #s(literal 2 binary64) n)","(-.f64 n n)","(-.f64 #s(literal 2 binary64) n)","(*.f64 n #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) n)","(*.f64 n n)","(/.f64 #s(literal 2 binary64) n)","(/.f64 n #s(literal 2 binary64))","(/.f64 n n)","(/.f64 (+.f64 n #s(literal 2 binary64)) n)","(/.f64 (-.f64 n #s(literal 2 binary64)) n)","(exp.f64 (log.f64 n))","n","(neg.f64 n)","(+.f64 n n)","(+.f64 #s(literal 2 binary64) n)","(-.f64 n n)","(-.f64 #s(literal 2 binary64) n)","(*.f64 n #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) n)","(*.f64 n n)","(/.f64 #s(literal 2 binary64) n)","(/.f64 n #s(literal 2 binary64))","(/.f64 n n)","(/.f64 (+.f64 n #s(literal 2 binary64)) n)","(/.f64 (-.f64 n #s(literal 2 binary64)) n)","(exp.f64 (log.f64 n))","#s(approx (+ (exp n) (exp n)) #s(approx n n))","#s(approx n n)","n","(neg.f64 n)","(+.f64 n n)","(+.f64 #s(literal 2 binary64) n)","(-.f64 n n)","(-.f64 #s(literal 2 binary64) n)","(*.f64 n #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) n)","(*.f64 n n)","(/.f64 #s(literal 2 binary64) n)","(/.f64 n #s(literal 2 binary64))","(/.f64 n n)","(/.f64 (+.f64 n #s(literal 2 binary64)) n)","(/.f64 (-.f64 n #s(literal 2 binary64)) n)","(exp.f64 (log.f64 n))","#s(approx (+ (exp n) (exp n)) (/.f64 (-.f64 #s(approx 2 #s(literal 2 binary64)) #s(literal 2 binary64)) n))","(/.f64 (-.f64 #s(approx 2 #s(literal 2 binary64)) #s(literal 2 binary64)) n)","(-.f64 #s(approx 2 #s(literal 2 binary64)) #s(literal 2 binary64))","#s(approx 2 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 1/3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 6 binary64)","#s(literal 2/3 binary64)","#s(literal 5/6 binary64)","n","(neg.f64 n)","(+.f64 n n)","(+.f64 #s(literal 2 binary64) n)","(-.f64 n n)","(-.f64 #s(literal 2 binary64) n)","(*.f64 n #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) n)","(*.f64 n n)","(/.f64 #s(literal 2 binary64) n)","(/.f64 n #s(literal 2 binary64))","(/.f64 n n)","(/.f64 (+.f64 n #s(literal 2 binary64)) n)","(/.f64 (-.f64 n #s(literal 2 binary64)) n)","(exp.f64 (log.f64 n))"]],"time":657.329833984375,"type":"rewrite"},{"compiler":[[4640,683]],"memory":[[-1116112,14324848]],"time":19.136962890625,"type":"eval"},{"alts":[["(-.f64 (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",30.717393350947304,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","fresh",44.324575499534376,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","done",40.022655829940405,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","fresh",62.071176035957755,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","fresh",57.67640930460609,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","fresh",61.56548510355467,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","fresh",62.256972195159655,"binary64"],["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","fresh",57.8884477355419,"binary64"],["(-.f64 #s(approx x #s(literal 2 binary64)) x)","done",61.523581159467625,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","fresh",39.178074500973054,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","done",26.865091275848883,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","fresh",35.57780446508705,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","fresh",39.76169838530061,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","fresh",52.80744460667911,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","done",44.08688036959228,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","fresh",43.97960144726985,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","done",26.926414880419227,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))","fresh",32.66361610210853,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","fresh",44.26653885604285,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","fresh",33.7047026789813,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","fresh",46.546067041278036,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","done",37.53102506431383,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","fresh",43.90167296593211,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","fresh",46.570764947287074,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","fresh",38.814447464411884,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","fresh",51.11154755227729,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (exp (/ (log x) n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (*.f64 n x)))","fresh",38.5497840537695,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","fresh",58.6555876726316,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","fresh",58.889525074275014,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n))))","fresh",30.337303195061107,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))))","fresh",44.068487322534025,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","fresh",46.632270493880256,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","fresh",46.55063993520331,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","fresh",33.68908938567306,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","fresh",37.00355084947561,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) (*.f64 n n))))","fresh",34.04854575181306,"binary64"],["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","fresh",61.664707834324815,"binary64"],["#s(approx (- x x) #s(literal 0 binary64))","fresh",45.56703955617931,"binary64"],["#s(approx x x)","done",62.073419481208,"binary64"]],"compiler":[[1915,345],[17,13],[19,13],[15,11],[13,11],[13,10],[13,11],[13,11],[11,9],[5,5],[58,31],[23,14],[21,13],[21,13],[21,13],[33,21],[19,12],[23,14],[22,14],[33,20],[35,23],[39,26],[27,17],[28,17],[49,25],[51,30],[43,23],[30,19],[17,11],[17,11],[21,14],[44,26],[46,30],[33,21],[53,33],[49,29],[62,35],[17,10],[5,5],[3,3]],"count":[[188,39]],"kept":[{"done":[4,4],"fresh":[30,21],"new":[149,11],"picked":[5,3]}],"memory":[[-2019904,23988416]],"min-error":[[0.10658360241743065,"binary64"]],"time":31.459228515625,"type":"prune"},{"accuracy":[5.063485084063484],"baseline":[21.85680045488769],"branch":[["x",5.063485084063484,2,"binary64"],["n",8.888284125973229,3,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",9.134375123578787,3,"binary64"],["(/.f64 #s(literal 1 binary64) n)",8.623446726780296,3,"binary64"]],"compiler":[[1,2],[1,2],[13,8],[3,4]],"count":[[64,2]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (exp (/ (log x) n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (*.f64 n x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (-.f64 (fma.f64 (fma.f64 (/.f64 x n) #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (*.f64 x x) (/.f64 x n)) (/.f64 (log.f64 x) n))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(-.f64 (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (fma.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) #s(literal 2 binary64)) n) #s(literal -1/2 binary64)) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) (+.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (+ (* (/ (- (pow (log (+ 1 x)) 2) (pow (log x) 2)) n) 1/2) (- (log (+ 1 x)) (log x))) n) (/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) (*.f64 n n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) #s(literal 2 binary64)) (pow.f64 (log.f64 x) #s(literal 2 binary64))) n) #s(literal 1/2 binary64) (-.f64 (log1p.f64 x) (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) (+.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 11/24 binary64) (*.f64 n n)) (/.f64 #s(literal 1/24 binary64) (pow.f64 n #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 n #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) n))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) n) (/.f64 #s(literal 1/6 binary64) (pow.f64 n #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) (*.f64 x x))) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))"]],"memory":[[-1124992,31654672]],"oracle":[63.52493683815748],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x)))"]],"repr":["binary64"],"time":62.662841796875,"times":[[13.98095703125,"x"],[15.56298828125,"n"],[12.528076171875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[16.31396484375,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[5.090828054221578],"baseline":[26.865091275848883],"branch":[["x",5.090828054221578,2,"binary64"]],"compiler":[[1,2]],"count":[[53,2]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (exp (/ (log x) n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (*.f64 n x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (-.f64 (fma.f64 (fma.f64 (/.f64 x n) #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (*.f64 x x) (/.f64 x n)) (/.f64 (log.f64 x) n))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","(-.f64 (exp.f64 #s(approx (/ (log (+ 1 x)) n) (/.f64 x n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[1536368,9369216]],"oracle":[63.44093371391865],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))"]],"repr":["binary64"],"time":15.73193359375,"times":[[12.630859375,"x"]],"type":"regimes"},{"accuracy":[5.284898581250158],"baseline":[26.865091275848883],"branch":[["x",5.284898581250158,2,"binary64"]],"compiler":[[1,2]],"count":[[51,2]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (exp (/ (log x) n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (*.f64 n x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (-.f64 (fma.f64 (fma.f64 (/.f64 x n) #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (*.f64 x x) (/.f64 x n)) (/.f64 (log.f64 x) n))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n))"]],"memory":[[1216288,9018512]],"oracle":[63.44093371391865],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))"]],"repr":["binary64"],"time":16.02001953125,"times":[[12.510986328125,"x"]],"type":"regimes"},{"accuracy":[13.782704048853113],"baseline":[26.865091275848883],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",19.908998952373974,2,"binary64"],["n",15.638595607425877,6,"binary64"],["(/.f64 #s(literal 1 binary64) n)",15.638595607425875,5,"binary64"],["x",13.782704048853113,5,"binary64"]],"compiler":[[13,8],[1,2],[3,4],[1,2]],"count":[[49,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (exp (/ (log x) n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (*.f64 n x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) n) (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64))) x (/.f64 #s(literal 1 binary64) n)) x (/.f64 (neg.f64 (log.f64 x)) n))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (-.f64 (fma.f64 (fma.f64 (/.f64 x n) #s(literal 1/3 binary64) (/.f64 #s(literal -1/2 binary64) n)) (*.f64 x x) (/.f64 x n)) (/.f64 (log.f64 x) n))))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) x (/.f64 #s(literal 1 binary64) n)) x #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) n) #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 x x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) n) (*.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) (/.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal 3 binary64))) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 n n)) (/.f64 #s(literal 1/2 binary64) n)) (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) n)) x))"]],"memory":[[319664,25545408]],"oracle":[63.44093371391865],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))"]],"repr":["binary64"],"time":48.05615234375,"times":[[9.541015625,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[11.4619140625,"n"],[11.18798828125,"(/.f64 #s(literal 1 binary64) n)"],[12.18798828125,"x"]],"type":"regimes"},{"accuracy":[14.306456768344262],"baseline":[32.66361610210853],"branch":[["x",14.306456768344262,5,"binary64"]],"compiler":[[1,2]],"count":[[39,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (exp (/ (log x) n)) (+.f64 (/.f64 (log.f64 x) n) #s(literal 1 binary64))) (*.f64 n x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log.f64 x)) n))"]],"memory":[[-748400,7277008]],"oracle":[63.31210742385823],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))"]],"repr":["binary64"],"time":12.23486328125,"times":[[9.77099609375,"x"]],"type":"regimes"},{"accuracy":[14.328478667917194],"baseline":[32.66361610210853],"branch":[["x",14.328478667917194,5,"binary64"]],"compiler":[[1,2]],"count":[[36,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))"]],"memory":[[-3353072,6954656]],"oracle":[63.30150225570573],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))"]],"repr":["binary64"],"time":11.773193359375,"times":[[8.48388671875,"x"]],"type":"regimes"},{"accuracy":[18.038923285691407],"baseline":[33.68821448602885],"branch":[["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",30.718065925241365,3,"binary64"],["n",18.268111331573998,7,"binary64"],["(/.f64 #s(literal 1 binary64) n)",18.038923285691407,7,"binary64"],["x",19.094882671451884,6,"binary64"]],"compiler":[[13,8],[1,2],[3,4],[1,2]],"count":[[35,7]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (-.f64 x (log.f64 x)))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (-.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)) (log.f64 x)) n))"]],"memory":[[4225216,19827040]],"oracle":[63.30150225570573],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))"]],"repr":["binary64"],"time":35.73291015625,"times":[[7.18896484375,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[8.362060546875,"n"],[9.013916015625,"(/.f64 #s(literal 1 binary64) n)"],[8.382080078125,"x"]],"type":"regimes"},{"accuracy":[19.14704375538926],"baseline":[33.68821448602885],"branch":[["x",19.14704375538926,6,"binary64"],["(/.f64 #s(literal 1 binary64) n)",19.357508479418463,7,"binary64"]],"compiler":[[1,2],[3,4]],"count":[[32,6]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"]],"memory":[[2472512,10516272]],"oracle":[63.270131682859734],"outputs":[["(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- x x) #s(literal 0 binary64))"]],"repr":["binary64"],"time":18.133056640625,"times":[[7.573974609375,"x"],[8.283935546875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[21.29456018086975],"baseline":[33.68821448602885],"branch":[["n",19.588812167151854,7,"binary64"],["x",21.29456018086975,5,"binary64"]],"compiler":[[1,2],[1,2]],"count":[[31,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))"]],"memory":[[851904,10345376]],"oracle":[63.270131682859734],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- x x) #s(literal 0 binary64))"]],"repr":["binary64"],"time":17.69287109375,"times":[[7.360107421875,"n"],[8.12109375,"x"]],"type":"regimes"},{"accuracy":[21.42341602893937],"baseline":[33.68821448602885],"branch":[["(/.f64 #s(literal 1 binary64) n)",19.52665671934855,7,"binary64"],["x",21.42341602893937,5,"binary64"]],"compiler":[[3,4],[1,2]],"count":[[30,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))"]],"memory":[[-6237888,10256912]],"oracle":[63.257406864348],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- x x) #s(literal 0 binary64))"]],"repr":["binary64"],"time":17.4560546875,"times":[[7.26708984375,"(/.f64 #s(literal 1 binary64) n)"],[7.953857421875,"x"]],"type":"regimes"},{"accuracy":[24.687722350345542],"baseline":[33.68821448602885],"branch":[["n",24.82964334502964,4,"binary64"],["(/.f64 #s(literal 1 binary64) n)",24.687722350345542,4,"binary64"],["x",29.71998355599375,2,"binary64"]],"compiler":[[1,2],[3,4],[1,2]],"count":[[29,4]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) n) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x) #s(literal -1 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 x))) n))"]],"memory":[[5778288,13830288]],"oracle":[63.25738680554212],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))"]],"repr":["binary64"],"time":23.93994140625,"times":[[7.27392578125,"n"],[7.19677734375,"(/.f64 #s(literal 1 binary64) n)"],[7.260986328125,"x"]],"type":"regimes"},{"accuracy":[24.68859724998975],"baseline":[33.68908938567306],"branch":[["(/.f64 #s(literal 1 binary64) n)",24.68859724998975,4,"binary64"]],"compiler":[[3,4]],"count":[[25,4]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)) n))"]],"memory":[[-3774320,5289392]],"oracle":[63.19120693043405],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))"]],"repr":["binary64"],"time":8.450927734375,"times":[[6.840087890625,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[24.777563733033787],"baseline":[37.00355084947561],"branch":[["(/.f64 #s(literal 1 binary64) n)",24.777563733033787,4,"binary64"]],"compiler":[[3,4]],"count":[[22,4]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ (pow x (/ 1 n)) x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) n)) x))"]],"memory":[[4774000,4774000]],"oracle":[63.19091871101556],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x)))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))"]],"repr":["binary64"],"time":7.26708984375,"times":[[5.7490234375,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[27.196154578680876],"baseline":[37.53102506431383],"branch":[["x",33.55888788427875,2,"binary64"],["n",27.89475837175146,5,"binary64"],["(/.f64 #s(literal 1 binary64) n)",27.196154578680876,5,"binary64"]],"compiler":[[1,2],[1,2],[3,4]],"count":[[19,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (*.f64 n x))))"]],"memory":[[-5885888,10617712]],"oracle":[63.189913314764794],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))"]],"repr":["binary64"],"time":17.283935546875,"times":[[5.23095703125,"x"],[4.996826171875,"n"],[5.156005859375,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[27.894587932554845],"baseline":[37.53102506431383],"branch":[["(/.f64 #s(literal 1 binary64) n)",27.894587932554845,5,"binary64"]],"compiler":[[3,4]],"count":[[17,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x x) x) n))"]],"memory":[[4097520,4097520]],"oracle":[63.037032879352004],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))"]],"repr":["binary64"],"time":5.7041015625,"times":[[4.410888671875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[27.89475837175146],"baseline":[37.53102506431383],"branch":[["n",27.89475837175146,5,"binary64"],["(/.f64 #s(literal 1 binary64) n)",27.89475837175147,5,"binary64"]],"compiler":[[1,2],[3,4]],"count":[[15,5]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 x x) n))"]],"memory":[[-1547728,6597664]],"oracle":[63.037032879352004],"outputs":[["#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))"]],"repr":["binary64"],"time":9.759033203125,"times":[[3.98291015625,"n"],[4.572998046875,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[40.98258598809867],"baseline":[45.56703955617931],"branch":[["x",40.24180321742261,3,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",41.045067714231536,2,"binary64"],["(/.f64 #s(literal 1 binary64) n)",40.98258598809867,2,"binary64"],["n",40.98258598809863,3,"binary64"]],"compiler":[[1,2],[13,8],[3,4],[1,2]],"count":[[13,2]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 1/3 binary64) n))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(literal 6 binary64) n))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (/.f64 x x))"]],"memory":[[1872352,10910528]],"oracle":[63.037032879352004],"outputs":[["#s(approx (- x x) #s(literal 0 binary64))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x))"]],"repr":["binary64"],"time":16.3720703125,"times":[[3.93994140625,"x"],[3.177001953125,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[4.037109375,"(/.f64 #s(literal 1 binary64) n)"],[3.4609375,"n"]],"type":"regimes"},{"accuracy":[41.02642326430205],"baseline":[45.56703955617931],"branch":[["(/.f64 #s(literal 1 binary64) n)",41.02642326430205,2,"binary64"]],"compiler":[[3,4]],"count":[[7,2]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (+.f64 x #s(literal 2 binary64)))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x #s(literal 2 binary64)))"]],"memory":[[-5646784,2580560]],"oracle":[62.93524222543346],"outputs":[["#s(approx (- x x) #s(literal 0 binary64))","(-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x)"]],"repr":["binary64"],"time":3.56689453125,"times":[[2.721923828125,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[45.56703955617926],"baseline":[45.56703955617931],"branch":[["n",45.56703955617926,1,"binary64"],["x",45.56703955617928,1,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",45.56703955617928,1,"binary64"],["(/.f64 #s(literal 1 binary64) n)",45.567039556179296,1,"binary64"]],"compiler":[[1,2],[1,2],[13,8],[3,4]],"count":[[4,1]],"inputs":[["#s(approx x x)","#s(approx (- x x) #s(literal 0 binary64))","#s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx n n))","(-.f64 #s(approx x #s(literal 2 binary64)) x)"]],"memory":[[7084640,7084640]],"oracle":[62.72488844582561],"outputs":[["#s(approx (- x x) #s(literal 0 binary64))"]],"repr":["binary64"],"time":7.909912109375,"times":[[1.802978515625,"n"],[1.81298828125,"x"],[1.574951171875,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[1.837158203125,"(/.f64 #s(literal 1 binary64) n)"]],"type":"regimes"},{"accuracy":[62.073419481207964],"baseline":[62.073419481208],"branch":[["(/.f64 #s(literal 1 binary64) n)",62.073419481208,1,"binary64"],["x",62.073419481207964,1,"binary64"],["(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))",62.073419481208006,1,"binary64"],["n",62.07341948120799,1,"binary64"]],"compiler":[[3,4],[1,2],[13,8],[1,2]],"count":[[1,1]],"inputs":[["#s(approx x x)"]],"link":["."],"memory":[[-2485920,5855872]],"name":["2nthrt (problem 3.4.6)"],"oracle":[62.073419481208],"outputs":[["#s(approx x x)"]],"repr":["binary64"],"time":5.281005859375,"times":[[1.278076171875,"(/.f64 #s(literal 1 binary64) n)"],[1.1689453125,"x"],[0.98291015625,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[1.1650390625,"n"]],"type":"regimes"},{"bstep":[[33.81982421875,0.00014342306053477863,0.25937434794875713]],"compiler":[[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[15,11],[1,2]],"memory":[[-2350288,5816736]],"method":["binary-search"],"mixsample":[[1.869873046875,"adjust",800],[1.310791015625,"ival-div",0],[1.065185546875,"ival-add",0],[0.20556640625,"ival-div",400],[3.44921875,"ival-pow",1600],[0.056640625,"ival-assert",0],[0.11865234375,"ival-div",800],[1.159423828125,"ival-sub",0],[0.10791015625,"ival-true",0],[8.112060546875,"ival-pow",400],[0.08349609375,"exact",0],[0.46923828125,"adjust",2000],[6.29833984375,"ival-pow",0]],"outcomes":[[13.761962890625,1,"valid",57],[9.18798828125,2,"valid",20],[5.728515625,0,"valid",51]],"stop":[["narrow-enough",1]],"time":36.576171875,"type":"bsearch"},{"bstep":[[0.926025390625,0.00014342306053477863,0.25937434794875713]],"compiler":[[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[23,15],[15,11],[1,2]],"memory":[[710416,710416]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.54296875,"type":"bsearch"},{"bstep":[[0.901123046875,0.00014342306053477863,0.25937434794875713]],"compiler":[[23,15],[21,15],[23,15],[21,15],[23,15],[21,15],[23,15],[21,15],[23,15],[21,15],[23,15],[21,15],[23,15],[21,15],[23,15],[21,15],[15,11],[1,2]],"memory":[[711264,711264]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.40185546875,"type":"bsearch"},{"bstep":[[27.799072265625,1.7247410304989758e-9,1.606969306555839e-8],[30.0,2.7437348719029037e-101,9.191193413313165e-101],[47.675048828125,4.7658577798138195e-182,6.536408032831682e-176],[10.9580078125,1.1870771466485076e-287,1.3342810491978092e-287]],"compiler":[[23,15],[28,18],[23,15],[28,18],[23,15],[28,18],[23,15],[28,18],[23,15],[28,18],[23,15],[28,18],[28,18],[19,14],[28,18],[19,14],[28,18],[19,14],[28,18],[19,14],[28,18],[19,14],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,13],[15,12],[19,13],[15,12],[15,11],[1,2]],"memory":[[-35008,16602448]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[0.063720703125,"ival-add",1200],[6.130126953125,"adjust",800],[3.390869140625,"ival-div",0],[1.02734375,"ival-div",400],[20.133056640625,"ival-pow",1600],[0.058349609375,"ival-div",1600],[0.16552734375,"ival-assert",0],[3.4521484375,"ival-sub",0],[0.0048828125,"ival-sub",400],[19.934814453125,"ival-pow",0],[1.6015625,"adjust",2000],[2.4228515625,"ival-add",0],[0.375,"ival-div",1200],[0.60498046875,"ival-div",800],[0.282470703125,"ival-add",400],[0.302978515625,"ival-true",0],[26.61181640625,"ival-pow",400],[0.236083984375,"exact",0],[0.30517578125,"ival-add",800]],"outcomes":[[48.74951171875,1,"valid",173],[37.56689453125,2,"valid",66],[13.517578125,0,"valid",113]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":122.34912109375,"type":"bsearch"},{"bstep":[[34.931884765625,5.801087531797614e-17,3.257818212441176e-14],[0.54296875,2.7437348719029037e-101,9.191193413313165e-101],[1.029052734375,4.7658577798138195e-182,6.536408032831682e-176],[0.35595703125,1.1870771466485076e-287,1.3342810491978092e-287]],"compiler":[[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,14],[19,13],[19,13],[15,12],[19,13],[15,12],[15,11],[1,2]],"memory":[[-1174608,6669008]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[1.69189453125,"adjust",800],[1.32421875,"ival-div",0],[0.96826171875,"ival-add",0],[1.103759765625,"ival-div",400],[2.491455078125,"ival-pow",1600],[0.0546875,"ival-assert",0],[0.06103515625,"ival-div",800],[1.0986328125,"ival-sub",0],[0.185546875,"ival-add",400],[0.096923828125,"ival-true",0],[0.005126953125,"ival-sub",400],[7.808837890625,"ival-pow",400],[0.04296875,"ival-add",800],[0.08447265625,"exact",0],[0.320556640625,"adjust",2000],[8.352783203125,"ival-pow",0]],"outcomes":[[14.464599609375,1,"valid",46],[7.090087890625,2,"valid",14],[8.14404296875,0,"valid",68]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":39.654052734375,"type":"bsearch"},{"bstep":[[0.72900390625,5.801087531797614e-17,3.257818212441176e-14],[0.441162109375,2.7437348719029037e-101,9.191193413313165e-101],[0.80908203125,4.7658577798138195e-182,6.536408032831682e-176],[0.340087890625,1.1870771466485076e-287,1.3342810491978092e-287]],"compiler":[[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[22,15],[19,13],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[19,13],[15,12],[19,13],[15,12],[15,11],[1,2]],"memory":[[1798240,1798240]],"method":["binary-search","binary-search","binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":3.260986328125,"type":"bsearch"},{"bstep":[[0.051025390625,3.226119881053462e+133,7.142147467239828e+139],[0.051025390625,3.2721451199878194e-12,1.0479712965059157e-7],[0.052978515625,9.304179608166618e-201,5.636035411660699e-196],[0.08203125,-8.88895355186883e-205,-2.1046773057991547e-206],[0.0869140625,-3.595132311958325e-152,-1.159486828054311e-154],[0.113037109375,-255577788.77984345,-3.900964724217967e-12]],"compiler":[[11,10],[3,4]],"memory":[[747088,747088]],"method":["left-value","left-value","left-value","left-value","left-value","left-value"],"time":1.52490234375,"type":"bsearch"},{"bstep":[[59.47412109375,1.2144576148047092e+115,4.709276613691083e+123],[35.301025390625,0.25937434794875713,2006.946649742479],[0.572998046875,2.7437348719029037e-101,9.191193413313165e-101],[0.7919921875,4.7658577798138195e-182,6.536408032831682e-176],[0.2939453125,1.1870771466485076e-287,1.3342810491978092e-287]],"compiler":[[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[28,18],[15,12],[28,18],[15,12],[28,18],[15,12],[28,18],[15,12],[28,18],[15,12],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[15,12],[19,13],[19,13],[15,12],[19,13],[15,12],[15,11],[1,2]],"memory":[[-1319616,16247840]],"method":["binary-search","binary-search","binary-search","binary-search","binary-search"],"mixsample":[[0.185546875,"ival-add",1200],[5.32177734375,"adjust",800],[3.1923828125,"ival-div",0],[0.52880859375,"ival-div",400],[19.125732421875,"ival-pow",1600],[0.265380859375,"ival-div",1600],[0.125244140625,"ival-assert",0],[2.9931640625,"ival-sub",0],[2.530517578125,"adjust",2000],[12.513916015625,"ival-pow",0],[2.548583984375,"ival-add",0],[0.232177734375,"ival-div",1200],[0.0078125,"ival-sub",800],[0.525634765625,"ival-div",800],[0.22705078125,"ival-add",400],[0.26220703125,"ival-true",0],[18.11474609375,"ival-pow",400],[0.172607421875,"ival-add",800],[0.220703125,"exact",0]],"outcomes":[[20.499267578125,1,"valid",80],[47.753173828125,2,"valid",94],[3.517578125,0,"exit",29],[8.763427734375,0,"valid",98]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":102.9609375,"type":"bsearch"},{"bstep":[[2.171875,1.2144576148047092e+115,4.709276613691083e+123],[1.4609375,0.25937434794875713,2006.946649742479],[0.760009765625,2.7437348719029037e-101,9.191193413313165e-101],[19.869140625,4.7658577798138195e-182,6.536408032831682e-176]],"compiler":[[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[39,27],[28,18],[28,18],[49,30],[28,18],[49,30],[28,18],[49,30],[28,18],[49,30],[28,18],[49,30],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[15,11],[1,2]],"memory":[[-3082112,4838240]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[0.52978515625,"ival-div",0],[1.014404296875,"adjust",800],[0.1845703125,"ival-div",400],[4.757568359375,"ival-pow",1600],[0.029541015625,"ival-assert",0],[0.0068359375,"ival-div",1600],[0.545654296875,"ival-sub",0],[2.843505859375,"ival-pow",0],[0.312744140625,"adjust",2000],[0.521728515625,"ival-add",0],[0.07763671875,"ival-div",1200],[0.084716796875,"ival-div",800],[0.027099609375,"ival-add",400],[0.05126953125,"ival-true",0],[3.51318359375,"ival-pow",400],[0.038818359375,"exact",0],[0.0693359375,"ival-add",800]],"outcomes":[[5.94677734375,1,"valid",20],[8.54345703125,2,"valid",13],[2.06298828125,0,"valid",15]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":26.24609375,"type":"bsearch"},{"bstep":[[1.531005859375,1.2144576148047092e+115,4.709276613691083e+123],[20.139892578125,0.25937434794875713,2006.946649742479],[0.692138671875,2.7437348719029037e-101,9.191193413313165e-101],[1.29296875,4.7658577798138195e-182,6.536408032831682e-176]],"compiler":[[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[5,6],[39,27],[39,27],[19,13],[39,27],[19,13],[39,27],[19,13],[39,27],[19,13],[39,27],[19,13],[39,27],[19,13],[39,27],[19,13],[39,27],[19,13],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[49,30],[19,13],[15,11],[1,2]],"memory":[[5696064,5696064]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[1.031982421875,"adjust",800],[0.81591796875,"ival-div",0],[0.48291015625,"ival-add",0],[0.080078125,"ival-div",400],[2.21435546875,"ival-pow",1600],[0.037353515625,"ival-assert",0],[0.08740234375,"ival-div",800],[0.702880859375,"ival-sub",0],[0.0576171875,"ival-true",0],[3.585693359375,"ival-pow",400],[0.04736328125,"exact",0],[0.459228515625,"adjust",2000],[3.9697265625,"ival-pow",0]],"outcomes":[[6.22802734375,1,"valid",27],[5.75,2,"valid",12],[4.13232421875,0,"valid",41]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":26.0810546875,"type":"bsearch"},{"bstep":[[0.053955078125,3.226119881053462e+133,7.142147467239828e+139],[0.06103515625,1.977135330022927e-5,234910.4512853702],[0.154052734375,-255577788.77984345,-3.900964724217967e-12]],"compiler":[[11,10],[3,4]],"memory":[[411648,411648]],"method":["left-value","left-value","left-value"],"time":0.93701171875,"type":"bsearch"},{"bstep":[[0.052001953125,3.226119881053462e+133,7.142147467239828e+139],[0.05810546875,1.977135330022927e-5,234910.4512853702],[0.14501953125,-255577788.77984345,-3.900964724217967e-12]],"compiler":[[11,10],[3,4]],"memory":[[404832,404832]],"method":["left-value","left-value","left-value"],"time":0.794921875,"type":"bsearch"},{"bstep":[[0.051025390625,3.226119881053462e+133,7.142147467239828e+139],[0.053955078125,1.977135330022927e-5,234910.4512853702],[0.095947265625,-255577788.77984345,-3.900964724217967e-12]],"compiler":[[11,10],[3,4]],"memory":[[397536,397536]],"method":["left-value","left-value","left-value"],"time":0.739990234375,"type":"bsearch"},{"bstep":[[0.0498046875,3.226119881053462e+133,7.142147467239828e+139],[0.052001953125,1.977135330022927e-5,234910.4512853702],[0.0810546875,-255577788.77984345,-3.900964724217967e-12],[0.09912109375,-3.0710607529317303e+231,-2.8635365999189123e+230]],"compiler":[[11,10],[3,4]],"memory":[[-7725680,526496]],"method":["left-value","left-value","left-value","left-value"],"time":1.677001953125,"type":"bsearch"},{"bstep":[[0.052978515625,3.101972120205653e+234,8.336971466130016e+239],[0.052978515625,1.977135330022927e-5,234910.4512853702],[0.083984375,-255577788.77984345,-3.900964724217967e-12],[0.133056640625,-3.0710607529317303e+231,-2.8635365999189123e+230]],"compiler":[[11,10],[3,4]],"memory":[[494768,494768]],"method":["left-value","left-value","left-value","left-value"],"time":0.970947265625,"type":"bsearch"},{"bstep":[[51.433837890625,4.256941292004057e-6,50578.22723689855],[95.7421875,1.1994763374957253e-240,3.223755602077115e-235],[13.573974609375,-3.4921851532413355e-231,-3.256203899728681e-232],[40.56103515625,-256346845125.71994,-3.912703074762914e-9]],"compiler":[[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[11,10],[27,18],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[5,6],[27,18],[15,11],[1,2]],"memory":[[5199664,30183904]],"method":["binary-search","binary-search","binary-search","binary-search"],"mixsample":[[0.860107421875,"ival-add",1200],[5.86767578125,"ival-div",0],[7.869873046875,"adjust",800],[0.0458984375,"ival-div",400],[8.650146484375,"ival-pow",1600],[0.279541015625,"ival-assert",0],[0.49169921875,"ival-div",1600],[5.593505859375,"ival-sub",0],[0.728271484375,"ival-pow",2000],[0.531005859375,"ival-pow",800],[0.01513671875,"ival-div",3200],[0.024169921875,"ival-div",2800],[45.4560546875,"ival-pow",0],[0.927978515625,"adjust",2000],[4.134521484375,"ival-add",0],[1.157958984375,"ival-div",1200],[0.164306640625,"ival-add",1600],[0.0087890625,"ival-add",2000],[0.415283203125,"ival-div",800],[0.661865234375,"ival-add",400],[0.0078125,"ival-div",3600],[0.61083984375,"ival-true",0],[0.0078125,"ival-div",2000],[0.01513671875,"ival-add",2400],[58.44580078125,"ival-pow",400],[0.01708984375,"ival-add",800],[1.43408203125,"ival-pow",2400],[0.4892578125,"exact",0],[0.2421875,"ival-div",2400]],"outcomes":[[96.022216796875,1,"valid",223],[22.310302734375,2,"valid",37],[13.16796875,0,"exit",114],[37.228759765625,0,"valid",316]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":210.137939453125,"type":"bsearch"},{"bstep":[[0.139892578125,7.163679288619577e-48,2.035202307548473e-47]],"compiler":[[11,10],[3,4]],"memory":[[170432,170432]],"method":["left-value"],"time":0.623046875,"type":"bsearch"},{"bstep":[[0.079833984375,7.163679288619577e-48,2.035202307548473e-47]],"compiler":[[11,10],[3,4]],"memory":[[176864,176864]],"method":["left-value"],"time":0.458984375,"type":"bsearch"},{"egraph":[[6,5558,1959,0.031317275],[5,2561,1959,0.025668727],[4,1029,1959,0.015447012],[3,565,1973,0.007111278],[2,355,1973,0.00539971],[1,272,1987,0.004352319],[0,216,2011,0.004319064]],"inputs":[["(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))))","(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)))","(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2780529385113647/302231454903657293676544 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -4717453031026927/235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -5648027917416435/11296055834832869987796435368818511453405415647406310098733607723450775321444793999623495683980919987883591461993135986312493187463513563790506212353947784425723184365930864482290528289970814110895029437915338121462939648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1723641332219371/172364133221937103085272756482216056112753534658909761028039668631756215232006744379020625060744018369805777923479247838020220755974022884986972234404720831691332769255536872593544438018353486799545737272878084128768 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 6189700196426901/1237940039285380274899124224 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64)))))))","(if (<=.f64 x #s(literal 2316864376136271/35644067325173400145634153169533525975728347712879374457649941546088087243817792082077443838416964060770643043543706307114755505635745609361348916560329798345718708393439569922522454626926592 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 x #s(literal 8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64))))))","(if (<=.f64 x #s(literal 2316864376136271/35644067325173400145634153169533525975728347712879374457649941546088087243817792082077443838416964060770643043543706307114755505635745609361348916560329798345718708393439569922522454626926592 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 x #s(literal 3242591731706757/4503599627370496 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5000000000000000265830098313298245178016947287622550486678486493521945761146082797297502145674652454512860840906256046981475222569026826936584608154510201938349585198667111756724875341881416615617731891764574033605618465285179569078272 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))))))","(if (<=.f64 n #s(literal -8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 n #s(literal -402035394363357/436994993873214129706097166956708350993678881411295357199729151951767944417616335439228580716318181998128654620651240845861768505204366709906692902245553277900892247131030458103436298545516643924637451297481464347472084863384057367177715867713536 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 n #s(literal 4439030107363619/14319451959237480602209391966837419245360869586085326264720724851155532002676452079672642132912314187714679754609499860037198430378536688350222513020782289810256437153989606051133400630739489388122520004115872623737965276803368791807679393553237147648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 n #s(literal 1100 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x))","#s(approx (- x x) #s(literal 0 binary64))","#s(approx x x)"]],"memory":[[600240,16022320]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))))","(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)))","(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 (/.f64 x n) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)))","(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (-.f64 #s(literal 0 binary64) (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n)))","(if (<=.f64 x #s(literal 1/4 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (neg.f64 (expm1.f64 (/.f64 (log.f64 x) n)))) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n)))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2780529385113647/302231454903657293676544 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) n)) x) n))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2780529385113647/302231454903657293676544 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x (pow.f64 n #s(literal -1 binary64))) x) n))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) (+.f64 (/.f64 x n) #s(literal 1 binary64))) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 2535301200456459/79228162514264337593543950336 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (exp.f64 (/.f64 #s(literal 2 binary64) n)) (*.f64 n x)))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -4717453031026927/235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -5648027917416435/11296055834832869987796435368818511453405415647406310098733607723450775321444793999623495683980919987883591461993135986312493187463513563790506212353947784425723184365930864482290528289970814110895029437915338121462939648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 1723641332219371/172364133221937103085272756482216056112753534658909761028039668631756215232006744379020625060744018369805777923479247838020220755974022884986972234404720831691332769255536872593544438018353486799545737272878084128768 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 6189700196426901/1237940039285380274899124224 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) x) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -4717453031026927/235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -5648027917416435/11296055834832869987796435368818511453405415647406310098733607723450775321444793999623495683980919987883591461993135986312493187463513563790506212353947784425723184365930864482290528289970814110895029437915338121462939648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1723641332219371/172364133221937103085272756482216056112753534658909761028039668631756215232006744379020625060744018369805777923479247838020220755974022884986972234404720831691332769255536872593544438018353486799545737272878084128768 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 6189700196426901/1237940039285380274899124224 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (/.f64 #s(literal 1 binary64) n))) (if (<=.f64 x #s(literal 8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64)))))))","(if (<=.f64 x #s(literal 2160161352087515/171441377149802771351748007849600289689824769872885377191000062139256168179989779598911740610511337300415147666808503492029943245710770246975753241195177196862953084397187695766737193680997938270047266914448743599737311060278380280946648703137233006633139143642984674682566877306441990189395290689110016 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 3635694867167687/71288134650346800291268306339067051951456695425758748915299883092176174487635584164154887676833928121541286087087412614229511011271491218722697833120659596691437416786879139845044909253853184 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (pow.f64 x (pow.f64 n #s(literal -1 binary64)))) (if (<=.f64 x #s(literal 8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64)))))))","(if (<=.f64 x #s(literal 2316864376136271/35644067325173400145634153169533525975728347712879374457649941546088087243817792082077443838416964060770643043543706307114755505635745609361348916560329798345718708393439569922522454626926592 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 x #s(literal 8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (-.f64 x (log.f64 x))) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64))))))","(if (<=.f64 x #s(literal 2316864376136271/35644067325173400145634153169533525975728347712879374457649941546088087243817792082077443838416964060770643043543706307114755505635745609361348916560329798345718708393439569922522454626926592 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 8826049387992363/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 x #s(literal 3242591731706757/4503599627370496 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (neg.f64 (log.f64 x)) n)) (if (<=.f64 x #s(literal 290000000000000009682121478677301046056994549229219320651521687316821585470678996246518349726970262001510295295860724989952 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1/3 binary64)) x)) x) #s(literal 1 binary64)) x)) n)) #s(approx (- x x) #s(literal 0 binary64))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) n)) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) n) (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (pow.f64 n #s(literal -1 binary64))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) n)) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) #s(approx (/ (- (log (+ 1 x)) (log x)) n) (/.f64 #s(approx (+ (* (/ (/ 1 x) n) (- (/ 1/3 x) 1/2)) (/ 1 n)) (/.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) n))) x))) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x)))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 49999999999999996074101824835349657503774913686486230752187555524924150803830162236428630807572544714024682228918922745266209965473792 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (+ (* (/ x x) (- (/ 1/2 (* n n)) (/ 1/2 n))) (/ (pow x (/ 1 n)) n)) (/.f64 #s(literal 1/2 binary64) (*.f64 n n))) x))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 5000000000000000265830098313298245178016947287622550486678486493521945761146082797297502145674652454512860840906256046981475222569026826936584608154510201938349585198667111756724875341881416615617731891764574033605618465285179569078272 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))))))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -2000000000000000112950822041041682829681252763966116749401130328310913127935156394378439523178919965959536338695072724193131961289213847754610320291206559558839567880608124639637128476165182553839199176610603506544803697392590258176 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal -200000000 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5902958103587057/295147905179352825856 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 5000000000000000265830098313298245178016947287622550486678486493521945761146082797297502145674652454512860840906256046981475222569026826936584608154510201938349585198667111756724875341881416615617731891764574033605618465285179569078272 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 (/.f64 (+.f64 x #s(literal 2 binary64)) x) n))))))","(if (<=.f64 n #s(literal -8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 n #s(literal -402035394363357/436994993873214129706097166956708350993678881411295357199729151951767944417616335439228580716318181998128654620651240845861768505204366709906692902245553277900892247131030458103436298545516643924637451297481464347472084863384057367177715867713536 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 n #s(literal 4439030107363619/14319451959237480602209391966837419245360869586085326264720724851155532002676452079672642132912314187714679754609499860037198430378536688350222513020782289810256437153989606051133400630739489388122520004115872623737965276803368791807679393553237147648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n)) (if (<=.f64 n #s(literal 1100 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (/.f64 #s(literal 1 binary64) x)) n))))))","(if (<=.f64 n #s(literal -8106479329266893/9007199254740992 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 n #s(literal -402035394363357/436994993873214129706097166956708350993678881411295357199729151951767944417616335439228580716318181998128654620651240845861768505204366709906692902245553277900892247131030458103436298545516643924637451297481464347472084863384057367177715867713536 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (if (<=.f64 n #s(literal 4439030107363619/14319451959237480602209391966837419245360869586085326264720724851155532002676452079672642132912314187714679754609499860037198430378536688350222513020782289810256437153989606051133400630739489388122520004115872623737965276803368791807679393553237147648 binary64)) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n)) (if (<=.f64 n #s(literal 1100 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x) #s(approx (- (pow (+ x 1) (/ 1 n)) (pow x (/ 1 n))) (/.f64 #s(approx (- (log (+ 1 x)) (log x)) (pow.f64 x #s(literal -1 binary64))) n))))))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) (-.f64 x x)))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)))","(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x))","(if (<=.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 4113761393303015/411376139330301510538742295639337626245683966408394965837152256 binary64)) #s(approx (- x x) #s(literal 0 binary64)) (-.f64 #s(approx (pow (+ x 1) (/ 1 n)) #s(literal 1 binary64)) x))","#s(approx (- x x) #s(literal 0 binary64))","#s(approx x x)"]],"stop":[["node limit",1]],"time":130.531982421875,"type":"simplify"},{"compiler":[[2051,218]],"memory":[[-2522128,7524352]],"stop":[["fuel",1]],"time":16.60009765625,"type":"soundness"},{"compiler":[[2051,218],[2051,218],[13,8],[13,8]],"memory":[[7042432,62104240]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":102.93701171875,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.01611328125,"type":"end"}]