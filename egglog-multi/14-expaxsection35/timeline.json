[{"memory":[[12464,12464]],"time":0.072998046875,"type":"start"},{"compiler":[[12,7]],"memory":[[-2016944,6184112]],"method":["search"],"sampling":[[12,{"invalid":0.21951203816570342,"precondition":0.0009763240814208984,"unknown":0.04585362575016916,"valid":0.7336580120027065}],[11,{"invalid":0.20487790228798985,"precondition":0.0009763240814208984,"unknown":0.06048776162788272,"valid":0.7336580120027065}],[10,{"invalid":0.19121937546879053,"precondition":0.0009763240814208984,"unknown":0.08975603338330984,"valid":0.7180482670664787}],[9,{"invalid":0.16390232183039188,"precondition":0.0009763240814208984,"unknown":0.11707308702170849,"valid":0.7180482670664787}],[8,{"invalid":0.1404877044260502,"precondition":0.0009763240814208984,"unknown":0.17170719429850578,"valid":0.6868287771940231}],[7,{"invalid":0.09365846961736679,"precondition":0.0009763240814208984,"unknown":0.21853642910718918,"valid":0.6868287771940231}],[6,{"invalid":0.062438979744911194,"precondition":0.0009763240814208984,"unknown":0.31219489872455597,"valid":0.6243897974491119}],[5,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.37463387846946716,"valid":0.6243897974491119}],[4,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[3,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[2,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}]],"time":40.967041015625,"type":"analyze"},{"bogosity":[{"invalid":0.24982133816680474,"precondition":0.0009763240814208984,"valid":0.7492023377517744}],"memory":[[12054112,180203328]],"mixsample":[[81.720703125,"ival-mult",0],[26.865478515625,"ival->",0],[8.714599609375,"exact",0],[77.95654296875,"ival-expm1",0],[4.212158203125,"ival-assert",0]],"outcomes":[[19.13916015625,0,"invalid",334],[373.979248046875,0,"valid",8256]],"time":630.864013671875,"type":"sample"},{"compiler":[[6,6],[18,8],[18,8]],"confusion":[[137,0,0,119]],"explanations":[["-.f64","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cancellation",137,0,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",137,0,false,0,false],["a",0,0,false,0,false],["(exp.f64 (*.f64 a x))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 a x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,137],[0,119]],"maybe-confusion":[[137,0,0,0,0,119]],"memory":[[-10608400,31312368]],"mixsample":[[0.427734375,"ival-true",0],[5.214599609375,"ival-exp",0],[4.34765625,"ival-mult",0],[3.77001953125,"ival-expm1",0],[0.35791015625,"exact",0],[0.1943359375,"ival-assert",0]],"outcomes":[[31.42333984375,0,"valid",512]],"time":72.033935546875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[6,6]],"egraph":[[0,20,4,0.000145589],[2,20,6,0.000130386],[1,17,6,0.000205925],[0,9,6,0.000253795],[0,6,6,0.000162968]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"memory":[[-3150416,14248160]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x a))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(sort a x)"]],"time":158.033203125,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.14990234375,"type":"eval"},{"alts":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","next",30.980191765151368,"binary64"]],"compiler":[[6,6]],"memory":[[308880,308880]],"time":1.0390625,"type":"prune"},{"egraph":[[0,20,14,0.000139818],[2,20,16,0.000115255],[1,17,16,0.000118571],[0,9,16,0.000230442],[0,6,16,8.1303e-5]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)","a","x","#s(literal 1 binary64)"]],"locations":[["(*.f64 a x)","cost-diff",0],["(exp.f64 (*.f64 a x))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[523536,523536]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x a))","(exp.f64 (*.f64 a x))","(pow.f64 (exp.f64 x) a)","(*.f64 a x)","(*.f64 x a)","a","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":6.6259765625,"type":"simplify"},{"compiler":[[18,8]],"locations":[["(*.f64 a x)","accuracy",0.0],["(exp.f64 (*.f64 a x))","accuracy",0.0],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","accuracy",30.980191765151368]],"memory":[[-1188864,6713568]],"mixsample":[[0.464599609375,"ival-true",0],[3.725341796875,"ival-exp",0],[3.822998046875,"ival-mult",0],[3.204345703125,"ival-expm1",0],[0.29248046875,"exact",0],[0.185791015625,"ival-assert",0]],"outcomes":[[25.08544921875,0,"valid",256]],"time":34.803955078125,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[1658464,1658464]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"series":[[0.6279296875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","-inf"],[0.453857421875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","inf"],[1.05078125,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","0"],[0.983154296875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","-inf"],[0.787841796875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","inf"],[1.330810546875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","0"]],"time":5.794921875,"type":"series"},{"count":[[15,15]],"egraph":[[0,7408,160,0.041041346],[26,7408,185,0.032078422],[25,6849,185,0.047222364],[24,6849,185,0.020820697],[23,6511,185,0.023188251],[22,6335,185,0.016621432],[21,6335,185,0.014582507],[20,6321,185,0.015910098],[19,6279,185,0.014296064],[18,6071,185,0.016360694],[17,4190,189,0.029958648],[16,4190,189,0.010192531],[15,4062,189,0.011255151],[14,4062,189,0.009599851],[13,4061,189,0.009934659],[12,3094,189,0.014425617],[11,2619,189,0.008523617],[10,1937,193,0.013905835],[9,1937,193,0.00648552],[8,1934,193,0.005515575],[7,1920,193,0.005480032],[6,1900,193,0.006409531],[5,1873,193,0.006082888],[4,1672,193,0.005870693],[3,1045,193,0.009993581],[2,526,193,0.003570171],[1,195,201,0.001580532],[0,63,201,0.000742029]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"memory":[[2177248,18718048]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 x a)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 x a #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 x a))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1]],"time":463.899169921875,"type":"simplify"},{"count":[[3,45]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[-1157504,15028880]],"outputs":[["(neg.f64 (/.f64 (expm1.f64 (*.f64 a (+.f64 x x))) (+.f64 (neg.f64 (exp.f64 (*.f64 a x))) #s(literal -1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 a (+.f64 x x)))) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))))","(+.f64 (exp.f64 (*.f64 a x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (*.f64 a x)))","(+.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 x x))) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))))","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a x))))","(-.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 x x))) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(*.f64 (+.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))))","(*.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))))","(*.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a x)))","(*.f64 (*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))))","(*.f64 (*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))))","(*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) (*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (*.f64 a x))","(exp.f64 (*.f64 (log.f64 (exp.f64 x)) a))","(pow.f64 (exp.f64 a) x)","(pow.f64 (exp.f64 x) a)","(pow.f64 (exp.f64 (+.f64 a a)) (/.f64 x #s(literal 2 binary64)))","(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","(pow.f64 (exp.f64 a) (+.f64 (/.f64 x #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))))","(*.f64 a x)","(*.f64 x a)","(*.f64 a (log.f64 (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 a x) (*.f64 a x)) #s(literal 0 binary64)) (-.f64 (*.f64 a x) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 (*.f64 a x) (*.f64 a x) (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 a x) #s(literal 0 binary64)))))","(log.f64 (exp.f64 (*.f64 a x)))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 #s(literal 0 binary64) #s(literal 2 binary64) (*.f64 a x))","(fma.f64 #s(literal 0 binary64) #s(literal 3 binary64) (*.f64 a x))","(fma.f64 #s(literal 0 binary64) #s(literal 0 binary64) (*.f64 a x))","(fma.f64 #s(literal 3 binary64) #s(literal 0 binary64) (*.f64 a x))"]],"time":232.914794921875,"type":"rewrite"},{"compiler":[[736,187]],"memory":[[-2319632,5414992]],"time":8.302001953125,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",53.096384694275926,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","next",53.24724559957057,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","next",54.56685849685536,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","next",22.751232777317057,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","next",22.223084519824866,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","fresh",25.584390094804263,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","fresh",22.623065684182105,"binary64"],["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","next",0.0078125,"binary64"]],"compiler":[[23,15],[11,8],[8,7],[27,18],[22,16],[17,12],[10,8],[11,9],[23,15],[11,8],[8,7],[27,18],[22,16],[17,12],[10,8],[11,9]],"count":[[56,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[55,8],"picked":[1,0]}],"memory":[[5232496,5232496]],"min-error":[[0.0,"binary64"]],"time":6.64208984375,"type":"prune"},{"egraph":[[0,8439,234,0.106711914],[16,6479,234,0.023663099],[15,6479,234,0.011008406],[14,6284,234,0.012760321],[13,5627,234,0.017082467],[12,5627,234,0.00691828],[11,5614,234,0.00708009],[10,5614,234,0.009166365],[9,3549,234,0.013641174],[8,3549,234,0.006286994],[7,3511,234,0.006490711],[6,3472,234,0.005987528],[5,3382,234,0.007159174],[4,1467,234,0.007990987],[3,436,234,0.004868316],[2,179,234,0.001551818],[1,93,234,0.000755279],[0,52,234,0.000583766],[0,30,240,0.000556938]],"inputs":[["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","(expm1.f64 (*.f64 x a))","(*.f64 x a)","x","a","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","x","a","#s(literal 1 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","a","#s(literal 1/6 binary64)","(*.f64 x a)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","cost-diff",0],["(fma.f64 x a #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",0],["(*.f64 x a)","cost-diff",0],["(expm1.f64 (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","cost-diff",0]],"memory":[[-4622592,45777408]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","(expm1.f64 (*.f64 x a))","(*.f64 x a)","x","a","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","x","a","#s(literal 1 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) a) x))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) a) x)","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","a","#s(literal 1/6 binary64)","(*.f64 x a)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":425.22509765625,"type":"simplify"},{"compiler":[[206,30]],"locations":[["(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","accuracy",0.06640625],["(*.f64 #s(literal 1/24 binary64) x)","accuracy",0.328125],["(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","accuracy",1.4071259451398612],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","accuracy",22.743045854242922],["(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","accuracy",0.05859375],["(*.f64 #s(literal 1/6 binary64) x)","accuracy",0.32421875],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","accuracy",0.9972333910341836],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","accuracy",22.21350305966058],["(fma.f64 x a #s(literal 1 binary64))","accuracy",0.0],["#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","accuracy",22.87941708522433],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",30.980191765151368],["#s(approx (exp (* a x)) #s(literal 1 binary64))","accuracy",23.092529389255184],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","accuracy",30.980191765151368],["(*.f64 x a)","accuracy",0.0],["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","accuracy",0.0],["(expm1.f64 (*.f64 x a))","accuracy",0.0078125]],"memory":[[3854160,29908976]],"mixsample":[[0.185546875,"ival-true",0],[2.524658203125,"ival-exp",0],[7.086181640625,"ival-add",0],[19.8759765625,"ival-mult",0],[6.340087890625,"const",0],[3.450439453125,"ival-expm1",0],[0.31103515625,"exact",0],[0.080322265625,"ival-assert",0]],"outcomes":[[57.96826171875,0,"valid",256]],"time":78.760986328125,"type":"localize"},{"count":[[19,93]],"inputs":[["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","(expm1.f64 (*.f64 x a))","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 #s(literal 1/24 binary64) x)","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))"]],"memory":[[700064,8329072]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* 1/2 a)","(* a (+ 1/2 (* 1/6 (* a x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/2 x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","1/6","(+ 1/6 (* 1/24 (* a x)))","(- (exp (* a x)) 1)","(exp (* a x))","(* a (+ x (/ 1 a)))","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/6 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* 1/24 (* a x))","(* a (+ (* 1/24 x) (* 1/6 (/ 1 a))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(* -1 (* a (- (* -1/24 x) (* 1/6 (/ 1 a)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1/2 (* 1/6 (* a x))))","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(* 1/6 x)","(* 1/24 x)","(* x (+ a (/ 1 x)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(* x (+ (* 1/24 a) (* 1/6 (/ 1 x))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))","(* -1 (* x (- (* -1/24 a) (* 1/6 (/ 1 x)))))"]],"series":[[6.575927734375,"((- (exp (* a x)) 1) (- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* 1/6 x) (* 1/24 x) (+ (* (* 1/24 x) a) 1/6))","x","-inf"],[3.575927734375,"((- (exp (* a x)) 1) (- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* 1/6 x) (* 1/24 x) (+ (* (* 1/24 x) a) 1/6))","x","inf"],[2.337890625,"((- (exp (* a x)) 1) (- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* 1/6 x) (* 1/24 x) (+ (* (* 1/24 x) a) 1/6))","x","0"],[3.965087890625,"((- (exp (* a x)) 1) (- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* 1/6 x) (* 1/24 x) (+ (* (* 1/24 x) a) 1/6))","a","-inf"],[4.0,"((- (exp (* a x)) 1) (- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* 1/6 x) (* 1/24 x) (+ (* (* 1/24 x) a) 1/6))","a","inf"],[2.513916015625,"((- (exp (* a x)) 1) (- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* 1/6 x) (* 1/24 x) (+ (* (* 1/24 x) a) 1/6))","a","0"]],"time":24.921875,"type":"series"},{"count":[[93,93]],"egraph":[[0,8531,1265,0.149987645],[2,3966,1382,0.027957819],[1,1172,1464,0.013061586],[0,351,1498,0.003697012]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* 1/2 a)","(* a (+ 1/2 (* 1/6 (* a x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/2 x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","1/6","(+ 1/6 (* 1/24 (* a x)))","(- (exp (* a x)) 1)","(exp (* a x))","(* a (+ x (/ 1 a)))","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/6 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* 1/24 (* a x))","(* a (+ (* 1/24 x) (* 1/6 (/ 1 a))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(* -1 (* a (- (* -1/24 x) (* 1/6 (/ 1 a)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1/2 (* 1/6 (* a x))))","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(* 1/6 x)","(* 1/24 x)","(* x (+ a (/ 1 x)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(* x (+ (* 1/24 a) (* 1/6 (/ 1 x))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))","(* -1 (* x (- (* -1/24 a) (* 1/6 (/ 1 x)))))"]],"memory":[[5191760,66099120]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 x a)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 x a #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","(+ 1 (* 1/2 (* a x)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(* 1/2 a)","(*.f64 #s(literal 1/2 binary64) a)","(* a (+ 1/2 (* 1/6 (* a x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a)","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x)","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x)","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 (* a x)))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x a) #s(literal 1/6 binary64))","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 x a))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* a (+ x (/ 1 a)))","(fma.f64 x a #s(literal 1 binary64))","(* 1/6 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (pow.f64 a #s(literal 3 binary64)))","(* 1/6 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 1/6 binary64)) x) x)","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (*.f64 a a))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(fma.f64 (*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) a) a #s(literal 1 binary64))","(* 1/6 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) #s(literal 1/6 binary64)) x)","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) a) a)","(* 1/24 (* (pow a 4) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 4 binary64)))","(* 1/24 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)) #s(literal 1 binary64))","(* 1/24 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) a) a) #s(literal 1/24 binary64))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x a) #s(literal 1/6 binary64))) a)","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a)))) (*.f64 a a))","(* 1/24 (* a x))","(*.f64 #s(literal 1/24 binary64) (*.f64 x a))","(* a (+ (* 1/24 x) (* 1/6 (/ 1 a))))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x a) #s(literal 1/6 binary64))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(fma.f64 x a #s(literal 1 binary64))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) a) a)","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 x x) a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 x #s(literal -1/6 binary64) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 a))) a) a)","(* -1 (* a (- (* -1/24 x) (* 1/6 (/ 1 a)))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) x) a #s(literal -1/6 binary64)))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x #s(literal 1 binary64))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a)","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(* x (+ 1/2 (* 1/6 (* a x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ a (/ 1 x)))","(fma.f64 x a #s(literal 1 binary64))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 a (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (*.f64 a a))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) a) a #s(literal 1 binary64))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) a) a)","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(*.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (/.f64 a (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x a) #s(literal 1/6 binary64))) a)","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(*.f64 (fma.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* x (+ (* 1/24 a) (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x a) #s(literal 1/6 binary64))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(fma.f64 x a #s(literal 1 binary64))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 a a) #s(literal 1/2 binary64) (/.f64 a x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) x) x)","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) a) a)","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 a a) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 a a) #s(literal 1/2 binary64) (/.f64 a x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) (*.f64 x a) #s(literal 1/6 binary64))) a)","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) a) a (/.f64 (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (- (* -1/24 a) (* 1/6 (/ 1 x)))))","(fma.f64 (*.f64 #s(literal -1/24 binary64) a) (neg.f64 x) #s(literal 1/6 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":338.53515625,"type":"simplify"},{"count":[[19,161]],"inputs":[["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","(expm1.f64 (*.f64 x a))","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 #s(literal 1/24 binary64) x)","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))"]],"memory":[[-9326816,72470928]],"outputs":[["#s(approx (+ (exp (* a x)) -1) (expm1.f64 (*.f64 x a)))","(neg.f64 (/.f64 (expm1.f64 (*.f64 a (+.f64 x x))) (+.f64 (neg.f64 (exp.f64 (*.f64 x a))) #s(literal -1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 a (+.f64 x x)))) (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64))))","(+.f64 (exp.f64 (*.f64 x a)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (*.f64 x a)))","(+.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 x x))) (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 (*.f64 x a) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))))","(-.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (*.f64 x a)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x a))))","(-.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 x x))) (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 (*.f64 x a) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 x a)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","(*.f64 (+.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))))","(+.f64 (*.f64 x a) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 x a))","(+.f64 (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))))","(+.f64 (log.f64 (exp.f64 (*.f64 x (/.f64 a #s(literal 2 binary64))))) (log.f64 (exp.f64 (*.f64 x (/.f64 a #s(literal 2 binary64))))))","(*.f64 x a)","(*.f64 a x)","(*.f64 (*.f64 x a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x a))","(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x) #s(literal 0 binary64)) (fma.f64 (*.f64 (*.f64 x a) x) a (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 x a) #s(literal 0 binary64)))))","(log.f64 (exp.f64 (*.f64 x a)))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 (*.f64 x a) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 x a) #s(literal 0 binary64))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (neg.f64 a) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 x a) (fma.f64 a x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x) #s(literal 1 binary64))) (fma.f64 (*.f64 x a) (fma.f64 a x #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64))) (fma.f64 a x #s(literal -1 binary64))))","(+.f64 (*.f64 x a) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 x a))","(+.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 a x #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 a x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 a) x #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (neg.f64 a) x #s(literal 1 binary64))))","(*.f64 (fma.f64 x a #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 x a #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal -1 binary64))) (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x a #s(literal 1 binary64)) (/.f64 (fma.f64 a x #s(literal -1 binary64)) (fma.f64 a x #s(literal -1 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 a) x #s(literal 1 binary64))))","#s(approx (+ (exp (* a x)) -1) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a)))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 x a))","(+.f64 (*.f64 x a) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a)) #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 a (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 x a) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x a) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) a) x)","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 x a)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 x (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) a))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1 binary64)) (*.f64 x a)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 x a)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal -1 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 x a)) (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 (neg.f64 a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (neg.f64 a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 (neg.f64 a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (neg.f64 a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) (*.f64 x a)) (*.f64 a #s(literal 1/2 binary64)))","(+.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 (*.f64 a #s(literal 1/6 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a))","(*.f64 a (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a) #s(literal -1/4 binary64)) (/.f64 a (fma.f64 (*.f64 a #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a) #s(literal -1/4 binary64)) a) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x a) #s(literal -1/6 binary64) #s(literal 1/2 binary64))))","(*.f64 a (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) a) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (fma.f64 (*.f64 a #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a) #s(literal -1/4 binary64)) a) (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/216 binary64) #s(literal -1/8 binary64))) (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a) (fma.f64 (*.f64 x #s(literal 1/12 binary64)) a #s(literal 1/4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a) #s(literal -1/4 binary64)) a) (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a) #s(literal -1/4 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x a) #s(literal -1/6 binary64) #s(literal 1/2 binary64))) a))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (/.f64 a (fma.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (fma.f64 (*.f64 a #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) a) (fma.f64 (*.f64 (fma.f64 (neg.f64 a) (*.f64 x #s(literal 1/12 binary64)) #s(literal 1/4 binary64)) (fma.f64 (neg.f64 a) (*.f64 x #s(literal 1/12 binary64)) #s(literal 1/4 binary64))) (fma.f64 (neg.f64 a) (*.f64 x #s(literal 1/12 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/46656 binary64) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (*.f64 (*.f64 a a) (*.f64 x x))))))) (fma.f64 (fma.f64 (neg.f64 a) (*.f64 x #s(literal 1/12 binary64)) #s(literal 1/4 binary64)) (-.f64 (fma.f64 (neg.f64 a) (*.f64 x #s(literal 1/12 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/36 binary64)) (*.f64 x a))) (*.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (*.f64 (*.f64 a a) (*.f64 x x))))))","#s(approx (+ (exp (* a x)) -1) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 a a) (*.f64 x x))) (*.f64 x a))","(+.f64 (*.f64 x a) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 a a) (*.f64 x x))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 a a) x) a) x)","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a)) #s(literal 1 binary64))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 a (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x))","(*.f64 x (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 a a) x) a))","(*.f64 (*.f64 x a) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 x a)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (/.f64 (*.f64 x a) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 x a)) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 x a)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (*.f64 x a)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (neg.f64 a) x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (neg.f64 a) x) #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (neg.f64 a) x) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (neg.f64 a) x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (*.f64 x #s(literal 1/2 binary64)))","(+.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x))","(*.f64 x (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal -1/4 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal -1/4 binary64)) (/.f64 x (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64))))","(*.f64 x (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/8 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal -1/4 binary64)) x) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal -1/8 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (fma.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal -1/4 binary64)) x) (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal -1/4 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal -1/4 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64))) x))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/8 binary64)) (/.f64 x (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/8 binary64)) x) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64)) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)))))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal -1/2 binary64)) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)))))","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 x #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x a) #s(literal -1/24 binary64) #s(literal 1/6 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a) #s(literal -1/36 binary64))) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) a) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64)) #s(literal 1/36 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) a) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64)) #s(literal 1/36 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/24 binary64) x) a) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 #s(literal 1/24 binary64) x) a))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64))))","(-.f64 (/.f64 #s(literal 1/36 binary64) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x a) #s(literal -1/24 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a)) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x a) #s(literal -1/24 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a) #s(literal -1/36 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x a) #s(literal -1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal -1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x a) #s(literal -1/24 binary64) #s(literal 1/6 binary64))) (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 a a) #s(literal -1/36 binary64)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal -1/6 binary64))))","(*.f64 (+.f64 #s(literal 1/36 binary64) (*.f64 #s(literal -1/576 binary64) (*.f64 (*.f64 a a) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x a) #s(literal -1/24 binary64)))))"]],"time":3161.805908203125,"type":"rewrite"},{"compiler":[[10086,1310]],"memory":[[4061536,27600912]],"time":39.0,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","next",53.096384694275926,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",53.24724559957057,"binary64"],["(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",53.24724559957053,"binary64"],["(-.f64 #s(approx (exp (* a x)) (neg.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (neg.f64 a) x #s(literal 1 binary64))))) #s(literal 1 binary64))","fresh",54.3441835305711,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",54.56685849685536,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))))","fresh",53.27434938017653,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","done",22.751232777317057,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","done",22.223084519824866,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","next",22.229693711948293,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","fresh",25.584390094804263,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","next",23.132470242282366,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","next",22.75122040513373,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","next",22.623065684182105,"binary64"],["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","done",0.0078125,"binary64"]],"compiler":[[23,15],[11,8],[12,9],[22,15],[8,7],[39,25],[27,18],[22,16],[22,15],[17,12],[33,24],[27,18],[10,8],[11,9],[23,15],[12,9],[22,15],[39,25],[22,15],[17,12],[33,24],[27,18],[10,8]],"count":[[282,14]],"kept":[{"done":[0,0],"fresh":[3,3],"new":[274,6],"picked":[5,5]}],"memory":[[-126704,15883728]],"min-error":[[0.0,"binary64"]],"time":14.553955078125,"type":"prune"},{"egraph":[[0,8877,386,0.129110749],[17,7766,394,0.017660873],[16,7766,394,0.016357671],[15,7764,394,0.016397156],[14,7760,394,0.018439001],[13,7760,394,0.01079498],[12,7726,394,0.011959859],[11,7717,394,0.010120735],[10,7717,394,0.013918027],[9,5049,394,0.016818335],[8,5049,394,0.008265581],[7,5029,394,0.008716976],[6,4993,394,0.009162718],[5,3292,394,0.013120471],[4,1971,394,0.009265095],[3,767,394,0.007239149],[2,285,394,0.002479381],[1,123,394,0.001036502],[0,67,394,0.000692571],[0,41,394,0.000391564]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","(fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 x a) x)","(*.f64 x a)","x","a","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(*.f64 x a)","x","a","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","#s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","a","#s(literal 1 binary64)","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","a","#s(literal 1/6 binary64)","(*.f64 x a)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","cost-diff",0],["(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a)","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["#s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","cost-diff",0],["(*.f64 x a)","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","cost-diff",0],["(*.f64 (*.f64 x a) x)","cost-diff",0],["(fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x)","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","cost-diff",0]],"memory":[[-3071120,56792432]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)","(fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x)","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x)","(*.f64 (*.f64 x a) x)","(*.f64 x a)","x","a","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(*.f64 x a)","x","a","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 a a) #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a) x))","(*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (fma.f64 (*.f64 a a) #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a) x)","(fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","#s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","a","#s(literal 1 binary64)","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","a","#s(literal 1/6 binary64)","(*.f64 x a)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":441.41796875,"type":"simplify"},{"compiler":[[316,38]],"locations":[["(*.f64 #s(literal 1/24 binary64) x)","accuracy",0.328125],["(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a)","accuracy",0.4919674596705772],["(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","accuracy",0.7216032811361881],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","accuracy",22.743045854242922],["(*.f64 #s(literal 1/6 binary64) x)","accuracy",0.32421875],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","accuracy",0.9972333910341836],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","accuracy",22.55402157390193],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",30.980191765151368],["(*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a))","accuracy",0.04296875],["(fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","accuracy",1.4071259451398612],["#s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x))","accuracy",22.34048858034322],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","accuracy",22.743045854242922],["(*.f64 x a)","accuracy",0.0],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","accuracy",22.623065684182105],["(*.f64 (*.f64 x a) x)","accuracy",0.1171875],["(*.f64 #s(literal 1/6 binary64) x)","accuracy",0.32421875],["(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","accuracy",1.4263106023828214],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","accuracy",22.21350305966058]],"memory":[[4726016,38782736]],"mixsample":[[0.246337890625,"ival-true",0],[2.620361328125,"ival-exp",0],[10.210205078125,"ival-add",0],[29.964599609375,"ival-mult",0],[7.08837890625,"const",0],[2.11376953125,"ival-expm1",0],[0.319580078125,"exact",0],[0.10400390625,"ival-assert",0]],"outcomes":[[74.922119140625,0,"valid",256]],"time":100.507080078125,"type":"localize"},{"count":[[20,107]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","(fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 x a) x)","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","#s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64))","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 #s(literal 1/24 binary64) x)"]],"memory":[[125952,7732848]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(* a (pow x 2))","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/2 x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3)))))))","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(exp (* a x))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (+ (/ 1 (pow a 3)) (/ x (pow a 2))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/24 (* (pow a 3) (pow x 4)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 3) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))) a)) (* -1/24 (pow x 4)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1/2 (* 1/6 (* a x))))","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(* x (+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))))))","(* 1/6 x)","(* 1/24 x)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (+ (/ 1 (pow x 3)) (/ a (pow x 2))))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))"]],"series":[[2.52587890625,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (* x a) x) (- (exp (* a x)) 1) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (- (exp (* a x)) 1) (* (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) a) (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) (* 1/6 x) (* 1/24 x))","x","-inf"],[2.02197265625,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (* x a) x) (- (exp (* a x)) 1) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (- (exp (* a x)) 1) (* (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) a) (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) (* 1/6 x) (* 1/24 x))","x","inf"],[1.76513671875,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (* x a) x) (- (exp (* a x)) 1) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (- (exp (* a x)) 1) (* (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) a) (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) (* 1/6 x) (* 1/24 x))","x","0"],[2.468017578125,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (* x a) x) (- (exp (* a x)) 1) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (- (exp (* a x)) 1) (* (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) a) (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) (* 1/6 x) (* 1/24 x))","a","-inf"],[3.5380859375,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (* x a) x) (- (exp (* a x)) 1) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (- (exp (* a x)) 1) (* (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) a) (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) (* 1/6 x) (* 1/24 x))","a","inf"],[1.8779296875,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (* x a) x) (- (exp (* a x)) 1) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (- (exp (* a x)) 1) (* (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) a) (* (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) x) (+ (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) (* x a)) 1) (* 1/6 x) (* 1/24 x))","a","0"]],"time":16.5009765625,"type":"series"},{"count":[[107,106]],"egraph":[[0,8429,1716,0.140398205],[2,4972,1863,0.025074357],[1,1360,1961,0.015301626],[0,397,2023,0.004075809]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(* a (pow x 2))","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/2 x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3)))))))","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(exp (* a x))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (+ (/ 1 (pow a 3)) (/ x (pow a 2))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/24 (* (pow a 3) (pow x 4)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 3) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))) a)) (* -1/24 (pow x 4)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1/2 (* 1/6 (* a x))))","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(* x (+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))))))","(* 1/6 x)","(* 1/24 x)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (+ (/ 1 (pow x 3)) (/ a (pow x 2))))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))"]],"memory":[[6528128,65663616]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 x a)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","x","(+ x (* 1/2 (* a (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x)","(* a (pow x 2))","(*.f64 (*.f64 x x) a)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 (* a x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x)","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x)","(+ 1 (* a x))","(fma.f64 x a #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","(+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x)","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 x a))","(* 1/6 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (pow.f64 a #s(literal 3 binary64)))","(* 1/6 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)) a) a)","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 a a) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (*.f64 a a))","(* 1/24 (* (pow a 4) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 4 binary64)))","(* 1/24 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)) #s(literal 1 binary64))","(* 1/24 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) a) a) #s(literal 1/24 binary64))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a))) (*.f64 a a))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a)))) (*.f64 a a))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (+ (/ 1 (pow a 3)) (/ x (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 x (*.f64 a a)))) (pow.f64 a #s(literal 3 binary64)))","(* 1/6 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/6 binary64)) x)","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (*.f64 a a))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(fma.f64 (*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) a) a #s(literal 1 binary64))","(* 1/24 (* (pow a 3) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (neg.f64 a))) a) a)","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal -1/6 binary64) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 x (fma.f64 x #s(literal -1/6 binary64) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 a))) a) a)","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))) a)) (* -1/6 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 (+.f64 x (/.f64 #s(literal 1 binary64) a)) a)) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) a) a)","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 3) a)) (* -1/24 (pow x 4)))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))) a)) (* -1/24 (pow x 4)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 4 binary64)) (/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))) a)) (* -1/24 (pow x 4)))))","(*.f64 (neg.f64 (pow.f64 a #s(literal 3 binary64))) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 4 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (neg.f64 a))) (neg.f64 a))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x) a)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(* x (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x)","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(* x (+ 1/2 (* 1/6 (* a x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","(* x (+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 a (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x x) #s(literal 1 binary64)) x)","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(*.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (/.f64 a (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(*.f64 (fma.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (+ (/ 1 (pow x 3)) (/ a (pow x 2))))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 a (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x x) #s(literal 1 binary64))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)) (fma.f64 (/.f64 a (*.f64 x x)) #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) a) a (/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 a a) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) a) a (/.f64 (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))) x)) (* -1/6 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 (+.f64 a (/.f64 #s(literal 1 binary64) x)) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) x) x)","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 a (fma.f64 #s(literal -1/6 binary64) a (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) a) a (/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":317.555908203125,"type":"simplify"},{"count":[[20,137]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","(fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 x a) x)","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","#s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64))","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 #s(literal 1/24 binary64) x)"]],"memory":[[-8916352,76156864]],"outputs":[["#s(approx (+ (exp (* a x)) -1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 x a))","(+.f64 (*.f64 x a) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))))","(+.f64 (*.f64 a (fma.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x) x)) (*.f64 a (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x))))","(+.f64 (*.f64 a (*.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x))) (*.f64 a (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x) x)))","(+.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x) x) a) (*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x)) a))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x)) a) (*.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x) x) a))","(*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","(*.f64 a (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 x a) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x))) (/.f64 a (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x))))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x a) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) a) x)","(neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x))) (neg.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x)))))","(neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) (neg.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x)))) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x))))","(neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x)) (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 x x)))))","(neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 x x)) (neg.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x))) (fma.f64 (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x)) (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x) x))","(+.f64 (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) x)","(+.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x) x) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x)))","(+.f64 x (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x) x))","(+.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 x x) x) (*.f64 (*.f64 (*.f64 a #s(literal 1/6 binary64)) x) (*.f64 (*.f64 x a) x)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 a a)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x))) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 a a)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (neg.f64 x))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 a a)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (-.f64 x (*.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 x a) x)","(*.f64 (*.f64 x x) a)","(*.f64 a (*.f64 x x))","(*.f64 x (*.f64 x a))","#s(approx (+ (exp (* a x)) -1) (*.f64 x a))","(+.f64 (*.f64 x a) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 x a))","(+.f64 (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))))","(*.f64 x a)","(*.f64 a x)","(*.f64 (*.f64 x a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x a))","(*.f64 a (log.f64 (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 x x) x) #s(literal 0 binary64)) (fma.f64 (*.f64 (*.f64 x a) x) a (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 x a) #s(literal 0 binary64)))))","(log.f64 (exp.f64 (*.f64 x a)))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 (*.f64 x a) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 x a) #s(literal 0 binary64))","#s(approx (+ (exp (* a x)) -1) (*.f64 (fma.f64 #s(approx (* (+ 1/2 (* (+ 1/6 (* 1/24 (* a x))) (* a x))) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 #s(approx (* (+ 1/2 (* (+ 1/6 (* 1/24 (* a x))) (* a x))) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 #s(approx (* (+ 1/2 (* (+ 1/6 (* 1/24 (* a x))) (* a x))) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","#s(approx (* (+ 1/2 (* (+ 1/6 (* 1/24 (* a x))) (* a x))) x) (*.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) (neg.f64 a) #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) #s(literal -1 binary64))) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 a x #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","(+.f64 (*.f64 x a) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 x a)) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)))) (*.f64 x a))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) (neg.f64 a) #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) (neg.f64 a) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","#s(approx (+ (exp (* a x)) -1) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 a a) (*.f64 x x))) (*.f64 x a))","(+.f64 (*.f64 x a) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 a a) (*.f64 x x))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (*.f64 x a) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 x a) x) x) a)","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (/.f64 (*.f64 x a) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 x a) a) a) x)","(*.f64 a (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 x a) x) x))","(*.f64 x (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 x a) a) a))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)) (/.f64 (*.f64 x a) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)) (*.f64 x a)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 x a)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (*.f64 x a)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))))) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 x a)) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 x a) x)) x)","(+.f64 x (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 (*.f64 x a) x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)) (/.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) x x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) x))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) x x) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))))) (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) x) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))) x))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) x x) (fma.f64 (*.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 6 binary64)))) (fma.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (-.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 4 binary64))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 a #s(literal 1/2 binary64)) x)) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 a #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)))","(+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)))) (*.f64 (*.f64 a #s(literal 1/2 binary64)) x))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 x #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))"]],"time":4135.59521484375,"type":"rewrite"},{"compiler":[[12366,1386]],"memory":[[-896480,30496384]],"time":39.10693359375,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","done",53.096384694275926,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",53.24724559957057,"binary64"],["(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","next",53.24724559957053,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",54.56685849685536,"binary64"],["#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","next",53.398017881164606,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","done",22.751232777317057,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","done",22.223084519824866,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","done",22.229693711948293,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","next",25.584390094804263,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","done",23.132470242282366,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","done",22.75122040513373,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 a #s(literal 1/2 binary64)) x #s(literal 1 binary64))) x) a))","fresh",28.619253506322266,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","next",28.619253579381123,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","next",23.13856180030622,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","done",22.623065684182105,"binary64"],["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","done",0.0078125,"binary64"]],"compiler":[[23,15],[11,8],[12,9],[8,7],[22,15],[27,18],[22,16],[22,15],[17,12],[33,24],[27,18],[32,22],[32,22],[33,23],[10,8],[11,9],[12,9],[22,15],[17,12],[32,22],[32,22],[33,23]],"count":[[318,16]],"kept":[{"done":[5,5],"fresh":[4,2],"new":[304,4],"picked":[5,5]}],"memory":[[307904,16931152]],"min-error":[[0.0,"binary64"]],"time":14.053955078125,"type":"prune"},{"egraph":[[0,8837,340,0.060651003],[5,7008,365,0.023900853],[4,4642,365,0.017004662],[3,1586,365,0.016413185],[2,481,365,0.00533847],[1,151,385,0.001769541],[0,73,385,0.00080023],[0,46,405,0.000504297]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","(*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a)","#s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","#s(literal 1/2 binary64)","(*.f64 x a)","x","a","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64)))","(+.f64 (*.f64 x a) #s(literal 1 binary64))","(*.f64 x a)","x","a","#s(literal 1 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","(-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64))","(*.f64 (*.f64 a a) (*.f64 x x))","(*.f64 a a)","a","(*.f64 x x)","x","#s(literal 0 binary64)","(-.f64 (*.f64 x a) #s(literal 0 binary64))","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","(*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a)","(*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x)","(+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 a #s(literal 1/2 binary64)) x)","(*.f64 a #s(literal 1/2 binary64))","a","#s(literal 1/2 binary64)","x","(fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 a a) (*.f64 x x))","(*.f64 a a)","(*.f64 x x)","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 1 binary64)"]],"locations":[["(*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x)","cost-diff",0],["(*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a)","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","cost-diff",0],["(+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64)))","cost-diff",5],["#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","cost-diff",0],["(-.f64 (*.f64 x a) #s(literal 0 binary64))","cost-diff",2],["(-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64))","cost-diff",2],["(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","cost-diff",8],["(*.f64 (*.f64 a a) x)","cost-diff",0],["(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","cost-diff",0],["(*.f64 x a)","cost-diff",0],["#s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(+.f64 (*.f64 x a) #s(literal 1 binary64))","cost-diff",1],["(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a)","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","cost-diff",0]],"memory":[[4891696,36079328]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)) a))","(*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a)","(*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)) a)","#s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x))","#s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64))","#s(literal 1/2 binary64)","(*.f64 x a)","x","a","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64)))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(+.f64 (*.f64 x a) #s(literal 1 binary64))","(fma.f64 x a #s(literal 1 binary64))","(*.f64 x a)","x","a","#s(literal 1 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","(*.f64 x a)","(-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64))","(*.f64 (*.f64 (*.f64 a a) x) x)","(*.f64 (*.f64 a a) (*.f64 x x))","(*.f64 (*.f64 (*.f64 a a) x) x)","(*.f64 a a)","a","(*.f64 x x)","x","#s(literal 0 binary64)","(-.f64 (*.f64 x a) #s(literal 0 binary64))","(*.f64 x a)","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 a (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) a #s(literal 1/2 binary64))) x #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a)","(*.f64 (*.f64 (fma.f64 (*.f64 a (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) a #s(literal 1/2 binary64))) x #s(literal 1 binary64)) x) a)","(*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x)","(*.f64 (fma.f64 (*.f64 a (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) a #s(literal 1/2 binary64))) x #s(literal 1 binary64)) x)","(+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64)))","(fma.f64 (*.f64 a (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) a #s(literal 1/2 binary64))) x #s(literal 1 binary64))","(*.f64 (*.f64 a #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(*.f64 a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) a)","a","#s(literal 1/2 binary64)","x","(fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 (*.f64 (*.f64 a a) x) x) #s(literal 1 binary64))","(*.f64 (*.f64 a a) (*.f64 x x))","(*.f64 (*.f64 (*.f64 a a) x) x)","(*.f64 a a)","(*.f64 x x)","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":208.583984375,"type":"simplify"},{"compiler":[[310,44]],"locations":[["(*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a)","accuracy",0.4919674596705772],["(*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x)","accuracy",0.7216032811361881],["(*.f64 (*.f64 a a) (*.f64 x x))","accuracy",15.719216814391268],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","accuracy",22.743045854242922],["(*.f64 a a)","accuracy",0.0],["(*.f64 (*.f64 a a) (*.f64 x x))","accuracy",15.719216814391268],["#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","accuracy",22.623065684182105],["(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","accuracy",32.14974264393894],["(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","accuracy",0.01171875],["(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","accuracy",0.981479238112704],["(*.f64 (*.f64 a a) x)","accuracy",7.313209346775658],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","accuracy",23.128563992282366],["(*.f64 x a)","accuracy",0.0],["(+.f64 (*.f64 x a) #s(literal 1 binary64))","accuracy",0.00390625],["#s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64)))","accuracy",22.87941708522433],["(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",30.980191765151368],["(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","accuracy",0.0546875],["(*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a)","accuracy",1.4263106023828214],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","accuracy",22.21350305966058],["#s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x))","accuracy",23.214625423735868]],"memory":[[589744,43170512]],"mixsample":[[1.75732421875,"ival-div",0],[8.857666015625,"ival-add",0],[2.7314453125,"ival-exp",0],[34.82421875,"ival-mult",0],[2.0185546875,"ival-expm1",0],[0.1015625,"ival-assert",0],[2.2412109375,"ival-sub",0],[0.2255859375,"ival-true",0],[6.516357421875,"const",0],[0.3896484375,"exact",0]],"outcomes":[[83.94580078125,0,"valid",256]],"time":112.677978515625,"type":"localize"},{"count":[[22,101]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","(*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a)","#s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(+.f64 (*.f64 x a) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64)))","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","(-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64))","(-.f64 (*.f64 x a) #s(literal 0 binary64))","#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","(+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","(*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a)","(*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x)","(*.f64 (*.f64 a a) (*.f64 x x))","(*.f64 a a)"]],"memory":[[53648,9315680]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","(* (pow a 2) x)","(* (pow a 2) (pow x 2))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3)))))))","(pow a 2)","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* a (+ x (/ 1 a)))","(exp (* a x))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 4)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 3) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))) a)) (* -1/24 (pow x 4)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* x (+ a (/ 1 x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))"]],"series":[[2.925048828125,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (+ (* 1/2 (* x a)) 1) x) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (/ (- (* (* a a) (* x x)) 0) (- (* x a) 0)) (- (* (* a a) (* x x)) 0) (- (* x a) 0) (- (exp (* a x)) 1) (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) (- (exp (* a x)) 1) (* (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) a) (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) (* (* a a) (* x x)) (* a a))","x","-inf"],[2.614013671875,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (+ (* 1/2 (* x a)) 1) x) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (/ (- (* (* a a) (* x x)) 0) (- (* x a) 0)) (- (* (* a a) (* x x)) 0) (- (* x a) 0) (- (exp (* a x)) 1) (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) (- (exp (* a x)) 1) (* (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) a) (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) (* (* a a) (* x x)) (* a a))","x","inf"],[2.288818359375,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (+ (* 1/2 (* x a)) 1) x) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (/ (- (* (* a a) (* x x)) 0) (- (* x a) 0)) (- (* (* a a) (* x x)) 0) (- (* x a) 0) (- (exp (* a x)) 1) (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) (- (exp (* a x)) 1) (* (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) a) (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) (* (* a a) (* x x)) (* a a))","x","0"],[5.110107421875,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (+ (* 1/2 (* x a)) 1) x) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (/ (- (* (* a a) (* x x)) 0) (- (* x a) 0)) (- (* (* a a) (* x x)) 0) (- (* x a) 0) (- (exp (* a x)) 1) (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) (- (exp (* a x)) 1) (* (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) a) (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) (* (* a a) (* x x)) (* a a))","a","-inf"],[2.52294921875,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (+ (* 1/2 (* x a)) 1) x) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (/ (- (* (* a a) (* x x)) 0) (- (* x a) 0)) (- (* (* a a) (* x x)) 0) (- (* x a) 0) (- (exp (* a x)) 1) (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) (- (exp (* a x)) 1) (* (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) a) (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) (* (* a a) (* x x)) (* a a))","a","inf"],[2.217041015625,"((- (exp (* a x)) 1) (* (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) a) (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (* (+ (* 1/2 (* x a)) 1) x) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (* x a) (- (exp (* a x)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (/ (- (* (* a a) (* x x)) 0) (- (* x a) 0)) (- (* (* a a) (* x x)) 0) (- (* x a) 0) (- (exp (* a x)) 1) (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) (- (exp (* a x)) 1) (* (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) a) (* (+ (* (* a 1/2) x) (+ (* (* (* a a) (* x x)) (+ (* (* 1/24 x) a) 1/6)) 1)) x) (* (* a a) (* x x)) (* a a))","a","0"]],"time":19.80615234375,"type":"series"},{"count":[[101,99]],"egraph":[[0,8137,1492,0.126266781],[2,4296,1624,0.02577211],[1,1198,1706,0.013138059],[0,346,1730,0.003641856]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","(* (pow a 2) x)","(* (pow a 2) (pow x 2))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3)))))))","(pow a 2)","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* a (+ x (/ 1 a)))","(exp (* a x))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 4)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 3) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))) a)) (* -1/24 (pow x 4)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))) a)) (* -1/24 (pow x 4)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* x (+ a (/ 1 x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))"]],"memory":[[9997424,60363712]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 x a)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","x","(+ x (* 1/2 (* a (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x)","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 x a #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","a","(* a (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)","(* (pow a 2) x)","(*.f64 (*.f64 a a) x)","(* (pow a 2) (pow x 2))","(*.f64 (*.f64 (*.f64 a a) x) x)","(+ 1 (* 1/2 (* a x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64))","(+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x)","(pow a 2)","(*.f64 a a)","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 x a))","(* 1/6 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (pow.f64 a #s(literal 3 binary64)))","(* 1/6 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) a) a) #s(literal 1/6 binary64))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 a a))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (*.f64 a a))","(* 1/2 (* a (pow x 2)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) x)","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* a (+ x (/ 1 a)))","(fma.f64 x a #s(literal 1 binary64))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* 1/2 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x) x)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a) a)","(* 1/2 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)","(* 1/24 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)) #s(literal 1 binary64))","(* 1/24 (* (pow a 4) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 4 binary64)))","(* 1/24 (* (pow a 3) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (neg.f64 a))) a) a)","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* -1 (* a (- (* -1 x) (/ 1 a))))","(fma.f64 x a #s(literal 1 binary64))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal -1/6 binary64) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 3) a)) (* -1/24 (pow x 4)))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))) a)) (* -1/24 (pow x 4)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 4 binary64)) (/.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))) a)) (* -1/24 (pow x 4)))))","(*.f64 (neg.f64 (pow.f64 a #s(literal 3 binary64))) (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 4 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (neg.f64 a))) (neg.f64 a))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(* x (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","(+ a (* 1/2 (* (pow a 2) x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/24 binary64) (*.f64 (*.f64 a a) #s(literal 1/6 binary64))) x (*.f64 #s(literal 1/2 binary64) a)) x #s(literal 1 binary64))","(* x (+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/24 binary64) (*.f64 (*.f64 a a) #s(literal 1/6 binary64))) x (*.f64 #s(literal 1/2 binary64) a)) x #s(literal 1 binary64)) x)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 a (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(*.f64 (fma.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(* x (+ a (/ 1 x)))","(fma.f64 x a #s(literal 1 binary64))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(*.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (/.f64 a (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)) (fma.f64 (/.f64 a (*.f64 x x)) #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) a) a (/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(fma.f64 x a #s(literal 1 binary64))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 a a) (fma.f64 a #s(literal -1/6 binary64) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 a (fma.f64 a #s(literal -1/6 binary64) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2))) x)) (* 1/24 (pow a 3))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) a) a (/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":296.587890625,"type":"simplify"},{"count":[[22,218]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","(*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a)","#s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(+.f64 (*.f64 x a) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64)))","(*.f64 x a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))","(-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64))","(-.f64 (*.f64 x a) #s(literal 0 binary64))","#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","(+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","(*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a)","(*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x)","(*.f64 (*.f64 a a) (*.f64 x x))","(*.f64 a a)"]],"memory":[[-15940192,19709392]],"outputs":[["#s(approx 1/6 (*.f64 #s(approx 1/6 #s(literal 1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(approx 1/6 #s(literal 1/2 binary64)) #s(literal 1/2 binary64))","#s(approx 1/6 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","(-.f64 #s(approx 1/6 #s(literal 1/2 binary64)) #s(literal 1/2 binary64))","#s(approx 1/6 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(approx 1/6 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(approx 1/6 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(approx 1/6 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -2 binary64)","#s(literal -7/6 binary64)"]],"time":705.56103515625,"type":"rewrite"},{"compiler":[[3890,564]],"memory":[[1788656,9488112]],"time":13.60107421875,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","done",53.096384694275926,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",53.982441550657235,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",53.24724559957057,"binary64"],["(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","done",53.24724559957053,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",54.56685849685536,"binary64"],["#s(approx (- (exp (* a x)) 1) (/.f64 #s(approx (- (* (* a a) (* x x)) 0) (*.f64 (*.f64 (*.f64 a a) x) x)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","fresh",50.521172401121724,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","done",22.751232777317057,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","done",22.223084519824866,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","done",22.229693711948293,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","done",25.584390094804263,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","done",22.75122040513373,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 a #s(literal 1/2 binary64)) x #s(literal 1 binary64))) x) a))","fresh",28.619253506322266,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","done",28.619253579381123,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","done",23.13856180030622,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 6 binary64)) a))","fresh",60.48856290771513,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/6 binary64)) a))","fresh",60.47081517721039,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/24 binary64)) a))","fresh",60.4738344486849,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)) x))","fresh",23.139438240742948,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","done",22.623065684182105,"binary64"],["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","done",0.0078125,"binary64"]],"compiler":[[562,139],[23,15],[18,12],[11,8],[12,9],[8,7],[30,20],[27,18],[22,16],[22,15],[17,12],[27,18],[32,22],[32,22],[33,23],[26,19],[26,19],[26,19],[27,19],[10,8],[11,9]],"count":[[115,20]],"kept":[{"done":[10,9],"fresh":[1,1],"new":[99,6],"picked":[5,4]}],"memory":[[2142016,11964912]],"min-error":[[0.0,"binary64"]],"time":14.887939453125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["a",0.0078125,1,"binary64"],["x",0.0078125,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",0.0078125,1,"binary64"],["(exp.f64 (*.f64 a x))",0.0078125,1,"binary64"],["(*.f64 a x)",0.0078125,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[25,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/24 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/6 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 6 binary64)) a))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)) x))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (/.f64 #s(approx (- (* (* a a) (* x x)) 0) (*.f64 (*.f64 (*.f64 a a) x) x)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","(-.f64 #s(approx (exp (* a x)) (neg.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (neg.f64 a) x #s(literal 1 binary64))))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 a #s(literal 1/2 binary64)) x #s(literal 1 binary64))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))))","#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"memory":[[2213664,18256160]],"oracle":[62.77240756401663],"outputs":[["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))"]],"repr":["binary64"],"time":30.617919921875,"times":[[5.924072265625,"a"],[6.10986328125,"x"],[5.041015625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[4.958984375,"(exp.f64 (*.f64 a x))"],[6.594970703125,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[22.223084519824866],"baseline":[22.223084519824866],"branch":[["a",22.22308451982487,1,"binary64"],["x",22.223084519824873,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",22.223084519824866,1,"binary64"],["(exp.f64 (*.f64 a x))",22.223084519824866,1,"binary64"],["(*.f64 a x)",22.223084519824866,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[23,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/24 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/6 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 6 binary64)) a))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)) x))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (/.f64 #s(approx (- (* (* a a) (* x x)) 0) (*.f64 (*.f64 (*.f64 a a) x) x)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64))))","(-.f64 #s(approx (exp (* a x)) (neg.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 (neg.f64 a) x #s(literal 1 binary64))))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) x) (fma.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) #s(literal 1 binary64))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))) (fma.f64 (*.f64 a #s(literal 1/2 binary64)) x #s(literal 1 binary64))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 a a) (*.f64 x x)) #s(literal 0 binary64)) (-.f64 (*.f64 x a) #s(literal 0 binary64)))))"]],"memory":[[-7752352,17442368]],"oracle":[62.77240756401663],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))"]],"repr":["binary64"],"time":29.76513671875,"times":[[5.428955078125,"a"],[5.6220703125,"x"],[6.009033203125,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[5.0009765625,"(exp.f64 (*.f64 a x))"],[5.4970703125,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[22.229693711948293],"baseline":[22.229693711948293],"branch":[["x",22.229693711948297,1,"binary64"],["a",22.229693711948293,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",22.229693711948293,1,"binary64"],["(exp.f64 (*.f64 a x))",22.229693711948293,1,"binary64"],["(*.f64 a x)",22.229693711948293,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[13,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/24 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/6 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 6 binary64)) a))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)) x))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))"]],"memory":[[4327392,12457488]],"oracle":[62.12808147185637],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))"]],"repr":["binary64"],"time":17.828857421875,"times":[[3.52099609375,"x"],[3.739990234375,"a"],[2.885009765625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[2.782958984375,"(exp.f64 (*.f64 a x))"],[3.513916015625,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[22.623065684182098],"baseline":[22.623065684182105],"branch":[["x",22.623065684182105,1,"binary64"],["a",22.62306568418211,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",22.623065684182098,1,"binary64"],["(exp.f64 (*.f64 a x))",22.623065684182098,1,"binary64"],["(*.f64 a x)",22.62306568418211,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[12,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/24 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 1/6 binary64)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) #s(literal 6 binary64)) a))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (+.f64 (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* a a) x) 1/2) a) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) a)) x))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (* x a) x) (+ (* (* 1/6 x) a) 1/2)) x) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 #s(literal 1/2 binary64) x)) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[3994176,12068512]],"oracle":[62.12808147185637],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 x a))"]],"repr":["binary64"],"time":17.31591796875,"times":[[3.258056640625,"x"],[3.4599609375,"a"],[2.739013671875,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[3.175048828125,"(exp.f64 (*.f64 a x))"],[3.333984375,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[54.56685849685531],"baseline":[54.56685849685536],"branch":[["a",54.566858496855446,1,"binary64"],["(*.f64 a x)",54.56685849685548,1,"binary64"],["x",54.56685849685531,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",54.56685849685548,1,"binary64"],["(exp.f64 (*.f64 a x))",54.56685849685548,1,"binary64"]],"compiler":[[1,2],[3,3],[1,2],[6,6],[4,4]],"count":[[1,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"link":["."],"memory":[[-2716240,6704096]],"name":["expax (section 3.5)"],"oracle":[54.56685849685536],"outputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"repr":["binary64"],"time":6.0341796875,"times":[[1.087890625,"a"],[0.98486328125,"(*.f64 a x)"],[1.022216796875,"x"],[0.919189453125,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[1.288818359375,"(exp.f64 (*.f64 a x))"]],"type":"regimes"},{"egraph":[[11,7749,73,0.050569098],[10,5163,73,0.027527531],[9,3223,73,0.018832159],[8,1162,73,0.01154075],[7,641,73,0.007279616],[6,182,73,0.003219047],[5,104,73,0.001111235],[4,74,73,0.00088578],[3,53,73,0.000636793],[2,41,73,0.000560948],[1,33,73,0.000508049],[0,24,73,0.000601914]],"inputs":[["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"memory":[[-4597776,11481488]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp (* a x)) 1) (expm1.f64 (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x a) x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"stop":[["node limit",1]],"time":144.573974609375,"type":"simplify"},{"compiler":[[73,25]],"memory":[[935024,935024]],"stop":[["fuel",1]],"time":1.52099609375,"type":"soundness"},{"compiler":[[73,25],[73,25],[4,4],[4,4],[6,6],[6,6],[11,9],[11,9]],"memory":[[459440,24931248]],"remove-preprocessing":[["(sort a x)"],[],[],[],[],[]],"time":49.513916015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01416015625,"type":"end"}]