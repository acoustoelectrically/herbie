[{"memory":[[14864,14864]],"time":0.030029296875,"type":"start"},{"compiler":[[15,10]],"memory":[[83328,83328]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.967569162616416,"unknown":0.0,"valid":0.03243083738358394}],[0,{"invalid":0.0,"precondition":0.967569162616416,"unknown":0.03243083738358394,"valid":0.0}]],"time":0.408935546875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.967569162616416,"valid":0.03243083738358394}],"memory":[[19180496,289784656]],"mixsample":[[134.388916015625,"adjust",800],[98.187744140625,"ival-log",400],[3.878173828125,"ival-assert",0],[88.857177734375,"ival-sub",0],[172.789306640625,"ival-log",0],[222.04052734375,"ival-log1p",0],[14.82275390625,"ival-and",0],[0.51025390625,"ival-sub",400],[116.941650390625,"ival-log1p",400],[29.914794921875,"ival->",0],[12.5576171875,"exact",0],[23.289306640625,"ival-<",0]],"outcomes":[[1039.4228515625,1,"valid",6437],[127.541015625,0,"valid",1819]],"time":1498.31298828125,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[248,2,0,6]],"explanations":[["-.f64","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","cancellation",248,2,[],[[]]]],"fperrors":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",250,0,false,2,[25.937245373749263]],["N",0,0,false,0,false],["(log.f64 N)",0,0,false,0,false],["(+.f64 N #s(literal 1 binary64))",0,0,false,0,false],["(log.f64 (+.f64 N #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false]],"freqs":[[1,248],[0,8]],"maybe-confusion":[[248,1,1,0,1,5]],"memory":[[-164969048,43059792]],"mixsample":[[9.56689453125,"adjust",800],[168.126708984375,"ival-add",0],[5.52880859375,"ival-log",400],[0.21630859375,"ival-assert",0],[4.944091796875,"ival-sub",0],[11.0048828125,"ival-log",0],[0.496337890625,"ival-true",0],[11.3095703125,"ival-log1p",0],[0.032470703125,"ival-sub",400],[5.699951171875,"ival-log1p",400],[0.39599609375,"exact",0]],"outcomes":[[227.682861328125,1,"valid",402],[8.693115234375,0,"valid",110]],"time":288.032958984375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,5,0.000649477],[10,182,7,0.000698746],[9,174,7,0.000845287],[8,158,7,0.000900081],[7,109,7,0.00077811],[6,80,7,0.000833634],[5,48,7,0.000502102],[4,33,7,0.000365227],[3,25,7,0.000275385],[2,19,7,0.000221059],[1,15,7,0.000230239],[0,10,7,0.000269113],[0,6,7,0.000102646]],"inputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"memory":[[-993616,15162720]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":150.43603515625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.14697265625,"type":"eval"},{"alts":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","next",48.635551032466616,"binary64"]],"compiler":[[7,6]],"memory":[[313984,313984]],"time":0.903076171875,"type":"prune"},{"egraph":[[0,182,14,0.00063678],[10,182,18,0.000769157],[9,174,18,0.001036979],[8,158,18,0.000974311],[7,109,18,0.001161492],[6,80,18,0.000894517],[5,48,18,0.000443251],[4,33,18,0.000240637],[3,25,18,0.000236124],[2,19,18,0.00017113],[1,15,18,0.000258132],[0,10,18,0.000181984],[0,6,18,9.5976e-5]],"inputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(log.f64 N)"]],"locations":[["(log.f64 N)","cost-diff",0],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","cost-diff",0],["(log.f64 (+.f64 N #s(literal 1 binary64)))","cost-diff",2]],"memory":[[857152,857152]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(log1p.f64 N)","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","N","#s(literal 1 binary64)","(log.f64 N)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":13.640869140625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(log.f64 N)","accuracy",0.0],["(log.f64 (+.f64 N #s(literal 1 binary64)))","accuracy",0.00390625],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","accuracy",48.63326602269817]],"memory":[[1842256,9764944]],"mixsample":[[4.549072265625,"adjust",800],[1.254150390625,"ival-add",0],[5.637451171875,"ival-log",400],[0.1025390625,"ival-assert",0],[2.346435546875,"ival-sub",0],[4.797607421875,"ival-log",0],[0.2421875,"ival-true",0],[6.207763671875,"ival-log1p",0],[0.01513671875,"ival-sub",400],[3.273193359375,"ival-log1p",400],[0.193359375,"exact",0]],"outcomes":[[34.491455078125,1,"valid",201],[3.72998046875,0,"valid",55]],"time":47.609130859375,"type":"localize"},{"count":[[4,27]],"inputs":[["(log.f64 (+.f64 N #s(literal 1 binary64)))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(+.f64 N #s(literal 1 binary64))","(log.f64 N)"]],"memory":[[-2775248,21634464]],"outputs":[["N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","1","(+ 1 N)","(log N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (/ 1 N)))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))"]],"series":[[34.4541015625,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","-inf"],[11.783935546875,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","inf"],[47.0361328125,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","0"]],"time":93.94091796875,"type":"series"},{"count":[[27,26]],"egraph":[[0,8152,214,0.075832693],[6,7369,223,0.021452277],[5,6313,223,0.033156188],[4,4231,223,0.041459442],[3,1601,227,0.027154112],[2,588,233,0.00877156],[1,250,234,0.003369148],[0,88,258,0.001571665]],"inputs":[["N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","1","(+ 1 N)","(log N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (/ 1 N)))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))"]],"memory":[[3049760,31632544]],"method":["egg-herbie"],"outputs":[["N","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(fma.f64 (*.f64 N N) #s(literal -1/2 binary64) (-.f64 N (log.f64 N)))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N) N (-.f64 N (log.f64 N)))","1","#s(literal 1 binary64)","(+ 1 N)","(+.f64 #s(literal 1 binary64) N)","(log N)","(log.f64 N)","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(-.f64 (log.f64 N) (/.f64 #s(literal -1 binary64) N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (log.f64 N) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(-.f64 (log.f64 N) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(* N (+ 1 (/ 1 N)))","(+.f64 #s(literal 1 binary64) N)","(+ (log -1) (* -1 (log (/ -1 N))))","(+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)"]],"stop":[["iter limit",1],["node limit",1]],"time":311.633056640625,"type":"simplify"},{"count":[[4,53]],"inputs":[["(log.f64 (+.f64 N #s(literal 1 binary64)))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(+.f64 N #s(literal 1 binary64))","(log.f64 N)"]],"memory":[[-3082192,16236656]],"outputs":[["(neg.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 N #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (log.f64 (+.f64 N #s(literal -1 binary64)))))","(+.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))))","(+.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) (neg.f64 (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (+.f64 N #s(literal -1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log1p.f64 (neg.f64 N)))","(-.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (fma.f64 (*.f64 N N) N #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 (+.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (*.f64 (log.f64 (+.f64 N #s(literal -1 binary64))) (log.f64 (+.f64 N #s(literal -1 binary64))))) (+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (+.f64 N #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) (log1p.f64 (*.f64 (*.f64 N N) N))) (*.f64 (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N)) (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N)))) (+.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (+.f64 N #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N #s(literal -1 binary64))) (fma.f64 (log.f64 (+.f64 N #s(literal -1 binary64))) (log.f64 (+.f64 N #s(literal -1 binary64))) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (+.f64 N #s(literal -1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) (log1p.f64 (*.f64 (*.f64 N N) N)) (fma.f64 (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N)) (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N)) (*.f64 (log1p.f64 (*.f64 (*.f64 N N) N)) (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N))))))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","(neg.f64 (/.f64 (*.f64 (log.f64 (fma.f64 N N N)) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (neg.f64 (log.f64 (fma.f64 N N N)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N)))))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (log.f64 (+.f64 (neg.f64 N) #s(literal -1 binary64))) (log.f64 (neg.f64 N)))","(-.f64 (+.f64 (log1p.f64 N) #s(literal 0 binary64)) (log.f64 N))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log1p.f64 (*.f64 (*.f64 N N) N))) (log1p.f64 (*.f64 (+.f64 N #s(literal -1 binary64)) N)))","(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","(neg.f64 (+.f64 (neg.f64 N) #s(literal -1 binary64)))","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","(+.f64 (/.f64 (*.f64 N N) (+.f64 N #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N))))","(-.f64 (/.f64 (*.f64 N N) (+.f64 N #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(*.f64 (+.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 N #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)))","(*.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64))) (+.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)) (fma.f64 N N #s(literal -1 binary64)))","(*.f64 (+.f64 N #s(literal 1 binary64)) (/.f64 (+.f64 N #s(literal -1 binary64)) (+.f64 N #s(literal -1 binary64))))","(*.f64 (fma.f64 N N #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))","(*.f64 (/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (+.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (fma.f64 (*.f64 N N) N #s(literal 1 binary64)))","(+.f64 (log.f64 N) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 N))","(log.f64 N)","(fma.f64 #s(literal 0 binary64) #s(literal 3 binary64) (log.f64 N))","(fma.f64 #s(literal 0 binary64) #s(literal 2 binary64) (log.f64 N))","(fma.f64 #s(literal 0 binary64) #s(literal 0 binary64) (log.f64 N))","(fma.f64 #s(literal 3 binary64) #s(literal 0 binary64) (log.f64 N))","(fma.f64 #s(literal 2 binary64) #s(literal 0 binary64) (log.f64 N))"]],"time":297.904052734375,"type":"rewrite"},{"compiler":[[1199,291]],"memory":[[-610688,7223424]],"time":9.554931640625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","next",48.727534396643435,"binary64"],["(-.f64 (log1p.f64 N) (log.f64 N))","next",48.63326602269817,"binary64"],["(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))) (log.f64 N))","fresh",48.63351344348577,"binary64"],["(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N)))))","fresh",48.62458037729923,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",48.58634325963978,"binary64"],["(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","fresh",46.632265411639004,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","fresh",46.264329832301456,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","next",2.982600369875355,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","next",2.2496228716967885,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",4.463288711354196,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","next",9.92155287153418,"binary64"]],"compiler":[[14,10],[5,4],[14,10],[22,12],[24,15],[20,11],[7,6],[19,15],[23,18],[15,12],[11,9],[14,10],[5,4],[14,10],[22,12],[24,15],[20,11],[7,6],[19,15],[23,18],[15,12],[11,9]],"count":[[76,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,11],"picked":[1,0]}],"memory":[[7287488,7287488]],"min-error":[[0.33591221920446923,"binary64"]],"time":8.674072265625,"type":"prune"},{"egraph":[[0,8056,213,0.049945789],[11,7115,213,0.054988066],[10,6779,213,0.017795853],[9,6515,213,0.020165782],[8,6208,213,0.020161653],[7,5389,213,0.023892785],[6,4162,213,0.023377028],[5,1754,213,0.023159402],[4,784,213,0.008674605],[3,356,213,0.003782251],[2,167,213,0.001442844],[1,100,213,0.000741014],[0,62,215,0.000632188],[0,37,221,0.000396759]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64))","(/.f64 #s(literal 1/3 binary64) N)","#s(literal 1/3 binary64)","N","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(-.f64 (log1p.f64 N) (log.f64 N))","(log1p.f64 N)","N","(log.f64 N)","(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","(+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(neg.f64 (log.f64 N))","(log.f64 N)","N","(log.f64 (fma.f64 N N #s(literal -1 binary64)))","(fma.f64 N N #s(literal -1 binary64))","#s(literal -1 binary64)","(log.f64 (+.f64 N #s(literal -1 binary64)))","(+.f64 N #s(literal -1 binary64))"]],"locations":[["(log.f64 N)","cost-diff",0],["(neg.f64 (log.f64 N))","cost-diff",0],["(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","cost-diff",0],["(+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","cost-diff",1],["(log.f64 N)","cost-diff",0],["(log1p.f64 N)","cost-diff",0],["(-.f64 (log1p.f64 N) (log.f64 N))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","cost-diff",0],["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","cost-diff",0],["(/.f64 #s(literal 1 binary64) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","cost-diff",0],["(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","cost-diff",0],["(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","cost-diff",0]],"memory":[[-6828112,20255616]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64))","(/.f64 #s(literal 1/3 binary64) N)","#s(literal 1/3 binary64)","N","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(-.f64 (log1p.f64 N) (log.f64 N))","(log1p.f64 N)","N","(log.f64 N)","(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","(-.f64 (-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 N)) (log.f64 (-.f64 N #s(literal 1 binary64))))","(+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 N))","(neg.f64 (log.f64 N))","(log.f64 N)","N","(log.f64 (fma.f64 N N #s(literal -1 binary64)))","(fma.f64 N N #s(literal -1 binary64))","#s(literal -1 binary64)","(log.f64 (+.f64 N #s(literal -1 binary64)))","(log.f64 (-.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal -1 binary64))","(-.f64 N #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":393.19091796875,"type":"simplify"},{"compiler":[[199,33]],"locations":[["(log.f64 (+.f64 N #s(literal -1 binary64)))","accuracy",0.0],["(log.f64 N)","accuracy",0.0],["(+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","accuracy",0.08203125],["(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","accuracy",48.64484172400137],["(log1p.f64 N)","accuracy",0.0],["(log.f64 N)","accuracy",0.0],["(-.f64 (log1p.f64 N) (log.f64 N))","accuracy",48.63326602269817],["(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","accuracy",0.1015625],["(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","accuracy",0.1015625],["(/.f64 #s(literal 1/3 binary64) N)","accuracy",0.3125],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","accuracy",2.91571697175357],["(/.f64 #s(literal 1 binary64) N)","accuracy",0.0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","accuracy",9.92155287153418],["(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","accuracy",0.09375],["(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","accuracy",0.162441259768442],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","accuracy",0.28515625],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","accuracy",2.179309751176971]],"memory":[[6365520,47079968]],"mixsample":[[21.43994140625,"ival-div",0],[16.25048828125,"adjust",800],[0.115234375,"ival-assert",0],[16.558837890625,"ival-sub",0],[0.0322265625,"ival-sub",400],[7.5673828125,"const",0],[3.383544921875,"ival-log1p",400],[0.43408203125,"ival-neg",400],[6.250732421875,"ival-add",0],[2.276611328125,"ival-mult",0],[0.3798828125,"ival-mult",400],[7.861572265625,"ival-log",400],[1.161865234375,"ival-add",400],[15.031982421875,"ival-log",0],[0.276123046875,"ival-true",0],[7.20654296875,"ival-log1p",0],[0.72412109375,"exact",0],[1.885986328125,"ival-neg",0]],"outcomes":[[126.541748046875,1,"valid",201],[15.782470703125,0,"valid",55]],"time":174.386962890625,"type":"localize"},{"count":[[20,87]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(-.f64 (log1p.f64 N) (log.f64 N))","(log1p.f64 N)","(log.f64 N)","(+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","(neg.f64 (log.f64 N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/3 binary64) N)","(log.f64 (+.f64 N #s(literal -1 binary64)))"]],"memory":[[-4610672,20918672]],"outputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ 1 N)","(/ 1/3 (pow N 3))","(/ (+ 1/3 (* -1/2 N)) (pow N 3))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 3))","(/ 1/3 (pow N 2))","(/ (+ 1/3 (* -1/2 N)) (pow N 2))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 2))","N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(log N)","(- (log -1) (log N))","(- (+ (log -1) (* -1 (pow N 2))) (log N))","(- (+ (log -1) (* (pow N 2) (- (* -1/2 (pow N 2)) 1))) (log N))","(- (+ (log -1) (* (pow N 2) (- (* (pow N 2) (- (* -1/3 (pow N 2)) 1/2)) 1))) (log N))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ 1/3 N)","(log -1)","(+ (log -1) (* -1 N))","(+ (log -1) (* N (- (* -1/2 N) 1)))","(+ (log -1) (* N (- (* N (- (* -1/3 N) 1/2)) 1)))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","1","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(- (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N))))","(- (* -2 (log (/ 1 N))) (+ (* -1 (log (/ 1 N))) (/ 1 (pow N 2))))","(- (+ (* -2 (log (/ 1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow N 2)))) (pow N 2)))) (* -1 (log (/ 1 N))))","(- (+ (* -2 (log (/ 1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow N 2)))) (pow N 4)))) (+ (* -1 (log (/ 1 N))) (/ 1 (pow N 2))))","(log (/ 1 N))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(- (* -1 (log (/ 1 N))) (/ 1 N))","(+ (* -1 (log (/ 1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 N))) N)))","(- (+ (* -1 (log (/ 1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 N))) (pow N 2)))) (/ 1 N))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(- (* -2 (log (/ -1 N))) (+ (log -1) (* -1 (log (/ -1 N)))))","(- (* -2 (log (/ -1 N))) (+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 (pow N 2)))))","(- (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow N 2)))) (pow N 2)))) (+ (log -1) (* -1 (log (/ -1 N)))))","(- (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow N 2)))) (pow N 4)))) (+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 (pow N 2)))))","(* -2 (log -1))","(- (/ 1 N) (* 2 (log -1)))","(- (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N)) (* 2 (log -1)))","(- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N)) (* 2 (log -1)))","(* -1 (+ (log -1) (* -1 (log (/ -1 N)))))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(- (+ (log -1) (* -1 (log (/ -1 N)))) (/ 1 N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 N))) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow N 2)) (* 1/2 (/ 1 N)))) N))))"]],"series":[[12.39404296875,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (- (/ (- (/ 1/3 N) 1/2) N) -1) (/ (- (/ 1/3 N) 1/2) N) (- (log (+ 1 N)) (log N)) (log (+ 1 N)) (log N) (+ (neg (log N)) (log (+ (* N N) -1))) (- (+ (neg (log N)) (log (+ (* N N) -1))) (log (+ N -1))) (neg (log N)) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (/ 1/3 N) (log (+ N -1)))","N","-inf"],[11.6328125,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (- (/ (- (/ 1/3 N) 1/2) N) -1) (/ (- (/ 1/3 N) 1/2) N) (- (log (+ 1 N)) (log N)) (log (+ 1 N)) (log N) (+ (neg (log N)) (log (+ (* N N) -1))) (- (+ (neg (log N)) (log (+ (* N N) -1))) (log (+ N -1))) (neg (log N)) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (/ 1/3 N) (log (+ N -1)))","N","inf"],[11.59814453125,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (- (/ (- (/ 1/3 N) 1/2) N) -1) (/ (- (/ 1/3 N) 1/2) N) (- (log (+ 1 N)) (log N)) (log (+ 1 N)) (log N) (+ (neg (log N)) (log (+ (* N N) -1))) (- (+ (neg (log N)) (log (+ (* N N) -1))) (log (+ N -1))) (neg (log N)) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (/ 1/3 N) (log (+ N -1)))","N","0"]],"time":36.93310546875,"type":"series"},{"count":[[87,86]],"egraph":[[0,8227,756,0.092221041],[3,4804,795,0.032646485],[2,1535,820,0.018938189],[1,582,846,0.006498793],[0,211,935,0.002195543]],"inputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ 1 N)","(/ 1/3 (pow N 3))","(/ (+ 1/3 (* -1/2 N)) (pow N 3))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 3))","(/ 1/3 (pow N 2))","(/ (+ 1/3 (* -1/2 N)) (pow N 2))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 2))","N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(log N)","(- (log -1) (log N))","(- (+ (log -1) (* -1 (pow N 2))) (log N))","(- (+ (log -1) (* (pow N 2) (- (* -1/2 (pow N 2)) 1))) (log N))","(- (+ (log -1) (* (pow N 2) (- (* (pow N 2) (- (* -1/3 (pow N 2)) 1/2)) 1))) (log N))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ 1/3 N)","(log -1)","(+ (log -1) (* -1 N))","(+ (log -1) (* N (- (* -1/2 N) 1)))","(+ (log -1) (* N (- (* N (- (* -1/3 N) 1/2)) 1)))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","1","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(- (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N))))","(- (* -2 (log (/ 1 N))) (+ (* -1 (log (/ 1 N))) (/ 1 (pow N 2))))","(- (+ (* -2 (log (/ 1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow N 2)))) (pow N 2)))) (* -1 (log (/ 1 N))))","(- (+ (* -2 (log (/ 1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow N 2)))) (pow N 4)))) (+ (* -1 (log (/ 1 N))) (/ 1 (pow N 2))))","(log (/ 1 N))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(- (* -1 (log (/ 1 N))) (/ 1 N))","(+ (* -1 (log (/ 1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 N))) N)))","(- (+ (* -1 (log (/ 1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 N))) (pow N 2)))) (/ 1 N))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(- (* -2 (log (/ -1 N))) (+ (log -1) (* -1 (log (/ -1 N)))))","(- (* -2 (log (/ -1 N))) (+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 (pow N 2)))))","(- (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow N 2)))) (pow N 2)))) (+ (log -1) (* -1 (log (/ -1 N)))))","(- (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow N 2)))) (pow N 4)))) (+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 (pow N 2)))))","(* -2 (log -1))","(- (/ 1 N) (* 2 (log -1)))","(- (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N)) (* 2 (log -1)))","(- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N)) (* 2 (log -1)))","(* -1 (+ (log -1) (* -1 (log (/ -1 N)))))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(- (+ (log -1) (* -1 (log (/ -1 N)))) (/ 1 N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 N))) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow N 2)) (* 1/2 (/ 1 N)))) N))))"]],"memory":[[2505520,42568224]],"method":["egg-herbie"],"outputs":[["(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(fma.f64 (*.f64 N N) #s(literal -1/2 binary64) (-.f64 N (log.f64 N)))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(fma.f64 (*.f64 N N) (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) (-.f64 N (log.f64 N)))","(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ -1/4 (pow N 3))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ 1/3 (pow N 3))","(/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (+ 1/3 (* -1/2 N)) (pow N 3))","(/.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 3))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ 1/3 (pow N 2))","(/.f64 #s(literal 1/3 binary64) (*.f64 N N))","(/ (+ 1/3 (* -1/2 N)) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N) N)","(/ (+ 1/3 (* N (- N 1/2))) (pow N 2))","(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","N","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(log N)","(log.f64 N)","(- (log -1) (log N))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 N))","(- (+ (log -1) (* -1 (pow N 2))) (log N))","(-.f64 (log.f64 #s(literal -1 binary64)) (fma.f64 N N (log.f64 N)))","(- (+ (log -1) (* (pow N 2) (- (* -1/2 (pow N 2)) 1))) (log N))","(fma.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal -1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (fma.f64 N N (log.f64 N))))","(- (+ (log -1) (* (pow N 2) (- (* (pow N 2) (- (* -1/3 (pow N 2)) 1/2)) 1))) (log N))","(fma.f64 (fma.f64 #s(literal -1/3 binary64) (*.f64 N N) #s(literal -1/2 binary64)) (pow.f64 N #s(literal 4 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (fma.f64 N N (log.f64 N))))","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N) N)","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(/ 1/3 N)","(/.f64 #s(literal 1/3 binary64) N)","(log -1)","(log.f64 #s(literal -1 binary64))","(+ (log -1) (* -1 N))","(-.f64 (log.f64 #s(literal -1 binary64)) N)","(+ (log -1) (* N (- (* -1/2 N) 1)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal -1 binary64)) N (log.f64 #s(literal -1 binary64)))","(+ (log -1) (* N (- (* N (- (* -1/3 N) 1/2)) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 #s(literal -1 binary64)))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","1","#s(literal 1 binary64)","(- 1 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/ -1/2 N)","(/.f64 #s(literal -1/2 binary64) N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(-.f64 (log.f64 N) (/.f64 #s(literal -1 binary64) N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (log.f64 N) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N) (log.f64 N))","(- (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N))))","(log.f64 N)","(- (* -2 (log (/ 1 N))) (+ (* -1 (log (/ 1 N))) (/ 1 (pow N 2))))","(-.f64 (log.f64 N) (/.f64 (/.f64 #s(literal 1 binary64) N) N))","(- (+ (* -2 (log (/ 1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow N 2)))) (pow N 2)))) (* -1 (log (/ 1 N))))","(-.f64 (log.f64 N) (/.f64 (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) N) N) #s(literal 1 binary64)) N) N))","(- (+ (* -2 (log (/ 1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow N 2)))) (pow N 4)))) (+ (* -1 (log (/ 1 N))) (/ 1 (pow N 2))))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) N) N) (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 4 binary64))) (log.f64 N)))","(log (/ 1 N))","(neg.f64 (log.f64 N))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(- (* -1 (log (/ 1 N))) (/ 1 N))","(-.f64 (log.f64 N) (/.f64 #s(literal 1 binary64) N))","(+ (* -1 (log (/ 1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 N))) N)))","(-.f64 (log.f64 N) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(- (+ (* -1 (log (/ 1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 N))) (pow N 2)))) (/ 1 N))","(+.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N) (log.f64 N))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(+ (log -1) (* -1 (log (/ -1 N))))","(+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+.f64 (+.f64 (log.f64 (neg.f64 N)) (/.f64 #s(literal 1 binary64) N)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N))","(- (* -2 (log (/ -1 N))) (+ (log -1) (* -1 (log (/ -1 N)))))","(-.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64)))","(- (* -2 (log (/ -1 N))) (+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 (pow N 2)))))","(-.f64 (-.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) N) N))","(- (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow N 2)))) (pow N 2)))) (+ (log -1) (* -1 (log (/ -1 N)))))","(-.f64 (-.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) N) N) #s(literal 1 binary64)) N) N))","(- (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow N 2)))) (pow N 4)))) (+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 (pow N 2)))))","(-.f64 (-.f64 (-.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) N) N)) (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 4 binary64))))","(* -2 (log -1))","(*.f64 #s(literal -2 binary64) (log.f64 #s(literal -1 binary64)))","(- (/ 1 N) (* 2 (log -1)))","(fma.f64 #s(literal -2 binary64) (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) N))","(- (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N)) (* 2 (log -1)))","(fma.f64 #s(literal -2 binary64) (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","(- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N)) (* 2 (log -1)))","(fma.f64 #s(literal -2 binary64) (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","(* -1 (+ (log -1) (* -1 (log (/ -1 N)))))","(-.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (log.f64 #s(literal -1 binary64)))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(- (+ (log -1) (* -1 (log (/ -1 N)))) (/ 1 N))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (+ 1 (* 1/2 (/ 1 N))) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow N 2)) (* 1/2 (/ 1 N)))) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) N))"]],"stop":[["iter limit",1],["node limit",1]],"time":298.255859375,"type":"simplify"},{"count":[[20,258]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(-.f64 (log1p.f64 N) (log.f64 N))","(log1p.f64 N)","(log.f64 N)","(+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","(neg.f64 (log.f64 N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/3 binary64) N)","(log.f64 (+.f64 N #s(literal -1 binary64)))"]],"memory":[[3053056,19286368]],"outputs":[["#s(approx -1/6 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(approx -1/6 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(approx -1/6 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/6 binary64)","#s(literal -1/8 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)"]],"time":476.567138671875,"type":"rewrite"},{"compiler":[[2120,406]],"memory":[[-3803216,7890272]],"time":11.14697265625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","done",48.727534396643435,"binary64"],["(-.f64 (log1p.f64 N) (log.f64 N))","done",48.63326602269817,"binary64"],["(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))) (log.f64 N))","fresh",48.63351344348577,"binary64"],["(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N)))))","fresh",48.62458037729923,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",48.58634325963978,"binary64"],["(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","fresh",46.632265411639004,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","next",46.264329832301456,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","done",2.982600369875355,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","done",2.2496228716967885,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","next",2.2496228716967885,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","next",4.463288711354196,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","fresh",3.03138418735928,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",9.92155287153418,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","fresh",3.208359732051899,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","next",2.5354428682587598,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","fresh",57.55884213984991,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","next",57.51067752997643,"binary64"]],"compiler":[[14,10],[5,4],[14,10],[22,12],[24,15],[20,11],[7,6],[19,15],[23,18],[30,23],[27,21],[30,22],[11,9],[30,23],[37,28],[9,8],[9,8],[14,10],[22,12],[24,15],[20,11],[7,6],[30,23],[27,21],[30,22],[30,23],[37,28],[9,8],[9,8]],"count":[[106,17]],"kept":[{"done":[0,0],"fresh":[6,5],"new":[95,7],"picked":[5,5]}],"memory":[[1918784,10112000]],"min-error":[[0.28903721920446923,"binary64"]],"time":12.552978515625,"type":"prune"},{"egraph":[[0,8029,361,0.050661096],[13,7965,369,0.013505863],[12,7668,369,0.034633072],[11,7094,369,0.049108436],[10,7011,369,0.021777552],[9,6878,369,0.021295356],[8,6626,369,0.024323617],[7,5602,369,0.026194858],[6,3691,369,0.02582746],[5,1489,369,0.019992428],[4,731,369,0.006821254],[3,358,369,0.002771349],[2,177,369,0.001512173],[1,108,369,0.00077729],[0,69,369,0.000663372],[0,47,369,0.000609972]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N))","#s(literal -1/2 binary64)","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)","#s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N))","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","#s(literal -1/3 binary64)","N","#s(literal 1/4 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(literal 1/4 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(/.f64 #s(literal -1/2 binary64) N)","#s(literal -1/2 binary64)","N","#s(literal -1 binary64)","(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","(log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))","(/.f64 N (+.f64 N #s(literal 1 binary64)))","N","(+.f64 N #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","#s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64))))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(-.f64 N #s(literal 1/2 binary64))","N","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/4 binary64)","(pow.f64 N #s(literal 4 binary64))","#s(literal 4 binary64)"]],"locations":[["(fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","cost-diff",0],["(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","cost-diff",0],["#s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64))))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","cost-diff",0],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(/.f64 N (+.f64 N #s(literal 1 binary64)))","cost-diff",0],["(log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))","cost-diff",0],["(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","cost-diff",0],["#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","cost-diff",0],["(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","cost-diff",0],["(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N)","cost-diff",0],["(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","cost-diff",0]],"memory":[[-1104992,23720224]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N))","#s(literal -1/2 binary64)","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)","#s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N))","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","#s(literal -1/3 binary64)","N","#s(literal 1/4 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(literal 1/4 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(/.f64 #s(literal -1/2 binary64) N)","#s(literal -1/2 binary64)","N","#s(literal -1 binary64)","(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 N (-.f64 N #s(literal -1 binary64)))))","(log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))","(log.f64 (/.f64 N (-.f64 N #s(literal -1 binary64))))","(/.f64 N (+.f64 N #s(literal 1 binary64)))","(/.f64 N (-.f64 N #s(literal -1 binary64)))","N","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","#s(literal 1 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","#s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64))))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(-.f64 N #s(literal 1/2 binary64))","N","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/4 binary64)","(pow.f64 N #s(literal 4 binary64))","#s(literal 4 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":413.89892578125,"type":"simplify"},{"compiler":[[235,37]],"locations":[["(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","accuracy",0.01171875],["(fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","accuracy",0.26953125],["(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","accuracy",0.33431625976844204],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","accuracy",2.179309751176971],["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","accuracy",0.0],["(/.f64 N (+.f64 N #s(literal 1 binary64)))","accuracy",0.0078125],["(log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))","accuracy",46.214868640424115],["(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","accuracy",0.0],["(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","accuracy",0.0859375],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","accuracy",2.179309751176971],["#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","accuracy",10.081262543778958],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","accuracy",57.51067752997643],["(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","accuracy",0.24609375],["(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)","accuracy",0.28515625],["(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","accuracy",0.3046875],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","accuracy",2.179309751176971]],"memory":[[1497920,50064112]],"mixsample":[[22.2529296875,"ival-div",0],[16.117919921875,"adjust",800],[0.612548828125,"ival-div",400],[0.130615234375,"ival-assert",0],[10.67822265625,"ival-sub",0],[0.022216796875,"ival-sub",400],[12.73974609375,"const",0],[3.52294921875,"ival-log1p",400],[5.462646484375,"ival-pow",0],[0.059326171875,"ival-neg",400],[8.27685546875,"ival-add",0],[8.987548828125,"ival-mult",0],[3.294921875,"ival-log",400],[0.736572265625,"ival-add",400],[15.83740234375,"ival-log",0],[0.25390625,"ival-true",0],[7.55908203125,"ival-log1p",0],[0.93310546875,"exact",0],[1.98828125,"ival-neg",0]],"outcomes":[[135.466552734375,1,"valid",201],[18.09228515625,0,"valid",55]],"time":184.1181640625,"type":"localize"},{"count":[[21,84]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","(log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))","(/.f64 N (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","#s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64))))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))"]],"memory":[[-4118864,3434512]],"outputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","N","(* N (+ 1 (* -1 N)))","(* N (+ 1 (* N (- N 1))))","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","1","(+ 1 N)","-1/4","(- (* 1/3 N) 1/4)","(- (* N (+ 1/3 (* -1/2 N))) 1/4)","(- (* N (+ 1/3 (* N (- N 1/2)))) 1/4)","1/4","(+ 1/4 (* -1/3 N))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","1/3","(+ 1/3 (* -1/2 N))","(+ 1/3 (* N (- N 1/2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(- 1 (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(* N (+ 1 (/ 1 N)))","(pow N 3)","(* (pow N 3) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 3) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* (pow N 3) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(* -1/3 N)","(* N (- (* 1/4 (/ 1 N)) 1/3))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(pow N 2)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(* -1 (* (pow N 3) (- (* 1/2 (/ 1 N)) 1)))","(* -1 (* (pow N 3) (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1)))","(* -1 (* (pow N 3) (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1)))","(* -1 (* N (- 1/3 (* 1/4 (/ 1 N)))))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))"]],"series":[[3.9189453125,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (neg (log (/ N (+ N 1)))) (log (/ N (+ N 1))) (/ N (+ N 1)) (+ N 1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/ (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (pow N 4)) (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (+ (* -1/3 N) 1/4) (/ (- (/ 1/4 N) 1/3) N) (/ (+ (* -1/3 N) 1/4) N) (+ (* (- N 1/2) N) 1/3))","N","-inf"],[1.81396484375,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (neg (log (/ N (+ N 1)))) (log (/ N (+ N 1))) (/ N (+ N 1)) (+ N 1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/ (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (pow N 4)) (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (+ (* -1/3 N) 1/4) (/ (- (/ 1/4 N) 1/3) N) (/ (+ (* -1/3 N) 1/4) N) (+ (* (- N 1/2) N) 1/3))","N","inf"],[2.032958984375,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (neg (log (/ N (+ N 1)))) (log (/ N (+ N 1))) (/ N (+ N 1)) (+ N 1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/ (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (pow N 4)) (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (+ (* -1/3 N) 1/4) (/ (- (/ 1/4 N) 1/3) N) (/ (+ (* -1/3 N) 1/4) N) (+ (* (- N 1/2) N) 1/3))","N","0"]],"time":9.02099609375,"type":"series"},{"count":[[84,83]],"egraph":[[0,8149,640,0.085110893],[4,7676,673,0.017998993],[3,3905,673,0.033647797],[2,1253,689,0.016327709],[1,458,701,0.005026842],[0,161,756,0.001743184]],"inputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","N","(* N (+ 1 (* -1 N)))","(* N (+ 1 (* N (- N 1))))","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","1","(+ 1 N)","-1/4","(- (* 1/3 N) 1/4)","(- (* N (+ 1/3 (* -1/2 N))) 1/4)","(- (* N (+ 1/3 (* N (- N 1/2)))) 1/4)","1/4","(+ 1/4 (* -1/3 N))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","1/3","(+ 1/3 (* -1/2 N))","(+ 1/3 (* N (- N 1/2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(- 1 (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(* N (+ 1 (/ 1 N)))","(pow N 3)","(* (pow N 3) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 3) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* (pow N 3) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(* -1/3 N)","(* N (- (* 1/4 (/ 1 N)) 1/3))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(pow N 2)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(* -1 (* (pow N 3) (- (* 1/2 (/ 1 N)) 1)))","(* -1 (* (pow N 3) (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1)))","(* -1 (* (pow N 3) (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1)))","(* -1 (* N (- 1/3 (* 1/4 (/ 1 N)))))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))"]],"memory":[[6212928,37082608]],"method":["egg-herbie"],"outputs":[["(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(fma.f64 (*.f64 N N) #s(literal -1/2 binary64) (-.f64 N (log.f64 N)))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N) N (-.f64 N (log.f64 N)))","(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ -1/4 (pow N 3))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(log N)","(log.f64 N)","(+ (log N) (* -1 N))","(-.f64 (log.f64 N) N)","(+ (log N) (* N (- (* 1/2 N) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","N","(* N (+ 1 (* -1 N)))","(*.f64 (-.f64 #s(literal 1 binary64) N) N)","(* N (+ 1 (* N (- N 1))))","(*.f64 (fma.f64 (-.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","(*.f64 (*.f64 (fma.f64 N N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) N)) N)","1","#s(literal 1 binary64)","(+ 1 N)","(+.f64 #s(literal 1 binary64) N)","-1/4","#s(literal -1/4 binary64)","(- (* 1/3 N) 1/4)","(fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64))","(- (* N (+ 1/3 (* -1/2 N))) 1/4)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","(- (* N (+ 1/3 (* N (- N 1/2)))) 1/4)","(fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","1/4","#s(literal 1/4 binary64)","(+ 1/4 (* -1/3 N))","(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/2 N))","(fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64))","(+ 1/3 (* N (- N 1/2)))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(- 1 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/ -1/2 N)","(/.f64 #s(literal -1/2 binary64) N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(/ -1 N)","(/.f64 #s(literal -1 binary64) N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)","(- 1 (/ 1 N))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N)) N))","(* N (+ 1 (/ 1 N)))","(+.f64 #s(literal 1 binary64) N)","(pow N 3)","(pow.f64 N #s(literal 3 binary64))","(* (pow N 3) (- 1 (* 1/2 (/ 1 N))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (pow.f64 N #s(literal 3 binary64)))","(* (pow N 3) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* (pow N 3) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* -1/3 N)","(*.f64 #s(literal -1/3 binary64) N)","(* N (- (* 1/4 (/ 1 N)) 1/3))","(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) N) N N) N)","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) N N) N)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N)","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N)) N))","(* -1 (* (pow N 3) (- (* 1/2 (/ 1 N)) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (pow.f64 N #s(literal 3 binary64)))","(* -1 (* (pow N 3) (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1)))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* -1 (* (pow N 3) (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1)))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* -1 (* N (- 1/3 (* 1/4 (/ 1 N)))))","(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) N N) N)"]],"stop":[["iter limit",1],["node limit",1]],"time":249.23681640625,"type":"simplify"},{"count":[[21,147]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","(log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))","(/.f64 N (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","#s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64))))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64))","(fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64))","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))"]],"memory":[[-4668448,33937392]],"outputs":[["#s(approx (log (+ N N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (* N -1/32) 1/729) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64)))) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (* N -1/32) 1/729) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64)))) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (* N -1/32) 1/729) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64)))) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (* N -1/32) 1/729) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64)))) N)) N)","#s(approx (log (+ N N)) #s(literal -1/2 binary64))","#s(approx (log (+ N N)) (/.f64 (-.f64 #s(approx (+ (+ (* N -1/32) (* N -1/32)) (* N 1/3)) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (+ (+ (* N -1/32) (* N -1/32)) (* N 1/3)) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1 binary64)) N)","(-.f64 #s(approx (+ (+ (* N -1/32) (* N -1/32)) (* N 1/3)) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1 binary64))","#s(approx (+ (+ (* N -1/32) (* N -1/32)) (* N 1/3)) (*.f64 N #s(literal -1/2 binary64)))","(neg.f64 (log.f64 (+.f64 N N)))","(+.f64 (log.f64 N) (log1p.f64 N))","(+.f64 (log1p.f64 N) (log.f64 N))","(+.f64 (log.f64 (+.f64 N N)) #s(literal 4 binary64))","(+.f64 (log.f64 (+.f64 N N)) (log1p.f64 (+.f64 N N)))","(+.f64 (log.f64 (+.f64 N N)) (log1p.f64 N))","(+.f64 (-.f64 (log1p.f64 N) #s(literal 4 binary64)) (log.f64 N))","(+.f64 (pow.f64 (log.f64 N) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal -1 binary64)))","(+.f64 #s(literal 4 binary64) (log.f64 (+.f64 N N)))","(+.f64 (log.f64 N) (*.f64 (log1p.f64 N) #s(literal -1 binary64)))","(+.f64 (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)) (*.f64 (log.f64 (+.f64 N N)) (log1p.f64 N)))","(+.f64 (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)) (*.f64 (log1p.f64 N) (log.f64 (+.f64 N N))))","(+.f64 (*.f64 (log.f64 (+.f64 N N)) (log1p.f64 N)) (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)))","(+.f64 (*.f64 (log1p.f64 N) (log.f64 (+.f64 N N))) (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)))","(neg.f64 (log.f64 (+.f64 N N)))","(+.f64 (log.f64 N) (log1p.f64 N))","(+.f64 (log1p.f64 N) (log.f64 N))","(+.f64 (log.f64 (+.f64 N N)) #s(literal 4 binary64))","(+.f64 (log.f64 (+.f64 N N)) (log1p.f64 (+.f64 N N)))","(+.f64 (log.f64 (+.f64 N N)) (log1p.f64 N))","(+.f64 (-.f64 (log1p.f64 N) #s(literal 4 binary64)) (log.f64 N))","(+.f64 (pow.f64 (log.f64 N) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal -1 binary64)))","(+.f64 #s(literal 4 binary64) (log.f64 (+.f64 N N)))","(+.f64 (log.f64 N) (*.f64 (log1p.f64 N) #s(literal -1 binary64)))","(+.f64 (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)) (*.f64 (log.f64 (+.f64 N N)) (log1p.f64 N)))","(+.f64 (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)) (*.f64 (log1p.f64 N) (log.f64 (+.f64 N N))))","(+.f64 (*.f64 (log.f64 (+.f64 N N)) (log1p.f64 N)) (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)))","(+.f64 (*.f64 (log1p.f64 N) (log.f64 (+.f64 N N))) (*.f64 (log.f64 (+.f64 N N)) (log.f64 N)))","(neg.f64 (+.f64 N N))","(+.f64 N N)","(+.f64 (+.f64 N N) (+.f64 N N))","(+.f64 (*.f64 (+.f64 N N) N) (+.f64 N N))","(+.f64 (+.f64 N N) (*.f64 (+.f64 N N) N))","(-.f64 N N)","(-.f64 (/.f64 #s(literal 4 binary64) N) (+.f64 N N))","(-.f64 #s(literal 4 binary64) (+.f64 N N))","(-.f64 (/.f64 (+.f64 N N) N) (+.f64 N N))","(-.f64 (/.f64 #s(literal 4 binary64) (+.f64 N #s(literal -1 binary64))) (+.f64 N N))","(-.f64 (/.f64 N (+.f64 N N)) (+.f64 N N))","(*.f64 (+.f64 N #s(literal -1 binary64)) (+.f64 N N))","(*.f64 (+.f64 N #s(literal -1 binary64)) N)","(*.f64 (+.f64 N N) #s(literal -1 binary64))","(*.f64 (+.f64 N N) (+.f64 N #s(literal -1 binary64)))","(neg.f64 (+.f64 N #s(literal -1 binary64)))","(+.f64 N #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) N)","(+.f64 (+.f64 N #s(literal -1 binary64)) (+.f64 N N))","(+.f64 (+.f64 N N) (+.f64 N #s(literal -1 binary64)))","(+.f64 #s(literal 4 binary64) (+.f64 N #s(literal -1 binary64)))","(+.f64 (+.f64 (+.f64 N #s(literal -1 binary64)) N) (+.f64 (+.f64 N N) N))","(+.f64 (+.f64 (+.f64 N N) N) (+.f64 (+.f64 N #s(literal -1 binary64)) N))","(+.f64 (*.f64 (+.f64 (+.f64 N #s(literal -1 binary64)) N) #s(literal -1 binary64)) (+.f64 (+.f64 N N) N))","(+.f64 (+.f64 (+.f64 N N) N) (*.f64 (+.f64 (+.f64 N #s(literal -1 binary64)) N) #s(literal -1 binary64)))","(-.f64 N #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) N)","(-.f64 (+.f64 N #s(literal -1 binary64)) (+.f64 N N))","(-.f64 (+.f64 N N) (+.f64 N #s(literal -1 binary64)))","(-.f64 #s(literal 4 binary64) (+.f64 N #s(literal -1 binary64)))","#s(approx (log (+ N N)) #s(approx (- (* N -1/32) (- (* N -1/32) (+ (* N 1/3) 9))) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))","#s(approx (- (* N -1/32) (- (* N -1/32) (+ (* N 1/3) 9))) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))","(neg.f64 (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))","(+.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (*.f64 N #s(literal -1/2 binary64)))","(+.f64 (*.f64 N #s(literal -1/2 binary64)) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64))) (*.f64 (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (*.f64 (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (*.f64 (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))) (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))))","(+.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) (*.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))","(+.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) (*.f64 #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))","(-.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)))) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))","(-.f64 (/.f64 #s(literal 4 binary64) N) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))","(-.f64 #s(literal 4 binary64) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))","(-.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) N) (/.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) N))","(-.f64 (/.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))) (/.f64 #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))","(*.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) N)","(neg.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))))","(+.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)) (fma.f64 N #s(literal -1/2 binary64) N))","(+.f64 (fma.f64 N #s(literal -1/2 binary64) N) (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)))","(+.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) #s(literal -1/2 binary64) N) (*.f64 N #s(literal -1/3 binary64)))","(+.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64))","(+.f64 #s(literal 4 binary64) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))))","(+.f64 #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))","(+.f64 (*.f64 N #s(literal -1/3 binary64)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) #s(literal -1/2 binary64) N))","(+.f64 (*.f64 N #s(literal -1/3 binary64)) (-.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)))","(+.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (*.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64))) #s(literal -1/2 binary64))))","(neg.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)))","(+.f64 (*.f64 N #s(literal -1/3 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal 4 binary64) (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)))","(+.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64)))","(+.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal 1/12 binary64))) (neg.f64 (fma.f64 N #s(literal 1/12 binary64) #s(literal -1/2 binary64))))","(+.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal 1/12 binary64))) (fma.f64 N #s(literal 1/12 binary64) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)) (*.f64 N #s(literal -1/3 binary64))) (fma.f64 N #s(literal 1/12 binary64) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64)) (*.f64 N #s(literal -1/3 binary64))) (*.f64 (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64)) (*.f64 N #s(literal -1/3 binary64))))","(+.f64 (*.f64 (*.f64 N #s(literal -1/3 binary64)) (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64))) (*.f64 (*.f64 N #s(literal -1/3 binary64)) (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal -1/2 binary64))))","(-.f64 (*.f64 N #s(literal -1/3 binary64)) #s(literal -1/2 binary64))","(-.f64 (fma.f64 N #s(literal -1/3 binary64) #s(literal 4 binary64)) #s(literal -1/2 binary64))","(-.f64 #s(literal 4 binary64) (fma.f64 #s(literal -1/3 binary64) N #s(literal -1/2 binary64)))","(-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64)))","(/.f64 #s(approx (+ (* N -1/32) 1/729) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64)))) N)","(neg.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))))","(+.f64 (*.f64 N #s(literal -1/3 binary64)) (*.f64 N #s(literal -1/2 binary64)))","(+.f64 (*.f64 N #s(literal -1/2 binary64)) (*.f64 N #s(literal -1/3 binary64)))","(+.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal 1/12 binary64))) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))","(+.f64 (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))) (*.f64 (fma.f64 N #s(literal -1/2 binary64) #s(literal -1/3 binary64)) (*.f64 N #s(literal -1/3 binary64))))","(+.f64 (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))) (*.f64 (*.f64 N #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) #s(literal -1/3 binary64))))","(+.f64 (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal 1/12 binary64))))","(+.f64 #s(literal 4 binary64) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))","(+.f64 (*.f64 #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64)))) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) (fma.f64 N #s(literal 1/12 binary64) #s(literal 1/729 binary64))) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))","(+.f64 (*.f64 (fma.f64 N #s(literal 1/12 binary64) #s(literal 1/729 binary64)) (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64)))) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) (*.f64 N #s(literal -1/3 binary64))) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) (*.f64 N #s(literal -1/3 binary64))) (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) (fma.f64 N #s(literal 1/12 binary64) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) (fma.f64 N #s(literal 1/12 binary64) #s(literal -1/2 binary64))) (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) (*.f64 N #s(literal -1/3 binary64))))","(neg.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)))","(+.f64 (+.f64 #s(literal -1/3 binary64) N) (*.f64 N #s(literal -1/2 binary64)))","(+.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))","(+.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal 1/729 binary64))","(+.f64 #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))","(+.f64 #s(literal 1/729 binary64) (fma.f64 N #s(literal -1/2 binary64) N))","(+.f64 N (fma.f64 N #s(literal -1/2 binary64) #s(literal -1/3 binary64)))","(+.f64 (*.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal 1/729 binary64)))","(+.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal 1/12 binary64)))) (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal 1/729 binary64)))","(+.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal 1/12 binary64)))) (neg.f64 (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal 1/729 binary64))))","(+.f64 (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal 1/729 binary64)) (*.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) N)))","(+.f64 (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/3 binary64) #s(literal 1/729 binary64)) (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal 1/12 binary64)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 N #s(literal -1/2 binary64) N)) (*.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/3 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/3 binary64)) (*.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) (fma.f64 N #s(literal -1/2 binary64) N)))","(+.f64 (*.f64 (fma.f64 N #s(literal -1/2 binary64) N) (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))) (*.f64 #s(literal -1/3 binary64) (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N))))"]],"time":1325.97119140625,"type":"rewrite"},{"compiler":[[5831,1007]],"memory":[[3003584,19684080]],"time":24.048828125,"type":"eval"},{"alts":[["(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","done",48.727534396643435,"binary64"],["(-.f64 (log1p.f64 N) (log.f64 N))","done",48.63326602269817,"binary64"],["(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))) (log.f64 N))","fresh",48.63351344348577,"binary64"],["(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N)))))","fresh",48.62458037729923,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",48.58634325963978,"binary64"],["(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","next",46.632265411639004,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","done",46.264329832301456,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","done",2.982600369875355,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","done",2.2496228716967885,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","done",2.2496228716967885,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","next",4.608853347333822,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))) N)) N) #s(literal -1 binary64)) N))","fresh",9.15777586316595,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (neg.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))))) N)) N) #s(literal -1 binary64)) N))","fresh",10.323945188781886,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","done",4.463288711354196,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","next",3.03138418735928,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",9.92155287153418,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","next",3.208359732051899,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","done",2.5354428682587598,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 #s(approx (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 N #s(literal 4 binary64)))))","fresh",4.739553426199768,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (-.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) N) (/.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) N))))","fresh",59.16705474785028,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (+.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) (*.f64 #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))))","fresh",59.58285781968395,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","next",57.55884213984991,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","done",57.51067752997643,"binary64"]],"compiler":[[14,10],[5,4],[14,10],[22,12],[24,15],[20,11],[7,6],[19,15],[23,18],[30,23],[31,23],[39,27],[31,23],[27,21],[30,22],[11,9],[30,23],[37,28],[49,37],[56,33],[54,32],[9,8],[9,8],[14,10],[22,12],[24,15],[20,11],[31,23],[39,27],[31,23],[30,22],[30,23],[49,37],[56,33],[54,32],[9,8]],"count":[[210,23]],"kept":[{"done":[5,5],"fresh":[7,7],"new":[193,6],"picked":[5,5]}],"memory":[[-312944,15595120]],"min-error":[[0.28513096920446923,"binary64"]],"time":26.257080078125,"type":"prune"},{"egraph":[[0,8133,372,0.037805637],[13,7852,389,0.010683974],[12,7236,389,0.034377254],[11,6380,389,0.035483571],[10,6192,389,0.028545662],[9,6090,389,0.028693122],[8,5767,389,0.022218476],[7,5228,389,0.0241696],[6,4145,389,0.027333231],[5,2559,389,0.025113347],[4,1197,389,0.019585394],[3,580,389,0.006757019],[2,239,389,0.002767574],[1,130,417,0.001099498],[0,77,417,0.000794261],[0,51,431,0.000557181]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","(/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N)","#s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N))","(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N)","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(-.f64 N #s(literal 1/2 binary64))","N","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N))","#s(literal -1/2 binary64)","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)","#s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N))","(/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)","(-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64)))","(*.f64 N #s(literal -1/3 binary64))","N","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","#s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(-.f64 N #s(literal 1/2 binary64))","N","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","(pow.f64 N #s(literal 3 binary64))","#s(literal 3 binary64)","(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","(/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N)))","(*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N)))","(neg.f64 (log.f64 (fma.f64 N N N)))","(log.f64 (fma.f64 N N N))","(fma.f64 N N N)","N","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(/.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","#s(literal 1 binary64)"]],"locations":[["(*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N)))","cost-diff",0],["(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","cost-diff",2],["(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","cost-diff",2],["(/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N)))","cost-diff",12],["(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","cost-diff",0],["(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","cost-diff",0],["#s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","cost-diff",0],["(-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64)))","cost-diff",1],["(/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)","cost-diff",1],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","cost-diff",0],["(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","cost-diff",0],["#s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N))","cost-diff",0],["(/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","cost-diff",0]],"memory":[[1951616,18572128]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","(/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N)","#s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N))","(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N)","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(-.f64 N #s(literal 1/2 binary64))","N","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N)","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N))","(-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))) N))","#s(literal -1/2 binary64)","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))) N)","#s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N))","#s(approx (- (/ 1/4 N) 1/3) (-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64)))","(/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)","(-.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1/3 binary64))","(-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64)))","(fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64))","(*.f64 N #s(literal -1/3 binary64))","(*.f64 #s(literal -1/3 binary64) N)","N","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","#s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(-.f64 N #s(literal 1/2 binary64))","N","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","(pow.f64 N #s(literal 3 binary64))","#s(literal 3 binary64)","(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","(log1p.f64 (/.f64 #s(literal 1 binary64) N))","(/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N)))","(neg.f64 (log1p.f64 (/.f64 #s(literal 1 binary64) N)))","(*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N)))","(*.f64 (log1p.f64 (/.f64 #s(literal 1 binary64) N)) (neg.f64 (log.f64 (fma.f64 N N N))))","(neg.f64 (log.f64 (fma.f64 N N N)))","(log.f64 (fma.f64 N N N))","(fma.f64 N N N)","N","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(log1p.f64 (/.f64 #s(literal 1 binary64) N))","(/.f64 (+.f64 N #s(literal 1 binary64)) N)","(/.f64 (-.f64 N #s(literal -1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":372.844970703125,"type":"simplify"},{"compiler":[[293,46]],"locations":[["(log.f64 (fma.f64 N N N))","accuracy",0.0078125],["(/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N)))","accuracy",0.30859375],["(*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N)))","accuracy",0.34765625],["(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","accuracy",46.66332466115894],["#s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))))","accuracy",0.0],["(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","accuracy",0.01171875],["(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","accuracy",0.34375],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","accuracy",2.91571697175357],["(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)","accuracy",0.28515625],["(*.f64 N #s(literal -1/3 binary64))","accuracy",0.29296875],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","accuracy",2.179309751176971],["#s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N))","accuracy",62.90351208515283],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","accuracy",57.55884213984991],["(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","accuracy",0.07421875],["(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N)","accuracy",0.09765625],["(/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N)","accuracy",0.1015625],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","accuracy",2.91571697175357]],"memory":[[-3426592,62217760]],"mixsample":[[33.710205078125,"ival-div",0],[17.966552734375,"adjust",800],[0.363525390625,"ival-div",400],[0.051025390625,"const",400],[0.09375,"ival-assert",0],[15.842041015625,"ival-sub",0],[0.01513671875,"ival-sub",400],[12.002197265625,"const",0],[3.180419921875,"ival-log1p",400],[0.035400390625,"ival-neg",400],[5.48681640625,"ival-pow",0],[4.169677734375,"ival-add",0],[0.05810546875,"ival-mult",400],[10.234130859375,"ival-mult",0],[2.940673828125,"ival-log",400],[0.1767578125,"ival-add",400],[18.972412109375,"ival-log",0],[0.25537109375,"ival-true",0],[6.999267578125,"ival-log1p",0],[0.75732421875,"exact",0],[2.85888671875,"ival-neg",0]],"outcomes":[[179.943603515625,1,"valid",201],[20.345458984375,0,"valid",55]],"time":241.126953125,"type":"localize"},{"count":[[22,95]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","(/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N)","#s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N))","(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)","(-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N)","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","#s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N)))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N)","#s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N))","(*.f64 N #s(literal -1/3 binary64))","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)","(log.f64 (fma.f64 N N N))"]],"memory":[[4606288,4606288]],"outputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ 1/3 (pow N 3))","(/ (+ 1/3 (* -1/2 N)) (pow N 3))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 3))","(/ 1/3 (pow N 2))","(/ (+ 1/3 (* -1/2 N)) (pow N 2))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 2))","(/ -1/2 N)","(/ (- (* 1/3 N) 1/2) N)","-1/2","(- (* 1/3 N) 1/2)","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","1/3","(+ 1/3 (* -1/2 N))","(+ 1/3 (* N (- N 1/2)))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1/2 N))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(pow (log N) 2)","(+ (* -1 (* N (+ (log N) (* -1 (log N))))) (pow (log N) 2))","(+ (* N (+ (* -1 (* N (+ 1 (+ (* -1/2 (log N)) (* 1/2 (log N)))))) (* -1 (+ (log N) (* -1 (log N)))))) (pow (log N) 2))","(+ (* N (+ (* -1 (+ (log N) (* -1 (log N)))) (* N (+ (* -1 (* N (- (+ (* -1/3 (log N)) (* 1/3 (log N))) 1))) (* -1 (+ 1 (+ (* -1/2 (log N)) (* 1/2 (log N))))))))) (pow (log N) 2))","(/ 1/3 N)","(/ (+ 1/3 (* -1/2 N)) N)","(/ (+ 1/3 (* N (- N 1/2))) N)","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(* -1/3 N)","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(+ N (log N))","(+ (log N) (* N (+ 1 (* -1/2 N))))","(+ (log N) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","1","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- 1/3 (* 1/2 (/ 1 N)))","(* 1/3 N)","(* N (- 1/3 (* 1/2 (/ 1 N))))","(pow N 2)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(* 2 (/ (log (/ 1 N)) N))","(/ (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (* 2 (log (/ 1 N)))) N)","(/ (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (+ (* -1 (/ (- (* -2/3 (log (/ 1 N))) 1) (pow N 2))) (* 2 (log (/ 1 N))))) N)","(/ (+ (* -1 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (pow N 3))) (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (+ (* -1 (/ (- (* -2/3 (log (/ 1 N))) 1) (pow N 2))) (* 2 (log (/ 1 N)))))) N)","N","(* N (- 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(* -2 (log (/ 1 N)))","(+ (* -2 (log (/ 1 N))) (/ 1 N))","(- (+ (* -2 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -2 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(* -1 (* N (- (* 1/2 (/ 1 N)) 1/3)))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(* 2 (/ (log (/ -1 N)) N))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (+ (/ 1 N) (/ (log (/ -1 N)) N))) N))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ (* -1 (+ 1 (log (/ -1 N)))) (+ (* 2/3 (/ (log (/ -1 N)) N)) (/ 1 N))) N))) N))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ (* -1 (+ 1 (log (/ -1 N)))) (* -1 (/ (+ (* -1 (+ 1 (* 2/3 (log (/ -1 N))))) (+ (* 1/2 (/ (log (/ -1 N)) N)) (* 11/12 (/ 1 N)))) N))) N))) N))","(* -1 (* N (- (* 1/2 (/ 1 N)) 1)))","(* -1 (* N (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1)))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(* -2 (log (/ -1 N)))","(+ (* -2 (log (/ -1 N))) (/ 1 N))","(+ (* -2 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N)))","(+ (* -2 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N)))"]],"series":[[2.779052734375,"((- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (- (/ (- (/ 1/3 N) 1/2) N) -1) (/ (/ (+ (* (- N 1/2) N) 1/3) N) N) (- (log (+ N 1)) (log N)) (/ (- -1/2 (* N -1/3)) N) (- -1/2 (* N -1/3)) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/ (+ (* (- N 1/2) N) 1/3) (pow N 3)) (+ (* (- N 1/2) N) 1/3) (/ (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (log (+ (* N N) N))) (neg (/ (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (log (+ (* N N) N)))) (log (/ (+ N 1) N)) (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (/ (+ (* (- N 1/2) N) 1/3) N) (- (/ 1/4 N) 1/3) (* N -1/3) (/ (- (/ 1/4 N) 1/3) N) (log (+ (* N N) N)))","N","-inf"],[2.716796875,"((- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (- (/ (- (/ 1/3 N) 1/2) N) -1) (/ (/ (+ (* (- N 1/2) N) 1/3) N) N) (- (log (+ N 1)) (log N)) (/ (- -1/2 (* N -1/3)) N) (- -1/2 (* N -1/3)) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/ (+ (* (- N 1/2) N) 1/3) (pow N 3)) (+ (* (- N 1/2) N) 1/3) (/ (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (log (+ (* N N) N))) (neg (/ (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (log (+ (* N N) N)))) (log (/ (+ N 1) N)) (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (/ (+ (* (- N 1/2) N) 1/3) N) (- (/ 1/4 N) 1/3) (* N -1/3) (/ (- (/ 1/4 N) 1/3) N) (log (+ (* N N) N)))","N","inf"],[2.783935546875,"((- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (- (/ (- (/ 1/3 N) 1/2) N) -1) (/ (/ (+ (* (- N 1/2) N) 1/3) N) N) (- (log (+ N 1)) (log N)) (/ (- -1/2 (* N -1/3)) N) (- -1/2 (* N -1/3)) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (log (+ N 1)) (log N)) (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/ (+ (* (- N 1/2) N) 1/3) (pow N 3)) (+ (* (- N 1/2) N) 1/3) (/ (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (log (+ (* N N) N))) (neg (/ (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (log (+ (* N N) N)))) (log (/ (+ N 1) N)) (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (/ (+ (* (- N 1/2) N) 1/3) N) (- (/ 1/4 N) 1/3) (* N -1/3) (/ (- (/ 1/4 N) 1/3) N) (log (+ (* N N) N)))","N","0"]],"time":9.844970703125,"type":"series"},{"count":[[95,94]],"egraph":[[0,8232,803,0.077831705],[2,2047,860,0.024999808],[1,678,879,0.007169333],[0,240,977,0.002335567]],"inputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ 1/3 (pow N 3))","(/ (+ 1/3 (* -1/2 N)) (pow N 3))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 3))","(/ 1/3 (pow N 2))","(/ (+ 1/3 (* -1/2 N)) (pow N 2))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 2))","(/ -1/2 N)","(/ (- (* 1/3 N) 1/2) N)","-1/2","(- (* 1/3 N) 1/2)","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","1/3","(+ 1/3 (* -1/2 N))","(+ 1/3 (* N (- N 1/2)))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1/2 N))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(pow (log N) 2)","(+ (* -1 (* N (+ (log N) (* -1 (log N))))) (pow (log N) 2))","(+ (* N (+ (* -1 (* N (+ 1 (+ (* -1/2 (log N)) (* 1/2 (log N)))))) (* -1 (+ (log N) (* -1 (log N)))))) (pow (log N) 2))","(+ (* N (+ (* -1 (+ (log N) (* -1 (log N)))) (* N (+ (* -1 (* N (- (+ (* -1/3 (log N)) (* 1/3 (log N))) 1))) (* -1 (+ 1 (+ (* -1/2 (log N)) (* 1/2 (log N))))))))) (pow (log N) 2))","(/ 1/3 N)","(/ (+ 1/3 (* -1/2 N)) N)","(/ (+ 1/3 (* N (- N 1/2))) N)","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(* -1/3 N)","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(+ N (log N))","(+ (log N) (* N (+ 1 (* -1/2 N))))","(+ (log N) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","1","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- 1/3 (* 1/2 (/ 1 N)))","(* 1/3 N)","(* N (- 1/3 (* 1/2 (/ 1 N))))","(pow N 2)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(* 2 (/ (log (/ 1 N)) N))","(/ (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (* 2 (log (/ 1 N)))) N)","(/ (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (+ (* -1 (/ (- (* -2/3 (log (/ 1 N))) 1) (pow N 2))) (* 2 (log (/ 1 N))))) N)","(/ (+ (* -1 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (pow N 3))) (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (+ (* -1 (/ (- (* -2/3 (log (/ 1 N))) 1) (pow N 2))) (* 2 (log (/ 1 N)))))) N)","N","(* N (- 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(* -2 (log (/ 1 N)))","(+ (* -2 (log (/ 1 N))) (/ 1 N))","(- (+ (* -2 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -2 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(* -1 (* N (- (* 1/2 (/ 1 N)) 1/3)))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(* 2 (/ (log (/ -1 N)) N))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (+ (/ 1 N) (/ (log (/ -1 N)) N))) N))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ (* -1 (+ 1 (log (/ -1 N)))) (+ (* 2/3 (/ (log (/ -1 N)) N)) (/ 1 N))) N))) N))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ (* -1 (+ 1 (log (/ -1 N)))) (* -1 (/ (+ (* -1 (+ 1 (* 2/3 (log (/ -1 N))))) (+ (* 1/2 (/ (log (/ -1 N)) N)) (* 11/12 (/ 1 N)))) N))) N))) N))","(* -1 (* N (- (* 1/2 (/ 1 N)) 1)))","(* -1 (* N (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1)))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(* -2 (log (/ -1 N)))","(+ (* -2 (log (/ -1 N))) (/ 1 N))","(+ (* -2 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N)))","(+ (* -2 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N)))"]],"memory":[[-920464,44436912]],"method":["egg-herbie"],"outputs":[["(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(fma.f64 (*.f64 N N) #s(literal -1/2 binary64) (-.f64 N (log.f64 N)))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N) N (-.f64 N (log.f64 N)))","(/ 1/3 (pow N 3))","(/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (+ 1/3 (* -1/2 N)) (pow N 3))","(/.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (+ 1/3 (* N (- N 1/2))) (pow N 3))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ 1/3 (pow N 2))","(/.f64 #s(literal 1/3 binary64) (*.f64 N N))","(/ (+ 1/3 (* -1/2 N)) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N) N)","(/ (+ 1/3 (* N (- N 1/2))) (pow N 2))","(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","(/ -1/2 N)","(/.f64 #s(literal -1/2 binary64) N)","(/ (- (* 1/3 N) 1/2) N)","(-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N))","-1/2","#s(literal -1/2 binary64)","(- (* 1/3 N) 1/2)","(fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64))","(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/2 N))","(fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64))","(+ 1/3 (* N (- N 1/2)))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(log N)","(log.f64 N)","(+ (log N) (* -1 N))","(-.f64 (log.f64 N) N)","(+ (log N) (* N (- (* 1/2 N) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(+ N (* -1 (log N)))","(-.f64 N (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* -1/2 N))))","(fma.f64 (*.f64 N N) #s(literal -1/2 binary64) (-.f64 N (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N) N (-.f64 N (log.f64 N)))","(pow (log N) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* -1 (* N (+ (log N) (* -1 (log N))))) (pow (log N) 2))","(fma.f64 (log.f64 N) (log.f64 N) #s(literal 0 binary64))","(+ (* N (+ (* -1 (* N (+ 1 (+ (* -1/2 (log N)) (* 1/2 (log N)))))) (* -1 (+ (log N) (* -1 (log N)))))) (pow (log N) 2))","(fma.f64 (neg.f64 N) N (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* N (+ (* -1 (+ (log N) (* -1 (log N)))) (* N (+ (* -1 (* N (- (+ (* -1/3 (log N)) (* 1/3 (log N))) 1))) (* -1 (+ 1 (+ (* -1/2 (log N)) (* 1/2 (log N))))))))) (pow (log N) 2))","(fma.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) N (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(/ 1/3 N)","(/.f64 #s(literal 1/3 binary64) N)","(/ (+ 1/3 (* -1/2 N)) N)","(/.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N)","(/ (+ 1/3 (* N (- N 1/2))) N)","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N)","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(* -1/3 N)","(*.f64 #s(literal -1/3 binary64) N)","(/ 1/4 (pow N 2))","(/.f64 (/.f64 #s(literal 1/4 binary64) N) N)","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N) N)","(+ N (log N))","(+.f64 (log.f64 N) N)","(+ (log N) (* N (+ 1 (* -1/2 N))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N (log.f64 N))","(+ (log N) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N (log.f64 N))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) N)","1","#s(literal 1 binary64)","(- 1 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(- 1/3 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N))","(* 1/3 N)","(*.f64 #s(literal 1/3 binary64) N)","(* N (- 1/3 (* 1/2 (/ 1 N))))","(*.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(pow N 2)","(*.f64 N N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) N) N N) N)","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) N N) N)","(/ -1 N)","(/.f64 #s(literal -1 binary64) N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N) #s(literal 1 binary64)) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)","(* 2 (/ (log (/ 1 N)) N))","(*.f64 (/.f64 (log.f64 N) N) #s(literal -2 binary64))","(/ (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (* 2 (log (/ 1 N)))) N)","(/.f64 (fma.f64 #s(literal -2 binary64) (log.f64 N) (/.f64 (+.f64 #s(literal -1 binary64) (log.f64 N)) N)) N)","(/ (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (+ (* -1 (/ (- (* -2/3 (log (/ 1 N))) 1) (pow N 2))) (* 2 (log (/ 1 N))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) (log.f64 N) (/.f64 (+.f64 #s(literal -1 binary64) (log.f64 N)) N)) (/.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N) N)) N)","(/ (+ (* -1 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (pow N 3))) (+ (* -1 (/ (+ 1 (log (/ 1 N))) N)) (+ (* -1 (/ (- (* -2/3 (log (/ 1 N))) 1) (pow N 2))) (* 2 (log (/ 1 N)))))) N)","(/.f64 (-.f64 (-.f64 (fma.f64 #s(literal -2 binary64) (log.f64 N) (/.f64 (+.f64 #s(literal -1 binary64) (log.f64 N)) N)) (/.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N) N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64)))) N)","N","(* N (- 1 (* 1/2 (/ 1 N))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) N) N N)","(* N (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) N N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(* -2 (log (/ 1 N)))","(*.f64 #s(literal 2 binary64) (log.f64 N))","(+ (* -2 (log (/ 1 N))) (/ 1 N))","(fma.f64 #s(literal 2 binary64) (log.f64 N) (/.f64 #s(literal 1 binary64) N))","(- (+ (* -2 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(fma.f64 #s(literal 2 binary64) (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","(- (+ (* -2 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(+.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)) N)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) N)","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(* -1 (* N (- (* 1/2 (/ 1 N)) 1/3)))","(*.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) N N) N)","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N) #s(literal 1 binary64)) N)","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)","(* 2 (/ (log (/ -1 N)) N))","(*.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) N) #s(literal 2 binary64))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (+ (/ 1 N) (/ (log (/ -1 N)) N))) N))","(/.f64 (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) N)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) N)) (neg.f64 N))","(* -1 (/ (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ (* -1 (+ 1 (log (/ -1 N)))) (+ (* 2/3 (/ (log (/ -1 N)) N)) (/ 1 N))) N))) N))","(/.f64 (fma.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64)) #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (+.f64 #s(literal -1 binary64) (/.f64 #s(literal 2/3 binary64) N)) (/.f64 #s(literal 1 binary64) N))) N)) N)","(* -1 (/ (+ (* -2 (log (/ -1 N))) (* -1 (/ (+ (* -1 (+ 1 (log (/ -1 N)))) (* -1 (/ (+ (* -1 (+ 1 (* 2/3 (log (/ -1 N))))) (+ (* 1/2 (/ (log (/ -1 N)) N)) (* 11/12 (/ 1 N)))) N))) N))) N))","(/.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) N) #s(literal 1/2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2/3 binary64) (+.f64 #s(literal -1 binary64) (/.f64 #s(literal 11/12 binary64) N)))) N) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal 1 binary64))) N)) (neg.f64 N))","(* -1 (* N (- (* 1/2 (/ 1 N)) 1)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) N) N N)","(* -1 (* N (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1)))","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) N N)","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(* -2 (log (/ -1 N)))","(*.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64))","(+ (* -2 (log (/ -1 N))) (/ 1 N))","(fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) N))","(+ (* -2 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N)))","(fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","(+ (* -2 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N)))","(fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)) N))"]],"stop":[["iter limit",1],["node limit",1]],"time":211.18505859375,"type":"simplify"},{"count":[[22,190]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","(/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N)","#s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N))","(/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)","(-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N)","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","#s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64))","(/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N)))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N)","#s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N))","(*.f64 N #s(literal -1/3 binary64))","(/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)","(log.f64 (fma.f64 N N N))"]],"memory":[[52624,19547856]],"outputs":[["#s(approx 8 (/.f64 #s(approx 8 #s(literal 1/2 binary64)) #s(literal 1/2 binary64)))","(/.f64 #s(approx 8 #s(literal 1/2 binary64)) #s(literal 1/2 binary64))","#s(approx 8 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(approx 8 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(approx 8 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(approx 8 #s(literal 1/2 binary64)) #s(literal 1/2 binary64))) #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1/2 binary64)))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(approx 8 #s(literal 1/2 binary64)) #s(literal 1/2 binary64))) #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1/2 binary64))","#s(approx 8 #s(approx 8 #s(literal 1/2 binary64)))","#s(approx 8 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","#s(approx 8 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)","(/.f64 #s(approx 8 #s(literal 1/2 binary64)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1/3 binary64)","#s(literal -1 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -1/4 binary64)"]],"time":942.8349609375,"type":"rewrite"},{"compiler":[[3505,626]],"memory":[[3527232,11448656]],"time":13.791015625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","done",48.727534396643435,"binary64"],["(-.f64 (log1p.f64 N) (log.f64 N))","done",48.63326602269817,"binary64"],["(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))) (log.f64 N))","fresh",48.63351344348577,"binary64"],["(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N)))))","fresh",48.62458037729923,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",48.58634325963978,"binary64"],["(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","done",46.632265411639004,"binary64"],["(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) #s(approx (log (+ (* N N) N)) (+.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)))))","fresh",48.21440132922793,"binary64"],["(neg.f64 (/.f64 #s(approx (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (/.f64 (fma.f64 #s(literal -2 binary64) (log.f64 N) (/.f64 (+.f64 #s(literal -1 binary64) (log.f64 N)) N)) N)) (log.f64 (fma.f64 N N N))))","fresh",4.560030331533978,"binary64"],["(neg.f64 (/.f64 #s(approx (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (/.f64 (-.f64 (-.f64 (fma.f64 #s(literal -2 binary64) (log.f64 N) (/.f64 (+.f64 #s(literal -1 binary64) (log.f64 N)) N)) (/.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N) N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64)))) N)) (log.f64 (fma.f64 N N N))))","fresh",2.3682243414863877,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","done",46.264329832301456,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","done",2.982600369875355,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","done",2.2496228716967885,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))) N)) N) #s(literal -1 binary64)) N))","fresh",9.15777586316595,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (neg.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))))) N)) N) #s(literal -1 binary64)) N))","fresh",10.323945188781886,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(approx (/ (- -1/2 (* N -1/3)) N) (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N)))) N)) N) #s(literal -1 binary64)) N))","fresh",4.608853347333822,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","done",4.463288711354196,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","done",3.03138418735928,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",9.92155287153418,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","done",3.208359732051899,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","done",2.5354428682587598,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 #s(approx (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 N #s(literal 4 binary64)))))","fresh",4.739553426199768,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (-.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) N) (/.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) N))))","fresh",59.16705474785028,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (+.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) (*.f64 #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))))","fresh",59.58285781968395,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","done",57.55884213984991,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","done",57.51067752997643,"binary64"]],"compiler":[[777,235],[14,10],[5,4],[14,10],[22,12],[24,15],[20,11],[39,27],[34,22],[54,34],[7,6],[19,15],[23,18],[39,27],[31,23],[37,29],[27,21],[30,22],[11,9],[30,23],[37,28],[49,37],[56,33],[54,32],[9,8],[9,8]],"count":[[142,25]],"kept":[{"done":[10,9],"fresh":[8,8],"new":[119,4],"picked":[5,4]}],"memory":[[-2296128,15387200]],"min-error":[[0.24856213863589174,"binary64"]],"time":20.859130859375,"type":"prune"},{"accuracy":[0.36707805647584024],"baseline":[2.2496228716967885],"branch":[["N",0.36707805647584024,2,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",0.36707805647584024,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[29,2]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (neg.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))))) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(approx (/ (- -1/2 (* N -1/3)) N) (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N)))) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (+.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) (*.f64 #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (-.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) N) (/.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) N))))","(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- (/ 1/3 N) 1/2) N) -1) N) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) (pow.f64 N #s(literal 3 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))) (log.f64 N))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 #s(approx (+ (* (+ (* (- N 1/2) N) 1/3) N) -1/4) (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 N #s(literal 4 binary64)))))","(-.f64 (+.f64 (neg.f64 (log.f64 N)) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (+.f64 N #s(literal -1 binary64))))","(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) (log.f64 (fma.f64 N N N))))","(neg.f64 (/.f64 #s(approx (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (/.f64 (fma.f64 #s(literal -2 binary64) (log.f64 N) (/.f64 (+.f64 #s(literal -1 binary64) (log.f64 N)) N)) N)) (log.f64 (fma.f64 N N N))))","(neg.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 N N N))) (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))) #s(approx (log (+ (* N N) N)) (+.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)))))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 (fma.f64 N N N)))))","(neg.f64 (/.f64 #s(approx (* (neg (log (+ (* N N) N))) (log (/ (+ N 1) N))) (/.f64 (-.f64 (-.f64 (fma.f64 #s(literal -2 binary64) (log.f64 N) (/.f64 (+.f64 #s(literal -1 binary64) (log.f64 N)) N)) (/.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N) N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64)))) N)) (log.f64 (fma.f64 N N N))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (log.f64 (fma.f64 N N N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))"]],"memory":[[1648848,9281024]],"oracle":[60.58809891692372],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":14.725830078125,"times":[[6.527099609375,"N"],[6.263916015625,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[2.249622871696789],"baseline":[2.2496228716967885],"branch":[["N",2.249622871696789,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",2.249622871696789,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[15,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (neg.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))))) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(approx (/ (- -1/2 (* N -1/3)) N) (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N)))) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (+.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) (*.f64 #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/2 binary64) (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 N #s(literal -1/3 binary64))) N)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (+.f64 (*.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))) #s(literal -1/3 binary64)) (fma.f64 N #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64))))) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (-.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 N #s(literal -1/2 binary64)) N #s(literal -1/3 binary64)) N (fma.f64 (fma.f64 N #s(literal -1/2 binary64) N) #s(literal -1/2 binary64) (*.f64 N #s(literal 1/12 binary64)))) N) (/.f64 (fma.f64 (fma.f64 N #s(literal -1/3 binary64) (fma.f64 N #s(literal -1/2 binary64) N)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) N))))"]],"memory":[[-2352800,5827232]],"oracle":[59.690945781783554],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))"]],"repr":["binary64"],"time":8.22900390625,"times":[[3.715087890625,"N"],[3.5458984375,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[2.9826003698753545],"baseline":[2.982600369875355],"branch":[["N",2.9826003698753545,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",2.9826003698753545,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[9,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- (/ 1/3 N) 1/2) N) -1) (/.f64 (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) (neg.f64 (fma.f64 N #s(literal -1/3 binary64) (*.f64 N #s(literal -1/2 binary64))))) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(approx (/ (- -1/2 (* N -1/3)) N) (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) N)))) N)) N) #s(literal -1 binary64)) N))"]],"memory":[[-3701152,4580112]],"oracle":[57.660042853423796],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))"]],"repr":["binary64"],"time":5.670166015625,"times":[[2.5830078125,"N"],[2.247802734375,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[4.4632887113541955],"baseline":[4.463288711354196],"branch":[["N",4.4632887113541955,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",4.463288711354197,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[5,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))"]],"memory":[[3639200,3639200]],"oracle":[57.57675540589936],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))"]],"repr":["binary64"],"time":3.909912109375,"times":[[1.8330078125,"N"],[1.6259765625,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[9.921552871534178],"baseline":[9.92155287153418],"branch":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",9.921552871534178,1,"binary64"],["N",9.92155287153418,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[3,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))"]],"memory":[[3247008,3247008]],"oracle":[57.57675540589936],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))"]],"repr":["binary64"],"time":3.16796875,"times":[[1.383056640625,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"],[1.430908203125,"N"]],"type":"regimes"},{"accuracy":[57.5106775299764],"baseline":[57.51067752997643],"branch":[["N",57.510677529976434,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",57.5106775299764,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[2,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/2 binary64))"]],"link":["."],"memory":[[-11389680,3101456]],"name":["2log (problem 3.3.6)"],"oracle":[57.57675540589936],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))"]],"repr":["binary64"],"time":42.108154296875,"times":[[40.535888671875,"N"],[1.194091796875,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"bstep":[[0.1630859375,0.00019531012084250676,0.000977135184603739]],"compiler":[[3,4],[7,6]],"memory":[[205360,205360]],"method":["left-value"],"time":0.6708984375,"type":"bsearch"},{"egraph":[[9,7472,117,0.016331173],[8,3427,117,0.043277817],[7,490,117,0.01224023],[6,212,117,0.003020813],[5,152,117,0.001543],[4,130,117,0.001351754],[3,104,117,0.001251827],[2,85,117,0.001123318],[1,63,117,0.000925874],[0,42,117,0.000770079]],"inputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 7378697629483821/36893488147419103232 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)) (neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))"]],"memory":[[1458816,9370208]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 7378697629483821/36893488147419103232 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)) (neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) #s(literal 1/4 binary64))"]],"stop":[["node limit",1]],"time":99.222900390625,"type":"simplify"},{"compiler":[[117,43]],"memory":[[1182912,1182912]],"stop":[["fuel",1]],"time":1.64697265625,"type":"soundness"},{"compiler":[[117,43],[117,43],[27,19],[27,19],[7,6],[7,6]],"memory":[[-1729328,30490448]],"remove-preprocessing":[[],[],[],[],[],[],[]],"time":50.378173828125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.013916015625,"type":"end"}]