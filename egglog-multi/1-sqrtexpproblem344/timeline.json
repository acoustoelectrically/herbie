[{"memory":[[14512,14512]],"time":0.031982421875,"type":"start"},{"compiler":[[14,9]],"memory":[[-7836368,484176]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":1.83984375,"type":"analyze"},{"bogosity":[{"exit":0.2459072666952055,"infinite":0.002920947488584475,"invalid":0.0,"precondition":0.00048828125,"valid":0.75068350456621}],"memory":[[19349056,316378368]],"mixsample":[[97.382568359375,"ival-div",0],[10.141357421875,"ival-true",0],[101.6279296875,"ival-mult",0],[100.036376953125,"ival-sqrt",0],[7.833984375,"exact",0],[196.45068359375,"ival-expm1",0],[4.61376953125,"ival-assert",0]],"outcomes":[[203.136474609375,0,"exit",2694],[573.509521484375,0,"valid",8256]],"time":1204.7900390625,"type":"sample"},{"compiler":[[12,10],[47,12],[47,12]],"confusion":[[167,0,3,86]],"explanations":[["exp.f64","(exp.f64 (*.f64 #s(literal 2 binary64) x))","sensitivity",1,0,[],[[1,1,1]]],["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",169,0,[],[[1,2]]],["-.f64","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cancellation",169,0,[],[[1,1]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))",169,0,false,0,false],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",169,0,false,0,false],["(exp.f64 (*.f64 #s(literal 2 binary64) x))",0,1,[-63.70792619489161],0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,169],[1,1],[0,86]],"maybe-confusion":[[167,0,0,3,0,86]],"memory":[[-4361360,64419600]],"mixsample":[[3.560546875,"ival-div",0],[0.480712890625,"ival-true",0],[9.303466796875,"ival-exp",0],[3.62548828125,"ival-mult",0],[3.767333984375,"ival-sqrt",0],[6.647216796875,"ival-expm1",0],[0.548583984375,"exact",0],[0.182373046875,"ival-assert",0]],"outcomes":[[43.711669921875,0,"valid",512]],"time":122.99609375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[12,10]],"egraph":[[0,8121,5,0.014596945],[9,6913,5,0.02399672],[8,2986,5,0.032837704],[7,591,5,0.015196356],[6,201,5,0.002408956],[5,124,5,0.000947232],[4,73,7,0.000742886],[3,47,12,0.000343291],[2,35,12,0.000224487],[1,29,12,0.000186849],[0,17,12,0.000236153],[0,10,12,0.00014253]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[292288,24680272]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"symmetry":[[]],"time":274.346923828125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06689453125,"type":"eval"},{"alts":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","next",40.62036072959973,"binary64"]],"compiler":[[12,10]],"memory":[[301776,301776]],"time":0.468994140625,"type":"prune"},{"egraph":[[0,8121,27,0.07790775],[9,6913,31,0.018038337],[8,2986,31,0.024372189],[7,591,31,0.0129688],[6,201,31,0.00229219],[5,124,31,0.000844393],[4,73,35,0.000567151],[3,47,45,0.000354407],[2,35,45,0.000232414],[1,29,45,0.000205862],[0,17,45,0.000286651],[0,10,45,0.000133641]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"locations":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cost-diff",2],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",3]],"memory":[[4302992,37602784]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) x)","(*.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":241.56201171875,"type":"simplify"},{"compiler":[[47,12]],"locations":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","accuracy",0.00390625],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.015625],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","accuracy",39.06957588004416],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",39.11995912825257]],"memory":[[-4835424,11199072]],"mixsample":[[1.775146484375,"ival-div",0],[0.19482421875,"ival-true",0],[4.208984375,"ival-exp",0],[1.836669921875,"ival-mult",0],[1.71435546875,"ival-sqrt",0],[3.601318359375,"ival-expm1",0],[0.29052734375,"exact",0],[0.122802734375,"ival-assert",0]],"outcomes":[[21.16357421875,0,"valid",256]],"time":29.614990234375,"type":"localize"},{"count":[[4,20]],"inputs":[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[1233600,1233600]],"outputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"series":[[0.97802734375,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","-inf"],[1.135986328125,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","inf"],[1.034912109375,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","0"]],"time":3.528076171875,"type":"series"},{"count":[[20,19]],"egraph":[[0,8367,129,0.094857213],[5,5961,156,0.024458715],[4,2567,163,0.019190974],[3,1446,173,0.008408661],[2,673,179,0.004567399],[1,252,179,0.003165684],[0,77,213,0.000880019]],"inputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"memory":[[-1497648,40764176]],"method":["egg-herbie"],"outputs":[["2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* 2 x)))","(*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 2/3 binary64) x #s(literal 4/3 binary64)) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(- (exp (* 2 x)) 1)","(expm1.f64 (*.f64 #s(literal 2 binary64) x))","(- (exp x) 1)","(expm1.f64 x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":293.760009765625,"type":"simplify"},{"count":[[4,60]],"inputs":[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[932560,17104656]],"outputs":[["(neg.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(+.f64 (-.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64)) (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))))","(+.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 x) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (+.f64 x x))))","(+.f64 (exp.f64 (+.f64 x x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (+.f64 x x)))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)))","(+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (neg.f64 (neg.f64 (exp.f64 (+.f64 x x)))) #s(literal -1 binary64))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 6 binary64))) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))))))","(-.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (+.f64 x x))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 6 binary64))) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(neg.f64 (neg.f64 (expm1.f64 x)))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal -1 binary64))","(+.f64 (-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (expm1.f64 (+.f64 x x))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(-.f64 (/.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (+.f64 x x)))) (sqrt.f64 (expm1.f64 x))))","(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))) (sqrt.f64 (expm1.f64 (+.f64 x x))))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (sqrt.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (sqrt.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 (neg.f64 (sqrt.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(*.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (sqrt.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (sqrt.f64 (expm1.f64 (+.f64 x x)))) (sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))"]],"time":403.16796875,"type":"rewrite"},{"compiler":[[1460,321]],"memory":[[6760576,6760576]],"time":8.85107421875,"type":"eval"},{"alts":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","next",0.00390625,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","fresh",21.696794281582296,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","next",20.573182097010395,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","fresh",21.760448979675218,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","next",17.674751812337387,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","fresh",20.77689288882886,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","next",21.522474989899923,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","next",21.521672418897584,"binary64"]],"compiler":[[5,5],[23,18],[20,16],[16,13],[14,12],[24,18],[27,20],[21,16],[5,5],[23,18],[20,16],[16,13],[14,12],[24,18],[27,20],[21,16]],"count":[[80,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[79,8],"picked":[1,0]}],"memory":[[-2034896,5970112]],"min-error":[[0.0,"binary64"]],"time":7.2099609375,"type":"prune"},{"egraph":[[0,8240,154,0.071574857],[9,7329,154,0.016707493],[8,3724,154,0.026160373],[7,1446,154,0.014983246],[6,1057,154,0.006487421],[5,780,154,0.005868566],[4,577,166,0.004941566],[3,311,196,0.002277287],[2,172,196,0.001066149],[1,91,196,0.000681113],[0,51,196,0.000590625],[0,31,196,0.000549672]],"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)"]],"locations":[["(sqrt.f64 #s(literal 2 binary64))","cost-diff",0],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(sqrt.f64 #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(+.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",0]],"memory":[[4124464,34036688]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":235.14794921875,"type":"simplify"},{"compiler":[[164,31]],"locations":[["(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.07650375976844201],["(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","accuracy",0.12109375],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.3984375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","accuracy",21.26459427528017],["(sqrt.f64 #s(literal 2 binary64))","accuracy",0.0],["(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.1484375],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.99609375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","accuracy",21.26384018721119],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","accuracy",0.00390625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","accuracy",20.55735855206326],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","accuracy",0.00390625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","accuracy",17.92351937550114],["(exp.f64 x)","accuracy",0.0],["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.00390625],["(+.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",0.01171875]],"memory":[[-10516640,28905728]],"mixsample":[[0.032958984375,"const",4000],[0.065185546875,"const",800],[5.1005859375,"ival-div",0],[0.90576171875,"adjust",800],[3.0126953125,"ival-exp",0],[0.049072265625,"adjust",4800],[0.007080078125,"ival-mult",2000],[0.049072265625,"adjust",4000],[0.109130859375,"ival-assert",0],[0.27001953125,"const",400],[5.156494140625,"ival-sqrt",0],[4.327880859375,"const",0],[0.005126953125,"ival-add",4000],[0.1630859375,"adjust",2000],[8.422607421875,"ival-add",0],[0.020751953125,"ival-mult",800],[13.562255859375,"ival-mult",0],[0.10205078125,"ival-mult",400],[3.423095703125,"ival-expm1",0],[0.00390625,"ival-add",2000],[0.024169921875,"const",2000],[0.06689453125,"ival-add",400],[0.051025390625,"adjust",2800],[0.23583984375,"ival-true",0],[0.512451171875,"exact",0],[0.01318359375,"ival-add",800],[0.007080078125,"ival-mult",4000]],"outcomes":[[4.927734375,1,"valid",12],[1.219970703125,2,"valid",2],[0.916015625,5,"exit",1],[55.953857421875,0,"valid",241]],"time":152.3271484375,"type":"localize"},{"count":[[17,39]],"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))"]],"memory":[[3983984,3983984]],"outputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ x (sqrt 2))","3/16","(+ 3/16 (* 7/192 x))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 1/2 (/ 1 (sqrt 2))) (/ (sqrt 2) x)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* -1 (* x (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"series":[[3.93896484375,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ 1/2 (sqrt 2)) x) (sqrt 2)) (/ 1/2 (sqrt 2)) (sqrt 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/ x (sqrt 2)) (+ (* 7/192 x) 3/16))","x","-inf"],[2.849853515625,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ 1/2 (sqrt 2)) x) (sqrt 2)) (/ 1/2 (sqrt 2)) (sqrt 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/ x (sqrt 2)) (+ (* 7/192 x) 3/16))","x","inf"],[2.295166015625,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ 1/2 (sqrt 2)) x) (sqrt 2)) (/ 1/2 (sqrt 2)) (sqrt 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/ x (sqrt 2)) (+ (* 7/192 x) 3/16))","x","0"]],"time":9.996826171875,"type":"series"},{"count":[[39,39]],"egraph":[[0,8061,287,0.09973975],[3,4352,334,0.028481941],[2,1235,344,0.01268766],[1,419,374,0.004910451],[0,132,494,0.001486339]],"inputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ x (sqrt 2))","3/16","(+ 3/16 (* 7/192 x))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 1/2 (/ 1 (sqrt 2))) (/ (sqrt 2) x)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* -1 (* x (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"memory":[[780176,50454960]],"method":["egg-herbie"],"outputs":[["(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 7/192 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 7/192 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(/ x (sqrt 2))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","3/16","#s(literal 3/16 binary64)","(+ 3/16 (* 7/192 x))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(sqrt (+ 1 (exp x)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+ 1 (exp x))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp x)","(exp.f64 x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal 2 binary64) x)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/2 (/ x (sqrt 2)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x)","(* x (+ (* 1/2 (/ 1 (sqrt 2))) (/ (sqrt 2) x)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(*.f64 (/.f64 #s(literal 7/192 binary64) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 7/192 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 7/192 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(* 7/192 x)","(*.f64 #s(literal 7/192 binary64) x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(* -1 (* x (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64))) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 7/192 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":301.12109375,"type":"simplify"},{"count":[[17,171]],"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))"]],"memory":[[1544448,17516752]],"outputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","(sqrt.f64 #s(approx -3 #s(literal 1 binary64)))","#s(approx -3 #s(literal 1 binary64))","(sqrt.f64 #s(approx -3 #s(literal 1 binary64)))","#s(approx -3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(approx -3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(approx -3 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)))","(neg.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)))","(+.f64 (+.f64 #s(literal -27/4096 binary64) #s(literal 7/1024 binary64)) (fma.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64) #s(literal 7/1024 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) #s(literal 3/16 binary64)) (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)) (+.f64 #s(literal 1 binary64) #s(literal 3/16 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)) #s(literal 3/16 binary64))","(+.f64 (*.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64)) #s(literal -27/4096 binary64))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64) #s(literal 7/1024 binary64)) (+.f64 #s(literal -27/4096 binary64) #s(literal 7/1024 binary64)))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","(+.f64 #s(literal 3/16 binary64) (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)))","(+.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)))","(+.f64 #s(literal -27/4096 binary64) (*.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64)))","(+.f64 #s(literal -27/4096 binary64) (*.f64 #s(literal -49/36864 binary64) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)))","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 1/32 binary64)","#s(literal 1/64 binary64)","#s(literal 3/4 binary64)","#s(literal 9/2 binary64)","#s(literal 1/512 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","(neg.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)))","(+.f64 (+.f64 #s(literal -27/4096 binary64) #s(literal 7/1024 binary64)) (fma.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64) #s(literal 7/1024 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) #s(literal 3/16 binary64)) (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)) (+.f64 #s(literal 1 binary64) #s(literal 3/16 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)) #s(literal 3/16 binary64))","(+.f64 (*.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64)) #s(literal -27/4096 binary64))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64) #s(literal 7/1024 binary64)) (+.f64 #s(literal -27/4096 binary64) #s(literal 7/1024 binary64)))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","(+.f64 #s(literal 3/16 binary64) (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)))","(+.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 1 binary64) #s(literal 7/192 binary64)))","(+.f64 #s(literal -27/4096 binary64) (*.f64 #s(literal 1 binary64) #s(literal 2401/1358954496 binary64)))","(+.f64 #s(literal -27/4096 binary64) (*.f64 #s(literal -49/36864 binary64) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)))"]],"time":475.823974609375,"type":"rewrite"},{"compiler":[[1132,227]],"memory":[[-4979632,6094208]],"time":10.06591796875,"type":"eval"},{"alts":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","done",0.00390625,"binary64"],["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","next",21.756589112879468,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",20.573182097010395,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","next",21.760448979675218,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",17.674751812337387,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","done",21.522474989899923,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","next",49.79695999080726,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","next",49.68317786142631,"binary64"],["#s(literal 1 binary64)","next",33.67809947095925,"binary64"]],"compiler":[[5,5],[9,7],[20,16],[16,13],[14,12],[27,20],[19,16],[19,16],[1,2],[9,7],[16,13],[19,16],[19,16],[1,2]],"count":[[75,9]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[67,4],"picked":[5,4]}],"memory":[[-2873424,5372976]],"min-error":[[0.0,"binary64"]],"time":6.586181640625,"type":"prune"},{"egraph":[[0,8144,75,0.087833434],[9,6919,75,0.017660315],[8,3014,75,0.025763551],[7,621,75,0.014594556],[6,230,75,0.002767434],[5,153,75,0.001032957],[4,100,83,0.000716473],[3,74,103,0.000669573],[2,62,103,0.000481957],[1,56,103,0.000293254],[0,41,103,0.000358764],[0,26,103,0.000543641]],"inputs":[["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 1 binary64)","#s(literal 3/16 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","(fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -7/192 binary64)","#s(literal 3/16 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x"]],"locations":[["(+.f64 #s(literal 2 binary64) x)","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","cost-diff",0],["(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","cost-diff",2],["(fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64))","cost-diff",3],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","cost-diff",0],["(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","cost-diff",2],["(fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64))","cost-diff",3],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","cost-diff",0],["(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","cost-diff",0]],"memory":[[-6884032,37714048]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","#s(literal 235/192 binary64)","(fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64))","#s(literal 43/192 binary64)","#s(literal 7/192 binary64)","#s(literal 1 binary64)","#s(literal 3/16 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","#s(literal 221/192 binary64)","(fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64))","#s(literal 185/192 binary64)","#s(literal 1 binary64)","#s(literal -7/192 binary64)","#s(literal 3/16 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":247.56201171875,"type":"simplify"},{"compiler":[[101,24]],"locations":[["(+.f64 #s(literal 2 binary64) x)","accuracy",0.0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","accuracy",0.00390625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","accuracy",21.52557079974707],["(fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64))","accuracy",0.0],["(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","accuracy",1.0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","accuracy",49.79695999080726],["(fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64))","accuracy",0.0],["(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","accuracy",0.0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","accuracy",49.68317786142631],["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","accuracy",0.00390625],["(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","accuracy",0.01171875],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","accuracy",21.31795852558644]],"memory":[[-4825424,21196144]],"mixsample":[[1.91015625,"ival-div",0],[9.2158203125,"ival-add",0],[3.055908203125,"ival-exp",0],[5.32666015625,"ival-mult",0],[3.41552734375,"ival-expm1",0],[0.087158203125,"ival-assert",0],[0.232177734375,"ival-true",0],[6.70849609375,"const",0],[3.553955078125,"ival-sqrt",0],[0.490234375,"exact",0]],"outcomes":[[48.370361328125,0,"valid",256]],"time":63.7529296875,"type":"localize"},{"count":[[13,20]],"inputs":[["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","(fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)"]],"memory":[[1417984,1417984]],"outputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","x","(* x (+ 1 (/ 1 x)))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* x (+ 1 (* 2 (/ 1 x))))"]],"series":[[0.791015625,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (+ 1 x) (+ (* 7/192 1) 3/16) (+ (+ (* 7/192 1) 3/16) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* 1 -7/192) 1) (+ (+ (* 1 -7/192) 1) 3/16) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x))","x","-inf"],[0.8369140625,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (+ 1 x) (+ (* 7/192 1) 3/16) (+ (+ (* 7/192 1) 3/16) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* 1 -7/192) 1) (+ (+ (* 1 -7/192) 1) 3/16) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x))","x","inf"],[0.408935546875,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (+ 1 x) (+ (* 7/192 1) 3/16) (+ (+ (* 7/192 1) 3/16) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* 1 -7/192) 1) (+ (+ (* 1 -7/192) 1) 3/16) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x))","x","0"]],"time":2.5791015625,"type":"series"},{"count":[[20,19]],"egraph":[[0,8156,104,0.092056694],[5,5307,120,0.02520035],[4,2085,130,0.017773477],[3,1011,151,0.010140142],[2,517,157,0.003495397],[1,193,157,0.003126096],[0,64,191,0.00071929]],"inputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","x","(* x (+ 1 (/ 1 x)))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* x (+ 1 (* 2 (/ 1 x))))"]],"memory":[[1137984,41724464]],"method":["egg-herbie"],"outputs":[["(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(sqrt (+ 1 (exp x)))","(sqrt.f64 (+.f64 #s(literal 1 binary64) (exp.f64 x)))","(+ 1 (exp x))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(exp x)","(exp.f64 x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (+.f64 #s(literal 1 binary64) (exp.f64 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(* x (+ 1 (* 2 (/ 1 x))))","(+.f64 #s(literal 2 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":296.915771484375,"type":"simplify"},{"count":[[13,97]],"inputs":[["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","(fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64))","(+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64))","(+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)"]],"memory":[[6253072,22408880]],"outputs":[["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(neg.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) (fma.f64 (+.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","#s(literal 43/192 binary64)","(neg.f64 #s(literal -43/192 binary64))","(+.f64 #s(literal 7/192 binary64) #s(literal 3/16 binary64))","(+.f64 #s(literal 3/16 binary64) #s(literal 7/192 binary64))","(+.f64 #s(literal 43/192 binary64) #s(literal 0 binary64))","(+.f64 (/.f64 #s(literal -49/36864 binary64) #s(literal 29/192 binary64)) (neg.f64 (/.f64 #s(literal -9/256 binary64) #s(literal 29/192 binary64))))","(-.f64 #s(literal 3/16 binary64) #s(literal -7/192 binary64))","(-.f64 #s(literal 7/192 binary64) #s(literal -3/16 binary64))","(-.f64 (/.f64 #s(literal -49/36864 binary64) #s(literal 29/192 binary64)) (/.f64 #s(literal -9/256 binary64) #s(literal 29/192 binary64)))","(-.f64 (/.f64 #s(literal 9/256 binary64) #s(literal 29/192 binary64)) (/.f64 #s(literal 49/36864 binary64) #s(literal 29/192 binary64)))","(*.f64 #s(literal 43/192 binary64) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(literal 43/192 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal 29/192 binary64)) #s(literal -1247/36864 binary64))","(*.f64 (/.f64 #s(literal -1247/36864 binary64) #s(literal -46313/7077888 binary64)) (+.f64 #s(literal 1345/36864 binary64) #s(literal 7/1024 binary64)))","(*.f64 (/.f64 #s(literal -1247/36864 binary64) #s(literal -1247/36864 binary64)) #s(literal 43/192 binary64))","#s(literal 235/192 binary64)","(neg.f64 (/.f64 (+.f64 #s(literal 1849/36864 binary64) #s(literal -1 binary64)) #s(literal 149/192 binary64)))","(neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) #s(literal -1849/36864 binary64)) #s(literal -149/192 binary64)))","(neg.f64 (/.f64 (+.f64 #s(literal 79507/7077888 binary64) #s(literal 1 binary64)) (+.f64 (neg.f64 #s(literal 1849/36864 binary64)) #s(literal -149/192 binary64))))","(neg.f64 (/.f64 (+.f64 (neg.f64 #s(literal 79507/7077888 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1849/36864 binary64) #s(literal 149/192 binary64))))","(+.f64 #s(literal 43/192 binary64) #s(literal 1 binary64))","(+.f64 #s(literal 199/192 binary64) #s(literal 3/16 binary64))","(+.f64 #s(literal 19/16 binary64) #s(literal 7/192 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 43/192 binary64))","(+.f64 #s(literal 3/16 binary64) #s(literal 199/192 binary64))","(+.f64 #s(literal 7/192 binary64) #s(literal 19/16 binary64))","(+.f64 (/.f64 #s(literal 1849/36864 binary64) #s(literal -149/192 binary64)) (neg.f64 (/.f64 #s(literal 1 binary64) #s(literal -149/192 binary64))))","(-.f64 #s(literal 43/192 binary64) #s(literal -1 binary64))","(-.f64 #s(literal 19/16 binary64) #s(literal -7/192 binary64))","(-.f64 #s(literal 1 binary64) #s(literal -43/192 binary64))","#s(approx (sqrt (+ (exp x) 1)) #s(literal 235/192 binary64))","#s(literal 185/192 binary64)","(neg.f64 #s(literal -185/192 binary64))","(+.f64 #s(literal 1 binary64) #s(literal -7/192 binary64))","(+.f64 #s(literal -7/192 binary64) #s(literal 1 binary64))","(+.f64 (/.f64 #s(literal 49/36864 binary64) #s(literal -199/192 binary64)) (neg.f64 (/.f64 #s(literal 1 binary64) #s(literal -199/192 binary64))))","(-.f64 #s(literal -7/192 binary64) #s(literal -1 binary64))","(-.f64 #s(literal 1 binary64) #s(literal 7/192 binary64))","(-.f64 (/.f64 #s(literal 49/36864 binary64) #s(literal -199/192 binary64)) (/.f64 #s(literal 1 binary64) #s(literal -199/192 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) #s(literal 199/192 binary64)) (/.f64 #s(literal 49/36864 binary64) #s(literal 199/192 binary64)))","(*.f64 #s(literal 185/192 binary64) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(literal 185/192 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -199/192 binary64)) #s(literal -36815/36864 binary64))","(*.f64 (/.f64 #s(literal 36815/36864 binary64) #s(literal 7078231/7077888 binary64)) #s(literal 35569/36864 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 38257/36864 binary64)) #s(literal 7078231/7077888 binary64))","(*.f64 (/.f64 #s(literal -36815/36864 binary64) #s(literal -7077545/7077888 binary64)) #s(literal 35569/36864 binary64))","#s(literal 221/192 binary64)","(neg.f64 (/.f64 (+.f64 #s(literal 34225/36864 binary64) #s(literal -9/256 binary64)) #s(literal -149/192 binary64)))","(neg.f64 (/.f64 (+.f64 #s(literal 9/256 binary64) #s(literal -34225/36864 binary64)) #s(literal 149/192 binary64)))","(neg.f64 (/.f64 (+.f64 #s(literal 6331625/7077888 binary64) #s(literal 27/4096 binary64)) (neg.f64 (+.f64 (+.f64 #s(literal -185/1024 binary64) #s(literal 9/256 binary64)) #s(literal 34225/36864 binary64)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 #s(literal 6331625/7077888 binary64)) #s(literal -27/4096 binary64)) (+.f64 (+.f64 #s(literal -185/1024 binary64) #s(literal 9/256 binary64)) #s(literal 34225/36864 binary64))))","(+.f64 #s(literal 185/192 binary64) #s(literal 3/16 binary64))","(+.f64 #s(literal 19/16 binary64) #s(literal -7/192 binary64))","(+.f64 #s(literal 29/192 binary64) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 29/192 binary64))","(+.f64 #s(literal -7/192 binary64) #s(literal 19/16 binary64))","(+.f64 #s(literal 3/16 binary64) #s(literal 185/192 binary64))","(+.f64 (/.f64 #s(literal 34225/36864 binary64) #s(literal 149/192 binary64)) (neg.f64 (/.f64 #s(literal -9/256 binary64) #s(literal -149/192 binary64))))","(-.f64 #s(literal 19/16 binary64) #s(literal 7/192 binary64))","(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","(-.f64 #s(literal 3/16 binary64) #s(literal -185/192 binary64))","#s(approx (sqrt (+ (exp x) 1)) #s(literal 221/192 binary64))","(sqrt.f64 #s(approx (+ (exp x) 1) (+.f64 #s(literal 2 binary64) x)))","#s(approx (+ (exp x) 1) (+.f64 #s(literal 2 binary64) x))","(neg.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 4 binary64)) (neg.f64 (-.f64 #s(literal 2 binary64) x))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x #s(literal 8 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal -2 binary64)) x #s(literal 4 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x #s(literal 8 binary64))) (fma.f64 (+.f64 x #s(literal -2 binary64)) x #s(literal 4 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 x) x #s(literal 4 binary64))) (-.f64 #s(literal 2 binary64) x)))","(+.f64 #s(literal 2 binary64) x)","(+.f64 x #s(literal 2 binary64))","(+.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x))","(*.f64 (fma.f64 (neg.f64 x) x #s(literal 4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 2 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 2 binary64) x)) (fma.f64 (neg.f64 x) x #s(literal 4 binary64)))","(*.f64 (+.f64 #s(literal 2 binary64) x) (/.f64 (-.f64 #s(literal 2 binary64) x) (-.f64 #s(literal 2 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -4 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -2 binary64))))","(*.f64 (neg.f64 (fma.f64 (neg.f64 x) x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 2 binary64) x))))"]],"time":3048.046142578125,"type":"rewrite"},{"compiler":[[1984,460]],"memory":[[-8553936,10099664]],"time":12.656005859375,"type":"eval"},{"alts":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","done",0.00390625,"binary64"],["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","done",21.756589112879468,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",20.573182097010395,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","done",21.760448979675218,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",17.674751812337387,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","done",21.522474989899923,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","next",49.79695999080726,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","next",49.68317786142631,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","next",49.79695999080726,"binary64"],["#s(literal 1 binary64)","done",33.67809947095925,"binary64"]],"compiler":[[5,5],[9,7],[20,16],[16,13],[14,12],[27,20],[16,14],[14,12],[14,12],[1,2]],"count":[[123,10]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[114,3],"picked":[5,3]}],"memory":[[6511024,6511024]],"min-error":[[0.0,"binary64"]],"time":5.083984375,"type":"prune"},{"egraph":[[0,8123,26,0.084484171],[9,6915,26,0.017381804],[8,2989,26,0.025246819],[7,594,26,0.013875376],[6,204,26,0.002312288],[5,128,26,0.001239357],[4,75,32,0.000784506],[3,49,47,0.000699163],[2,37,47,0.00048291],[1,31,47,0.000173612],[0,19,47,0.000243118],[0,18,47,0.000175972]],"inputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(literal 221/192 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(literal 235/192 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","#s(literal 185/192 binary64)","#s(literal -3/16 binary64)"]],"locations":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","cost-diff",0],["(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","cost-diff",2],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","cost-diff",0]],"memory":[[-534544,37597584]],"method":["egg-herbie"],"outputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(literal 221/192 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(literal 235/192 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","#s(literal 221/192 binary64)","#s(literal 185/192 binary64)","#s(literal -3/16 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":270.950927734375,"type":"simplify"},{"compiler":[[45,14]],"locations":[["(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","accuracy",1.0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","accuracy",49.79695999080726],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","accuracy",49.68317786142631],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","accuracy",49.79695999080726]],"memory":[[3774720,11551216]],"mixsample":[[1.84228515625,"ival-div",0],[2.904052734375,"ival-mult",0],[3.864501953125,"ival-expm1",0],[0.090576171875,"ival-assert",0],[1.258544921875,"ival-sub",0],[0.1689453125,"ival-true",0],[8.5107421875,"const",0],[1.90673828125,"ival-sqrt",0],[0.26904296875,"exact",0]],"outcomes":[[27.88623046875,0,"valid",256]],"time":34.8779296875,"type":"localize"},{"count":[[4,5]],"inputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))"]],"memory":[[754192,754192]],"outputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"series":[[0.50390625,"((sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (- 185/192 -3/16) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","-inf"],[0.617919921875,"((sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (- 185/192 -3/16) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","inf"],[0.30615234375,"((sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (- 185/192 -3/16) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","0"]],"time":1.760009765625,"type":"series"},{"count":[[5,5]],"egraph":[[0,8275,40,0.091240447],[5,4077,46,0.023772602],[4,1546,50,0.012693343],[3,672,56,0.004614996],[2,388,62,0.001828509],[1,127,62,0.00228036],[0,42,96,0.000562304]],"inputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"memory":[[-5769296,45582672]],"method":["egg-herbie"],"outputs":[["(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":275.80712890625,"type":"simplify"},{"count":[[4,18]],"inputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))"]],"memory":[[5950032,14111376]],"outputs":[["#s(approx (sqrt (+ (exp x) 1)) #s(literal 221/192 binary64))","#s(approx (sqrt (+ (exp x) 1)) #s(literal 235/192 binary64))","#s(literal 221/192 binary64)","(neg.f64 (/.f64 #s(literal 32929/36864 binary64) #s(literal -149/192 binary64)))","(neg.f64 (/.f64 (neg.f64 #s(literal 6378281/7077888 binary64)) (+.f64 #s(literal -149/1024 binary64) #s(literal 34225/36864 binary64))))","(neg.f64 (/.f64 (neg.f64 #s(literal 32929/36864 binary64)) #s(literal 149/192 binary64)))","(neg.f64 (/.f64 #s(literal 6378281/7077888 binary64) (+.f64 (neg.f64 #s(literal 35521/36864 binary64)) #s(literal 185/1024 binary64))))","(+.f64 #s(literal 3/16 binary64) #s(literal 185/192 binary64))","(+.f64 #s(literal 185/192 binary64) #s(literal 3/16 binary64))","(+.f64 (/.f64 #s(literal 34225/36864 binary64) #s(literal 149/192 binary64)) (neg.f64 (/.f64 #s(literal 9/256 binary64) #s(literal 149/192 binary64))))","(+.f64 (/.f64 #s(literal 6331625/7077888 binary64) (+.f64 #s(literal -149/1024 binary64) #s(literal 34225/36864 binary64))) (neg.f64 (/.f64 #s(literal -27/4096 binary64) (+.f64 #s(literal -149/1024 binary64) #s(literal 34225/36864 binary64)))))","(-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64))","(-.f64 #s(literal 0 binary64) #s(literal -221/192 binary64))","(-.f64 (/.f64 #s(literal 34225/36864 binary64) #s(literal 149/192 binary64)) (/.f64 #s(literal 9/256 binary64) #s(literal 149/192 binary64)))","(-.f64 (/.f64 #s(literal 6331625/7077888 binary64) (+.f64 #s(literal -149/1024 binary64) #s(literal 34225/36864 binary64))) (/.f64 #s(literal -27/4096 binary64) (+.f64 #s(literal -149/1024 binary64) #s(literal 34225/36864 binary64))))","(*.f64 #s(literal 1 binary64) #s(literal 221/192 binary64))","(*.f64 (neg.f64 #s(literal 32929/36864 binary64)) (/.f64 #s(literal 1 binary64) #s(literal -149/192 binary64)))","#s(approx (sqrt (+ (exp x) 1)) #s(literal 221/192 binary64))"]],"time":458.488037109375,"type":"rewrite"},{"compiler":[[397,98]],"memory":[[-5869120,2107424]],"time":3.701904296875,"type":"eval"},{"alts":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","done",0.00390625,"binary64"],["(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","done",21.756589112879468,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",20.573182097010395,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","done",21.760448979675218,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",17.674751812337387,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","done",21.522474989899923,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","done",49.79695999080726,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","done",49.68317786142631,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","done",49.79695999080726,"binary64"],["#s(literal 1 binary64)","done",33.67809947095925,"binary64"]],"compiler":[[254,70],[5,5],[9,7],[20,16],[16,13],[14,12],[27,20],[16,14],[14,12],[14,12],[1,2]],"count":[[32,10]],"kept":[{"done":[7,7],"fresh":[0,0],"new":[22,0],"picked":[3,3]}],"memory":[[4543600,4543600]],"min-error":[[0.0,"binary64"]],"time":6.259033203125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.00390625,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.00390625,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[16,1]],"inputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[-2625904,8243184]],"oracle":[63.48649965796812],"outputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"repr":["binary64"],"time":12.697998046875,"times":[[3.93505859375,"x"],[3.989013671875,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[3.549072265625,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[0.1921479030112572],"baseline":[17.674751812337387],"branch":[["x",0.1921479030112572,2,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.1921479030112572,2,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.1921479030112572,2,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[14,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))"]],"memory":[[-446640,7768752]],"oracle":[55.191778843490766],"outputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))"]],"repr":["binary64"],"time":11.074951171875,"times":[[3.470947265625,"x"],[3.4912109375,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[2.992919921875,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[0.19330457760427458],"baseline":[17.674751812337387],"branch":[["x",0.19330457760427458,2,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.19330457760427458,2,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.19330457760427458,2,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[13,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))"]],"memory":[[-770160,7394592]],"oracle":[55.191778843490766],"outputs":[["#s(literal 1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))"]],"repr":["binary64"],"time":10.39306640625,"times":[[3.368896484375,"x"],[3.19189453125,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[2.85595703125,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[0.24290974034778948],"baseline":[17.674751812337387],"branch":[["x",0.24290974034778948,2,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.24290974034778948,2,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.24290974034778948,2,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[9,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))"]],"memory":[[-2046688,6217600]],"oracle":[55.191778843490766],"outputs":[["#s(literal 1 binary64)","(sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))"]],"repr":["binary64"],"time":7.875,"times":[[2.810791015625,"x"],[2.14599609375,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[2.14013671875,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[0.24676960714353832],"baseline":[17.674751812337387],"branch":[["x",0.24676960714353832,2,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.24676960714353832,2,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.24676960714353832,2,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[8,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))"]],"memory":[[5986112,5986112]],"oracle":[55.191778843490766],"outputs":[["#s(literal 1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))"]],"repr":["binary64"],"time":7.070068359375,"times":[[2.328857421875,"x"],[1.97412109375,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[2.0888671875,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[0.6257424517745913],"baseline":[17.674751812337387],"branch":[["x",0.6257424517745913,2,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.6257424517745913,2,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.6257424517745913,2,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[7,2]],"inputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"memory":[[-5895536,5664944]],"oracle":[50.727108831521875],"outputs":[["#s(literal 1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"repr":["binary64"],"time":47.786865234375,"times":[[2.393798828125,"x"],[2.10693359375,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[42.60302734375,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[33.67809947095926],"baseline":[33.67809947095925],"branch":[["x",33.678099470959275,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",33.67809947095926,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",33.67809947095926,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[6,1]],"inputs":[["#s(literal 1 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 221/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(literal 235/192 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (-.f64 #s(literal 185/192 binary64) #s(literal -3/16 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 7/192 binary64) #s(literal 1 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+.f64 (fma.f64 #s(literal 1 binary64) #s(literal -7/192 binary64) #s(literal 1 binary64)) #s(literal 3/16 binary64)))"]],"link":["."],"memory":[[-2887840,5388528]],"name":["sqrtexp (problem 3.4.4)"],"oracle":[50.42416277088962],"outputs":[["#s(literal 1 binary64)"]],"repr":["binary64"],"time":8.068115234375,"times":[[2.68505859375,"x"],[2.39697265625,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[2.216064453125,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"bstep":[[0.197021484375,1.0,1.1827281633322424]],"compiler":[[4,5],[11,9]],"memory":[[178768,178768]],"method":["left-value"],"time":0.94091796875,"type":"bsearch"},{"bstep":[[0.111083984375,1.1827281633322424,1.9999970962477713]],"compiler":[[4,5],[11,9]],"memory":[[174560,174560]],"method":["left-value"],"time":0.501953125,"type":"bsearch"},{"bstep":[[0.120849609375,1.1827281633322424,1.9999970962477713]],"compiler":[[4,5],[11,9]],"memory":[[168176,168176]],"method":["left-value"],"time":0.425048828125,"type":"bsearch"},{"bstep":[[0.080078125,1.1827281633322424,1.9999970962477713]],"compiler":[[4,5],[11,9]],"memory":[[166944,166944]],"method":["left-value"],"time":0.346923828125,"type":"bsearch"},{"bstep":[[3.7138671875,1.1827281633322424,1.9999970962477713]],"compiler":[[14,13],[1,3],[14,13],[1,3],[14,13],[1,3],[14,13],[1,3],[4,5],[11,9]],"memory":[[1454192,1454192]],"method":["binary-search"],"mixsample":[[0.03662109375,"ival-true",0],[0.4775390625,"ival-sqrt",0],[0.119140625,"ival-assert",0]],"outcomes":[[1.646240234375,0,"valid",64]],"stop":[["narrow-enough",1]],"time":4.570068359375,"type":"bsearch"},{"egraph":[[7,4809,139,0.048944385],[6,909,139,0.025078833],[5,381,139,0.005026405],[4,170,147,0.002261464],[3,106,167,0.001283346],[2,76,167,0.001112322],[1,65,167,0.001197887],[0,51,167,0.001054681]],"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 2476979795053773/2251799813685248 binary64)) #s(literal 1 binary64) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 6530219459687219/4503599627370496 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))))","#s(literal 1 binary64)"]],"memory":[[4022496,12279776]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 2476979795053773/2251799813685248 binary64)) #s(literal 1 binary64) #s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 3/2 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))))","(if (<=.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 6530219459687219/4503599627370496 binary64)) #s(literal 1 binary64) (sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))))","#s(literal 1 binary64)"]],"stop":[["node limit",1]],"time":108.6279296875,"type":"simplify"},{"compiler":[[167,53]],"memory":[[-6428864,1835408]],"stop":[["done",1]],"time":7.697998046875,"type":"soundness"},{"compiler":[[167,53],[167,53],[12,10],[12,10]],"memory":[[1570448,25455248]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":40.576171875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.013916015625,"type":"end"}]