[{"memory":[[14144,14144]],"time":0.031005859375,"type":"start"},{"compiler":[[14,9]],"memory":[[1148880,1148880]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0007317066192626953,"valid":0.4987800121307373}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0014634132385253906,"valid":0.4980483055114746}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0029268264770507813,"valid":0.4965848922729492}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0058536529541015625,"valid":0.49365806579589844}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.011707305908203125,"valid":0.4878044128417969}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.02341461181640625,"valid":0.47609710693359375}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0468292236328125,"valid":0.4526824951171875}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.093658447265625,"valid":0.405853271484375}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.18731689453125,"valid":0.31219482421875}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.3746337890625,"valid":0.1248779296875}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":4.4609375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[14293376,345606880]],"mixsample":[[169.930908203125,"ival-div",0],[150.509521484375,"adjust",800],[62.306396484375,"ival-fabs",0],[17.3583984375,"ival-sub",1600],[4.498779296875,"ival-assert",0],[61.1298828125,"ival-sub",0],[1357.703857421875,"ival-log",0],[76.655517578125,"ival-log1p",0],[58.680908203125,"ival-sub",400],[27.9287109375,"ival-<=",0],[6.7060546875,"exact",0],[54.39990234375,"adjust",2000]],"outcomes":[[956.55224609375,1,"valid",4795],[1360.790283203125,2,"valid",3116],[32.919921875,0,"valid",345]],"time":2699.879150390625,"type":"sample"},{"compiler":[[9,7],[27,9],[27,9]],"confusion":[[247,0,7,2]],"explanations":[["log.f64","(log.f64 (+.f64 #s(literal 1 binary64) x))","sensitivity",254,1,[],[[2]]],["log.f64","(log.f64 (-.f64 #s(literal 1 binary64) x))","sensitivity",254,1,[],[[1]]]],"fperrors":[["(log.f64 (+.f64 #s(literal 1 binary64) x))",254,0,false,0,false],["(log.f64 (-.f64 #s(literal 1 binary64) x))",253,1,[0.0035174724849525974],0,false],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0,0,false,0,false],["(+.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,254],[0,2]],"maybe-confusion":[[247,0,0,7,1,1]],"memory":[[-541328,58039408]],"mixsample":[[10.954345703125,"ival-div",0],[11.052734375,"adjust",800],[3.084228515625,"ival-add",0],[0.924560546875,"ival-sub",1600],[0.211669921875,"ival-assert",0],[3.754638671875,"ival-sub",0],[0.493896484375,"ival-true",0],[78.927490234375,"ival-log",0],[4.7763671875,"ival-log1p",0],[3.06201171875,"ival-sub",400],[0.340087890625,"exact",0],[3.75439453125,"adjust",2000]],"outcomes":[[59.670166015625,1,"valid",302],[86.2158203125,2,"valid",190],[1.728759765625,0,"valid",20]],"time":209.181884765625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,7]],"egraph":[[0,69,6,0.000335766],[8,69,9,0.000330108],[7,65,9,0.000564316],[6,51,9,0.000350011],[5,41,9,0.00029484],[4,33,9,0.000217948],[3,26,9,0.000184144],[2,21,9,0.000153585],[1,17,9,0.000124041],[0,12,9,0.00015804],[0,7,9,0.000115283]],"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"memory":[[-5878320,14909952]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":144.344970703125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43328,43328]],"time":0.1201171875,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","next",61.2872463790274,"binary64"]],"compiler":[[9,7]],"memory":[[270896,270896]],"time":0.375,"type":"prune"},{"egraph":[[0,69,19,0.000336513],[8,69,25,0.000338075],[7,65,25,0.000439175],[6,51,25,0.000363277],[5,41,25,0.000309621],[4,33,25,0.000230028],[3,26,25,0.000193043],[2,21,25,0.000158003],[1,17,25,0.000134618],[0,12,25,0.000166231],[0,7,25,0.000102319]],"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)"]],"locations":[["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(log.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",2]],"memory":[[657360,657360]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(log1p.f64 x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":8.491943359375,"type":"simplify"},{"compiler":[[27,9]],"locations":[["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.0234375],["(log.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",58.563644768347565],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.58894342751751]],"memory":[[-2922224,12974640]],"mixsample":[[4.561279296875,"ival-div",0],[5.409423828125,"adjust",800],[1.29345703125,"ival-add",0],[1.420654296875,"ival-sub",1600],[0.09033203125,"ival-assert",0],[1.71240234375,"ival-sub",0],[0.189208984375,"ival-true",0],[38.86279296875,"ival-log",0],[2.361083984375,"ival-log1p",0],[1.61328125,"ival-sub",400],[0.19873046875,"exact",0],[2.040771484375,"adjust",2000]],"outcomes":[[29.499755859375,1,"valid",151],[41.58984375,2,"valid",95],[0.92919921875,0,"valid",10]],"time":82.85009765625,"type":"localize"},{"count":[[5,42]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[2081840,2081840]],"outputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[2.5810546875,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","-inf"],[2.40087890625,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","inf"],[0.87890625,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","0"]],"time":6.73095703125,"type":"series"},{"count":[[42,41]],"egraph":[[0,8379,854,0.106594868],[2,2012,881,0.027214495],[1,658,954,0.007092774],[0,217,1070,0.001977151]],"inputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[1365888,50725200]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+.f64 (+.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (*.f64 x x)) (log.f64 x)) (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x)) (log.f64 x)))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":291.375,"type":"simplify"},{"count":[[5,75]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[3108112,18884208]],"outputs":[["(neg.f64 (neg.f64 (log1p.f64 x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x))) (log1p.f64 x))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log1p.f64 (*.f64 (*.f64 x x) x)) (neg.f64 (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x))))","(+.f64 (log1p.f64 (*.f64 (*.f64 x x) x)) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (+.f64 x #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (*.f64 (*.f64 x x) x)) (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (/.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64)))","(-.f64 (log.f64 (fma.f64 (neg.f64 x) (*.f64 x x) #s(literal -1 binary64))) (log.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(neg.f64 (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 x)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (*.f64 x x) x))) (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x))) (log1p.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))) (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (+.f64 (neg.f64 x) #s(literal -1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 (neg.f64 x))))","(-.f64 (log.f64 (neg.f64 (fma.f64 (neg.f64 x) (*.f64 x x) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(*.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 (neg.f64 x)))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 #s(literal 0 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (log1p.f64 x)) (/.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(*.f64 (log1p.f64 (neg.f64 x)) (/.f64 #s(literal 1 binary64) (log1p.f64 x)))","(*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal -1 binary64)) x)) (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))))","(+.f64 (*.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (/.f64 (*.f64 (*.f64 x x) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) x)","(-.f64 #s(literal 0 binary64) (+.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 x x) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(neg.f64 (+.f64 (neg.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x)))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) x))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))"]],"time":289.81201171875,"type":"rewrite"},{"compiler":[[2545,489]],"memory":[[-2645632,9576480]],"time":12.18896484375,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","fresh",60.4112443760497,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","fresh",61.108585921771166,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","next",0.015625,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","next",0.38119781529819163,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","next",0.4923121727385288,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","next",0.7171188241234768,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","next",1.3501877137240843,"binary64"]],"compiler":[[22,16],[22,17],[8,7],[20,14],[17,12],[13,10],[11,9],[22,16],[22,17],[8,7],[20,14],[17,12],[13,10],[11,9]],"count":[[114,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[113,7],"picked":[1,0]}],"memory":[[-1111264,6850096]],"min-error":[[0.0,"binary64"]],"time":6.951904296875,"type":"prune"},{"egraph":[[0,2914,118,0.013203865],[12,2914,118,0.019162991],[11,2914,118,0.016629709],[10,2914,118,0.013882663],[9,2907,118,0.014798817],[8,2793,118,0.015608956],[7,2292,118,0.022919822],[6,1465,118,0.018949258],[5,893,118,0.007268744],[4,558,118,0.004158157],[3,286,118,0.002507982],[2,120,118,0.001455266],[1,72,118,0.000603526],[0,44,120,0.000453888],[0,26,124,0.000268719]],"inputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(neg.f64 (log1p.f64 x))","(log1p.f64 x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)"]],"locations":[["(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","cost-diff",0],["(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","cost-diff",0],["(-.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","cost-diff",0],["(neg.f64 x)","cost-diff",0],["(log1p.f64 (neg.f64 x))","cost-diff",0],["(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","cost-diff",0],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","cost-diff",2]],"memory":[[-488752,7407264]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(neg.f64 (log1p.f64 x))","(log1p.f64 x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":181.81103515625,"type":"simplify"},{"compiler":[[132,27]],"locations":[["(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","accuracy",0.38119781529819163],["(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","accuracy",0.4923121727385288],["(-.f64 #s(literal -1 binary64) x)","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","accuracy",0.7171188241234768],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","accuracy",1.3501877137240843],["(neg.f64 x)","accuracy",0.0],["(log1p.f64 (neg.f64 x))","accuracy",0.00390625],["(log1p.f64 x)","accuracy",0.00390625],["(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","accuracy",0.0234375]],"memory":[[-1098016,32035648]],"mixsample":[[7.775146484375,"ival-div",0],[15.495849609375,"adjust",800],[6.3916015625,"ival-add",0],[19.01123046875,"ival-mult",0],[0.57763671875,"ival-sub",1600],[0.131591796875,"ival-assert",0],[3.63427734375,"ival-sub",0],[0.253173828125,"ival-true",0],[43.131103515625,"ival-log",0],[4.47802734375,"ival-log1p",0],[1.990966796875,"ival-sub",400],[5.069091796875,"const",0],[0.744140625,"exact",0],[3.54541015625,"ival-neg",0],[5.527587890625,"adjust",2000]],"outcomes":[[66.71728515625,1,"valid",151],[71.5390625,2,"valid",95],[12.138916015625,0,"valid",10]],"time":170.215087890625,"type":"localize"},{"count":[[15,76]],"inputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(log1p.f64 x)"]],"memory":[[4413312,4413312]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","-1/2","(- (* -5/12 x) 1/2)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(- 1 (/ (log -1) (log (/ 1 x))))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -1 (* x (+ 1 (/ 1 x))))","(* -1/2 (pow x 2))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(* -1/2 x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))"]],"series":[[6.083984375,"((neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (log (+ 1 x)))","x","-inf"],[3.9091796875,"((neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (log (+ 1 x)))","x","inf"],[1.428955078125,"((neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (log (+ 1 x)))","x","0"]],"time":13.833984375,"type":"series"},{"count":[[76,75]],"egraph":[[0,8138,2132,0.10879313],[2,3735,2190,0.030463942],[1,1101,2392,0.01330246],[0,342,2672,0.003747278]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","-1/2","(- (* -5/12 x) 1/2)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(- 1 (/ (log -1) (log (/ 1 x))))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -1 (* x (+ 1 (/ 1 x))))","(* -1/2 (pow x 2))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(* -1/2 x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))"]],"memory":[[-2796288,54475552]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(- (* -1/2 x) 1)","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -5/12 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -5/12 x) 1/2)","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(- 1 (/ (log -1) (log (/ 1 x))))","(+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) #s(literal 1 binary64))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(+.f64 (+.f64 (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) #s(literal 1 binary64))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(-.f64 (+.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (log.f64 x)) #s(literal 1 binary64)) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x)) (-.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x))) (*.f64 x x)) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(-.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (log.f64 x))) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (log.f64 x))) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (pow.f64 x #s(literal 3 binary64))) (log.f64 x)) (/.f64 #s(literal 1/3 binary64) (log.f64 x)) (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (log.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 x)))) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x))) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 x x))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (neg.f64 (log.f64 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(-.f64 (-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x)) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 x x)))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(-.f64 (-.f64 (-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x)) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 x x))) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1/3 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (fma.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (log.f64 x))))) (pow.f64 x #s(literal 3 binary64))))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(-.f64 (-.f64 (fma.f64 (/.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (log.f64 x))) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x))) (*.f64 x x))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (fma.f64 (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (neg.f64 (log.f64 x))) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (-.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x)))) (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) (*.f64 x x))))) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (log.f64 x))))","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(* -1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/2 binary64))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(*.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) x)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(* -5/12 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -5/12 binary64))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x x))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 5/12 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -5/12 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -5/12 binary64))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x)","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) x)","(* -5/12 x)","(*.f64 #s(literal -5/12 binary64) x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (-.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) x)) #s(literal -1 binary64)))) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+.f64 (/.f64 (+.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (*.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x) (+.f64 (/.f64 #s(literal -1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (-.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) x)) #s(literal -1 binary64)))) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (+.f64 #s(literal 5/12 binary64) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x #s(literal 1/2 binary64)))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(*.f64 (neg.f64 (-.f64 #s(literal 5/12 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x))) (pow.f64 x #s(literal 3 binary64)))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":276.656005859375,"type":"simplify"},{"count":[[15,169]],"inputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(log1p.f64 x)"]],"memory":[[-2374800,23116176]],"outputs":[["#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","(neg.f64 #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(+.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1/2 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 x #s(literal 6 binary64))","(*.f64 #s(literal -1 binary64) #s(literal 6 binary64))","(*.f64 #s(literal -1/2 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1 binary64))","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","(neg.f64 #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(+.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1/2 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 x #s(literal 6 binary64))","(*.f64 #s(literal -1 binary64) #s(literal 6 binary64))","(*.f64 #s(literal -1/2 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1 binary64))","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","(neg.f64 #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(+.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1/2 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 x #s(literal 6 binary64))","(*.f64 #s(literal -1 binary64) #s(literal 6 binary64))","(*.f64 #s(literal -1/2 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 6 binary64))","(+.f64 x x)","(+.f64 #s(literal 6 binary64) x)","(+.f64 (-.f64 x #s(literal 6 binary64)) x)","(-.f64 x x)","(-.f64 #s(literal 6 binary64) x)","(-.f64 (-.f64 x #s(literal 6 binary64)) x)","(-.f64 (/.f64 #s(literal 6 binary64) x) x)","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(*.f64 x x)","(/.f64 x #s(literal -1 binary64))","(/.f64 x x)","#s(approx 6 #s(literal -1 binary64))","#s(approx 6 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","(neg.f64 #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) #s(literal -1 binary64))","(+.f64 x #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) x)","(-.f64 #s(literal -1 binary64) x)","(-.f64 #s(literal -1 binary64) #s(literal 6 binary64))","(-.f64 x #s(literal -1 binary64))","(-.f64 #s(literal 6 binary64) #s(literal -1 binary64))","#s(approx 6 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(neg.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(+.f64 (*.f64 x #s(literal -1/8 binary64)) #s(literal -1 binary64))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal -1/8 binary64) x x))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(+.f64 (fma.f64 #s(literal -1/8 binary64) x x) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/8 binary64) x x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 x #s(literal -1/2 binary64)))","(+.f64 #s(literal -1 binary64) (*.f64 x #s(literal -1/8 binary64)))","(+.f64 x (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/8 binary64) x x))","(+.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -1/2 binary64))) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/8 binary64) x (*.f64 x #s(literal -1/2 binary64))) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/8 binary64) x (*.f64 x #s(literal -1/8 binary64))) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -1/2 binary64))))","(neg.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(+.f64 (*.f64 x #s(literal -1/8 binary64)) #s(literal -1 binary64))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal -1/8 binary64) x x))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(+.f64 (fma.f64 #s(literal -1/8 binary64) x x) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/8 binary64) x x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 x #s(literal -1/2 binary64)))","(+.f64 #s(literal -1 binary64) (*.f64 x #s(literal -1/8 binary64)))","(+.f64 x (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/8 binary64) x x))","(+.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -1/2 binary64))) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/8 binary64) x (*.f64 x #s(literal -1/2 binary64))) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/8 binary64) x (*.f64 x #s(literal -1/8 binary64))) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -1/2 binary64))))","#s(approx 6 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(neg.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -5/12 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -5/12 binary64)))","(+.f64 (fma.f64 x #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64))) #s(literal -1 binary64))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x) #s(literal -1 binary64))","(+.f64 (+.f64 #s(literal -1 binary64) (*.f64 x #s(literal -5/12 binary64))) (*.f64 x #s(literal -1/2 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(+.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x))","(+.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64))))","(+.f64 x (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) (-.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x (fma.f64 x #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(neg.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -5/12 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -5/12 binary64)))","(+.f64 (fma.f64 x #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64))) #s(literal -1 binary64))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x) #s(literal -1 binary64))","(+.f64 (+.f64 #s(literal -1 binary64) (*.f64 x #s(literal -5/12 binary64))) (*.f64 x #s(literal -1/2 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(+.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x x))","(+.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64))))","(+.f64 x (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) (-.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x (fma.f64 x #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(neg.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)))","(+.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal -1/2 binary64))","(+.f64 (*.f64 x #s(literal -125/1728 binary64)) #s(literal -1/8 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))","(+.f64 #s(literal -1/8 binary64) (*.f64 x #s(literal -125/1728 binary64)))","(+.f64 (*.f64 (*.f64 x #s(literal -125/1728 binary64)) (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))) (neg.f64 (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64))))","(+.f64 (fma.f64 x #s(literal -125/1728 binary64) (*.f64 x #s(literal 5/24 binary64))) (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x #s(literal -5/12 binary64))) (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)))","(+.f64 (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x #s(literal -5/12 binary64))))","(+.f64 (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)) (fma.f64 x #s(literal -125/1728 binary64) (*.f64 x #s(literal 5/24 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64))) (*.f64 x #s(literal -5/12 binary64))) (*.f64 (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64))) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64))) (*.f64 x #s(literal -5/12 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal -5/12 binary64)) (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)))) (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)))) (*.f64 (*.f64 x #s(literal -5/12 binary64)) (fma.f64 #s(literal 25/144 binary64) x (fma.f64 x #s(literal 5/24 binary64) #s(literal -1/8 binary64)))))","(-.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal -1/2 binary64))","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","(neg.f64 #s(literal 6 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(+.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1/2 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 x #s(literal 6 binary64))","(*.f64 #s(literal -1 binary64) #s(literal 6 binary64))","(*.f64 #s(literal -1/2 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal -1 binary64))"]],"time":443.97705078125,"type":"rewrite"},{"compiler":[[4527,705]],"memory":[[8287568,16074976]],"time":19.639892578125,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","next",60.4112443760497,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","next",61.108585921771166,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","done",0.015625,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","next",0.38367152750374267,"binary64"],["(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","next",0.38930459014170554,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.38119781529819163,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.4923121727385288,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.7171188241234768,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.3501877137240843,"binary64"],["#s(literal -2 binary64)","next",51.994405516916835,"binary64"]],"compiler":[[22,16],[22,17],[8,7],[23,18],[23,18],[20,14],[17,12],[13,10],[11,9],[1,2],[22,16],[22,17],[23,18],[23,18],[1,2]],"count":[[173,10]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[166,3],"picked":[5,5]}],"memory":[[-6417936,9540976]],"min-error":[[0.0,"binary64"]],"time":8.739990234375,"type":"prune"},{"egraph":[[0,8238,369,0.075638059],[18,7990,369,0.017935127],[17,7416,369,0.042247888],[16,7416,369,0.026245381],[15,7407,369,0.02567225],[14,7396,369,0.025989593],[13,7340,369,0.022902081],[12,7230,369,0.030050925],[11,7206,369,0.014916068],[10,7146,369,0.014938245],[9,6954,369,0.01733157],[8,6318,369,0.023705007],[7,5227,369,0.022265348],[6,4251,369,0.020234723],[5,2588,369,0.015646031],[4,1221,369,0.009955666],[3,518,369,0.005254215],[2,198,369,0.002262651],[1,112,369,0.000877077],[0,71,373,0.000662969],[0,41,377,0.000574138]],"inputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","(log.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x)))","#s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","(neg.f64 (log1p.f64 x))","(log1p.f64 x)"]],"locations":[["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x)))","cost-diff",0],["(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","cost-diff",2],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","cost-diff",0],["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(log.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",2],["(neg.f64 x)","cost-diff",0],["(log1p.f64 (neg.f64 x))","cost-diff",0],["(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","cost-diff",0],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","cost-diff",2]],"memory":[[-9193968,36071152]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (log1p.f64 (neg.f64 x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log1p.f64 x))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","(log.f64 (+.f64 #s(literal 1 binary64) x))","(log1p.f64 x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (log1p.f64 (neg.f64 x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log1p.f64 x))","(/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x)))","#s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","(neg.f64 (log1p.f64 x))","(log1p.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":572.237060546875,"type":"simplify"},{"compiler":[[308,33]],"locations":[["(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","accuracy",0.01171875],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","accuracy",0.01171875],["(/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x)))","accuracy",0.0234375],["#s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",0.3744912814936202],["(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","accuracy",0.01953125],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","accuracy",0.0234375],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.37383713449911427],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.58894342751751],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","accuracy",0.01171875],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.0234375],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",0.3744912814936202],["(log.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",58.563644768347565],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",0.0078125],["(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","accuracy",0.01953125],["(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","accuracy",0.0234375],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.37383713449911427]],"memory":[[-3833328,56957712]],"mixsample":[[6.776123046875,"ival-div",0],[17.5234375,"adjust",800],[18.049560546875,"ival-add",0],[22.662841796875,"ival-mult",0],[0.705810546875,"ival-sub",1600],[0.139404296875,"ival-assert",0],[2.73486328125,"ival-sub",0],[0.34375,"ival-true",0],[42.496826171875,"ival-log",0],[4.925537109375,"ival-log1p",0],[15.51513671875,"const",0],[1.2431640625,"ival-sub",400],[0.70263671875,"exact",0],[3.7744140625,"ival-neg",0],[6.381103515625,"adjust",2000]],"outcomes":[[98.0810546875,1,"valid",151],[94.376953125,2,"valid",95],[3.484130859375,0,"valid",10]],"time":292.237060546875,"type":"localize"},{"count":[[18,76]],"inputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(log.f64 (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(-.f64 #s(literal 1 binary64) x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x)))","#s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))"]],"memory":[[3751696,3751696]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(+ 1 (* -1 x))","1/3","(+ 1/3 (* -1/4 x))","-1/3","(- (* -1/4 x) 1/3)","(- 1 (/ (log -1) (log (/ 1 x))))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* x (- (/ 1 x) 1))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) 1/4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) (+ 1/4 (/ 1/2 (pow x 2)))))","(* (pow x 4) (- (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 3))) (+ 1/4 (/ 1/2 (pow x 2)))))","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/3) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/3) x)) 1/4))"]],"series":[[2.176025390625,"((neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (+ (* -1/4 x) 1/3) (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (+ (* -1/4 x) -1/3))","x","-inf"],[2.007080078125,"((neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (+ (* -1/4 x) 1/3) (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (+ (* -1/4 x) -1/3))","x","inf"],[0.90185546875,"((neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (+ (* -1/4 x) 1/3) (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (+ (* -1/4 x) -1/3))","x","0"]],"time":7.220947265625,"type":"series"},{"count":[[76,75]],"egraph":[[0,8155,2146,0.091847618],[2,3603,2200,0.026742684],[1,1114,2404,0.011330909],[0,358,2681,0.003515955]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(+ 1 (* -1 x))","1/3","(+ 1/3 (* -1/4 x))","-1/3","(- (* -1/4 x) 1/3)","(- 1 (/ (log -1) (log (/ 1 x))))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* x (- (/ 1 x) 1))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) 1/4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) (+ 1/4 (/ 1/2 (pow x 2)))))","(* (pow x 4) (- (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 3))) (+ 1/4 (/ 1/2 (pow x 2)))))","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/3) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/3) x)) 1/4))"]],"memory":[[508688,51437936]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/4 x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","-1/3","#s(literal -1/3 binary64)","(- (* -1/4 x) 1/3)","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(- 1 (/ (log -1) (log (/ 1 x))))","(+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) #s(literal 1 binary64))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(+.f64 (+.f64 (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) x) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) #s(literal 1 binary64))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(-.f64 (+.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (log.f64 x)) #s(literal 1 binary64)) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) x)) (-.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) (log.f64 x))) (*.f64 x x)) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(-.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (log.f64 x))) (/.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) #s(literal 1/2 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (log.f64 x))) (pow.f64 x #s(literal 3 binary64)))) (-.f64 (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (pow.f64 x #s(literal 3 binary64))) (log.f64 x)) (/.f64 #s(literal 1/3 binary64) (log.f64 x)) (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (log.f64 #s(literal -1 binary64)) (neg.f64 (log.f64 x)))) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) x))) (/.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) #s(literal 1/2 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 x x))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (neg.f64 (log.f64 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) x))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(-.f64 (-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) x)) (/.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) #s(literal 1/2 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 x x)))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(-.f64 (-.f64 (-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) x)) (/.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) #s(literal 1/2 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 x x))) (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/3 binary64) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1/3 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (fma.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (/.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) #s(literal 1/2 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (log.f64 x))))) (pow.f64 x #s(literal 3 binary64))))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(-.f64 (-.f64 (fma.f64 (/.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (log.f64 x))) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (neg.f64 (+.f64 (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 2 binary64) (log.f64 x)))) (log.f64 x))) (*.f64 x x))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (fma.f64 (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (neg.f64 (log.f64 x))) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (-.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x)))) (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64)))) (*.f64 x x))))) (/.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) #s(literal 1/2 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 3 binary64))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (log.f64 x))))","(* -1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) x)) (pow.f64 x #s(literal 4 binary64)))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* -1/4 x)","(*.f64 #s(literal -1/4 binary64) x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* (pow x 4) (- (* 1/3 (/ 1 x)) 1/4))","(*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* 1/3 (/ 1 x)) (+ 1/4 (/ 1/2 (pow x 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 3))) (+ 1/4 (/ 1/2 (pow x 2)))))","(*.f64 (+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) x) #s(literal 1/4 binary64)) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* x (+ 1/4 (* 1/3 (/ 1 x)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (-.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) x)) #s(literal -1 binary64)))) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(-.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+.f64 (/.f64 (+.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) (*.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x) (+.f64 (/.f64 #s(literal -1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (-.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) x)) #s(literal -1 binary64)))) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal 1/2 binary64) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* (pow x 4) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/3) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/3) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":276.284912109375,"type":"simplify"},{"count":[[18,144]],"inputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(log.f64 (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(-.f64 #s(literal 1 binary64) x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x)))","#s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))"]],"memory":[[780832,24501712]],"outputs":[["(neg.f64 (/.f64 #s(literal 6 binary64) (neg.f64 #s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x)))))","(/.f64 #s(literal 6 binary64) (neg.f64 #s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))))","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","(neg.f64 #s(literal 6 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 1 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 x #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) x)","(/.f64 #s(literal 6 binary64) #s(literal 1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 6 binary64))","(+.f64 x x)","(+.f64 #s(literal 6 binary64) x)","(+.f64 (-.f64 x #s(literal 6 binary64)) x)","(-.f64 x x)","(-.f64 #s(literal 6 binary64) x)","(-.f64 (-.f64 x #s(literal 6 binary64)) x)","(-.f64 (/.f64 #s(literal 6 binary64) x) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(/.f64 x #s(literal 1 binary64))","(/.f64 x x)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","(neg.f64 #s(literal 6 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 1 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 x #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) x)","(/.f64 #s(literal 6 binary64) #s(literal 1 binary64))","(/.f64 #s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x)) #s(literal 6 binary64))","#s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) x)","(+.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))))","(+.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 6 binary64)) x)","(+.f64 #s(literal 6 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(-.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) x)","(-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 6 binary64)) x)","(-.f64 #s(literal 6 binary64) (-.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x) #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","(neg.f64 #s(literal 6 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 1 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) #s(literal 6 binary64))","(*.f64 x #s(literal 6 binary64))","(*.f64 #s(literal 6 binary64) x)","(/.f64 #s(literal 6 binary64) #s(literal 1 binary64))","(/.f64 #s(literal 6 binary64) #s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x)))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","(neg.f64 #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 6 binary64) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 6 binary64))","(-.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 #s(literal 6 binary64) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) #s(literal 6 binary64))","#s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(neg.f64 (/.f64 #s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x)) #s(literal 6 binary64)))","(/.f64 #s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x)) #s(literal 6 binary64))","#s(approx 6 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))","(+.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal -1/243 binary64))","(+.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 x #s(literal -1/4 binary64)))","(+.f64 #s(literal -1/243 binary64) (*.f64 x #s(literal -1/4 binary64)))","(+.f64 (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))","(+.f64 (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))) (neg.f64 (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))))","(+.f64 (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)) (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))","(+.f64 (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) (*.f64 x #s(literal -1/4 binary64))) (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) #s(literal 1/3 binary64)) (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) (*.f64 x #s(literal -1/4 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal -1/4 binary64)) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))))","(+.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))) (*.f64 (*.f64 x #s(literal -1/4 binary64)) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))))","(-.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal 1/3 binary64))","(-.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal -1/243 binary64))","(-.f64 #s(literal 1/3 binary64) (*.f64 x #s(literal -1/4 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) x)","(+.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))))","(+.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 6 binary64)) x)","(+.f64 #s(literal 6 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(-.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) x)","(-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 6 binary64)) x)","(-.f64 #s(literal 6 binary64) (-.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x) #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))","(+.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal -1/243 binary64))","(+.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 x #s(literal -1/4 binary64)))","(+.f64 #s(literal -1/243 binary64) (*.f64 x #s(literal -1/4 binary64)))","(+.f64 (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))","(+.f64 (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))) (neg.f64 (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))))","(+.f64 (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)) (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))","(+.f64 (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) (*.f64 x #s(literal -1/4 binary64))) (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) #s(literal 1/3 binary64)) (*.f64 (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64))) (*.f64 x #s(literal -1/4 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal -1/4 binary64)) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))))","(+.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))) (*.f64 (*.f64 x #s(literal -1/4 binary64)) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal -1/243 binary64)))))","(-.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal 1/3 binary64))","(-.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal -1/243 binary64))","(-.f64 #s(literal 1/3 binary64) (*.f64 x #s(literal -1/4 binary64)))"]],"time":535.26513671875,"type":"rewrite"},{"compiler":[[6778,903]],"memory":[[-4430064,19867312]],"time":27.113037109375,"type":"eval"},{"alts":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","next",0.30007183885120825,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","done",0.015625,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.38119781529819163,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.4923121727385288,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.7171188241234768,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.3501877137240843,"binary64"],["#s(literal -2 binary64)","done",51.994405516916835,"binary64"]],"compiler":[[35,23],[8,7],[20,14],[17,12],[13,10],[11,9],[1,2]],"count":[[206,7]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[196,1],"picked":[5,1]}],"memory":[[356832,8682288]],"min-error":[[0.0,"binary64"]],"time":6.057861328125,"type":"prune"},{"egraph":[[0,8558,136,0.111530597],[16,7085,142,0.03782664],[15,7085,142,0.028339499],[14,7085,142,0.021621582],[13,7023,142,0.020059904],[12,6757,142,0.023766862],[11,6748,142,0.015842977],[10,6726,142,0.01224097],[9,6490,142,0.017769496],[8,5720,142,0.020653918],[7,4477,142,0.02675804],[6,3412,142,0.016089829],[5,2016,142,0.013674597],[4,792,142,0.007588004],[3,282,142,0.002412496],[2,100,142,0.000961005],[1,54,142,0.000421971],[0,36,142,0.000387927],[0,22,142,0.000275321]],"inputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","cost-diff",0]],"memory":[[6186928,48501920]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":581.220947265625,"type":"simplify"},{"compiler":[[110,26]],"locations":[["(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","accuracy",0.01953125],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","accuracy",0.0234375],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.37383713449911427],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",0.3744912814936202]],"memory":[[-6350736,37214336]],"mixsample":[[4.641357421875,"ival-div",0],[13.346435546875,"adjust",800],[14.08349609375,"ival-add",0],[21.074462890625,"ival-mult",0],[0.55859375,"ival-sub",1600],[0.101318359375,"ival-assert",0],[1.65283203125,"ival-sub",0],[0.235107421875,"ival-true",0],[40.69921875,"ival-log",0],[2.18408203125,"ival-log1p",0],[15.57958984375,"const",0],[1.72412109375,"ival-sub",400],[0.595947265625,"exact",0],[5.022705078125,"adjust",2000]],"outcomes":[[70.767578125,1,"valid",151],[71.762939453125,2,"valid",95],[2.014892578125,0,"valid",10]],"time":165.009033203125,"type":"localize"},{"count":[[6,55]],"inputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))"]],"memory":[[1461600,1461600]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -1/3 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","1/3","(+ 1/3 (* -1/4 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 (pow x 3))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))"]],"series":[[0.81005859375,"((/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (log (+ 1 x)) (+ (* -1/4 x) 1/3))","x","-inf"],[0.7900390625,"((/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (log (+ 1 x)) (+ (* -1/4 x) 1/3))","x","inf"],[0.490966796875,"((/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (log (+ 1 x)) (+ (* -1/4 x) 1/3))","x","0"]],"time":3.13916015625,"type":"series"},{"count":[[55,54]],"egraph":[[0,8164,1023,0.097694805],[2,2537,1057,0.02723602],[1,775,1131,0.008161634],[0,254,1256,0.002640836]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -1/3 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","1/3","(+ 1/3 (* -1/4 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 (pow x 3))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))"]],"memory":[[6994016,51155424]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(- (* -1/2 x) 1)","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -1/3 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/4 x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+.f64 (+.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 (log.f64 x) x) x)))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1/4 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(* -1/4 x)","(*.f64 #s(literal -1/4 binary64) x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/4 binary64)) x)","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) #s(literal 1/4 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) x) #s(literal -1 binary64) #s(literal -1/4 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":247.159912109375,"type":"simplify"},{"count":[[6,48]],"inputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))"]],"memory":[[-533536,19621744]],"outputs":[["(/.f64 #s(approx 0 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x)) #s(approx 0 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x)))","#s(approx 0 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x (*.f64 x #s(literal -1/4 binary64))) x)","(+.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) x)","(+.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))))","(-.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) x)","(-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 0 binary64)) x)","(-.f64 #s(literal 0 binary64) (-.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64)))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x #s(literal -1/4 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x #s(literal -1/4 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(*.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(*.f64 (*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x #s(literal -1/4 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))))) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))))","(neg.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x (*.f64 x #s(literal -1/4 binary64))) #s(literal -1 binary64))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))","(+.f64 (fma.f64 x #s(literal -1/3 binary64) (*.f64 x #s(literal -1/4 binary64))) (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64)))","(+.f64 (fma.f64 x #s(literal -1/3 binary64) (*.f64 x #s(literal -1/4 binary64))) (-.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(+.f64 (+.f64 #s(literal -1 binary64) (*.f64 x #s(literal -1/2 binary64))) (fma.f64 x #s(literal -1/3 binary64) (*.f64 x #s(literal -1/4 binary64))))","(+.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x (*.f64 x #s(literal -1/4 binary64))))","(+.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x (*.f64 x #s(literal -1/4 binary64)))) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))))","(+.f64 (+.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/3 binary64) (*.f64 x #s(literal -1/4 binary64)))) (*.f64 x #s(literal -1/2 binary64)))","(+.f64 (*.f64 x #s(literal -1/2 binary64)) (-.f64 (fma.f64 x #s(literal -1/3 binary64) (*.f64 x #s(literal -1/4 binary64))) #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x (*.f64 x #s(literal -1/4 binary64)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x #s(literal -1/4 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x #s(literal -1/4 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x #s(literal -1/4 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64)))) (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (*.f64 x #s(literal -1/2 binary64)))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) x #s(literal -1/4 binary64)) x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x (fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64)))) #s(literal -1 binary64)))","#s(approx 0 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x x))","(neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))","(+.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal -1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1/4 binary64)))","(+.f64 (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))) (neg.f64 (*.f64 #s(literal 1/729 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(-.f64 (*.f64 x #s(literal -1/4 binary64)) #s(literal -1/3 binary64))","(-.f64 #s(literal -1/3 binary64) (*.f64 x #s(literal -1/4 binary64)))","(-.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))","(-.f64 (/.f64 (*.f64 x #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64))) (/.f64 #s(literal -1/3 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64))))","(-.f64 (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))) (*.f64 #s(literal 1/729 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(-.f64 (*.f64 #s(literal 1/729 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (fma.f64 x #s(literal -1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))","(-.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/243 binary64)) (/.f64 (*.f64 x #s(literal 1/12 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/243 binary64))))","(-.f64 (/.f64 (*.f64 x #s(literal -1/4 binary64)) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal 1/729 binary64)))) (/.f64 #s(literal 1/243 binary64) (fma.f64 x #s(literal -1/4 binary64) (fma.f64 x #s(literal 1/12 binary64) #s(literal 1/729 binary64)))))","(*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)))","(*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/729 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))"]],"time":401.27392578125,"type":"rewrite"},{"compiler":[[4264,585]],"memory":[[-4805488,11131712]],"time":19.787109375,"type":"eval"},{"alts":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","done",0.30007183885120825,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 #s(approx (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","fresh",42.94403297876623,"binary64"],["(/.f64 #s(approx (log (- 1 x)) #s(approx (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","fresh",47.154849689183344,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","done",0.015625,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.38119781529819163,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.4923121727385288,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.7171188241234768,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.3501877137240843,"binary64"],["#s(literal -2 binary64)","done",51.994405516916835,"binary64"]],"compiler":[[316,90],[35,23],[56,41],[56,41],[8,7],[20,14],[17,12],[13,10],[11,9],[1,2]],"count":[[107,9]],"kept":[{"done":[6,6],"fresh":[0,0],"new":[100,2],"picked":[1,1]}],"memory":[[-1675024,7630720]],"min-error":[[0.0,"binary64"]],"time":10.931884765625,"type":"prune"},{"accuracy":[0.015625],"baseline":[0.015625],"branch":[["x",0.015625,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.015625,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[14,1]],"inputs":[["#s(literal -2 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 #s(approx (log (- 1 x)) #s(approx (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 #s(approx (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"memory":[[5586768,5586768]],"oracle":[63.427285369889596],"outputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))"]],"repr":["binary64"],"time":9.428955078125,"times":[[4.285888671875,"x"],[4.056884765625,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.30007183885120825],"baseline":[0.30007183885120825],"branch":[["x",0.30007183885120825,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.30007183885120825,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[12,1]],"inputs":[["#s(literal -2 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(neg.f64 (/.f64 #s(approx (log (+ 1 (neg x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 (log1p.f64 x))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 #s(approx (log (- 1 x)) #s(approx (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 #s(approx (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"]],"memory":[[-2977264,5175008]],"oracle":[63.12303922313605],"outputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"]],"repr":["binary64"],"time":8.030029296875,"times":[[3.220947265625,"x"],[3.677001953125,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.3811978152981917],"baseline":[0.38119781529819163],"branch":[["x",0.38119781529819163,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.3811978152981917,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[5,1]],"inputs":[["#s(literal -2 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"memory":[[3546176,3546176]],"oracle":[51.9976033760234],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"repr":["binary64"],"time":4.294189453125,"times":[[2.10888671875,"x"],[1.662109375,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.4923121727385288],"baseline":[0.4923121727385288],"branch":[["x",0.4923121727385288,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.4923121727385288,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[4,1]],"inputs":[["#s(literal -2 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"memory":[[-4926880,3399776]],"oracle":[51.9976033760234],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"repr":["binary64"],"time":4.0859375,"times":[[1.934814453125,"x"],[1.614013671875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.7171188241234767],"baseline":[0.7171188241234768],"branch":[["x",0.7171188241234768,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.7171188241234767,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[3,1]],"inputs":[["#s(literal -2 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"]],"memory":[[3125552,3125552]],"oracle":[51.9976033760234],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"]],"repr":["binary64"],"time":3.22607421875,"times":[[1.574951171875,"x"],[1.22998046875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[1.3501877137240843],"baseline":[1.3501877137240843],"branch":[["x",1.3501877137240843,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",1.3501877137240843,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[2,1]],"inputs":[["#s(literal -2 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"memory":[[2883424,2883424]],"oracle":[51.9976033760234],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"repr":["binary64"],"time":3.337890625,"times":[[1.651123046875,"x"],[1.265869140625,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[51.99440551691683],"baseline":[51.994405516916835],"branch":[["x",51.994405516916835,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",51.99440551691683,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[1,1]],"inputs":[["#s(literal -2 binary64)"]],"link":["."],"memory":[[-5550272,2733664]],"name":["qlog (example 3.10)"],"oracle":[51.994405516916835],"outputs":[["#s(literal -2 binary64)"]],"repr":["binary64"],"time":2.406982421875,"times":[[1.017822265625,"x"],[1.055908203125,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"egraph":[[9,6970,103,0.024363302],[8,3783,103,0.055434273],[7,347,103,0.011200342],[6,215,103,0.001937917],[5,160,103,0.001472664],[4,133,103,0.001261864],[3,96,103,0.001187188],[2,74,103,0.000955961],[1,59,103,0.000828069],[0,41,105,0.000772988]],"inputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -2 binary64)"]],"memory":[[-3292880,9646496]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -2 binary64)"]],"stop":[["node limit",1]],"time":157.234130859375,"type":"simplify"},{"compiler":[[103,40]],"memory":[[1272640,1272640]],"stop":[["fuel",1]],"time":1.951904296875,"type":"soundness"},{"compiler":[[103,40],[103,40],[6,5],[6,5],[9,7],[9,7]],"memory":[[-1198960,31190656]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":65.9130859375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.011962890625,"type":"end"}]