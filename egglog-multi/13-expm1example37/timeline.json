[{"memory":[[9296,9296]],"time":0.02099609375,"type":"start"},{"compiler":[[9,6]],"memory":[[68016,68016]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0,"valid":0.49951171875}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":0.279052734375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[7128512,161328816]],"mixsample":[[51.888427734375,"ival-fabs",0],[4.908203125,"exact",0],[22.56640625,"ival-<=",0],[66.375,"ival-expm1",0],[3.369384765625,"ival-assert",0]],"outcomes":[[272.756591796875,0,"valid",8256]],"time":482.537109375,"type":"sample"},{"compiler":[[4,4],[10,6],[10,6]],"confusion":[[254,1,0,1]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",254,1,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",255,0,false,1,[0.011475981767747667]],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,254],[0,2]],"maybe-confusion":[[254,1,0,0,0,1]],"memory":[[27328,24630480]],"mixsample":[[0.78515625,"ival-true",0],[10.4140625,"ival-exp",0],[7.073486328125,"ival-expm1",0],[0.774169921875,"exact",0],[0.374267578125,"ival-assert",0]],"outcomes":[[38.8857421875,0,"valid",512]],"time":107.220947265625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[4,4]],"egraph":[[0,12,2,0.000216833],[2,12,4,0.000105298],[1,11,4,0.00012877],[0,6,4,0.000247172],[0,4,4,0.000163332]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[-8435840,14790800]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":235.926025390625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.5009765625,"type":"eval"},{"alts":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","next",58.382248224493026,"binary64"]],"compiler":[[4,4]],"memory":[[303424,303424]],"time":0.9970703125,"type":"prune"},{"egraph":[[0,12,6,0.000139842],[2,12,8,0.000114399],[1,11,8,0.000130831],[0,6,8,0.000225705],[0,4,8,0.000109876]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[460912,460912]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":8.73681640625,"type":"simplify"},{"compiler":[[10,6]],"locations":[["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",58.382248224493026]],"memory":[[5324144,5324144]],"mixsample":[[0.28271484375,"ival-true",0],[4.01025390625,"ival-exp",0],[3.68115234375,"ival-expm1",0],[0.27880859375,"exact",0],[0.136962890625,"ival-assert",0]],"outcomes":[[17.008056640625,0,"valid",256]],"time":24.903076171875,"type":"localize"},{"count":[[2,10]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[289872,289872]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"series":[[0.14697265625,"((- (exp x) 1) (exp x))","x","-inf"],[0.205078125,"((- (exp x) 1) (exp x))","x","inf"],[0.61083984375,"((- (exp x) 1) (exp x))","x","0"]],"time":1.2109375,"type":"series"},{"count":[[10,9]],"egraph":[[0,725,53,0.008608766],[6,725,66,0.003626766],[5,720,66,0.003802034],[4,587,66,0.003419616],[3,371,66,0.002660143],[2,168,66,0.001363077],[1,77,66,0.000563319],[0,25,66,0.000338476]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"memory":[[-4593488,3494208]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (exp x) 1)","(expm1.f64 x)","(exp x)","(exp.f64 x)"]],"stop":[["iter limit",1],["saturated",1]],"time":40.47119140625,"type":"simplify"},{"count":[[2,18]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[4099440,12297344]],"outputs":[["(neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (+.f64 x x)))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(exp.f64 x)"]],"time":229.7109375,"type":"rewrite"},{"compiler":[[292,83]],"memory":[[-6424592,2546640]],"time":7.468017578125,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",58.65699234583096,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",58.84298155784238,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","fresh",59.14044903721061,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","next",60.40959551131697,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",0.2625628059216411,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",0.34515499249109316,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","next",0.6458572034815937,"binary64"],["#s(approx (- (exp x) 1) (expm1.f64 x))","next",0.0,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[17,13],[14,11],[11,9],[7,6],[15,10],[12,8],[8,6],[6,5],[17,13],[14,11],[11,9],[7,6]],"count":[[28,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[27,8],"picked":[1,0]}],"memory":[[3893152,3893152]],"min-error":[[0.0,"binary64"]],"time":8.243896484375,"type":"prune"},{"egraph":[[0,766,130,0.004203476],[6,766,130,0.00282409],[5,712,130,0.003391296],[4,449,130,0.003413098],[3,204,130,0.001563808],[2,101,130,0.000792461],[1,61,130,0.00048137],[0,40,130,0.000439178],[0,23,130,0.000320902]],"inputs":[["#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","x","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","cost-diff",0],["#s(approx (exp x) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",0],["(expm1.f64 x)","cost-diff",0],["#s(approx (- (exp x) 1) (expm1.f64 x))","cost-diff",0]],"memory":[[-4879280,3446320]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","x","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":29.885009765625,"type":"simplify"},{"compiler":[[121,24]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",0.01171875],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.01953125],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.2508440559216411],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",0.00390625],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.3451549924910931],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","accuracy",0.01171875],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","accuracy",0.6458572410639674],["#s(approx (exp x) #s(literal 1 binary64))","accuracy",1.3704987439456475],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","accuracy",58.382248224493026],["(expm1.f64 x)","accuracy",0.0],["#s(approx (- (exp x) 1) (expm1.f64 x))","accuracy",0.0]],"memory":[[6977040,22655920]],"mixsample":[[0.2177734375,"ival-true",0],[2.961181640625,"ival-exp",0],[7.2353515625,"ival-add",0],[15.701171875,"ival-mult",0],[7.421142578125,"const",0],[2.863525390625,"ival-expm1",0],[0.386474609375,"exact",0],[0.11474609375,"ival-assert",0]],"outcomes":[[57.823486328125,0,"valid",256]],"time":73.490966796875,"type":"localize"},{"count":[[16,47]],"inputs":[["#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[-6118000,2814160]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(exp x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))"]],"series":[[4.277099609375,"((- (exp x) 1) (- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","-inf"],[2.179931640625,"((- (exp x) 1) (- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","inf"],[1.593994140625,"((- (exp x) 1) (- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","0"]],"time":8.817138671875,"type":"series"},{"count":[[47,46]],"egraph":[[0,8448,289,0.095034427],[4,5784,347,0.026426616],[3,3294,347,0.017985916],[2,870,349,0.010486373],[1,312,357,0.00275792],[0,89,361,0.001000487]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(exp x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))"]],"memory":[[4359248,36958640]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(- (exp x) 1)","(expm1.f64 x)","(exp x)","(exp.f64 x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":291.4580078125,"type":"simplify"},{"count":[[16,156]],"inputs":[["#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[-1618592,67414368]],"outputs":[["#s(approx (+ (exp x) -1) (expm1.f64 x))","(neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (+.f64 x x)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x #s(literal 1/2 binary64)) x x))","(+.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) x) x)","(+.f64 x (*.f64 (*.f64 x #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64)) x x) (/.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 (*.f64 x #s(literal 1/4 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) x) (/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) x))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 x (fma.f64 x (-.f64 (*.f64 x #s(literal 1/4 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64)) x x) (fma.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 (*.f64 x x) x)) #s(literal 1/64 binary64) (*.f64 (*.f64 (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))) (fma.f64 (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)) (-.f64 (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)) (*.f64 (*.f64 x #s(literal 1/4 binary64)) x)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/16 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64)) x x) (*.f64 (fma.f64 x (-.f64 (*.f64 x #s(literal 1/4 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))) (+.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64) #s(literal -1 binary64))) (fma.f64 x (fma.f64 #s(literal 1/4 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) x) (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 (*.f64 x #s(literal 1/4 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))) x))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64) #s(literal 1 binary64)) (neg.f64 (fma.f64 x (-.f64 (*.f64 x #s(literal 1/4 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64) #s(literal 1 binary64))) (fma.f64 x (-.f64 (*.f64 x #s(literal 1/4 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(+.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/4 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/4 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 x #s(literal 1/4 binary64)) x) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal -1/2 binary64) #s(literal 1 binary64))) (fma.f64 (*.f64 x #s(literal 1/4 binary64)) x #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(+.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) x)","(+.f64 x (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x)) x x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) x) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) x) (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) x))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x) #s(literal 1 binary64)) (/.f64 x (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x)) x x) (fma.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))))) (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x)) x x) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) x))","(/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 x x) x) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal 1/6 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(+.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 (*.f64 x #s(literal 1/6 binary64)) x #s(literal 1 binary64)))","(+.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 x #s(literal 1/6 binary64)) x))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x #s(literal 1/6 binary64)) x)) (*.f64 x #s(literal 1/2 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 x #s(literal 1/36 binary64)) x #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x #s(literal 1/36 binary64)) x #s(literal -1/4 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (neg.f64 (fma.f64 x (-.f64 (*.f64 x #s(literal 1/36 binary64)) #s(literal 1/12 binary64)) #s(literal 1/4 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (fma.f64 x (-.f64 (*.f64 x #s(literal 1/36 binary64)) #s(literal 1/12 binary64)) #s(literal 1/4 binary64))))","(+.f64 (*.f64 x #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 1/6 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/36 binary64)) x) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/36 binary64)) x) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 1/4 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal -1/6 binary64)))) (/.f64 (*.f64 (*.f64 x #s(literal 1/36 binary64)) x) (+.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal -1/6 binary64)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/36 binary64)) x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x #s(literal 1/36 binary64)) x #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64))) (fma.f64 (*.f64 x #s(literal 1/36 binary64)) x #s(literal -1/4 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x)) x)","(+.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) (/.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) x))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x x) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) x))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)))) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) (-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))","(+.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1 binary64)))","(+.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))) (*.f64 x #s(literal 1/2 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1/4 binary64)) (fma.f64 (neg.f64 x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1/4 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (*.f64 (*.f64 x x) x) #s(literal 1/8 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))","(+.f64 (*.f64 x #s(literal 1/6 binary64)) (fma.f64 (*.f64 x #s(literal 1/24 binary64)) x #s(literal 1/2 binary64)))","(+.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x))","(+.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (*.f64 x #s(literal 1/6 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (/.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 x #s(literal 1/576 binary64)) x #s(literal -1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x #s(literal 1/576 binary64)) x #s(literal -1/36 binary64))) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (neg.f64 (fma.f64 x (-.f64 (*.f64 x #s(literal 1/576 binary64)) #s(literal 1/144 binary64)) #s(literal 1/36 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) x) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (fma.f64 x (-.f64 (*.f64 x #s(literal 1/576 binary64)) #s(literal 1/144 binary64)) #s(literal 1/36 binary64))))","(+.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/576 binary64)) x) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/576 binary64)) x) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(-.f64 (/.f64 #s(literal 1/36 binary64) (+.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal -1/24 binary64)))) (/.f64 (*.f64 (*.f64 x #s(literal 1/576 binary64)) x) (+.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal -1/24 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(*.f64 (fma.f64 (*.f64 x #s(literal 1/576 binary64)) x #s(literal -1/36 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x #s(literal 1/576 binary64)) x #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (*.f64 x #s(literal 1/576 binary64)) x #s(literal -1/36 binary64)))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) (/.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (+.f64 #s(literal 1/36 binary64) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal -1/24 binary64)))))"]],"time":2108.721923828125,"type":"rewrite"},{"compiler":[[5285,878]],"memory":[[4162448,19826640]],"time":24.135009765625,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",58.65699234583096,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",58.84298155784238,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","next",59.14044903721061,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","done",60.40959551131697,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","fresh",0.2586565500390967,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","done",0.6458572034815937,"binary64"],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","next",60.105602051418174,"binary64"],["#s(approx (- (exp x) 1) (expm1.f64 x))","done",0.0,"binary64"],["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","next",0.2508440559216411,"binary64"],["#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","next",0.3451549924910931,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[38,16],[11,9],[16,12],[7,6],[17,12],[14,10],[15,10],[12,8],[8,6],[38,16],[16,12],[17,12],[14,10]],"count":[[199,10]],"kept":[{"done":[0,0],"fresh":[3,3],"new":[191,4],"picked":[5,3]}],"memory":[[-6381664,11204096]],"min-error":[[0.0,"binary64"]],"time":10.8779296875,"type":"prune"},{"egraph":[[0,891,167,0.005591241],[7,891,173,0.004089115],[6,891,173,0.004120863],[5,799,173,0.003583823],[4,481,173,0.003577181],[3,236,173,0.002007588],[2,145,173,0.000938417],[1,82,173,0.000625411],[0,49,173,0.000498668],[0,30,173,0.000376517]],"inputs":[["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(*.f64 x x)","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(*.f64 x x)","x","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)"]],"locations":[["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","cost-diff",0],["#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","cost-diff",0],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","cost-diff",0],["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","cost-diff",0]],"memory":[[3627872,3627872]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(*.f64 x x)","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (+ (exp x) -1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(*.f64 x x)","x","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":37.43408203125,"type":"simplify"},{"compiler":[[123,27]],"locations":[["(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 x x)","accuracy",0.0],["#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","accuracy",0.3451549924910931],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","accuracy",0.3896473899943792],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",58.382248224493026],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","accuracy",0.01171875],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","accuracy",0.6458572410639674],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","accuracy",61.60886955220881],["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","accuracy",0.6879570229809555],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","accuracy",58.382248224493026],["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 x x)","accuracy",0.0],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.01953125],["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","accuracy",0.2508440559216411]],"memory":[[406208,40334304]],"mixsample":[[16.2958984375,"adjust",800],[18.368896484375,"ival-add",0],[3.2841796875,"ival-exp",0],[19.34814453125,"ival-mult",0],[4.939453125,"ival-expm1",0],[0.185546875,"ival-assert",0],[0.015869140625,"ival-add",400],[0.251220703125,"ival-true",0],[13.6826171875,"ival-exp",1600],[12.49267578125,"ival-exp",400],[10.34423828125,"const",0],[0.51220703125,"exact",0],[6.004638671875,"adjust",2000]],"outcomes":[[70.13037109375,1,"valid",146],[68.9150390625,2,"valid",104],[1.573974609375,0,"valid",6]],"time":164.7900390625,"type":"localize"},{"count":[[19,39]],"inputs":[["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(*.f64 x x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[3102944,3102944]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(* 1/2 x)","(pow x 2)","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(exp x)","(* x (+ 1 (/ 1 x)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* x (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))"]],"series":[[1.807861328125,"((+ (exp x) -1) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (* x x)) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (* 1/2 x) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (+ (exp x) -1) (+ (* (* x x) (+ (* 1/6 x) 1/2)) x) (* x x) (+ (* 1/6 x) 1/2))","x","-inf"],[2.10986328125,"((+ (exp x) -1) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (* x x)) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (* 1/2 x) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (+ (exp x) -1) (+ (* (* x x) (+ (* 1/6 x) 1/2)) x) (* x x) (+ (* 1/6 x) 1/2))","x","inf"],[1.10400390625,"((+ (exp x) -1) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (* x x)) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (* 1/2 x) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (+ (exp x) -1) (+ (* (* x x) (+ (* 1/6 x) 1/2)) x) (* x x) (+ (* 1/6 x) 1/2))","x","0"]],"time":5.8740234375,"type":"series"},{"count":[[39,38]],"egraph":[[0,8368,223,0.085298649],[4,5833,263,0.023220168],[3,2221,263,0.019969299],[2,665,271,0.006994718],[1,261,271,0.002029848],[0,77,273,0.000825878]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(* 1/2 x)","(pow x 2)","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(exp x)","(* x (+ 1 (/ 1 x)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* x (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))"]],"memory":[[-2025456,37308064]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(pow x 2)","(*.f64 x x)","(- (exp x) 1)","(expm1.f64 x)","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) x) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(exp x)","(exp.f64 x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":235.538818359375,"type":"simplify"},{"count":[[19,159]],"inputs":[["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(*.f64 x x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[-2831376,16334768]],"outputs":[["#s(approx (exp x) x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","(-.f64 #s(approx (exp x) x) #s(literal 1/24 binary64))","#s(approx (exp x) x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","#s(approx (exp x) (*.f64 #s(approx x x) x))","(*.f64 #s(approx x x) x)","#s(approx x x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","(-.f64 #s(approx (exp x) x) #s(literal 1/24 binary64))","#s(approx (exp x) x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","#s(approx (exp x) x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)","x","(neg.f64 x)","(+.f64 #s(literal 1/24 binary64) x)","(+.f64 x #s(literal 1/24 binary64))","(+.f64 x x)","(-.f64 x #s(literal 1/24 binary64))","(-.f64 x x)","(-.f64 #s(literal 1/24 binary64) x)","(*.f64 x x)","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))","(*.f64 (/.f64 x #s(literal 1/24 binary64)) x)","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(/.f64 #s(literal 1/24 binary64) x)","(/.f64 x x)"]],"time":374.570068359375,"type":"rewrite"},{"compiler":[[830,182]],"memory":[[4794208,4794208]],"time":5.967041015625,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",58.65699234583096,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",58.84298155784238,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","done",59.14044903721061,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","next",0.2586565500390967,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","done",0.6458572034815937,"binary64"],["#s(approx (- (exp x) 1) (expm1.f64 x))","done",0.0,"binary64"],["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","done",0.2508440559216411,"binary64"],["#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","done",0.3451549924910931,"binary64"],["#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","next",61.53597175412155,"binary64"],["#s(approx (+ (exp x) -1) x)","next",1.305685698732227,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[38,16],[11,9],[7,6],[17,12],[14,10],[8,7],[6,5]],"count":[[64,10]],"kept":[{"done":[3,2],"fresh":[2,2],"new":[54,2],"picked":[5,4]}],"memory":[[-3701536,4573392]],"min-error":[[0.0,"binary64"]],"time":5.47509765625,"type":"prune"},{"egraph":[[0,8278,163,0.058903516],[6,6817,171,0.021146638],[5,3821,171,0.01964773],[4,2914,171,0.010593008],[3,605,211,0.008801358],[2,151,211,0.002339546],[1,76,211,0.001143542],[0,43,211,0.001048089],[0,25,211,0.000297272]],"inputs":[["#s(approx (+ (exp x) -1) x)","x","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(+.f64 x #s(literal 1/24 binary64))","x","#s(literal 1/24 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","cost-diff",21],["(+.f64 x #s(literal 1/24 binary64))","cost-diff",0],["#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","cost-diff",0],["#s(approx (+ (exp x) -1) x)","cost-diff",0]],"memory":[[1515632,33267264]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (exp x) -1) x)","x","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","#s(approx (+ (exp x) -1) (+.f64 #s(literal 1/24 binary64) x))","(+.f64 x #s(literal 1/24 binary64))","(+.f64 #s(literal 1/24 binary64) x)","x","#s(literal 1/24 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","#s(approx (+ (exp x) -1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal -1 binary64)","(/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":199.932861328125,"type":"simplify"},{"compiler":[[181,28]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","accuracy",0.2718063394019963],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",58.382248224493026],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","accuracy",0.01171875],["(/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","accuracy",0.015625],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.01953125],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","accuracy",0.2508440559216411],["(+.f64 x #s(literal 1/24 binary64))","accuracy",0.015625],["#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","accuracy",61.53597175412155],["#s(approx (+ (exp x) -1) x)","accuracy",1.305685698732227]],"memory":[[3309584,44720288]],"mixsample":[[16.297607421875,"adjust",800],[3.909912109375,"ival-div",0],[3.446044921875,"ival-exp",0],[0.115234375,"ival-assert",0],[11.121337890625,"ival-exp",400],[12.524169921875,"const",0],[6.06201171875,"adjust",2000],[22.690185546875,"ival-add",0],[0.005859375,"ival-mult",800],[23.351318359375,"ival-mult",0],[0.005859375,"ival-mult",400],[2.247802734375,"ival-expm1",0],[0.021484375,"ival-add",400],[0.2470703125,"ival-true",0],[13.103515625,"ival-exp",1600],[0.615234375,"exact",0],[0.004150390625,"ival-add",800]],"outcomes":[[71.751220703125,1,"valid",146],[72.808837890625,2,"valid",104],[1.22998046875,0,"valid",6]],"time":172.93994140625,"type":"localize"},{"count":[[14,63]],"inputs":[["#s(approx (+ (exp x) -1) x)","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(+.f64 x #s(literal 1/24 binary64))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[2578304,2578304]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1/24","(+ 1/24 x)","-1","(- (* 1/4 (pow x 2)) 1)","(- (* (pow x 2) (+ 1/4 (* 1/6 x))) 1)","(- (* (pow x 2) (+ 1/4 (* x (+ 1/6 (* 5/72 x))))) 1)","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/6","(+ 1/6 (* 1/24 x))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/3 x) 5/12)) 1/2)) 1))","1/2","(+ 1/2 (* 1/6 x))","(- (exp x) 1)","(* x (+ 1 (* 1/24 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/576 (pow x 6))","(* (pow x 6) (+ 1/576 (* 1/72 (/ 1 x))))","(* (pow x 6) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(* (pow x 6) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(/ 24 (pow x 2))","(/ (- 24 (* 96 (/ 1 x))) (pow x 2))","(/ (- (+ 24 (/ 96 (pow x 2))) (* 96 (/ 1 x))) (pow x 2))","(/ (- (+ 24 (+ (* 1344 (/ 1 (pow x 3))) (/ 96 (pow x 2)))) (* 96 (/ 1 x))) (pow x 2))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* (pow x 6) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))","(/ (+ 24 (* -1 (/ (- 96 (* 96 (/ 1 x))) x))) (pow x 2))","(/ (+ 24 (* -1 (/ (+ 96 (* -1 (/ (+ 96 (* 1344 (/ 1 x))) x))) x))) (pow x 2))"]],"series":[[1.6240234375,"((+ (exp x) -1) (+ (exp x) -1) (+ x 1/24) (* (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (/ x (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) -1))) (- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/24 x) 1/6) (/ x (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) -1)) (+ (* 1/6 x) 1/2))","x","-inf"],[1.885986328125,"((+ (exp x) -1) (+ (exp x) -1) (+ x 1/24) (* (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (/ x (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) -1))) (- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/24 x) 1/6) (/ x (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) -1)) (+ (* 1/6 x) 1/2))","x","inf"],[2.166015625,"((+ (exp x) -1) (+ (exp x) -1) (+ x 1/24) (* (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (/ x (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) -1))) (- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/24 x) 1/6) (/ x (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) -1)) (+ (* 1/6 x) 1/2))","x","0"]],"time":6.8681640625,"type":"series"},{"count":[[63,62]],"egraph":[[0,8568,495,0.092067738],[4,7583,544,0.019425691],[3,4221,544,0.030427637],[2,1448,547,0.01700602],[1,550,558,0.005728462],[0,180,562,0.002039968]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1/24","(+ 1/24 x)","-1","(- (* 1/4 (pow x 2)) 1)","(- (* (pow x 2) (+ 1/4 (* 1/6 x))) 1)","(- (* (pow x 2) (+ 1/4 (* x (+ 1/6 (* 5/72 x))))) 1)","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/6","(+ 1/6 (* 1/24 x))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/3 x) 5/12)) 1/2)) 1))","1/2","(+ 1/2 (* 1/6 x))","(- (exp x) 1)","(* x (+ 1 (* 1/24 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/576 (pow x 6))","(* (pow x 6) (+ 1/576 (* 1/72 (/ 1 x))))","(* (pow x 6) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(* (pow x 6) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(/ 24 (pow x 2))","(/ (- 24 (* 96 (/ 1 x))) (pow x 2))","(/ (- (+ 24 (/ 96 (pow x 2))) (* 96 (/ 1 x))) (pow x 2))","(/ (- (+ 24 (+ (* 1344 (/ 1 (pow x 3))) (/ 96 (pow x 2)))) (* 96 (/ 1 x))) (pow x 2))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* (pow x 6) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))","(/ (+ 24 (* -1 (/ (- 96 (* 96 (/ 1 x))) x))) (pow x 2))","(/ (+ 24 (* -1 (/ (+ 96 (* -1 (/ (+ 96 (* 1344 (/ 1 x))) x))) x))) (pow x 2))"]],"memory":[[-6602992,45072864]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","1/24","#s(literal 1/24 binary64)","(+ 1/24 x)","(+.f64 #s(literal 1/24 binary64) x)","-1","#s(literal -1 binary64)","(- (* 1/4 (pow x 2)) 1)","(fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))","(- (* (pow x 2) (+ 1/4 (* 1/6 x))) 1)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/4 binary64)) (*.f64 x x) #s(literal -1 binary64))","(- (* (pow x 2) (+ 1/4 (* x (+ 1/6 (* 5/72 x))))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/72 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (*.f64 x x) #s(literal -1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/6 x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/3 x) 5/12)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -5/12 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(- (exp x) 1)","(expm1.f64 x)","(* x (+ 1 (* 1/24 (/ 1 x))))","(+.f64 #s(literal 1/24 binary64) x)","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) x) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* 1/576 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/576 binary64))","(* (pow x 6) (+ 1/576 (* 1/72 (/ 1 x))))","(*.f64 (+.f64 (/.f64 #s(literal 1/72 binary64) x) #s(literal 1/576 binary64)) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 5/72 binary64) (*.f64 x x)) #s(literal 1/576 binary64)) (/.f64 #s(literal 1/72 binary64) x)) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/576 binary64)) (+.f64 (/.f64 #s(literal 5/72 binary64) (*.f64 x x)) (/.f64 #s(literal 1/72 binary64) x))) (pow.f64 x #s(literal 6 binary64)))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(exp x)","(exp.f64 x)","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(/ 24 (pow x 2))","(/.f64 #s(literal 24 binary64) (*.f64 x x))","(/ (- 24 (* 96 (/ 1 x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 24 binary64) (/.f64 #s(literal 96 binary64) x)) x) x)","(/ (- (+ 24 (/ 96 (pow x 2))) (* 96 (/ 1 x))) (pow x 2))","(/.f64 (-.f64 #s(literal 24 binary64) (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 96 binary64) x)) x)) (*.f64 x x))","(/ (- (+ 24 (+ (* 1344 (/ 1 (pow x 3))) (/ 96 (pow x 2)))) (* 96 (/ 1 x))) (pow x 2))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1344 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 24 binary64)) (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 96 binary64) x)) x)) (*.f64 x x))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(*.f64 (-.f64 #s(literal 1/24 binary64) (/.f64 (-.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 6) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(*.f64 (-.f64 #s(literal 1/576 binary64) (/.f64 (-.f64 #s(literal -1/72 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) x) #s(literal 5/72 binary64)) x)) x)) (pow.f64 x #s(literal 6 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) x)) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 24 (* -1 (/ (- 96 (* 96 (/ 1 x))) x))) (pow x 2))","(/.f64 (-.f64 #s(literal 24 binary64) (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 96 binary64) x)) x)) (*.f64 x x))","(/ (+ 24 (* -1 (/ (+ 96 (* -1 (/ (+ 96 (* 1344 (/ 1 x))) x))) x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 24 binary64) (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1344 binary64) x) #s(literal 96 binary64)) x)) x)) x) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":334.593994140625,"type":"simplify"},{"count":[[14,0]],"inputs":[["#s(approx (+ (exp x) -1) x)","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(+.f64 x #s(literal 1/24 binary64))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[4833488,12991488]],"outputs":[[]],"time":138.27294921875,"type":"rewrite"},{"compiler":[[2675,377]],"memory":[[-988688,6949408]],"time":10.156005859375,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",58.65699234583096,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",58.84298155784238,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","done",59.14044903721061,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","fresh",0.25897043353888527,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","done",0.6458572034815937,"binary64"],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/72 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (*.f64 x x) #s(literal -1 binary64))) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","fresh",0.26257128222457654,"binary64"],["#s(approx (- (exp x) 1) (expm1.f64 x))","done",0.0,"binary64"],["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","done",0.2508440559216411,"binary64"],["#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","done",0.3451549924910931,"binary64"],["#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","done",61.53597175412155,"binary64"],["#s(approx (+ (exp x) -1) x)","done",1.305685698732227,"binary64"]],"compiler":[[290,82],[15,10],[12,8],[8,6],[41,23],[11,9],[56,32],[7,6],[17,12],[14,10],[8,7],[6,5]],"count":[[78,11]],"kept":[{"done":[6,6],"fresh":[0,0],"new":[68,2],"picked":[4,3]}],"memory":[[-1395984,6937152]],"min-error":[[0.0,"binary64"]],"time":9.615966796875,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["x",0.0,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.0,1,"binary64"],["(exp.f64 x)",0.0,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[17,1]],"inputs":[["#s(approx (+ (exp x) -1) x)","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/72 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (*.f64 x x) #s(literal -1 binary64))) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","#s(approx (- (exp x) 1) (expm1.f64 x))","(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[-250304,8430304]],"oracle":[62.06295516922164],"outputs":[["#s(approx (- (exp x) 1) (expm1.f64 x))"]],"repr":["binary64"],"time":14.091064453125,"times":[[4.995849609375,"x"],[4.099853515625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[3.69189453125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.2508440559216411],"baseline":[0.2508440559216411],"branch":[["x",0.2508440559216411,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.2508440559216411,1,"binary64"],["(exp.f64 x)",0.2508440559216411,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[15,1]],"inputs":[["#s(approx (+ (exp x) -1) x)","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x)) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 5/72 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (*.f64 x x) #s(literal -1 binary64))) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))"]],"memory":[[-310000,7803952]],"oracle":[62.06295516922164],"outputs":[["#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))"]],"repr":["binary64"],"time":12.758056640625,"times":[[4.798095703125,"x"],[3.613037109375,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[3.153076171875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.34515499249109305],"baseline":[0.3451549924910931],"branch":[["x",0.34515499249109305,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.34515499249109305,1,"binary64"],["(exp.f64 x)",0.34515499249109305,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[10,1]],"inputs":[["#s(approx (+ (exp x) -1) x)","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[-1731296,6544704]],"oracle":[62.06295516922164],"outputs":[["#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))"]],"repr":["binary64"],"time":10.767822265625,"times":[[3.14892578125,"x"],[3.299072265625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[3.340087890625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.6458572034815937],"baseline":[0.6458572034815937],"branch":[["x",0.6458572034815937,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.6458572034815937,1,"binary64"],["(exp.f64 x)",0.6458572034815937,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[7,1]],"inputs":[["#s(approx (+ (exp x) -1) x)","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[5542256,5542256]],"oracle":[62.06295516922164],"outputs":[["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":9.7080078125,"times":[[3.5859375,"x"],[3.133056640625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[2.06982421875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[1.3056856987322267],"baseline":[1.305685698732227],"branch":[["x",1.3056856987322267,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",1.3056856987322267,1,"binary64"],["(exp.f64 x)",1.3056856987322267,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[5,1]],"inputs":[["#s(approx (+ (exp x) -1) x)","#s(approx (+ (exp x) -1) (+.f64 x #s(literal 1/24 binary64)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))"]],"link":["."],"memory":[[-3306272,4979760]],"name":["expm1 (example 3.7)"],"oracle":[62.06295516922164],"outputs":[["#s(approx (+ (exp x) -1) x)"]],"repr":["binary64"],"time":7.908935546875,"times":[[2.550048828125,"x"],[2.14208984375,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[2.036865234375,"(exp.f64 x)"]],"type":"regimes"},{"egraph":[[11,7446,55,0.020758854],[10,5416,55,0.021226629],[9,1821,55,0.017118211],[8,795,55,0.011430791],[7,270,55,0.003379295],[6,114,55,0.002000199],[5,68,55,0.000791399],[4,47,55,0.000574607],[3,40,55,0.000409802],[2,31,55,0.000452227],[1,28,55,0.000532858],[0,23,55,0.00049048]],"inputs":[["#s(approx (- (exp x) 1) (expm1.f64 x))","#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (+ (exp x) -1) x)"]],"memory":[[2119456,10893792]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp x) 1) (expm1.f64 x))","#s(approx (+ (exp x) -1) (expm1.f64 x))","#s(approx (+ (exp x) -1) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x))","#s(approx (+ (exp x) -1) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (+ (exp x) -1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (+ (exp x) -1) x)"]],"stop":[["node limit",1]],"time":103.340087890625,"type":"simplify"},{"compiler":[[55,22]],"memory":[[1028448,1028448]],"stop":[["fuel",1]],"time":1.64013671875,"type":"soundness"},{"compiler":[[55,22],[55,22],[2,2],[2,2],[4,4],[4,4]],"memory":[[-791120,22825440]],"remove-preprocessing":[[],[],[],[],[],[]],"time":39.44677734375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01513671875,"type":"end"}]