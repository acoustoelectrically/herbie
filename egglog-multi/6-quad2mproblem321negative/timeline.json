[{"memory":[[16416,16416]],"time":0.031005859375,"type":"start"},{"compiler":[[15,12]],"memory":[[-4387504,37355344]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":176.492919921875,"type":"analyze"},{"bogosity":[{"infinite":0.06002353266474191,"invalid":0.24769604460127764,"precondition":0.0014641286106780171,"valid":0.6908162941233024}],"memory":[[20090048,376332016]],"mixsample":[[7.103515625,"ival-sub",1200],[59.080810546875,"adjust",800],[112.92529296875,"ival-div",0],[0.120361328125,"ival-sub",4800],[0.016845703125,"ival-sqrt",6000],[4.678466796875,"ival-mult",1200],[0.026123046875,"ival-div",400],[3.719482421875,"ival-sub",1600],[3.7939453125,"ival-assert",0],[0.047607421875,"ival-sub",3600],[11.738525390625,"ival-sqrt",1200],[129.87353515625,"ival-sub",0],[0.314697265625,"ival-sqrt",4800],[4.34765625,"ival-sub",400],[84.15283203125,"ival-sqrt",0],[0.013916015625,"ival-mult",3600],[5.0009765625,"ival-mult",800],[0.517578125,"ival-sub",4400],[5.100830078125,"ival-sub",800],[0.57470703125,"ival-mult",1600],[2.5078125,"adjust",2800],[0.0146484375,"ival-div",2000],[0.096923828125,"ival-sqrt",3600],[0.232666015625,"ival-sub",4000],[7.744873046875,"ival-sqrt",400],[4.7822265625,"ival-sqrt",2000],[12.495849609375,"ival-sqrt",800],[2.52783203125,"ival-sub",2000],[0.064453125,"ival-mult",2000],[0.864990234375,"ival-sqrt",4000],[0.004150390625,"ival-sub",6400],[1.268310546875,"ival-sqrt",4400],[23.28955078125,"adjust",2000],[4.243408203125,"ival-sub",2400],[0.005126953125,"ival-sub",6000],[141.341064453125,"ival-mult",0],[4.965087890625,"ival-sqrt",1600],[6.169189453125,"ival-mult",400],[0.015869140625,"ival-sqrt",6400],[0.009033203125,"ival-div",800],[7.77099609375,"ival-true",0],[6.563720703125,"ival-sqrt",2400],[57.343017578125,"ival-neg",0]],"outcomes":[[200.264892578125,1,"valid",1314],[88.201171875,0,"invalid",1067],[254.357421875,2,"valid",1235],[56.890380859375,3,"valid",181],[431.09716796875,0,"valid",5526]],"time":1401.31005859375,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[124,0,21,111]],"explanations":[["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",3,0,[["(*.f64 b_2 b_2)","underflow",51],["(*.f64 a c)","underflow",36],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[1,2]]],["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",3,0,[["(*.f64 b_2 b_2)","overflow",83],["(*.f64 a c)","overflow",22]],[[1,2,1]]],["/.f64","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",15,0,[["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",31],["(*.f64 b_2 b_2)","underflow",51],["(*.f64 a c)","underflow",36],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[]]],["-.f64","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",59,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",95,0,[["(*.f64 b_2 b_2)","overflow",83],["(*.f64 a c)","overflow",22],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",95]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",3,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",98,0,false,0,false],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",15,0,false,0,false],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",59,0,false,0,false],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,1],[2,28],[1,116],[0,111]],"maybe-confusion":[[124,0,0,21,0,111]],"memory":[[-4105776,66600480]],"mixsample":[[0.490478515625,"ival-sub",1200],[0.030517578125,"ival-sub",4800],[0.169921875,"ival-sqrt",2000],[7.3076171875,"ival-div",0],[3.640380859375,"adjust",800],[0.3525390625,"ival-mult",1200],[0.15478515625,"ival-sub",1600],[0.013916015625,"ival-mult",2000],[0.09765625,"ival-sub",2000],[0.39306640625,"ival-sqrt",800],[0.194580078125,"ival-assert",0],[0.099853515625,"ival-sqrt",4800],[6.457275390625,"ival-sub",0],[0.8134765625,"ival-sqrt",1200],[0.2763671875,"ival-sub",400],[4.033203125,"ival-sqrt",0],[0.10498046875,"ival-sqrt",4400],[1.546875,"adjust",2000],[0.314453125,"ival-sub",2400],[0.229248046875,"ival-mult",800],[0.038818359375,"ival-sub",4400],[0.32470703125,"ival-mult",400],[0.242919921875,"ival-sqrt",1600],[0.22802734375,"ival-sub",800],[7.18408203125,"ival-mult",0],[0.014892578125,"ival-mult",1600],[0.5126953125,"ival-true",0],[0.23486328125,"adjust",2800],[0.59326171875,"ival-sqrt",2400],[0.52734375,"ival-sqrt",400],[2.475341796875,"ival-neg",0]],"outcomes":[[12.420654296875,1,"valid",72],[17.76123046875,2,"valid",84],[5.09130859375,3,"valid",18],[27.6083984375,0,"valid",338]],"time":143.723876953125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"egraph":[[0,866,13,0.003325748],[10,866,13,0.004846334],[9,865,13,0.00505845],[8,848,13,0.006267705],[7,743,13,0.005841228],[6,620,13,0.005915203],[5,356,13,0.003784783],[4,200,13,0.001999892],[3,121,13,0.001081393],[2,59,13,0.000493995],[1,32,13,0.000298035],[0,17,13,0.000251717],[0,10,13,0.000130246]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[2030752,18083616]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":227.34814453125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.0888671875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",29.565797997504585,"binary64"]],"compiler":[[13,10]],"memory":[[339168,339168]],"time":0.64501953125,"type":"prune"},{"egraph":[[0,866,50,0.003359109],[10,866,50,0.005591882],[9,865,50,0.007260743],[8,848,50,0.006365133],[7,743,50,0.006321254],[6,620,50,0.006397777],[5,356,50,0.003804044],[4,200,50,0.002172798],[3,121,50,0.00082225],[2,59,50,0.000621242],[1,32,50,0.000268793],[0,17,50,0.000257479],[0,10,50,0.000122071]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0]],"memory":[[-5631888,2215584]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","(*.f64 c a)","a","c"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":58.785888671875,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.6015625000000001],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",3.544008574482716],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",13.587894536629221],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",22.859055823038513]],"memory":[[4103296,13543552]],"mixsample":[[0.224853515625,"ival-sub",1200],[0.02197265625,"ival-sub",4800],[0.131103515625,"ival-sqrt",2000],[3.436279296875,"ival-div",0],[1.990478515625,"adjust",800],[0.192626953125,"ival-mult",1200],[0.081298828125,"ival-sub",1600],[0.0068359375,"ival-mult",2000],[0.085205078125,"ival-sub",2000],[0.24658203125,"ival-sqrt",800],[0.11572265625,"ival-assert",0],[0.06201171875,"ival-sqrt",4800],[3.920166015625,"ival-sub",0],[0.663818359375,"ival-sqrt",1200],[0.169189453125,"ival-sub",400],[8.285888671875,"ival-sqrt",0],[0.050048828125,"ival-sqrt",4400],[1.029296875,"adjust",2000],[0.181640625,"ival-sub",2400],[0.160400390625,"ival-mult",800],[0.02099609375,"ival-sub",4400],[0.27587890625,"ival-mult",400],[0.144775390625,"ival-sqrt",1600],[0.15283203125,"ival-sub",800],[4.12158203125,"ival-mult",0],[0.005859375,"ival-mult",1600],[0.2392578125,"ival-true",0],[0.1689453125,"adjust",2800],[0.353759765625,"ival-sqrt",2400],[0.625732421875,"ival-sqrt",400],[1.48193359375,"ival-neg",0]],"outcomes":[[6.4990234375,1,"valid",36],[10.078369140625,2,"valid",42],[3.513916015625,3,"valid",9],[23.720703125,0,"valid",169]],"time":55.18603515625,"type":"localize"},{"count":[[5,97]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-246528,7790768]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[3.175048828125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[2.072998046875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[1.694091796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[3.89599609375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.68701171875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[3.501220703125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[2.939208984375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[3.958984375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[1.501953125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":27.43701171875,"type":"series"},{"count":[[97,96]],"egraph":[[0,8218,2554,0.09886078],[2,5611,2679,0.028226541],[1,1657,2699,0.017786423],[0,528,2732,0.005123596]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[5865776,49215520]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) a)) (neg.f64 a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/2 binary64) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) b_2) b_2)","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)) c) #s(literal 1/2 binary64)))) (neg.f64 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 c (/.f64 (/.f64 c b_2) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) a) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (neg.f64 b_2) a)) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 c)) (/.f64 b_2 a)) c)) c)","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) c)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":261.320068359375,"type":"simplify"},{"count":[[5,75]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-45200,19818928]],"outputs":[["(neg.f64 (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))","(+.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 b_2 a))","(+.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a))","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) #s(literal 16 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))","(-.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a a)) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a a)) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))","(-.f64 (/.f64 (*.f64 b_2 a) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (*.f64 a a)))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (-.f64 b_2 #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(+.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(-.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(-.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","b_2","(neg.f64 b_2)","(+.f64 b_2 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 16 binary64) b_2)","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 16 binary64) b_2))","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 b_2 (*.f64 (*.f64 b_2 b_2) b_2))","(neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 b_2 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(+.f64 b_2 (*.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) c)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(-.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(-.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 c c) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (/.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(+.f64 (*.f64 a c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 a c))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 16 binary64) (*.f64 a c)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(+.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 c c) (*.f64 c c)))))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (neg.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))))","(+.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) (*.f64 (*.f64 a a) (*.f64 c c))))"]],"time":411.947998046875,"type":"rewrite"},{"compiler":[[5558,869]],"memory":[[-262800,15382976]],"time":21.947998046875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.565797997504585,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",41.994083476623416,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","fresh",42.86183320115305,"binary64"],["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","next",57.104625637167324,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","fresh",63.176719739519434,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","next",42.82443249334497,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",45.81694067135902,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","next",42.801634413457755,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","fresh",42.44084600313282,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","next",42.806088904902516,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","next",40.56965892945993,"binary64"]],"compiler":[[13,10],[18,13],[22,15],[12,8],[12,8],[24,17],[21,15],[24,17],[31,21],[19,14],[19,14],[18,13],[22,15],[12,8],[12,8],[24,17],[21,15],[24,17],[31,21],[19,14],[19,14]],"count":[[169,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[168,10],"picked":[1,1]}],"memory":[[-24074720,10729808]],"min-error":[[4.342558224470833,"binary64"]],"time":56.22998046875,"type":"prune"},{"egraph":[[0,8149,213,0.05063346],[7,7036,213,0.019347057],[6,4372,213,0.024447193],[5,1844,213,0.018226103],[4,742,213,0.008751094],[3,362,217,0.002871992],[2,182,217,0.001468569],[1,96,221,0.000729021],[0,50,221,0.00049411],[0,32,221,0.000278715]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","b_2","a","#s(literal -2 binary64)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","b_2","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(literal 1/2 binary64) b_2)","#s(literal 1/2 binary64)","b_2","c","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","a","#s(literal -2 binary64)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)","a","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)"]],"locations":[["(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","cost-diff",0],["#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)))","cost-diff",0],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","cost-diff",0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) b_2)","cost-diff",0],["(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","cost-diff",0],["(*.f64 a a)","cost-diff",0],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","cost-diff",0],["(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","cost-diff",2],["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","cost-diff",4],["(/.f64 b_2 a)","cost-diff",0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","cost-diff",0],["(/.f64 c b_2)","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","cost-diff",0]],"memory":[[-975824,24867136]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","b_2","a","#s(literal -2 binary64)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(*.f64 (neg.f64 c) (*.f64 c a))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 (neg.f64 c) (*.f64 (*.f64 a a) c))","b_2","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(fma.f64 (*.f64 c c) (*.f64 a a) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 #s(literal 1/2 binary64) b_2)","#s(literal 1/2 binary64)","b_2","c","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","a","#s(literal -2 binary64)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) a (*.f64 #s(literal -2 binary64) b_2))) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)))","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) a (*.f64 #s(literal -2 binary64) b_2)))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) a (*.f64 #s(literal -2 binary64) b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)","a","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":219.8291015625,"type":"simplify"},{"compiler":[[183,32]],"locations":[["(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","accuracy",0.0078125],["(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","accuracy",1.455471224286103],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","accuracy",3.544008574482716],["#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)))","accuracy",42.79002313965304],["(/.f64 #s(literal 1/2 binary64) b_2)","accuracy",0.0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","accuracy",0.0078125],["(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","accuracy",0.109375],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","accuracy",42.789915663457755],["(*.f64 a a)","accuracy",0.0],["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","accuracy",7.796460032702001],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","accuracy",12.502243728381623],["(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","accuracy",17.023160533813012],["(/.f64 b_2 a)","accuracy",0.0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","accuracy",0.0078125],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","accuracy",42.806088904902516],["(/.f64 c b_2)","accuracy",0.0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","accuracy",0.0078125],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","accuracy",40.56575267945993]],"memory":[[2726128,42571008]],"mixsample":[[0.2548828125,"ival-sub",1200],[0.013916015625,"ival-sub",4800],[14.8828125,"ival-div",0],[8.037841796875,"adjust",800],[0.012939453125,"ival-add",4800],[0.322265625,"ival-mult",1200],[0.079833984375,"ival-sub",1600],[0.168701171875,"ival-assert",0],[0.0400390625,"ival-sqrt",4800],[6.691650390625,"ival-sub",0],[0.509521484375,"ival-sqrt",1200],[0.1865234375,"ival-sub",400],[2.44873046875,"ival-sqrt",0],[0.40478515625,"ival-mult",800],[4.55517578125,"ival-add",0],[0.033935546875,"ival-sub",4400],[0.137939453125,"ival-sub",800],[0.052978515625,"ival-mult",1600],[0.31103515625,"ival-add",400],[0.796142578125,"adjust",2800],[0.124755859375,"ival-add",2400],[0.275634765625,"ival-sqrt",400],[0.2509765625,"ival-add",1200],[0.135986328125,"ival-sqrt",2000],[0.024658203125,"ival-mult",2000],[0.231689453125,"ival-sqrt",800],[0.0732421875,"ival-sub",2000],[0.066162109375,"ival-sqrt",4400],[0.01123046875,"ival-add",4000],[0.04345703125,"ival-add",3600],[5.010986328125,"adjust",2000],[0.174560546875,"ival-sub",2400],[0.262451171875,"ival-add",1600],[0.820556640625,"ival-mult",400],[20.598388671875,"ival-mult",0],[0.656005859375,"ival-sqrt",1600],[0.082763671875,"ival-add",2000],[0.247802734375,"ival-true",0],[0.36962890625,"ival-sqrt",2400],[0.458984375,"exact",0],[0.15625,"ival-add",800],[0.032958984375,"ival-add",4400],[1.43603515625,"ival-neg",0]],"outcomes":[[22.44384765625,1,"valid",51],[51.883056640625,2,"valid",95],[14.252685546875,3,"valid",20],[22.160888671875,0,"valid",90]],"time":137.68798828125,"type":"localize"},{"count":[[17,86]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(literal 1/2 binary64) b_2)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))"]],"memory":[[7873264,15517600]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/ b_2 a)","(* -1 (* a (pow c 2)))","(* -1 (* (pow a 2) (pow c 2)))","b_2","(+ b_2 (* (pow a 2) (pow c 2)))","(pow a 2)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(+ (* -2 b_2) (* 1/2 (/ (* a c) b_2)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* 1/2 (/ (* a c) b_2))","(* a (+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (* a c)) (sqrt -1))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (* 2 (/ b_2 a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ c b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ 1/2 b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(/ (+ (* -2 (pow b_2 2)) (* 1/2 (* a c))) b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* -2 (/ b_2 c)) (* 1/2 (/ a b_2))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (* 2 (/ b_2 c)))))"]],"series":[[4.033935546875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","c","-inf"],[4.244140625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","c","inf"],[3.225830078125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","c","0"],[3.7060546875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","b_2","-inf"],[5.343994140625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","b_2","inf"],[3.572021484375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","b_2","0"],[4.512939453125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","a","-inf"],[2.787841796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","a","inf"],[2.6630859375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (* (/ c b_2) 1/2))","a","0"]],"time":36.475830078125,"type":"series"},{"count":[[86,85]],"egraph":[[0,8167,1751,0.093218828],[2,4312,1843,0.027034897],[1,1341,1882,0.013584534],[0,444,1904,0.004273031]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/ b_2 a)","(* -1 (* a (pow c 2)))","(* -1 (* (pow a 2) (pow c 2)))","b_2","(+ b_2 (* (pow a 2) (pow c 2)))","(pow a 2)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(+ (* -2 b_2) (* 1/2 (/ (* a c) b_2)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* 1/2 (/ (* a c) b_2))","(* a (+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (* a c)) (sqrt -1))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/2 (/ c b_2)) (* 2 (/ b_2 a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ c b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ 1/2 b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(/ (+ (* -2 (pow b_2 2)) (* 1/2 (* a c))) b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* -2 (/ b_2 c)) (* 1/2 (/ a b_2))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/2 (/ a b_2)) (* 2 (/ b_2 c)))))"]],"memory":[[-2750304,47325520]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) c (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ b_2 a)","(/.f64 b_2 a)","(* -1 (* a (pow c 2)))","(*.f64 (*.f64 (neg.f64 c) c) a)","(* -1 (* (pow a 2) (pow c 2)))","(*.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c)","b_2","(+ b_2 (* (pow a 2) (pow c 2)))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(pow a 2)","(*.f64 a a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) c (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(+ (* -2 b_2) (* 1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) c (*.f64 #s(literal -2 binary64) b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))))","(* (pow a 2) (pow c 2))","(*.f64 (*.f64 (*.f64 c c) a) a)","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(*.f64 (*.f64 (fma.f64 c c (/.f64 (/.f64 b_2 a) a)) a) a)","(* 1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))) a)","(* 1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) c)","(* a (+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2))))","(*.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a)) (neg.f64 a)))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (+ (* -1/2 (/ c b_2)) (* 2 (/ b_2 a)))))","(*.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/ c b_2)","(/.f64 c b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (*.f64 b_2 (/.f64 b_2 a)) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ 1/2 b_2)","(/.f64 #s(literal 1/2 binary64) b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) b_2))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2) b_2 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) b_2)))","(/ (+ (* -2 (pow b_2 2)) (* 1/2 (* a c))) b_2)","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) b_2 b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) (/.f64 c b_2) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) (/.f64 c b_2) #s(literal -2 binary64))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) (/.f64 c b_2) #s(literal -2 binary64)))) b_2)","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/8 binary64)) (*.f64 c (/.f64 c b_2)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/8 binary64)) (*.f64 c (/.f64 c b_2)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/8 binary64)) (*.f64 c (/.f64 c b_2)) (*.f64 (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)) c) #s(literal 1/2 binary64)))) (neg.f64 b_2))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(*.f64 (neg.f64 b_2) (-.f64 #s(literal -1 binary64) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) b_2) #s(literal 1/8 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a))) b_2)","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) b_2) #s(literal 1/8 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) b_2) #s(literal 1/8 binary64)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64)) (/.f64 c b_2) #s(literal -2 binary64)) b_2)","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))))) c)","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(*.f64 (*.f64 (fma.f64 a a (/.f64 b_2 (*.f64 c c))) c) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))))) c)","(* c (+ (* -2 (/ b_2 c)) (* 1/2 (/ a b_2))))","(*.f64 (fma.f64 (/.f64 b_2 c) #s(literal -2 binary64) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (neg.f64 b_2) a)) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2))))) (neg.f64 c)) (/.f64 b_2 a)) c)) c)","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 #s(literal 2 binary64) c) (/.f64 b_2 a) (/.f64 #s(literal -1/2 binary64) b_2)))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 c)))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))) (*.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))) c)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (+ (* -1/2 (/ a b_2)) (* 2 (/ b_2 c)))))","(*.f64 (fma.f64 (/.f64 b_2 c) #s(literal -2 binary64) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":296.169189453125,"type":"simplify"},{"count":[[17,185]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(literal 1/2 binary64) b_2)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))"]],"memory":[[1993824,17935136]],"outputs":[["#s(approx c c)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)","#s(approx c #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal -2 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(literal -1/4 binary64)","#s(literal 18 binary64)","#s(literal -512 binary64)","#s(literal -1/2 binary64)","#s(literal -2 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(literal -1/4 binary64)","#s(literal 18 binary64)","#s(literal -512 binary64)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)","#s(literal -1/2 binary64)","#s(literal -2 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(literal -1/4 binary64)","#s(literal 18 binary64)","#s(literal -512 binary64)","#s(approx c c)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)","#s(literal -1/2 binary64)","#s(literal -2 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 3/2 binary64)","#s(literal -1/4 binary64)","#s(literal 18 binary64)","#s(literal -512 binary64)","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx c c)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)","c","(neg.f64 c)","(+.f64 c #s(literal -1/2 binary64))","(+.f64 c c)","(+.f64 #s(literal -1/2 binary64) c)","(-.f64 c #s(literal -1/2 binary64))","(-.f64 c c)","(-.f64 #s(literal -1/2 binary64) c)","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c c)","(*.f64 c #s(literal -1/2 binary64))","(/.f64 c #s(literal -1/2 binary64))","(/.f64 #s(literal -1/2 binary64) c)","(/.f64 c c)","(/.f64 (sqrt.f64 #s(literal -1/2 binary64)) c)"]],"time":270.514892578125,"type":"rewrite"},{"compiler":[[3905,589]],"memory":[[-4347200,12157168]],"time":17.945068359375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.565797997504585,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","next",41.994083476623416,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","done",42.82443249334497,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","fresh",45.81694067135902,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) #s(approx (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) b_2))) a)","fresh",47.70826734793194,"binary64"],["(/.f64 #s(approx c c) #s(literal -1/2 binary64))","fresh",62.32011069803064,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","done",42.801634413457755,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","fresh",42.44084600313282,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","fresh",62.6039563516732,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","fresh",55.579401559668156,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","fresh",62.23417890391566,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","fresh",60.54677497263011,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",42.806088904902516,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","fresh",57.68897947556371,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","next",62.31776990935941,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","done",40.56965892945993,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","fresh",62.31895323579272,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","fresh",46.591539833145376,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","next",55.872095062110496,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","next",60.5417475884677,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","fresh",61.71525573488621,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","fresh",61.71374855067981,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","fresh",61.47568685183855,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","fresh",61.44549735963702,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","next",61.4874866001843,"binary64"],["#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","fresh",54.624058085120076,"binary64"]],"compiler":[[13,10],[18,13],[24,17],[21,15],[38,26],[5,6],[24,17],[31,21],[17,13],[17,12],[17,13],[17,12],[19,14],[17,12],[17,13],[19,14],[16,12],[38,26],[31,22],[15,11],[15,12],[15,12],[15,12],[15,12],[15,12],[20,13],[18,13],[21,15],[38,26],[5,6],[31,21],[17,13],[17,12],[17,13],[17,12],[17,12],[17,13],[16,12],[38,26],[31,22],[15,11],[15,12],[15,12],[15,12],[15,12],[15,12],[20,13]],"count":[[144,26]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[133,18],"picked":[5,4]}],"memory":[[6657808,14961232]],"min-error":[[4.169968261128903,"binary64"]],"time":19.196044921875,"type":"prune"},{"egraph":[[0,2468,181,0.007600429],[15,2468,183,0.015470303],[14,2170,183,0.016080288],[13,2130,183,0.01430344],[12,2118,183,0.013035317],[11,2104,183,0.012122378],[10,2091,183,0.012440091],[9,2049,183,0.013840715],[8,1832,183,0.014480717],[7,1442,183,0.014026364],[6,1041,183,0.01071128],[5,589,183,0.006661414],[4,345,183,0.003039237],[3,218,183,0.001517534],[2,116,183,0.000936661],[1,74,183,0.000517382],[0,43,183,0.000420059],[0,34,183,0.000242509]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(literal -512 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","(*.f64 c #s(literal -1/2 binary64))","c","#s(literal -1/2 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)"]],"locations":[["(/.f64 c b_2)","cost-diff",0],["(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","cost-diff",0],["(*.f64 c #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","cost-diff",0]],"memory":[[-3506496,4837072]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) (neg.f64 a))","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(literal -512 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 c #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) c)","c","#s(literal -1/2 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":176.975830078125,"type":"simplify"},{"compiler":[[133,26]],"locations":[["(/.f64 c b_2)","accuracy",0.0],["(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","accuracy",0.0078125],["#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","accuracy",41.661958296297655],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","accuracy",42.789915663457755],["(*.f64 c #s(literal -1/2 binary64))","accuracy",0.0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","accuracy",62.31776990935941],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","accuracy",60.5417475884677],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","accuracy",61.4874866001843],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","accuracy",3.544008574482716],["(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","accuracy",13.587894536629221],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","accuracy",22.859055823038513],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))","accuracy",40.402695027626]],"memory":[[1517712,26373712]],"mixsample":[[0.2353515625,"ival-sub",1200],[9.105224609375,"ival-div",0],[2.874267578125,"adjust",800],[0.128173828125,"ival-sub",4800],[0.179443359375,"ival-mult",1200],[0.070556640625,"ival-sub",1600],[0.083740234375,"ival-assert",0],[0.427978515625,"ival-sqrt",1200],[3.347900390625,"ival-sub",0],[0.041015625,"ival-sqrt",4800],[1.971435546875,"ival-sqrt",0],[0.142333984375,"ival-sub",400],[0.02294921875,"ival-sub",4400],[1.69287109375,"ival-add",0],[0.158203125,"ival-mult",800],[0.138427734375,"ival-sub",800],[0.008056640625,"ival-mult",1600],[0.259033203125,"adjust",2800],[0.245849609375,"ival-sqrt",400],[0.10009765625,"ival-sqrt",2000],[0.247802734375,"ival-sqrt",800],[0.055908203125,"ival-sub",2000],[0.0068359375,"ival-mult",2000],[0.05078125,"ival-sqrt",4400],[1.367919921875,"adjust",2000],[0.16455078125,"ival-sub",2400],[12.6123046875,"ival-mult",0],[0.122802734375,"ival-sqrt",1600],[0.1669921875,"ival-mult",400],[0.33154296875,"ival-sqrt",2400],[0.197265625,"ival-true",0],[0.502685546875,"exact",0],[2.498046875,"ival-neg",0]],"outcomes":[[12.14306640625,1,"valid",36],[16.766357421875,2,"valid",42],[4.218994140625,3,"valid",9],[33.0068359375,0,"valid",169]],"time":88.283203125,"type":"localize"},{"count":[[13,104]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","(*.f64 c #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(/.f64 c b_2)","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))"]],"memory":[[-36960,7735696]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* -1/2 c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[1.73095703125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","c","-inf"],[1.7421875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","c","inf"],[1.10595703125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","c","0"],[1.60009765625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.72509765625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","b_2","inf"],[1.193115234375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","b_2","0"],[1.0419921875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","a","-inf"],[0.99609375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","a","inf"],[0.98583984375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (- (* b_2 b_2) (* a c)))","a","0"]],"time":15.44482421875,"type":"series"},{"count":[[104,103]],"egraph":[[0,8478,2615,0.100583163],[2,5804,2744,0.026158089],[1,1707,2764,0.017514136],[0,543,2797,0.005131757]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* -1/2 c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[-1613744,50276304]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* 1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) a)) (neg.f64 a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (*.f64 b_2 (/.f64 b_2 a)) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ c b_2)","(/.f64 c b_2)","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/2 binary64) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) b_2) b_2)","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)) c) #s(literal 1/2 binary64)))) (neg.f64 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 c (/.f64 (/.f64 c b_2) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) a) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* -1/2 c)","(*.f64 #s(literal -1/2 binary64) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (neg.f64 b_2) a)) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 c)) (/.f64 b_2 a)) c)) c)","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) c)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) c) (/.f64 b_2 a) (/.f64 #s(literal -1/2 binary64) b_2)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":297.254150390625,"type":"simplify"},{"count":[[13,0]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","(*.f64 c #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(/.f64 c b_2)","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))"]],"memory":[[-1707776,14201840]],"outputs":[[]],"time":135.90478515625,"type":"rewrite"},{"compiler":[[4088,633]],"memory":[[1425776,9029456]],"time":13.212158203125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.565797997504585,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",41.994083476623416,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","done",42.82443249334497,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","next",45.81694067135902,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) #s(approx (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) b_2))) a)","fresh",47.70826734793194,"binary64"],["(/.f64 #s(approx c c) #s(literal -1/2 binary64))","fresh",62.32011069803064,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","done",42.801634413457755,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","next",42.44084600313282,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","fresh",62.6039563516732,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","fresh",55.579401559668156,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","fresh",62.23417890391566,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","fresh",60.54677497263011,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",42.806088904902516,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","next",57.68897947556371,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","done",62.31776990935941,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","done",40.56965892945993,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","next",62.31895323579272,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","fresh",46.591539833145376,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","done",55.872095062110496,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","done",60.5417475884677,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","fresh",61.71525573488621,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","fresh",61.71374855067981,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","fresh",61.47568685183855,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","next",61.44549735963702,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","done",61.4874866001843,"binary64"],["#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","fresh",54.624058085120076,"binary64"]],"compiler":[[13,10],[18,13],[24,17],[21,15],[38,26],[5,6],[24,17],[31,21],[17,13],[17,12],[17,13],[17,12],[19,14],[17,12],[17,13],[19,14],[16,12],[38,26],[31,22],[15,11],[15,12],[15,12],[15,12],[15,12],[15,12],[20,13],[21,15],[38,26],[5,6],[31,21],[17,13],[17,12],[17,13],[17,12],[17,12],[16,12],[38,26],[15,12],[15,12],[15,12],[15,12],[20,13]],"count":[[126,26]],"kept":[{"done":[5,5],"fresh":[16,16],"new":[100,0],"picked":[5,5]}],"memory":[[2500096,12123632]],"min-error":[[4.169968261128903,"binary64"]],"time":17.222900390625,"type":"prune"},{"egraph":[[0,8161,197,0.191500766],[19,7765,200,0.022920993],[18,6859,200,0.046058846],[17,6859,200,0.031164843],[16,6855,200,0.029506039],[15,6853,200,0.029280277],[14,6849,200,0.02999673],[13,6812,200,0.032965521],[12,6628,200,0.038523303],[11,6313,200,0.024988454],[10,6286,200,0.016618821],[9,6197,200,0.016864996],[8,6040,200,0.016608416],[7,5326,200,0.018503044],[6,3635,200,0.024444549],[5,1606,200,0.01475323],[4,638,200,0.006134173],[3,330,202,0.002380465],[2,158,205,0.001357],[1,81,205,0.00077376],[0,45,205,0.000515673],[0,31,205,0.000301064]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))","(/.f64 #s(literal 1/8 binary64) b_2)","#s(literal 1/8 binary64)","b_2","(/.f64 (*.f64 (*.f64 c c) a) b_2)","(*.f64 (*.f64 c c) a)","(*.f64 c c)","c","a","(*.f64 #s(literal 1/2 binary64) c)","#s(literal 1/2 binary64)","(neg.f64 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","(*.f64 c c)","c","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(/.f64 a b_2)","a","b_2","#s(literal -1/2 binary64)","c"]],"locations":[["(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","cost-diff",0],["(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","cost-diff",0],["#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","cost-diff",0],["(*.f64 c c)","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","cost-diff",0],["(neg.f64 c)","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","cost-diff",0],["(/.f64 #s(literal 1/8 binary64) b_2)","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","cost-diff",0],["(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","cost-diff",1],["(fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))","cost-diff",2]],"memory":[[7060224,67285040]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) c) (/.f64 (/.f64 a b_2) b_2) #s(literal -1/2 binary64)) b_2) c))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) c) (/.f64 (/.f64 a b_2) b_2) #s(literal -1/2 binary64)) b_2) c)","(fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))","(*.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1/8 binary64) b_2) b_2) (*.f64 c a) #s(literal 1/2 binary64)) c)","(/.f64 #s(literal 1/8 binary64) b_2)","#s(literal 1/8 binary64)","b_2","(/.f64 (*.f64 (*.f64 c c) a) b_2)","(*.f64 (*.f64 c c) a)","(*.f64 c c)","c","a","(*.f64 #s(literal 1/2 binary64) c)","#s(literal 1/2 binary64)","(neg.f64 b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","(*.f64 c c)","c","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) a) c)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) a) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) a) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) a)","(/.f64 a b_2)","a","b_2","#s(literal -1/2 binary64)","c"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":760.7880859375,"type":"simplify"},{"compiler":[[166,27]],"locations":[["(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","accuracy",0.0],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","accuracy",3.544008574482716],["(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","accuracy",6.650477429992307],["#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","accuracy",40.51010158533646],["(*.f64 c c)","accuracy",0.0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","accuracy",57.68897947556371],["(neg.f64 c)","accuracy",0.0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","accuracy",62.31895323579272],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","accuracy",61.44549735963702],["(fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))","accuracy",2.844867307269848],["(/.f64 (*.f64 (*.f64 c c) a) b_2)","accuracy",4.670746425622674],["(*.f64 (*.f64 c c) a)","accuracy",8.864038108469774],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","accuracy",40.61250680804949]],"memory":[[-12636816,29039360]],"mixsample":[[0.24462890625,"ival-sub",1200],[9.785888671875,"ival-div",0],[2.6513671875,"adjust",800],[0.0126953125,"ival-sub",4800],[0.1982421875,"ival-mult",1200],[0.071533203125,"ival-sub",1600],[0.099609375,"ival-assert",0],[0.4580078125,"ival-sqrt",1200],[3.18603515625,"ival-sub",0],[0.037353515625,"ival-sqrt",4800],[1.853271484375,"ival-sqrt",0],[0.135986328125,"ival-sub",400],[0.02001953125,"ival-sub",4400],[1.245361328125,"ival-add",0],[0.123291015625,"ival-mult",800],[0.120361328125,"ival-sub",800],[0.007080078125,"ival-mult",1600],[0.19775390625,"adjust",2800],[0.22607421875,"ival-sqrt",400],[0.08642578125,"ival-sqrt",2000],[0.20263671875,"ival-sqrt",800],[0.044189453125,"ival-sub",2000],[0.007080078125,"ival-mult",2000],[0.05078125,"ival-sqrt",4400],[1.181396484375,"adjust",2000],[0.146484375,"ival-sub",2400],[12.240234375,"ival-mult",0],[0.11767578125,"ival-sqrt",1600],[0.14208984375,"ival-mult",400],[0.279296875,"ival-sqrt",2400],[0.19873046875,"ival-true",0],[0.390869140625,"exact",0],[2.291259765625,"ival-neg",0]],"outcomes":[[10.077880859375,1,"valid",36],[15.655029296875,2,"valid",42],[4.1142578125,3,"valid",9],[30.886474609375,0,"valid",169]],"time":181.35009765625,"type":"localize"},{"count":[[15,82]],"inputs":[["(fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","(/.f64 #s(literal 1/8 binary64) b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","(*.f64 c c)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(*.f64 (*.f64 c c) a)","(/.f64 (*.f64 (*.f64 c c) a) b_2)"]],"memory":[[7025984,14822688]],"outputs":[["(* 1/2 c)","(+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* -1/2 (/ (* a c) b_2))","(* -1/2 (/ a b_2))","(* a (pow c 2))","(/ (* a (pow c 2)) b_2)","(* 1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* -1 (* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (* a c)) (sqrt -1))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(/ (+ (* 1/8 (* a (pow c 2))) (* 1/2 (* (pow b_2 2) c))) (pow b_2 2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(/ 1/8 b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* c (+ 1/2 (* 1/8 (/ (* a c) (pow b_2 2)))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(* -1 c)","(pow c 2)","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(* (pow c 2) (+ (* 1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"series":[[2.792236328125,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","c","-inf"],[3.074951171875,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","c","inf"],[2.451171875,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","c","0"],[2.885986328125,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","b_2","-inf"],[9.39794921875,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","b_2","inf"],[3.39990234375,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","b_2","0"],[3.72998046875,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","a","-inf"],[3.469970703125,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","a","inf"],[3.138916015625,"((+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (/ (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (neg b_2)) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ 1/8 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (* (* c c) a) (/ (* (* c c) a) b_2))","a","0"]],"time":36.66796875,"type":"series"},{"count":[[82,82]],"egraph":[[0,8145,1757,0.09604074],[2,4188,1847,0.027634646],[1,1328,1890,0.013822782],[0,448,1924,0.004092404]],"inputs":[["(* 1/2 c)","(+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* -1/2 (/ (* a c) b_2))","(* -1/2 (/ a b_2))","(* a (pow c 2))","(/ (* a (pow c 2)) b_2)","(* 1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* -1 (* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (* a c)) (sqrt -1))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(/ (+ (* 1/8 (* a (pow c 2))) (* 1/2 (* (pow b_2 2) c))) (pow b_2 2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(/ 1/8 b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* c (+ 1/2 (* 1/8 (/ (* a c) (pow b_2 2)))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(* -1 c)","(pow c 2)","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(* (pow c 2) (+ (* 1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"memory":[[3998448,47781744]],"method":["egg-herbie"],"outputs":[["(* 1/2 c)","(*.f64 #s(literal 1/2 binary64) c)","(+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 c (*.f64 (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) a)) #s(literal -1/8 binary64) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 1/16 binary64)) (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c)) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (*.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 a #s(literal 1/16 binary64)) (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c)) a (*.f64 #s(literal -2 binary64) b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1/2 binary64))","(* -1/2 (/ a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(* a (pow c 2))","(*.f64 (*.f64 c c) a)","(/ (* a (pow c 2)) b_2)","(/.f64 (*.f64 (*.f64 c c) a) b_2)","(* 1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(*.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) a) c) b_2) (/.f64 c b_2))","(* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) c) b_2) (/.f64 c b_2) (*.f64 (/.f64 c a) #s(literal 1/2 binary64))) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(*.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))) a)","(* -1 (* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) c) b_2) (/.f64 c b_2) (*.f64 (/.f64 c a) #s(literal 1/2 binary64))) a)","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a)) (neg.f64 a)))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)) a)","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(/ (+ (* 1/8 (* a (pow c 2))) (* 1/2 (* (pow b_2 2) c))) (pow b_2 2))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal 1/2 binary64) b_2) b_2 (*.f64 (*.f64 #s(literal 1/8 binary64) a) c))) (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal -1/8 binary64) c) a (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 3 binary64)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(/ 1/8 b_2)","(/.f64 #s(literal 1/8 binary64) b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(neg.f64 (fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) b_2))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2) b_2 (neg.f64 (fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) b_2)))","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) b_2) (/.f64 a b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (/.f64 c b_2) a) #s(literal -2 binary64)))) b_2)","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) a) c) b_2) (/.f64 c b_2) (*.f64 (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)) c) #s(literal 1/2 binary64)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 a c)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) b_2) (*.f64 c (/.f64 c b_2))))) (neg.f64 b_2))","(* c (+ 1/2 (* 1/8 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(* -1 c)","(neg.f64 c)","(pow c 2)","(*.f64 c c)","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(* (pow c 2) (+ (* 1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 a b_2) b_2) #s(literal 1/8 binary64) (/.f64 #s(literal 1/2 binary64) c)) c) c)","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(*.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (/.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)) (*.f64 c c))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/8 binary64) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (neg.f64 b_2) a)) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2))))) (neg.f64 c)) (/.f64 b_2 a)) c)) c)","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))) c)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":245.81396484375,"type":"simplify"},{"count":[[15,141]],"inputs":[["(fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","(/.f64 #s(literal 1/8 binary64) b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","(neg.f64 c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","(*.f64 c c)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(*.f64 (*.f64 c c) a)","(/.f64 (*.f64 (*.f64 c c) a) b_2)"]],"memory":[[-6297680,29477936]],"outputs":[["(neg.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)))","(+.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) (*.f64 #s(literal 1/2 binary64) c))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)))","(+.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) #s(literal 4 binary64)) (*.f64 #s(literal 1/2 binary64) c))","(+.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) #s(literal 4 binary64)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))) (/.f64 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c))))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c))) (neg.f64 (/.f64 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)))))","(-.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) (*.f64 #s(literal 1/2 binary64) c))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)))","(-.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c))) (/.f64 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c))))","(-.f64 (/.f64 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64)) (fma.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 c #s(literal 1/4 binary64)) c))) (/.f64 (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 c #s(literal 1/4 binary64)) c))))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c))) #s(literal 4 binary64)) (/.f64 (/.f64 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c))) #s(literal 4 binary64)))","(neg.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","(+.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","(+.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2))","(+.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal 0 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c))) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","(+.f64 (*.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) b_2 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c))) (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2)) (*.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) b_2 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c))) (*.f64 #s(literal 1/2 binary64) c)))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2) (/.f64 b_2 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) b_2 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c)))) (*.f64 (*.f64 #s(literal 1/2 binary64) c) (/.f64 b_2 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 (*.f64 c c) a)) #s(literal 1/64 binary64)) b_2 (*.f64 (*.f64 c #s(literal 1/4 binary64)) c)))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2) (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 b_2 #s(literal 1/64 binary64))) (*.f64 (*.f64 c c) a))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 1/2 binary64) c))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2) (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2) (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 b_2 #s(literal 1/64 binary64))) (*.f64 (*.f64 c c) a))))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 b_2 #s(literal 1/64 binary64))) (*.f64 (*.f64 c c) a)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2)) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) (*.f64 b_2 #s(literal 1/64 binary64))) (*.f64 (*.f64 c c) a)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 a) c))) #s(literal 1/512 binary64) (*.f64 (*.f64 (*.f64 c c) c) #s(literal 1/8 binary64))) b_2)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal 4 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","#s(approx (/ (+ (+ b_2 b_2) (* c a)) a) (fma.f64 (*.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 c c)) b_2 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c)))","(neg.f64 (*.f64 b_2 #s(literal 1/8 binary64)))","(+.f64 (*.f64 (*.f64 b_2 #s(literal 1/8 binary64)) #s(literal 0 binary64)) (*.f64 b_2 #s(literal 1/8 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 b_2 #s(literal 1/8 binary64))) (*.f64 b_2 #s(literal 1/8 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal 1/8 binary64)) (*.f64 b_2 #s(literal 1/8 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) (*.f64 b_2 #s(literal 1/8 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 b_2 #s(literal 1/8 binary64)))","(*.f64 b_2 #s(literal 1/8 binary64))","(*.f64 #s(literal 1/8 binary64) b_2)","(*.f64 (*.f64 b_2 #s(literal 1/8 binary64)) #s(literal 4 binary64))","(*.f64 (*.f64 b_2 #s(literal 1/8 binary64)) b_2)","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/8 binary64)) b_2)","(*.f64 #s(literal 4 binary64) (*.f64 b_2 #s(literal 1/8 binary64)))","(*.f64 b_2 (*.f64 b_2 #s(literal 1/8 binary64)))","(*.f64 b_2 (/.f64 #s(literal 4 binary64) #s(literal 1/8 binary64)))","(*.f64 (pow.f64 (*.f64 b_2 #s(literal 1/8 binary64)) (/.f64 #s(literal 4 binary64) #s(literal 8 binary64))) (pow.f64 (*.f64 b_2 #s(literal 1/8 binary64)) (/.f64 #s(literal 4 binary64) #s(literal 8 binary64))))","#s(approx (/ (+ (+ b_2 b_2) (* c a)) a) #s(literal 1/2 binary64))","#s(approx (/ (+ (+ b_2 b_2) (* c a)) a) c)","c","(neg.f64 c)","(+.f64 c #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) c)","(-.f64 #s(literal 0 binary64) c)","(-.f64 (/.f64 #s(literal 0 binary64) c) c)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 c c)) c)","(*.f64 c #s(literal 4 binary64))","(*.f64 #s(literal 4 binary64) c)","(*.f64 (*.f64 c c) (/.f64 #s(literal 4 binary64) c))","(*.f64 (*.f64 (*.f64 c c) c) (/.f64 #s(literal 4 binary64) (*.f64 c c)))","(/.f64 (*.f64 c c) c)","(/.f64 (*.f64 (*.f64 c c) c) (*.f64 c c))","(/.f64 (neg.f64 (*.f64 (*.f64 c c) c)) (*.f64 c c))","(/.f64 #s(literal 4 binary64) (/.f64 (*.f64 c c) (*.f64 (*.f64 c c) c)))","#s(approx (/ (+ (+ b_2 b_2) (* c a)) a) (*.f64 c c))","(neg.f64 (*.f64 c c))","(+.f64 (*.f64 c c) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 c c))","(-.f64 #s(literal 0 binary64) (*.f64 c c))","(*.f64 c c)","(*.f64 (*.f64 c c) #s(literal 4 binary64))","(*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64)))","(*.f64 #s(literal 4 binary64) (*.f64 c c))","(*.f64 (neg.f64 (pow.f64 c #s(literal 4 binary64))) (pow.f64 c #s(literal 4 binary64)))","(*.f64 (+.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 4 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 4 binary64))))","(*.f64 (exp.f64 (log.f64 c)) (exp.f64 (log.f64 c)))","(*.f64 (pow.f64 c #s(literal 4 binary64)) (neg.f64 (pow.f64 c #s(literal 4 binary64))))","(*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 c c) (*.f64 c c)) #s(literal 0 binary64)) (-.f64 (*.f64 c c) #s(literal 0 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 c c) (*.f64 c c))) (*.f64 c c))","(/.f64 #s(approx (+ (+ b_2 b_2) (* c a)) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c b_2))) a)","#s(approx (+ (+ b_2 b_2) (* c a)) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c b_2)))","(neg.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c b_2)))","(*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c b_2))","(*.f64 (*.f64 a #s(literal 1/2 binary64)) (/.f64 c b_2))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 b_2 a))","(*.f64 (*.f64 b_2 a) (*.f64 #s(literal 1/2 binary64) c))","(*.f64 (*.f64 c a) (*.f64 b_2 #s(literal 1/2 binary64)))","(*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) c)","(*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c b_2)) b_2)","(*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) c) b_2)","(*.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) a)","(*.f64 (*.f64 (*.f64 b_2 a) c) #s(literal 1/2 binary64))","(*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) (/.f64 c b_2))","(*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) c) #s(literal 4 binary64)) (*.f64 b_2 a))","(*.f64 #s(literal 4 binary64) (*.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c b_2)))","(*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b_2 a) c))","(neg.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)))","(*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64))","(*.f64 (*.f64 a #s(literal 1/2 binary64)) b_2)","(*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) a)","(*.f64 (*.f64 b_2 a) (/.f64 #s(literal 1/2 binary64) #s(literal 4 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) #s(literal 4 binary64)) (*.f64 b_2 a))","(*.f64 #s(literal 1/2 binary64) (*.f64 b_2 a))","(*.f64 a (*.f64 b_2 #s(literal 1/2 binary64)))","(*.f64 b_2 (*.f64 a #s(literal 1/2 binary64)))","(*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) b_2)","(*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) b_2)","(*.f64 #s(literal 4 binary64) (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)))","(*.f64 b_2 (/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 4 binary64) a)))","(/.f64 (*.f64 a #s(literal 1/2 binary64)) b_2)","(/.f64 (*.f64 b_2 #s(literal 1/2 binary64)) (/.f64 #s(literal 4 binary64) a))","(neg.f64 (*.f64 (*.f64 c c) a))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 c c) a))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 c c) a))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal 4 binary64)) (*.f64 (*.f64 c c) a))","(*.f64 (*.f64 c c) a)","(*.f64 (*.f64 c a) c)","(*.f64 a (*.f64 c c))","(*.f64 c (*.f64 c a))","(*.f64 (*.f64 (*.f64 c c) a) #s(literal 4 binary64))","(*.f64 (*.f64 a (pow.f64 c #s(literal 4 binary64))) (pow.f64 c #s(literal 4 binary64)))","(*.f64 #s(literal 4 binary64) (*.f64 (*.f64 c c) a))","(*.f64 a (/.f64 (*.f64 c c) #s(literal 4 binary64)))","(*.f64 c (/.f64 (*.f64 c a) #s(literal 4 binary64)))","(*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) a))","(/.f64 (*.f64 (*.f64 c c) a) #s(literal 4 binary64))","(neg.f64 (*.f64 (*.f64 b_2 a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (*.f64 b_2 a) (*.f64 c c)) #s(literal 0 binary64)) (*.f64 (*.f64 b_2 a) (*.f64 c c)))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 (*.f64 b_2 a) (*.f64 c c))) (*.f64 (*.f64 b_2 a) (*.f64 c c)))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b_2 a) (*.f64 c c)))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) (*.f64 (*.f64 b_2 a) (*.f64 c c)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 c c) a)) (*.f64 (*.f64 b_2 a) (*.f64 c c)))","(*.f64 (*.f64 b_2 a) (*.f64 c c))","(*.f64 (*.f64 c a) (/.f64 c b_2))","(*.f64 (*.f64 c a) (*.f64 c b_2))","(*.f64 (*.f64 c b_2) (*.f64 c a))","(*.f64 (*.f64 c c) (*.f64 b_2 a))","(*.f64 (*.f64 (*.f64 b_2 a) c) (/.f64 c b_2))","(*.f64 (*.f64 (*.f64 b_2 a) c) (/.f64 c #s(literal 4 binary64)))","(*.f64 (*.f64 (*.f64 b_2 a) c) c)","(*.f64 (*.f64 (*.f64 b_2 a) (*.f64 c c)) b_2)"]],"time":1158.635986328125,"type":"rewrite"},{"compiler":[[8194,1100]],"memory":[[6279392,23005408]],"time":32.653076171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.565797997504585,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","done",41.994083476623416,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","done",42.82443249334497,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) (/.f64 c b_2))) a)","fresh",55.842078584535514,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) c) #s(literal 4 binary64)) (*.f64 b_2 a))) a)","fresh",60.732599765493596,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","done",45.81694067135902,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) b_2) c)) a)","fresh",60.105770117138256,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) b_2) c)) a)","fresh",60.732448284294556,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 a) c) #s(literal 1/2 binary64))) a)","fresh",60.73257727975211,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) a)) a)","fresh",60.65456519693978,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (neg.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64))) c)) a)","fresh",60.207577165809376,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) #s(approx (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) b_2))) a)","fresh",47.70826734793194,"binary64"],["(/.f64 #s(approx c c) #s(literal -1/2 binary64))","fresh",62.32011069803064,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","done",42.801634413457755,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 c c) c))","fresh",57.10551661581522,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)) (neg.f64 b_2)))","fresh",40.62760746940753,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","fresh",40.56575267945993,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","fresh",62.6039563516732,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","fresh",55.579401559668156,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","fresh",62.23417890391566,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","fresh",60.54677497263011,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",42.806088904902516,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) (/.f64 #s(literal 4 binary64) c)))","fresh",57.108631330533214,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","fresh",57.70637931199081,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","done",57.68897947556371,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","fresh",60.549550379022605,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","done",62.31776990935941,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","done",40.56965892945993,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","fresh",56.6385934422611,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","done",62.31895323579272,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","fresh",46.591539833145376,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","done",55.872095062110496,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","done",60.5417475884677,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","fresh",61.71525573488621,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","fresh",61.71374855067981,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","fresh",61.47568685183855,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","done",61.44549735963702,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","done",61.4874866001843,"binary64"],["#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","fresh",54.624058085120076,"binary64"]],"compiler":[[886,185],[13,10],[18,13],[24,17],[23,17],[23,17],[21,15],[23,16],[23,17],[21,15],[21,15],[22,16],[38,26],[5,6],[24,17],[19,13],[45,30],[36,25],[17,13],[17,12],[17,13],[17,12],[19,14],[21,15],[19,14],[17,12],[17,13],[17,13],[19,14],[18,13],[16,12],[38,26],[31,22],[15,11],[15,12],[15,12],[15,12],[15,12],[15,12],[20,13]],"count":[[262,39]],"kept":[{"done":[10,10],"fresh":[11,11],"new":[236,14],"picked":[5,4]}],"memory":[[-6845104,23566816]],"min-error":[[4.15622005763414,"binary64"]],"time":79.9599609375,"type":"prune"},{"accuracy":[7.0135438501618275],"baseline":[29.565797997504585],"branch":[["a",27.12200293949473,3,"binary64"],["b_2",7.0135438501618275,3,"binary64"],["c",29.565797997504568,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",14.479927754027164,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[43,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 c c) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) (/.f64 #s(literal 4 binary64) c)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) a)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 a) c) #s(literal 1/2 binary64))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (neg.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64))) c)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) c) #s(literal 4 binary64)) (*.f64 b_2 a))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) #s(approx (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) b_2))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) (/.f64 c b_2))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))"]],"memory":[[-72560,23402416]],"oracle":[63.66168502055403],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)) (neg.f64 b_2)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":48.1669921875,"times":[[11.22314453125,"a"],[11.37890625,"b_2"],[10.620849609375,"c"],[11.48095703125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[7.079501515801089],"baseline":[29.565797997504585],"branch":[["b_2",7.079501515801089,3,"binary64"]],"compiler":[[1,3]],"count":[[41,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 c c) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) (/.f64 #s(literal 4 binary64) c)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) a)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 a) c) #s(literal 1/2 binary64))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (neg.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64))) c)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) c) #s(literal 4 binary64)) (*.f64 b_2 a))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) #s(approx (+ (* (* (/ c b_2) 1/2) a) (* -2 b_2)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 (*.f64 b_2 b_2) #s(literal -2 binary64))) b_2))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) (/.f64 c b_2))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)))"]],"memory":[[-1787120,7529776]],"oracle":[63.654519804958866],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":13.783935546875,"times":[[11.14501953125,"b_2"]],"type":"regimes"},{"accuracy":[9.066278445873804],"baseline":[40.56575267945993],"branch":[["b_2",9.066278445873804,3,"binary64"]],"compiler":[[1,3]],"count":[[37,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 c c) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) (/.f64 #s(literal 4 binary64) c)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) a)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 a) c) #s(literal 1/2 binary64))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (neg.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64))) c)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) c) #s(literal 4 binary64)) (*.f64 b_2 a))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)"]],"memory":[[-1099936,6952464]],"oracle":[63.65166945479966],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":11.498046875,"times":[[9.18994140625,"b_2"]],"type":"regimes"},{"accuracy":[20.7359760750152],"baseline":[40.56575267945993],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",31.68553253594759,3,"binary64"],["b_2",20.7359760750152,2,"binary64"]],"compiler":[[13,10],[1,3]],"count":[[33,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 c c) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) (/.f64 #s(literal 4 binary64) c)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) a)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 a) c) #s(literal 1/2 binary64))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (neg.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64))) c)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"memory":[[2752736,10558320]],"oracle":[63.52056594231704],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":18.363037109375,"times":[[8.014892578125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[8.10693359375,"b_2"]],"type":"regimes"},{"accuracy":[20.946844875135458],"baseline":[40.56575267945993],"branch":[["b_2",20.946844875135458,2,"binary64"]],"compiler":[[1,3]],"count":[[32,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 c c) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) (/.f64 #s(literal 4 binary64) c)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 #s(literal 1/2 binary64)) c) a)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 b_2 a) c) #s(literal 1/2 binary64))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (neg.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64))) c)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 a #s(literal 1/2 binary64)) #s(literal 4 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (*.f64 (*.f64 b_2 a) #s(literal 1/2 binary64)) b_2) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)"]],"memory":[[-1781968,6242880]],"oracle":[63.52056594231704],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))"]],"repr":["binary64"],"time":10.52197265625,"times":[[8.365966796875,"b_2"]],"type":"regimes"},{"accuracy":[20.950751125135458],"baseline":[40.56965892945993],"branch":[["b_2",20.950751125135458,2,"binary64"]],"compiler":[[1,3]],"count":[[22,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (*.f64 c c) c))"]],"memory":[[4862688,4862688]],"oracle":[63.342340631083104],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))"]],"repr":["binary64"],"time":7.1240234375,"times":[[5.651123046875,"b_2"]],"type":"regimes"},{"accuracy":[38.09283105806938],"baseline":[40.56965892945993],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",40.56965892945993,1,"binary64"],["c",40.56965892945995,1,"binary64"],["a",40.56965892945992,1,"binary64"],["b_2",38.09283105806938,2,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[20,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]],"memory":[[-3973712,13965856]],"oracle":[63.30701033531604],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))"]],"repr":["binary64"],"time":23.2509765625,"times":[[4.8740234375,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[5.410888671875,"c"],[5.35205078125,"a"],[5.81298828125,"b_2"]],"type":"regimes"},{"accuracy":[53.09718765640187],"baseline":[54.624058085120076],"branch":[["c",54.62405808512006,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",54.624058085120076,1,"binary64"],["a",54.62405808512003,1,"binary64"],["b_2",53.09718765640187,2,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[19,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))"]],"memory":[[-2789008,13638320]],"oracle":[63.29056407101256],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a))"]],"repr":["binary64"],"time":21.76904296875,"times":[[5.009033203125,"c"],[4.602783203125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[5.359130859375,"a"],[4.965087890625,"b_2"]],"type":"regimes"},{"accuracy":[53.949928144067094],"baseline":[55.579401559668156],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",55.57940155966817,1,"binary64"],["c",54.44322359808805,2,"binary64"],["a",55.57940155966815,1,"binary64"],["b_2",53.949928144067094,2,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[17,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 c c) #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 #s(approx c c) #s(literal -1/2 binary64))"]],"memory":[[4061136,12982576]],"oracle":[63.27900989021154],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c)))"]],"repr":["binary64"],"time":20.18701171875,"times":[[4.281005859375,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[4.98486328125,"c"],[4.748046875,"a"],[4.47998046875,"b_2"]],"type":"regimes"},{"accuracy":[54.42817313165088],"baseline":[55.579401559668156],"branch":[["b_2",54.42817313165088,2,"binary64"]],"compiler":[[1,3]],"count":[[13,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal -1/2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c #s(literal 4 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c c))"]],"memory":[[-4756416,3475392]],"oracle":[63.072080079099614],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)"]],"repr":["binary64"],"time":4.872802734375,"times":[[3.712890625,"b_2"]],"type":"regimes"},{"accuracy":[60.54174758846768],"baseline":[60.5417475884677],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",60.54174758846768,1,"binary64"],["a",60.541747588467715,1,"binary64"],["c",60.54174758846771,1,"binary64"],["b_2",60.541747588467715,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[9,1]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+.f64 c c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 #s(literal -1/2 binary64) c))"]],"memory":[[1264128,9466144]],"oracle":[63.034322433236355],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)"]],"repr":["binary64"],"time":13.14013671875,"times":[[3.10595703125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[2.891845703125,"a"],[2.852783203125,"c"],[3.052978515625,"b_2"]],"type":"regimes"},{"accuracy":[61.44549735963695],"baseline":[61.44549735963702],"branch":[["a",61.44549735963705,1,"binary64"],["b_2",61.44549735963705,1,"binary64"],["c",61.44549735963703,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",61.44549735963695,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[5,1]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 1/8 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 18 binary64))"]],"memory":[[-324144,7895488]],"oracle":[62.91173616390078],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))"]],"repr":["binary64"],"time":9.156982421875,"times":[[2.125,"a"],[1.989013671875,"b_2"],[1.97900390625,"c"],[2.10888671875,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[61.48748660018423],"baseline":[61.4874866001843],"branch":[["a",61.48748660018427,1,"binary64"],["b_2",61.48748660018423,1,"binary64"],["c",61.48748660018426,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",61.487486600184255,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[1,1]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))"]],"link":["."],"memory":[[6186496,6186496]],"name":["quad2m (problem 3.2.1, negative)"],"oracle":[61.4874866001843],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))"]],"repr":["binary64"],"time":5.028076171875,"times":[[1.02392578125,"a"],[1.011962890625,"b_2"],[1.0390625,"c"],[1.31201171875,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"bstep":[[15.5810546875,3.397075898651903e+69,1.3063231108085213e+76],[23.2939453125,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[13,11],[45,31],[13,11],[45,31],[13,11],[45,31],[13,11],[45,31],[13,11],[45,31],[13,11],[45,31],[13,11],[45,31],[13,11],[45,31],[13,11],[45,31],[15,13],[1,3]],"memory":[[-3853760,13462768]],"method":["binary-search","binary-search"],"mixsample":[[1.109619140625,"adjust",800],[2.912841796875,"ival-div",0],[0.012939453125,"ival-mult",800],[0.385498046875,"ival-mult",400],[4.17138671875,"ival-mult",0],[0.193359375,"ival-sqrt",1600],[0.131103515625,"ival-sub",1600],[0.14990234375,"ival-assert",0],[4.12646484375,"ival-sub",0],[0.206787109375,"ival-true",0],[0.2568359375,"ival-sub",400],[2.270263671875,"ival-sqrt",0],[0.426513671875,"ival-sqrt",400],[0.28662109375,"adjust",2000],[2.26171875,"ival-neg",0]],"outcomes":[[5.132080078125,1,"valid",33],[4.124755859375,2,"valid",23],[2.55810546875,0,"invalid",36],[15.91455078125,0,"valid",232]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":43.557861328125,"type":"bsearch"},{"bstep":[[1.2919921875,3.397075898651903e+69,1.3063231108085213e+76],[20.36181640625,-4.6600030368670275e-92,-8.457447311889557e-95]],"compiler":[[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[13,11],[36,26],[13,11],[36,26],[13,11],[36,26],[13,11],[36,26],[13,11],[36,26],[13,11],[36,26],[13,11],[36,26],[13,11],[36,26],[15,13],[1,3]],"memory":[[-278240,7581936]],"method":["binary-search","binary-search"],"mixsample":[[0.83154296875,"adjust",800],[1.46533203125,"ival-div",0],[0.010986328125,"ival-mult",800],[0.148193359375,"ival-sqrt",1600],[0.264892578125,"ival-mult",400],[3.05810546875,"ival-mult",0],[0.057373046875,"ival-sub",1600],[0.051025390625,"ival-assert",0],[1.754638671875,"ival-sub",0],[0.103271484375,"ival-true",0],[1.124267578125,"ival-sqrt",0],[0.20947265625,"ival-sub",400],[0.195068359375,"adjust",2000],[0.812255859375,"ival-neg",0],[0.3828125,"ival-sqrt",400]],"outcomes":[[3.64697265625,1,"valid",29],[2.6083984375,2,"valid",15],[2.165771484375,0,"invalid",31],[6.480712890625,0,"valid",84]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":24.547119140625,"type":"bsearch"},{"bstep":[[12.990966796875,2.3050115543930826e-76,1.0470581566517574e-74],[1.072998046875,-4.6600030368670275e-92,-8.457447311889557e-95]],"compiler":[[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[18,14],[36,26],[18,14],[36,26],[18,14],[36,26],[18,14],[36,26],[18,14],[36,26],[18,14],[36,26],[18,14],[36,26],[18,14],[36,26],[15,13],[1,3]],"memory":[[-2340192,5663232]],"method":["binary-search","binary-search"],"mixsample":[[1.3251953125,"ival-sub",0],[0.891845703125,"ival-div",0],[0.07958984375,"ival-true",0],[1.614501953125,"ival-mult",0],[0.883544921875,"ival-sqrt",0],[0.05029296875,"ival-assert",0],[0.62451171875,"ival-neg",0]],"outcomes":[[1.443115234375,0,"invalid",21],[7.23828125,0,"valid",112]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":16.98095703125,"type":"bsearch"},{"bstep":[[22.953125,-2.0653426225515115e-303,9.613422409770773e-302]],"compiler":[[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[24,18],[36,26],[15,13],[1,3]],"memory":[[-752368,8547360]],"method":["binary-search"],"mixsample":[[2.14208984375,"ival-sub",0],[1.661376953125,"ival-div",0],[0.143310546875,"ival-true",0],[3.00048828125,"ival-mult",0],[1.546875,"ival-sqrt",0],[0.0908203125,"ival-assert",0],[1.136474609375,"ival-neg",0]],"outcomes":[[5.02294921875,0,"invalid",74],[10.48486328125,0,"valid",160]],"stop":[["narrow-enough",1]],"time":27.094970703125,"type":"bsearch"},{"bstep":[[22.35400390625,-2.4176855806484593e-230,-1.5506338439877602e-249]],"compiler":[[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[19,15],[36,26],[15,13],[1,3]],"memory":[[298368,8206912]],"method":["binary-search"],"mixsample":[[0.09912109375,"adjust",800],[1.626220703125,"ival-div",0],[0.031005859375,"ival-mult",400],[2.9326171875,"ival-mult",0],[0.05859375,"ival-assert",0],[2.0458984375,"ival-sub",0],[0.15380859375,"ival-true",0],[1.44384765625,"ival-sqrt",0],[0.01416015625,"ival-sub",400],[1.216064453125,"ival-neg",0],[0.026123046875,"ival-sqrt",400]],"outcomes":[[0.52197265625,1,"valid",4],[4.242919921875,0,"invalid",63],[10.461181640625,0,"valid",156]],"stop":[["narrow-enough",1]],"time":26.348876953125,"type":"bsearch"},{"bstep":[[1.450927734375,-2.4176855806484593e-230,-1.5506338439877602e-249]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[789840,789840]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.904052734375,"type":"bsearch"},{"bstep":[[16.871826171875,-1.1511283775530015e-150,-1.2138422331643272e-152]],"compiler":[[20,14],[19,15],[20,14],[19,15],[20,14],[19,15],[20,14],[19,15],[20,14],[19,15],[20,14],[19,15],[20,14],[19,15],[15,13],[1,3]],"memory":[[6249328,6249328]],"method":["binary-search"],"mixsample":[[0.34912109375,"adjust",800],[1.35302734375,"ival-div",0],[0.01171875,"ival-mult",800],[0.02587890625,"ival-sqrt",1600],[0.08642578125,"ival-mult",400],[2.06591796875,"ival-mult",0],[0.013427734375,"ival-sub",1600],[0.0458984375,"ival-assert",0],[1.646484375,"ival-sub",0],[0.1123046875,"ival-true",0],[1.085693359375,"ival-sqrt",0],[0.091552734375,"ival-sub",400],[0.05322265625,"adjust",2000],[0.7568359375,"ival-neg",0],[0.152099609375,"ival-sqrt",400]],"outcomes":[[1.880126953125,1,"valid",14],[0.68798828125,2,"valid",4],[3.279541015625,0,"invalid",50],[6.121826171875,0,"valid",94]],"stop":[["narrow-enough",1]],"time":19.58203125,"type":"bsearch"},{"bstep":[[20.56787109375,-8.923271359362197e+132,-4.4122760264643695e+131]],"compiler":[[20,14],[17,13],[20,14],[17,13],[20,14],[17,13],[20,14],[17,13],[20,14],[17,13],[20,14],[17,13],[20,14],[17,13],[15,13],[1,3]],"memory":[[-1411760,6723600]],"method":["binary-search"],"mixsample":[[1.702392578125,"adjust",800],[0.358642578125,"ival-sqrt",2000],[2.40478515625,"ival-div",0],[0.779296875,"ival-sqrt",800],[0.1904296875,"ival-sub",2000],[0.040283203125,"ival-assert",0],[0.057861328125,"ival-sqrt",4000],[1.906494140625,"ival-sub",0],[0.864013671875,"ival-sqrt",0],[0.619873046875,"adjust",2000],[0.30615234375,"ival-mult",800],[0.45751953125,"ival-sub",800],[1.6103515625,"ival-mult",0],[0.10986328125,"ival-mult",400],[0.076904296875,"ival-true",0],[0.061767578125,"adjust",2800],[0.025390625,"ival-sub",4000],[0.537109375,"ival-neg",0]],"outcomes":[[7.699462890625,1,"valid",58],[0.22509765625,0,"invalid",3],[6.5185546875,2,"valid",37],[1.22119140625,3,"valid",5],[0.823974609375,0,"valid",12]],"stop":[["narrow-enough",1]],"time":23.509033203125,"type":"bsearch"},{"bstep":[[24.27294921875,-1.3906872061667018e+95,-8.53192991921605e+90]],"compiler":[[18,14],[17,13],[18,14],[17,13],[18,14],[17,13],[18,14],[17,13],[18,14],[17,13],[18,14],[17,13],[18,14],[17,13],[18,14],[17,13],[15,13],[1,3]],"memory":[[-338016,7757328]],"method":["binary-search"],"mixsample":[[0.5400390625,"ival-sqrt",2000],[2.097900390625,"ival-div",0],[1.932373046875,"adjust",800],[0.90576171875,"ival-sqrt",800],[0.294677734375,"ival-sub",2000],[0.038330078125,"ival-assert",0],[0.071044921875,"ival-sqrt",4000],[2.107177734375,"ival-sub",0],[0.988525390625,"ival-sqrt",0],[0.937744140625,"adjust",2000],[1.0439453125,"ival-mult",800],[0.114013671875,"ival-mult",400],[0.55908203125,"ival-sub",800],[2.11279296875,"ival-mult",0],[0.02001953125,"ival-mult",1600],[0.1328125,"adjust",2800],[0.09033203125,"ival-true",0],[0.026611328125,"ival-sub",4000],[0.639404296875,"ival-neg",0]],"outcomes":[[5.859619140625,1,"valid",47],[0.076904296875,0,"invalid",1],[10.085205078125,2,"valid",52],[2.35595703125,3,"valid",10],[1.2734375,0,"valid",19]],"stop":[["narrow-enough",1]],"time":27.801025390625,"type":"bsearch"},{"bstep":[[27.864013671875,-8.616264193173968e+43,-3.125200357764176e+36]],"compiler":[[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,13],[1,3]],"memory":[[-1175680,8326480]],"method":["binary-search"],"mixsample":[[2.39306640625,"ival-div",0],[1.93701171875,"adjust",800],[0.285888671875,"ival-sub",1600],[0.0068359375,"ival-sqrt",800],[0.006103515625,"ival-mult",2000],[0.046142578125,"ival-assert",0],[0.0087890625,"ival-sub",3600],[3.302734375,"ival-sub",0],[0.5341796875,"ival-sub",400],[1.254638671875,"ival-sqrt",0],[0.8759765625,"adjust",2000],[0.0576171875,"ival-mult",800],[0.01416015625,"ival-sub",800],[2.322021484375,"ival-mult",0],[0.587158203125,"ival-sqrt",1600],[0.526123046875,"ival-mult",400],[0.009033203125,"ival-mult",1600],[0.006103515625,"ival-div",800],[0.033935546875,"adjust",2800],[0.141357421875,"ival-true",0],[0.02294921875,"ival-sqrt",3600],[1.01318359375,"ival-sqrt",400],[0.801513671875,"ival-neg",0]],"outcomes":[[6.68212890625,1,"valid",48],[1.119384765625,0,"invalid",12],[10.237060546875,2,"valid",55],[0.537109375,3,"valid",2],[3.719970703125,0,"valid",39]],"stop":[["narrow-enough",1]],"time":31.385009765625,"type":"bsearch"},{"egraph":[[5,3657,596,0.028151084],[4,1166,600,0.017309594],[3,545,604,0.006948364],[2,281,614,0.003352726],[1,168,620,0.002352269],[0,104,620,0.001854158]],"inputs":[["(if (<=.f64 b_2 #s(literal -1479767320250067/3794275180128377091639574036764685364535950857523710002444946112771297432041422848 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 496527519231531/127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(if (<=.f64 b_2 #s(literal -428247786965671/251910462920982955146951572855242064723418868082104455055218081010186148908960752236565235084370225856148908135059894885483907489539473312974233140212507046179002134322645704349866637075627537275802723363977045251916898867011814946574400376685636747593659677933568 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -428247786965671/251910462920982955146951572855242064723418868082104455055218081010186148908960752236565235084370225856148908135059894885483907489539473312974233140212507046179002134322645704349866637075627537275802723363977045251916898867011814946574400376685636747593659677933568 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -2948408144391829/235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a)))","(if (<=.f64 b_2 #s(literal -499999999999999995414783701180638281843304424991242455992046113258834575832799818100521466993270785184801126587914991362494731124736 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c)) #s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a)))","(if (<=.f64 b_2 #s(literal -21000000000000000766183124920357663259632428563130840731039768744007748021361323319876386816 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c))))","(if (<=.f64 b_2 #s(literal -16500000000000000478579587786781753344 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))"]],"memory":[[544560,16019120]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -1479767320250067/3794275180128377091639574036764685364535950857523710002444946112771297432041422848 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -1479767320250067/3794275180128377091639574036764685364535950857523710002444946112771297432041422848 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/8 binary64) #s(literal 1/2 binary64)) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 12999999999999999647618921891376939333850226425529058480240526125692023209984 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 496527519231531/127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -4330125386989255/146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) (if (<=.f64 b_2 #s(literal 496527519231531/127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))))","(if (<=.f64 b_2 #s(literal -428247786965671/251910462920982955146951572855242064723418868082104455055218081010186148908960752236565235084370225856148908135059894885483907489539473312974233140212507046179002134322645704349866637075627537275802723363977045251916898867011814946574400376685636747593659677933568 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (/ 1/8 b_2) (/ (* (* c c) a) b_2)) (* 1/2 c)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -428247786965671/251910462920982955146951572855242064723418868082104455055218081010186148908960752236565235084370225856148908135059894885483907489539473312974233140212507046179002134322645704349866637075627537275802723363977045251916898867011814946574400376685636747593659677933568 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -2948408144391829/235872651551346334515097161311766805682307576276027526773512893765351510149509303255382920323603672971341773439422740306235661539370299539535089640714543502728087207936 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a)))","(if (<=.f64 b_2 #s(literal -499999999999999995414783701180638281843304424991242455992046113258834575832799818100521466993270785184801126587914991362494731124736 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c)) #s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a)))","(if (<=.f64 b_2 #s(literal -499999999999999995414783701180638281843304424991242455992046113258834575832799818100521466993270785184801126587914991362494731124736 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 0 binary64)) #s(approx (/ (- b_2 (+ (* (* a a) (* c c)) b_2)) a) (*.f64 (*.f64 (neg.f64 c) c) a)))","(if (<=.f64 b_2 #s(literal -21000000000000000766183124920357663259632428563130840731039768744007748021361323319876386816 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg.f64 (*.f64 c c))))","(if (<=.f64 b_2 #s(literal -21000000000000000766183124920357663259632428563130840731039768744007748021361323319876386816 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 0 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (neg.f64 c) c)))","(if (<=.f64 b_2 #s(literal -16500000000000000478579587786781753344 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (-.f64 c c)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c))","(if (<=.f64 b_2 #s(literal -16500000000000000478579587786781753344 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal 0 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -1/2 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(literal -512 binary64))"]],"stop":[["node limit",1]],"time":91.303955078125,"type":"simplify"},{"compiler":[[620,104]],"memory":[[2759072,2759072]],"stop":[["fuel",1]],"time":4.223876953125,"type":"soundness"},{"compiler":[[620,104],[620,104],[89,26],[89,26],[13,10],[13,10]],"memory":[[4576,57057984]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":91.610107421875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01904296875,"type":"end"}]