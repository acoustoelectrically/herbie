[{"memory":[[13008,13008]],"time":0.025146484375,"type":"start"},{"compiler":[[13,9]],"memory":[[847216,847216]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00048780441284179693,"valid":0.4990239143371582}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0009756088256835938,"valid":0.4985361099243164}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0019512176513671875,"valid":0.4975605010986328}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.003902435302734375,"valid":0.4956092834472656}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00780487060546875,"valid":0.49170684814453125}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0156097412109375,"valid":0.4839019775390625}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.031219482421875,"valid":0.468292236328125}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.06243896484375,"valid":0.43707275390625}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.1248779296875,"valid":0.3746337890625}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.249755859375,"valid":0.249755859375}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":4.48486328125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[22149232,374427152]],"mixsample":[[64.288818359375,"ival-div",0],[166.53125,"adjust",800],[67.75390625,"ival-div",400],[22.35400390625,"ival-sub",1600],[4.33642578125,"ival-assert",0],[33.211181640625,"ival-div",1600],[58.60888671875,"ival-sub",0],[56.364990234375,"ival-sub",400],[58.873291015625,"adjust",2000],[53.868408203125,"ival-add",0],[64.194580078125,"ival-fabs",0],[13.923583984375,"ival-add",1600],[0.5185546875,"ival-log",400],[50.798583984375,"ival-add",400],[1432.553466796875,"ival-log",0],[2.06005859375,"ival-log",800],[6.952392578125,"exact",0],[26.18896484375,"ival-<",0]],"outcomes":[[1017.333984375,1,"valid",4843],[1449.48046875,2,"valid",3102],[24.915283203125,0,"valid",311]],"time":2870.219970703125,"type":"sample"},{"compiler":[[8,6],[25,8],[25,8]],"confusion":[[255,0,0,1]],"explanations":[["log.f64","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","sensitivity",255,0,[],[[]]]],"fperrors":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",255,0,false,0,false],["(+.f64 #s(literal 1 binary64) eps)",0,0,false,0,false],["eps",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) eps)",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,0,1]],"memory":[[-2255600,50658864]],"mixsample":[[9.591064453125,"adjust",800],[3.91455078125,"ival-div",0],[3.349853515625,"ival-add",0],[1.123779296875,"ival-add",1600],[0.1962890625,"ival-log",400],[0.94189453125,"ival-sub",1600],[3.828369140625,"ival-div",400],[1.868408203125,"ival-div",1600],[0.217529296875,"ival-assert",0],[2.790771484375,"ival-add",400],[3.953369140625,"ival-sub",0],[0.577392578125,"ival-true",0],[83.559326171875,"ival-log",0],[2.765625,"ival-sub",400],[0.37158203125,"exact",0],[3.04248046875,"adjust",2000]],"outcomes":[[64.66796875,1,"valid",314],[82.98193359375,2,"valid",182],[1.4833984375,0,"valid",16]],"time":199.258056640625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,574,8,0.001540839],[10,574,8,0.003475647],[9,528,8,0.004935277],[8,331,8,0.003157549],[7,202,8,0.002059869],[6,129,8,0.001009412],[5,92,8,0.000567349],[4,58,8,0.000553905],[3,35,8,0.000240589],[2,24,8,0.000164952],[1,18,8,0.000125172],[0,10,8,0.000144003],[0,6,8,9.8302e-5]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"memory":[[-449072,15498432]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(log.f64 (/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":167.625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.073974609375,"type":"eval"},{"alts":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","next",58.90447876746536,"binary64"]],"compiler":[[8,6]],"memory":[[315248,315248]],"time":0.52490234375,"type":"prune"},{"egraph":[[0,574,23,0.001635857],[10,574,23,0.003374172],[9,528,23,0.004040402],[8,331,23,0.003068554],[7,202,23,0.001989463],[6,129,23,0.000822706],[5,92,23,0.000583588],[4,58,23,0.000504096],[3,35,23,0.00026875],[2,24,23,0.00018243],[1,18,23,0.000140765],[0,10,23,0.000180247],[0,6,23,9.7578e-5]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)"]],"locations":[["(+.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(-.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","cost-diff",0],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","cost-diff",0]],"memory":[[1383712,1383712]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(log.f64 (/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(/.f64 (-.f64 eps #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)","(-.f64 eps #s(literal -1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":25.842041015625,"type":"simplify"},{"compiler":[[25,8]],"locations":[["(-.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(+.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","accuracy",0.0078125],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","accuracy",58.892530981811575]],"memory":[[-4640736,12799984]],"mixsample":[[14.42236328125,"adjust",800],[6.28271484375,"ival-div",0],[26.140380859375,"ival-add",0],[0.59814453125,"ival-add",1600],[0.15283203125,"ival-log",400],[1.087646484375,"ival-sub",1600],[3.485595703125,"ival-div",400],[1.3720703125,"ival-div",1600],[0.190185546875,"ival-assert",0],[1.78759765625,"ival-add",400],[3.47900390625,"ival-sub",0],[0.41259765625,"ival-true",0],[103.26611328125,"ival-log",0],[2.464111328125,"ival-sub",400],[0.290771484375,"exact",0],[2.657958984375,"adjust",2000]],"outcomes":[[137.683349609375,1,"valid",157],[74.2119140625,2,"valid",91],[0.9560546875,0,"valid",8]],"time":241.80810546875,"type":"localize"},{"count":[[4,26]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[1193136,1193136]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"series":[[0.995849609375,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","-inf"],[1.071044921875,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","inf"],[1.530029296875,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","0"]],"time":4.0400390625,"type":"series"},{"count":[[26,25]],"egraph":[[0,8376,188,0.081041642],[5,6278,200,0.03401941],[4,2881,200,0.037732676],[3,1309,200,0.022447557],[2,488,204,0.008050974],[1,220,212,0.001804918],[0,89,218,0.000805081]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"memory":[[738480,26563456]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","1","#s(literal 1 binary64)","(+ 1 (* -2 eps))","(fma.f64 #s(literal -2 binary64) eps #s(literal 1 binary64))","(+ 1 (* eps (- (* 2 eps) 2)))","(fma.f64 (fma.f64 #s(literal 2 binary64) eps #s(literal -2 binary64)) eps #s(literal 1 binary64))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) eps #s(literal 2 binary64)) eps #s(literal -2 binary64)) eps #s(literal 1 binary64))","(+ 1 (* -1 eps))","(-.f64 #s(literal 1 binary64) eps)","(+ 1 eps)","(+.f64 #s(literal 1 binary64) eps)","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal -2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","-1","#s(literal -1 binary64)","(- (* 2 (/ 1 eps)) 1)","(-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 1 binary64))","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps)) eps))","(* -1 eps)","(neg.f64 eps)","(* eps (- (/ 1 eps) 1))","(-.f64 #s(literal 1 binary64) eps)","eps","(* eps (+ 1 (/ 1 eps)))","(+.f64 #s(literal 1 binary64) eps)","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps))","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) eps) #s(literal 2 binary64)) eps)) eps))","(* -1 (* eps (- 1 (/ 1 eps))))","(-.f64 #s(literal 1 binary64) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":308.642822265625,"type":"simplify"},{"count":[[4,60]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[-5229216,18970288]],"outputs":[["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(+.f64 (log1p.f64 (neg.f64 eps)) (neg.f64 (log1p.f64 eps)))","(+.f64 (neg.f64 (log1p.f64 eps)) (log1p.f64 (neg.f64 eps)))","(+.f64 (-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 (*.f64 (*.f64 eps eps) eps))) (log1p.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (log.f64 (+.f64 eps #s(literal -1 binary64))) (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) eps))))","(+.f64 (log.f64 (+.f64 eps #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) eps))))","(+.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (log1p.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 (*.f64 (neg.f64 eps) eps))) (log1p.f64 (neg.f64 eps)))","(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(-.f64 (log.f64 (+.f64 eps #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) eps)))","(-.f64 (log.f64 (-.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 eps eps eps))) (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 eps) eps)) (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 eps) (*.f64 eps eps))) (log.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) eps))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 eps) (*.f64 eps eps))) (-.f64 (log1p.f64 (fma.f64 eps eps eps)) (neg.f64 (log1p.f64 eps))))","(neg.f64 (/.f64 (+.f64 eps #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (/.f64 eps (-.f64 #s(literal -1 binary64) eps)))","(+.f64 (/.f64 eps (-.f64 #s(literal -1 binary64) eps)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))) (*.f64 (/.f64 eps (-.f64 #s(literal -1 binary64) eps)) (/.f64 eps (+.f64 #s(literal 1 binary64) eps))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 #s(literal -1 binary64) eps))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (neg.f64 eps)))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (*.f64 (/.f64 eps (-.f64 #s(literal -1 binary64) eps)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))) (neg.f64 (/.f64 (*.f64 eps eps) (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps)) (/.f64 (+.f64 eps #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) eps)))","(neg.f64 (+.f64 eps #s(literal -1 binary64)))","(+.f64 (neg.f64 eps) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 eps))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (neg.f64 (/.f64 (*.f64 eps eps) (+.f64 #s(literal 1 binary64) eps))))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)) (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(+.f64 (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) eps)","(-.f64 #s(literal 0 binary64) (+.f64 eps #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (/.f64 (*.f64 eps eps) (+.f64 #s(literal 1 binary64) eps)))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps))","(neg.f64 (-.f64 #s(literal -1 binary64) eps))","(+.f64 #s(literal 1 binary64) eps)","(+.f64 eps #s(literal 1 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps)) (neg.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal 1 binary64) eps))))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 eps eps eps)))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 eps eps #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 eps eps eps)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 eps (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (neg.f64 eps))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 eps #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 eps #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps)) (/.f64 (*.f64 eps eps) (-.f64 #s(literal 1 binary64) eps)))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64)))"]],"time":372.280029296875,"type":"rewrite"},{"compiler":[[1421,302]],"memory":[[7420800,7420800]],"time":9.64404296875,"type":"eval"},{"alts":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","done",58.90447876746536,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","next",0.12836878985425212,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","next",0.1454327472958257,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","next",0.16296831644610935,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","next",0.35030170511597725,"binary64"]],"compiler":[[8,6],[27,16],[22,14],[17,12],[12,9]],"count":[[80,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[79,4],"picked":[1,1]}],"memory":[[-5947408,3907040]],"min-error":[[0.0,"binary64"]],"time":4.511962890625,"type":"prune"},{"egraph":[[0,8045,199,0.118250428],[19,6903,199,0.036891967],[18,6903,199,0.040162482],[17,6903,199,0.039908132],[16,6827,199,0.04636357],[15,6805,199,0.028834809],[14,6805,199,0.01626182],[13,6762,199,0.016046566],[12,6149,199,0.022999669],[11,4268,199,0.028057807],[10,2201,199,0.014467252],[9,1974,199,0.009599508],[8,1611,199,0.01146541],[7,1269,199,0.009279102],[6,1026,199,0.004772651],[5,970,199,0.00323412],[4,646,199,0.003741315],[3,290,199,0.002165593],[2,138,199,0.001281045],[1,78,199,0.000703455],[0,42,199,0.000465943],[0,25,199,0.000273986]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","eps","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(literal -2/5 binary64)","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","#s(literal -2/7 binary64)","(*.f64 eps eps)","eps","#s(literal -2/5 binary64)","#s(literal -2/3 binary64)","#s(literal -2 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","cost-diff",0],["(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","cost-diff",0],["(*.f64 #s(literal -2 binary64) eps)","cost-diff",0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","cost-diff",0]],"memory":[[8481344,51835056]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(literal -2 binary64)","eps","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(fma.f64 #s(literal -2/3 binary64) (*.f64 eps eps) #s(literal -2 binary64))","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(literal -2/5 binary64)","(*.f64 eps eps)","eps","#s(literal -2/3 binary64)","#s(literal -2 binary64)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","#s(literal -2/7 binary64)","(*.f64 eps eps)","eps","#s(literal -2/5 binary64)","#s(literal -2/3 binary64)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":604.56396484375,"type":"simplify"},{"compiler":[[171,29]],"locations":[["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","accuracy",0.00390625],["(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","accuracy",0.0078125],["(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","accuracy",0.0078125],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","accuracy",0.12836878985497382],["(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","accuracy",0.0078125],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","accuracy",0.1454327472958257],["(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","accuracy",0.16296831644610935],["(*.f64 #s(literal -2 binary64) eps)","accuracy",0.0],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","accuracy",0.35030170511597725]],"memory":[[-8604928,46893680]],"mixsample":[[16.725830078125,"adjust",800],[1.95361328125,"ival-div",0],[2.221435546875,"ival-div",400],[0.6259765625,"ival-sub",1600],[0.12939453125,"ival-assert",0],[1.045654296875,"ival-div",1600],[2.117431640625,"ival-sub",0],[2.1005859375,"ival-sub",400],[17.975830078125,"const",0],[5.837890625,"adjust",2000],[16.13916015625,"ival-add",0],[31.90087890625,"ival-mult",0],[0.409912109375,"ival-add",1600],[0.10498046875,"ival-log",400],[1.53955078125,"ival-add",400],[46.133544921875,"ival-log",0],[0.32421875,"ival-true",0],[0.3857421875,"exact",0]],"outcomes":[[95.390625,1,"valid",157],[89.544677734375,2,"valid",91],[1.771240234375,0,"valid",8]],"time":292.489990234375,"type":"localize"},{"count":[[15,47]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))"]],"memory":[[4202704,4202704]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","-2","(- (* -2/3 (pow eps 2)) 2)","(pow eps 2)","(- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2)","-2/3","(- (* -2/5 (pow eps 2)) 2/3)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2)","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","-2/5","(- (* -2/7 (pow eps 2)) 2/5)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/3 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 6))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 6) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* -2/7 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))"]],"series":[[2.7939453125,"((log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) (+ (* -2/5 (* eps eps)) -2/3) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (+ (* -2/7 (* eps eps)) -2/5))","eps","-inf"],[4.26806640625,"((log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) (+ (* -2/5 (* eps eps)) -2/3) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (+ (* -2/7 (* eps eps)) -2/5))","eps","inf"],[1.9609375,"((log (/ (- 1 eps) (+ 1 eps))) (* -2 eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (* eps eps) -2/3) -2) eps) (+ (* (* eps eps) -2/3) -2) (* eps eps) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* -2/5 (* eps eps)) -2/3) (* eps eps)) -2) (+ (* -2/5 (* eps eps)) -2/3) (log (/ (- 1 eps) (+ 1 eps))) (* (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) eps) (+ (* (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (* eps eps)) -2) (+ (* (+ (* -2/7 (* eps eps)) -2/5) (* eps eps)) -2/3) (+ (* -2/7 (* eps eps)) -2/5))","eps","0"]],"time":10.2412109375,"type":"series"},{"count":[[47,47]],"egraph":[[0,8234,474,0.082524403],[4,7676,494,0.019467554],[3,3574,494,0.027467722],[2,1246,497,0.013046111],[1,353,509,0.003574543],[0,121,512,0.001226744]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","-2","(- (* -2/3 (pow eps 2)) 2)","(pow eps 2)","(- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2)","-2/3","(- (* -2/5 (pow eps 2)) 2/3)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2)","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","-2/5","(- (* -2/7 (pow eps 2)) 2/5)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(* -2/3 (pow eps 3))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/3 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(* -2/5 (pow eps 5))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(* -2/5 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 7))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 6))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* (pow eps 6) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* -2/7 (pow eps 4))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(* -2/7 (pow eps 2))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))"]],"memory":[[4191136,36503296]],"method":["egg-herbie"],"outputs":[["(* -2 eps)","(*.f64 #s(literal -2 binary64) eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","-2","#s(literal -2 binary64)","(- (* -2/3 (pow eps 2)) 2)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(pow eps 2)","(*.f64 eps eps)","(- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","-2/3","#s(literal -2/3 binary64)","(- (* -2/5 (pow eps 2)) 2/3)","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","-2/5","#s(literal -2/5 binary64)","(- (* -2/7 (pow eps 2)) 2/5)","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","(log -1)","(log.f64 #s(literal -1 binary64))","(- (log -1) (* 2 (/ 1 eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) eps))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps)) #s(literal 2 binary64)) eps))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(-.f64 (/.f64 #s(literal -2 binary64) eps) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (log.f64 #s(literal -1 binary64))))","(* -2/3 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -2/3 binary64))","(* -1 (* (pow eps 3) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(* -2/3 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -2/3 binary64))","(* -1 (* (pow eps 2) (+ 2/3 (* 2 (/ 1 (pow eps 2))))))","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(* -2/5 (pow eps 5))","(*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -2/5 binary64))","(* -1 (* (pow eps 5) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 5 binary64)))","(* (pow eps 5) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/3 binary64) (/.f64 (/.f64 #s(literal 2 binary64) eps) eps)) eps) eps) #s(literal 2/5 binary64)) (pow.f64 eps #s(literal 5 binary64)))","(* -2/5 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/5 binary64))","(* -1 (* (pow eps 4) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 2))) 2/5))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/3 binary64) (/.f64 (/.f64 #s(literal 2 binary64) eps) eps)) eps) eps) #s(literal 2/5 binary64)))","(* -2/5 (pow eps 2))","(*.f64 #s(literal -2/5 binary64) (*.f64 eps eps))","(* -1 (* (pow eps 2) (+ 2/5 (* 2/3 (/ 1 (pow eps 2))))))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","(* -2/7 (pow eps 7))","(*.f64 (pow.f64 eps #s(literal 7 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 7) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)) (pow.f64 eps #s(literal 7 binary64)))","(* (pow eps 7) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 7 binary64)))","(* -2/7 (pow eps 6))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 6) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)))","(* (pow eps 6) (- (* -1 (/ (+ 2/3 (* 2 (/ 1 (pow eps 2)))) (pow eps 4))) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (-.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (/.f64 (+.f64 (/.f64 (/.f64 #s(literal 2 binary64) eps) eps) #s(literal 2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))))","(* -2/7 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -2/7 binary64))","(* -1 (* (pow eps 4) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(*.f64 (-.f64 #s(literal -2/7 binary64) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* -1 (/ (+ 2/5 (* 2/3 (/ 1 (pow eps 2)))) (pow eps 2))) 2/7))","(*.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal -2/5 binary64) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps) eps) #s(literal 2/7 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* -2/7 (pow eps 2))","(*.f64 #s(literal -2/7 binary64) (*.f64 eps eps))","(* -1 (* (pow eps 2) (+ 2/7 (* 2/5 (/ 1 (pow eps 2))))))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2/5 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) eps))","(* -1 (* (pow eps 5) (+ 2/5 (+ (* 2/3 (/ 1 (pow eps 2))) (/ 2 (pow eps 4))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal -2 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -2/5 binary64)) (/.f64 #s(literal 2/3 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 5 binary64)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (* 2/5 (/ 1 (pow eps 2)))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -2/7 binary64)) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 7 binary64)))","(* -1 (* (pow eps 7) (+ 2/7 (+ (/ 2/3 (pow eps 4)) (+ (* 2/5 (/ 1 (pow eps 2))) (* 2 (/ 1 (pow eps 6))))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal -2/7 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 eps #s(literal 6 binary64))) (/.f64 #s(literal 2/5 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 7 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":265.6298828125,"type":"simplify"},{"count":[[15,158]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64))","(*.f64 eps eps)","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64))","(fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))","(fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64))"]],"memory":[[-7787088,76660928]],"outputs":[["#s(approx (log (/ (+ -1 eps) (- -1 eps))) (*.f64 #s(literal -2 binary64) eps))","(*.f64 #s(literal -2 binary64) eps)","(*.f64 eps #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (+ -1 eps) (- -1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(+.f64 (*.f64 (*.f64 eps #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (*.f64 eps #s(literal -2/3 binary64)) (*.f64 eps eps)))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps)","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","(*.f64 eps (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) #s(literal 1 binary64)) eps)","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) eps) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) (/.f64 eps (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) eps) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/27 binary64) #s(literal 8 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 4/9 binary64)) (*.f64 eps eps) (fma.f64 (*.f64 eps #s(literal 4/3 binary64)) eps #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) eps) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/27 binary64) #s(literal -8 binary64)) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/9 binary64)) #s(literal 4/3 binary64)) #s(literal 4 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))) eps))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/27 binary64) #s(literal -8 binary64)) (/.f64 eps (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/9 binary64)) #s(literal 4/3 binary64)) #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/27 binary64) #s(literal -8 binary64)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps)))) #s(literal 64/729 binary64)))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -4/3 binary64) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64))) (*.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal 16/81 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/27 binary64) #s(literal -8 binary64))) (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/9 binary64)) #s(literal 4/3 binary64)) #s(literal 4 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/27 binary64) #s(literal -8 binary64)) (neg.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/9 binary64)) #s(literal 4/3 binary64)) #s(literal 4 binary64)))))","(+.f64 (*.f64 (*.f64 eps #s(literal -2/3 binary64)) eps) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (*.f64 (*.f64 eps #s(literal -2/3 binary64)) eps))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64)) (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64)) (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 4 binary64) (+.f64 #s(literal -2 binary64) (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64)) (+.f64 #s(literal -2 binary64) (*.f64 (*.f64 eps eps) #s(literal 2/3 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/27 binary64) #s(literal 8 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 4/9 binary64)) (*.f64 eps eps) (fma.f64 (*.f64 eps #s(literal 4/3 binary64)) eps #s(literal 4 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/3 binary64) #s(literal -2 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/9 binary64) #s(literal -4 binary64)))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) (/.f64 (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64)) (fma.f64 (*.f64 eps #s(literal -2/3 binary64)) eps #s(literal 2 binary64))))","(neg.f64 (*.f64 (neg.f64 eps) eps))","(*.f64 eps eps)","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 (pow.f64 eps #s(literal 1 binary64)) (pow.f64 eps #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 eps eps))","(*.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) eps)","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 eps) eps))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(exp.f64 (+.f64 #s(literal 0 binary64) (*.f64 (log.f64 eps) #s(literal 2 binary64))))","(pow.f64 eps #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 (pow.f64 eps #s(literal 1 binary64)) #s(literal 2 binary64))","#s(approx (log (/ (+ -1 eps) (- -1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(+.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) eps)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) eps)))","(*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 eps (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (/.f64 eps (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) #s(literal 1 binary64)) eps)","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)) #s(literal -8 binary64)) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) eps) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) eps) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)) #s(literal 8 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -2 binary64)) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal 4 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) eps))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)) #s(literal -8 binary64)) (/.f64 eps (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)) #s(literal -8 binary64)) eps) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 (-.f64 #s(literal -2 binary64) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (-.f64 #s(literal -2 binary64) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))))) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal 2 binary64) #s(literal 4 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal 6 binary64)))) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal 2 binary64) #s(literal 4 binary64)) (-.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal 2 binary64) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)))) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) #s(literal -2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)) #s(literal -8 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps)) #s(literal -8 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))))","(+.f64 (*.f64 (*.f64 eps #s(literal -2/3 binary64)) eps) (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) (*.f64 (*.f64 eps eps) eps) #s(literal -2 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 eps eps) eps) (*.f64 eps #s(literal -2/5 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)))","(+.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) (*.f64 (*.f64 (*.f64 eps eps) eps) (*.f64 eps #s(literal -2/5 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -2 binary64))","(+.f64 (+.f64 #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 eps eps) eps) (*.f64 eps #s(literal -2/5 binary64)))) (*.f64 (*.f64 eps #s(literal -2/3 binary64)) eps))","(+.f64 #s(literal -2 binary64) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)))) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (-.f64 #s(literal -2 binary64) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 2/5 binary64) #s(literal -2/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/125 binary64) #s(literal -8/27 binary64))) (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/25 binary64)) #s(literal 4/15 binary64)) #s(literal 4/9 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64) #s(literal -4/9 binary64))) (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) eps #s(literal 2/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/125 binary64) #s(literal -8/27 binary64)) (neg.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/25 binary64)) #s(literal 4/15 binary64)) #s(literal 4/9 binary64)))))","(+.f64 (*.f64 (*.f64 eps #s(literal -2/5 binary64)) eps) #s(literal -2/3 binary64))","(+.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps #s(literal -2/5 binary64)) eps))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64)) (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) eps #s(literal 2/3 binary64))) (neg.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) eps #s(literal 2/3 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64)) (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) eps #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) eps #s(literal 2/3 binary64))))","(-.f64 (/.f64 #s(literal 4/9 binary64) (+.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) #s(literal 2/5 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64)) (+.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 eps eps) #s(literal 2/5 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64) #s(literal -4/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/5 binary64) #s(literal -2/3 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64) #s(literal -4/9 binary64))) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/125 binary64) #s(literal 8/27 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 4/25 binary64)) (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal 4/15 binary64) #s(literal 4/9 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/5 binary64) #s(literal -2/3 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/25 binary64) #s(literal -4/9 binary64)))","(*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (/.f64 (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) eps #s(literal 2/3 binary64)) (fma.f64 (*.f64 eps #s(literal -2/5 binary64)) eps #s(literal 2/3 binary64))))","#s(approx (log (/ (+ -1 eps) (- -1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) eps)) (*.f64 #s(literal -2 binary64) eps))","(+.f64 (*.f64 #s(literal -2 binary64) eps) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) eps)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps)","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (/.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) #s(literal 1 binary64)) eps)","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8 binary64)) (/.f64 eps (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8 binary64)) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) eps))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) eps) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) eps) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal 8 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 (*.f64 eps eps) (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 eps eps) #s(literal -2 binary64)) #s(literal 4 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))) eps))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (neg.f64 eps) eps) #s(literal -2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64))) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)) #s(literal 4 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -2 binary64))","(+.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)))","(+.f64 #s(literal -2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)))","(+.f64 (*.f64 (*.f64 eps #s(literal -2/3 binary64)) eps) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal -2 binary64)))","(+.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))))","(+.f64 (+.f64 #s(literal -2 binary64) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps)))) (*.f64 (*.f64 eps #s(literal -2/3 binary64)) eps))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)))) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps))) (-.f64 #s(literal -2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps)) #s(literal -4 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal 2 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) #s(literal -4/9 binary64)) (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) #s(literal -2/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) #s(literal -4/9 binary64))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) eps)) #s(literal -8/27 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 4/9 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) (*.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) eps) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) eps)) #s(literal -8/27 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)) #s(literal 4/9 binary64))))","(+.f64 (*.f64 (*.f64 eps #s(literal -2/5 binary64)) eps) (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) (*.f64 (*.f64 eps eps) eps) #s(literal -2/3 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 eps eps) eps) (*.f64 eps #s(literal -2/7 binary64))) (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)))","(+.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 (*.f64 (*.f64 eps eps) eps) (*.f64 eps #s(literal -2/7 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) #s(literal -2/3 binary64))","(+.f64 (+.f64 #s(literal -2/3 binary64) (*.f64 (*.f64 (*.f64 eps eps) eps) (*.f64 eps #s(literal -2/7 binary64)))) (*.f64 (*.f64 eps #s(literal -2/5 binary64)) eps))","(+.f64 #s(literal -2/3 binary64) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (neg.f64 (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps))) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))) (/.f64 #s(literal 4/9 binary64) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal 2/3 binary64))))","(-.f64 (/.f64 #s(literal 4/9 binary64) (-.f64 #s(literal -2/3 binary64) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)))) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps))) (-.f64 #s(literal -2/3 binary64) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps)) #s(literal -4/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (neg.f64 eps) eps) (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) #s(literal -2/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64) #s(literal -4/25 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 2/7 binary64) #s(literal -2/5 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/343 binary64) #s(literal -8/125 binary64))) (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/49 binary64)) #s(literal 4/35 binary64)) #s(literal 4/25 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64) #s(literal -4/25 binary64))) (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) eps #s(literal 2/5 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/343 binary64) #s(literal -8/125 binary64)) (neg.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 4/49 binary64)) #s(literal 4/35 binary64)) #s(literal 4/25 binary64)))))","(+.f64 (*.f64 (*.f64 eps #s(literal -2/7 binary64)) eps) #s(literal -2/5 binary64))","(+.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps #s(literal -2/7 binary64)) eps))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64)) (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) eps #s(literal 2/5 binary64))) (neg.f64 (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) eps #s(literal 2/5 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64)) (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) eps #s(literal 2/5 binary64))) (/.f64 #s(literal 4/25 binary64) (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) eps #s(literal 2/5 binary64))))","(-.f64 (/.f64 #s(literal 4/25 binary64) (+.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal 2/7 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64)) (+.f64 #s(literal -2/5 binary64) (*.f64 (*.f64 eps eps) #s(literal 2/7 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64) #s(literal -4/25 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/7 binary64) #s(literal -2/5 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64) #s(literal -4/25 binary64)) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64) #s(literal -4/25 binary64))) (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64) #s(literal -4/25 binary64)) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 eps eps))) #s(literal -8/343 binary64) #s(literal 8/125 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 4/49 binary64)) (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal 4/35 binary64) #s(literal 4/25 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 2/7 binary64) #s(literal -2/5 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) (*.f64 eps eps)) #s(literal 4/49 binary64) #s(literal -4/25 binary64)))","(*.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (/.f64 (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) eps #s(literal 2/5 binary64)) (fma.f64 (*.f64 eps #s(literal -2/7 binary64)) eps #s(literal 2/5 binary64))))"]],"time":2503.125,"type":"rewrite"},{"compiler":[[10147,1271]],"memory":[[2425072,28447520]],"time":40.1650390625,"type":"eval"},{"alts":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","done",58.90447876746536,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.12836878985425212,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","done",0.1454327472958257,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","done",0.16296831644610935,"binary64"],["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","done",0.35030170511597725,"binary64"]],"compiler":[[86,30],[8,6],[27,16],[22,14],[17,12],[12,9]],"count":[[287,5]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[282,0],"picked":[4,4]}],"memory":[[4732048,12625648]],"min-error":[[0.0,"binary64"]],"time":7.718017578125,"type":"prune"},{"accuracy":[0.12836878985425212],"baseline":[0.12836878985425212],"branch":[["eps",0.12836878985425212,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.12836878985425212,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.12836878985425212,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[5,1]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"memory":[[-3486960,4753744]],"oracle":[59.14893256336535],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":5.56787109375,"times":[[1.68310546875,"eps"],[1.52783203125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.778076171875,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.1454327472958257],"baseline":[0.1454327472958257],"branch":[["eps",0.1454327472958257,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.1454327472958257,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.1454327472958257,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[3,1]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"]],"memory":[[-6233312,4145664]],"oracle":[0.35030170511597725],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":4.84619140625,"times":[[1.35400390625,"eps"],[1.27197265625,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.358154296875,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.16296831644610935],"baseline":[0.16296831644610935],"branch":[["eps",0.16296831644610935,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.16296831644610935,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.16296831644610935,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[2,1]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"]],"memory":[[3816976,3816976]],"oracle":[0.35030170511597725],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":3.615966796875,"times":[[1.120849609375,"eps"],[0.98388671875,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[1.11181640625,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[0.35030170511597725],"baseline":[0.35030170511597725],"branch":[["eps",0.35030170511597725,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.35030170511597725,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.35030170511597725,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[1,1]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"link":["."],"memory":[[3615248,3615248]],"name":["logq (problem 3.4.3)"],"oracle":[0.35030170511597725],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"repr":["binary64"],"time":3.14892578125,"times":[[1.144775390625,"eps"],[0.822021484375,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[0.805908203125,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"egraph":[[9,7261,78,0.017543221],[8,5617,78,0.057049597],[7,573,78,0.018678562],[6,224,78,0.002510295],[5,123,78,0.001118819],[4,80,78,0.00075383],[3,51,78,0.0005789],[2,39,78,0.00046512],[1,33,78,0.000431925],[0,25,78,0.000541769]],"inputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"memory":[[-6248512,10005840]],"method":["egg-herbie"],"outputs":[["#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))","#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"]],"stop":[["node limit",1]],"time":123.570068359375,"type":"simplify"},{"compiler":[[78,25]],"memory":[[687744,687744]],"stop":[["done",1]],"time":1.092041015625,"type":"soundness"},{"compiler":[[78,25],[78,25],[6,5],[6,5],[8,6],[8,6]],"memory":[[1322464,25766672]],"remove-preprocessing":[[],[],[],[],[]],"time":45.64990234375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02197265625,"type":"end"}]