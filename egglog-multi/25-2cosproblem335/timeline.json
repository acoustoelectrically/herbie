[{"memory":[[27264,27264]],"time":0.041015625,"type":"start"},{"compiler":[[27,19]],"memory":[[-3582368,12740880]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":50.88916015625,"type":"analyze"},{"bogosity":[{"invalid":0.49935711501970126,"precondition":0.4942799140699208,"valid":0.006362970910377951}],"memory":[[75768936,1818309696]],"mixsample":[[261.116943359375,"adjust",800],[1694.7998046875,"ival-cos",1600],[15.5029296875,"ival-assert",0],[272.940185546875,"ival-sub",0],[589.105224609375,"ival-cos",0],[118.2587890625,"ival-and",0],[0.031982421875,"ival-sub",400],[622.478515625,"const",0],[221.50390625,"ival-cos",400],[149.212158203125,"adjust",2000],[382.784423828125,"ival-add",0],[0.027587890625,"ival-sub",800],[268.703857421875,"ival-mult",0],[215.46923828125,"ival-fabs",0],[3.28857421875,"ival-add",400],[230.842041015625,"ival-<=",0],[50.35107421875,"exact",0],[1.78564453125,"ival-add",800],[184.49169921875,"ival-<",0]],"outcomes":[[507.255615234375,1,"valid",2516],[3067.814453125,0,"invalid",26347],[2918.922607421875,2,"valid",5617],[19.11962890625,0,"valid",123]],"time":8060.216064453125,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[129,0,1,126]],"explanations":[["cos.f64","(cos.f64 (+.f64 x eps))","sensitivity",2,3,[],[[1]]],["-.f64","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cancellation",130,0,[],[[]]]],"fperrors":[["(cos.f64 (+.f64 x eps))",2,0,false,0,false],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",129,1,[6.986865054185688e-155,1.0975132715038209e-169],0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,2],[1,128],[0,126]],"maybe-confusion":[[129,0,0,1,0,126]],"memory":[[-3383056,46285360]],"mixsample":[[13.2880859375,"adjust",800],[3.718505859375,"ival-add",0],[101.43798828125,"ival-cos",1600],[0.269775390625,"ival-assert",0],[0.25244140625,"ival-add",400],[7.672607421875,"ival-sub",0],[0.56005859375,"ival-true",0],[11.8037109375,"ival-cos",0],[13.52783203125,"ival-cos",400],[0.106201171875,"ival-add",800],[8.31787109375,"adjust",2000]],"outcomes":[[25.986083984375,1,"valid",154],[163.246337890625,2,"valid",350],[1.138916015625,0,"valid",8]],"time":244.10595703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.00067178],[10,183,7,0.000733988],[9,175,7,0.000863833],[8,159,7,0.000980173],[7,110,7,0.000993675],[6,80,7,0.000814552],[5,47,7,0.000447497],[4,32,7,0.000233167],[3,24,7,0.000177947],[2,18,7,0.000128761],[1,13,7,0.000124269],[0,10,7,0.00012883],[0,6,7,9.8021e-5]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"memory":[[6931280,15169360]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":150.0078125,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.076171875,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","next",28.92463127624881,"binary64"]],"compiler":[[7,6]],"memory":[[301568,301568]],"time":0.423828125,"type":"prune"},{"egraph":[[0,183,18,0.000629656],[10,183,18,0.001286091],[9,175,18,0.001238277],[8,159,18,0.001335467],[7,110,18,0.001270125],[6,80,18,0.001122396],[5,47,18,0.000446774],[4,32,18,0.00023869],[3,24,18,0.000229519],[2,18,18,0.000224114],[1,13,18,0.000162849],[0,10,18,0.000185342],[0,6,18,9.2616e-5]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(cos.f64 x)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(cos.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cost-diff",0]],"memory":[[-8494096,827776]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(cos.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":18.258056640625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(cos.f64 x)","accuracy",0.0078125],["(cos.f64 (+.f64 x eps))","accuracy",0.09830508025806203],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","accuracy",28.780718606999663]],"memory":[[5010432,12986576]],"mixsample":[[6.174560546875,"adjust",800],[1.70947265625,"ival-add",0],[52.45263671875,"ival-cos",1600],[0.113037109375,"ival-assert",0],[0.1259765625,"ival-add",400],[3.961181640625,"ival-sub",0],[0.301025390625,"ival-true",0],[5.27392578125,"ival-cos",0],[6.90283203125,"ival-cos",400],[0.060791015625,"ival-add",800],[3.933349609375,"adjust",2000]],"outcomes":[[13.392822265625,1,"valid",77],[83.75927734375,2,"valid",175],[0.5810546875,0,"valid",4]],"time":105.864990234375,"type":"localize"},{"count":[[4,33]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[1886000,1886000]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.5859375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","-inf"],[0.737060546875,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","inf"],[1.01416015625,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","0"],[0.33984375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","-inf"],[0.467041015625,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","inf"],[0.958984375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","0"]],"time":4.570068359375,"type":"series"},{"count":[[33,31]],"egraph":[[0,8397,272,0.084076451],[3,2426,292,0.033584115],[2,628,293,0.008783398],[1,277,293,0.001840804],[0,105,296,0.000970603]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[2929312,39432816]],"method":["egg-herbie"],"outputs":[["(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(-.f64 (cos.f64 eps) (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 eps) (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/2 binary64))) x (cos.f64 eps))","eps","(+ eps x)","(+.f64 eps x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (+ eps x))","(cos.f64 (+.f64 eps x))","x","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(cos x)","(cos.f64 x)","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (- eps (* -1 x)))","(cos.f64 (+.f64 eps x))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(+ (cos x) (* -1 (* eps (sin x))))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(fma.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps (cos.f64 x))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (- x (* -1 eps)))","(cos.f64 (+.f64 eps x))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":224.615966796875,"type":"simplify"},{"count":[[4,46]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[-6225952,16173712]],"outputs":[["(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(+.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(+.f64 (/.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (neg.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(-.f64 (+.f64 (cos.f64 (+.f64 x eps)) #s(literal 0 binary64)) (cos.f64 x))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (cos.f64 (-.f64 x eps))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (cos.f64 (-.f64 x eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))","(*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps))))","(*.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (cos.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))) (neg.f64 (cos.f64 (-.f64 x eps))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))))","(/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 x eps))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) #s(literal 4 binary64))","(neg.f64 (/.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps)) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps)))","(+.f64 x eps)","(+.f64 eps x)","(+.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (neg.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(*.f64 #s(literal 1 binary64) (+.f64 x eps))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (/.f64 #s(literal 1 binary64) (-.f64 x eps)))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 x eps) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x eps))))","(cos.f64 x)"]],"time":427.948974609375,"type":"rewrite"},{"compiler":[[1390,288]],"memory":[[-1353328,6571376]],"time":10.77099609375,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","fresh",28.928132045759785,"binary64"],["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","next",28.792255436423666,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",28.92463127624881,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","fresh",29.887414379864612,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","fresh",12.259177175106466,"binary64"],["(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","fresh",28.788349186423666,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","next",29.92895921867367,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","next",0.3808396474994598,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","next",0.3139078864440439,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","fresh",0.5059482529752721,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","next",12.694982832394556,"binary64"]],"compiler":[[19,12],[13,9],[7,6],[9,8],[16,12],[15,11],[12,10],[25,18],[31,20],[19,14],[13,10],[19,12],[13,9],[9,8],[16,12],[15,11],[12,10],[25,18],[31,20],[19,14],[13,10]],"count":[[70,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[69,10],"picked":[1,1]}],"memory":[[6710736,6710736]],"min-error":[[0.1474276054156295,"binary64"]],"time":9.72802734375,"type":"prune"},{"egraph":[[0,8466,302,0.152978828],[19,7930,307,0.019772582],[18,6738,307,0.051862991],[17,6738,307,0.039566983],[16,6737,307,0.039475261],[15,6732,307,0.052985308],[14,6721,307,0.046366183],[13,6697,307,0.041451202],[12,6594,307,0.041311454],[11,6194,307,0.043461043],[10,6187,307,0.022582829],[9,6149,307,0.02221931],[8,6056,307,0.025735492],[7,5454,307,0.027399432],[6,3970,307,0.033647874],[5,1769,307,0.020362375],[4,915,307,0.008062158],[3,442,307,0.004524221],[2,207,307,0.001905392],[1,112,307,0.000976575],[0,66,307,0.000662693],[0,38,307,0.000490659]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps)","(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(sin.f64 x)","x","#s(literal 1/6 binary64)","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","eps","#s(literal 1/24 binary64)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","eps","#s(literal 1 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","(cos.f64 x)","#s(literal -1/2 binary64)","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 x)","x","(cos.f64 eps)","eps","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))","(sin.f64 x)","(sin.f64 eps)"]],"locations":[["(cos.f64 eps)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(*.f64 (cos.f64 x) (cos.f64 eps))","cost-diff",0],["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","cost-diff",0],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(neg.f64 (sin.f64 x))","cost-diff",0],["(*.f64 (neg.f64 (sin.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","cost-diff",0],["(cos.f64 eps)","cost-diff",0],["(-.f64 (cos.f64 eps) #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","cost-diff",0],["(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","cost-diff",0],["(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","cost-diff",1]],"memory":[[1249776,64528672]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","(-.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps) (sin.f64 x))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps)","(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)))","(sin.f64 x)","x","#s(literal 1/6 binary64)","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","eps","#s(literal 1/24 binary64)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","eps","#s(literal 1 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(*.f64 (neg.f64 eps) (sin.f64 x))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (neg.f64 eps)))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (neg.f64 eps))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)","(*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","(cos.f64 x)","#s(literal -1/2 binary64)","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(*.f64 (cos.f64 eps) (cos.f64 x))","(cos.f64 x)","x","(cos.f64 eps)","eps","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))","(fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))","(sin.f64 x)","(sin.f64 eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":849.22998046875,"type":"simplify"},{"compiler":[[272,40]],"locations":[["(cos.f64 eps)","accuracy",0.0],["(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))","accuracy",0.0078125],["(cos.f64 x)","accuracy",0.0078125],["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","accuracy",28.77375625155713],["(cos.f64 x)","accuracy",0.0078125],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","accuracy",0.015625],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","accuracy",0.125],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","accuracy",0.2607733755466384],["(sin.f64 x)","accuracy",0.0],["(neg.f64 (sin.f64 x))","accuracy",0.0],["(*.f64 (neg.f64 (sin.f64 x)) eps)","accuracy",0.0078125],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","accuracy",12.694944276753837],["(cos.f64 eps)","accuracy",0.0],["(-.f64 (cos.f64 eps) #s(literal 1 binary64))","accuracy",28.825664683588585],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","accuracy",29.2735136468092],["(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","accuracy",0.125],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","accuracy",0.1928138142758286],["(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","accuracy",0.33984375],["(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","accuracy",0.33984375]],"memory":[[-12604560,83523264]],"mixsample":[[21.17724609375,"adjust",800],[83.888427734375,"ival-cos",1600],[0.02880859375,"const",400],[0.154541015625,"ival-assert",0],[13.836181640625,"ival-sub",0],[7.169189453125,"ival-cos",0],[0.005126953125,"ival-sub",400],[10.732177734375,"const",0],[13.84619140625,"ival-cos",400],[102.30029296875,"adjust",2000],[0.2841796875,"ival-mult",800],[14.280517578125,"ival-add",0],[0.0048828125,"ival-sub",800],[0.06982421875,"ival-cos",800],[2.385498046875,"ival-sin",400],[1.83740234375,"ival-mult",400],[52.666015625,"ival-mult",0],[0.807373046875,"ival-add",1600],[1.8955078125,"ival-mult",1600],[6.4658203125,"ival-sin",0],[1.144775390625,"ival-add",400],[0.30029296875,"ival-true",0],[0.083740234375,"ival-add",800],[10.555908203125,"ival-sin",800],[0.494384765625,"exact",0],[2.778564453125,"ival-neg",0]],"outcomes":[[53.604736328125,1,"valid",73],[352.11474609375,2,"valid",180],[1.19580078125,0,"valid",3]],"time":455.781005859375,"type":"localize"},{"count":[[20,123]],"inputs":[["(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 x)","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))"]],"memory":[[-4016048,13551440]],"outputs":[["(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (+ (* -1/36 (* eps x)) (* -1/48 (pow eps 2)))))))) 1/2)","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* eps (* x (+ 1/4 (* -1/48 (pow eps 2)))))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* eps (+ 1/4 (* -1/48 (pow eps 2)))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(cos eps)","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* 1/24 eps)","(+ (* -1/48 (* eps (pow x 2))) (* 1/24 eps))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/576 (* eps (pow x 2))))))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* (pow x 2) (+ (* -1/17280 (* eps (pow x 2))) (* 1/576 eps))))))","(+ (* 1/24 eps) (* 1/6 x))","(+ (* 1/24 eps) (* x (+ 1/6 (* -1/48 (* eps x)))))","(+ (* 1/24 eps) (* x (+ 1/6 (* x (+ (* -1/36 x) (* -1/48 eps))))))","(+ 1 (* x (sin eps)))","(+ 1 (* x (+ (sin eps) (* -1/2 x))))","(+ 1 (* x (+ (sin eps) (* x (- (* -1/6 (* x (sin eps))) 1/2)))))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(- (cos (+ eps x)) (cos x))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(sin x)","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(- (* (cos eps) (cos x)) (+ (cos x) (* (sin eps) (sin x))))","(* (cos eps) (cos x))","(cos x)","(* 1/24 (* eps (cos x)))","(+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))","(+ (cos x) (* (sin eps) (sin x)))","(- (cos (- eps (* -1 x))) (cos x))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(- (* -1/2 (* eps (cos x))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(* 1/6 (sin x))","(+ (cos x) (* eps (sin x)))","(+ (cos x) (* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x))))))","(+ (cos x) (* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x))))))))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* eps (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* eps (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))"]],"series":[[5.083984375,"((+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos x) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (+ (* (sin x) (sin eps)) (cos x)))","eps","-inf"],[3.89599609375,"((+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos x) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (+ (* (sin x) (sin eps)) (cos x)))","eps","inf"],[6.5888671875,"((+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos x) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (+ (* (sin x) (sin eps)) (cos x)))","eps","0"],[4.98681640625,"((+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos x) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (+ (* (sin x) (sin eps)) (cos x)))","x","-inf"],[8.232177734375,"((+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos x) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (+ (* (sin x) (sin eps)) (cos x)))","x","inf"],[4.056884765625,"((+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos x) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (+ (* (sin x) (sin eps)) (cos x)))","x","0"]],"time":35.073974609375,"type":"series"},{"count":[[123,122]],"egraph":[[0,8704,1668,0.103714854],[2,4176,1845,0.025029835],[1,1352,1910,0.014500652],[0,422,1964,0.004296934]],"inputs":[["(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (+ (* -1/36 (* eps x)) (* -1/48 (pow eps 2)))))))) 1/2)","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* eps (* x (+ 1/4 (* -1/48 (pow eps 2)))))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* eps (+ 1/4 (* -1/48 (pow eps 2)))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(cos eps)","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* 1/24 eps)","(+ (* -1/48 (* eps (pow x 2))) (* 1/24 eps))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/576 (* eps (pow x 2))))))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* (pow x 2) (+ (* -1/17280 (* eps (pow x 2))) (* 1/576 eps))))))","(+ (* 1/24 eps) (* 1/6 x))","(+ (* 1/24 eps) (* x (+ 1/6 (* -1/48 (* eps x)))))","(+ (* 1/24 eps) (* x (+ 1/6 (* x (+ (* -1/36 x) (* -1/48 eps))))))","(+ 1 (* x (sin eps)))","(+ 1 (* x (+ (sin eps) (* -1/2 x))))","(+ 1 (* x (+ (sin eps) (* x (- (* -1/6 (* x (sin eps))) 1/2)))))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(- (cos (+ eps x)) (cos x))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(sin x)","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(- (* (cos eps) (cos x)) (+ (cos x) (* (sin eps) (sin x))))","(* (cos eps) (cos x))","(cos x)","(* 1/24 (* eps (cos x)))","(+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))","(+ (cos x) (* (sin eps) (sin x)))","(- (cos (- eps (* -1 x))) (cos x))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(- (* -1/2 (* eps (cos x))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(* 1/6 (sin x))","(+ (cos x) (* eps (sin x)))","(+ (cos x) (* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x))))))","(+ (cos x) (* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x))))))))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* eps (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* eps (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))"]],"memory":[[10769456,53981968]],"method":["egg-herbie"],"outputs":[["(- (* 1/24 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (+ (* -1/36 (* eps x)) (* -1/48 (pow eps 2)))))))) 1/2)","(fma.f64 (fma.f64 (fma.f64 eps (fma.f64 #s(literal -1/36 binary64) x (*.f64 #s(literal -1/48 binary64) eps)) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)) #s(literal -1 binary64) (cos.f64 eps))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* eps (* x (+ 1/4 (* -1/48 (pow eps 2)))))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* eps (+ 1/4 (* -1/48 (pow eps 2)))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))","(* -1 (* eps x))","(*.f64 (neg.f64 x) eps)","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 (neg.f64 x) eps))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(*.f64 (fma.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))))) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* -1/2 (pow eps 2))","(*.f64 #s(literal -1/2 binary64) (*.f64 eps eps))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (cos.f64 eps))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(fma.f64 (*.f64 (cos.f64 eps) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) (cos.f64 eps))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (cos.f64 eps) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 eps) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)))))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* 1/24 eps)","(*.f64 #s(literal 1/24 binary64) eps)","(+ (* -1/48 (* eps (pow x 2))) (* 1/24 eps))","(*.f64 eps (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/576 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/48 binary64))) (*.f64 x x) (*.f64 #s(literal 1/24 binary64) eps))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* (pow x 2) (+ (* -1/17280 (* eps (pow x 2))) (* 1/576 eps))))))","(fma.f64 eps (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal -1/17280 binary64) (*.f64 x x) #s(literal 1/576 binary64)))))","(+ (* 1/24 eps) (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps))","(+ (* 1/24 eps) (* x (+ 1/6 (* -1/48 (* eps x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) x #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/24 binary64) eps))","(+ (* 1/24 eps) (* x (+ 1/6 (* x (+ (* -1/36 x) (* -1/48 eps))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) x (*.f64 #s(literal -1/48 binary64) eps)) x #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/24 binary64) eps))","(+ 1 (* x (sin eps)))","(fma.f64 (sin.f64 eps) x #s(literal 1 binary64))","(+ 1 (* x (+ (sin eps) (* -1/2 x))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x (sin.f64 eps)) x #s(literal 1 binary64))","(+ 1 (* x (+ (sin eps) (* x (- (* -1/6 (* x (sin eps))) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64)) x (sin.f64 eps)) x #s(literal 1 binary64))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x)))","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(sin x)","(sin.f64 x)","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(- (* (cos eps) (cos x)) (+ (cos x) (* (sin eps) (sin x))))","(fma.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(* (cos eps) (cos x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(cos x)","(cos.f64 x)","(* 1/24 (* eps (cos x)))","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(+ (cos x) (* (sin eps) (sin x)))","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1/2 (cos x))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(- (* -1/2 (* eps (cos x))) (sin x))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64)) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)) (cos.f64 x))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(fma.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64)) (cos.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (cos.f64 x) (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)))))","(* 1/6 (sin x))","(*.f64 (sin.f64 x) #s(literal 1/6 binary64))","(+ (cos x) (* eps (sin x)))","(fma.f64 (sin.f64 x) eps (cos.f64 x))","(+ (cos x) (* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x))))))","(fma.f64 (sin.f64 x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps) (cos.f64 x))","(+ (cos x) (* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x))))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64))) (*.f64 eps eps) (sin.f64 x)) eps (cos.f64 x))","(* 1/24 (* (pow eps 2) (cos x)))","(*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) #s(literal 1/24 binary64))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (*.f64 eps eps))","(* 1/24 (* (pow eps 4) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 3) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))","(* 1/6 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (sin.f64 x))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* 1/6 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)) eps)","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) eps) eps)","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (*.f64 eps eps))","(* eps (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps)","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (sin.f64 x) #s(literal -1/6 binary64))) (neg.f64 eps))) eps) eps)","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (sin.f64 x) #s(literal -1/6 binary64))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (sin.f64 x) #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) eps) eps)","(* -1 (* eps (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":264.5341796875,"type":"simplify"},{"count":[[20,230]],"inputs":[["(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 x)","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))"]],"memory":[[-394656,19401120]],"outputs":[["#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(approx -1/2 #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(approx -1/2 #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(approx -1/2 #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(approx -1/2 #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","(cos.f64 x)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)","#s(literal 1/6 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -3/2 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal 1/36 binary64)","#s(literal 1/144 binary64)","#s(literal -1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/8 binary64)","#s(literal 1/576 binary64)"]],"time":794.17578125,"type":"rewrite"},{"compiler":[[5955,885]],"memory":[[567104,16336640]],"time":23.239990234375,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",28.92463127624881,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","fresh",12.259177175106466,"binary64"],["#s(approx (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))))","fresh",12.24954534645161,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","fresh",29.928959229800963,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","next",0.3139078864440439,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","fresh",0.5059482529752721,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","done",0.3808396474994598,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","fresh",1.1474627462269464,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","next",1.0508902109755338,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","fresh",0.8569746747614128,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","fresh",13.175775236440117,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","fresh",12.900063306399476,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","fresh",12.630646450040974,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) eps) (sin.f64 x)) eps))","fresh",12.422736238789069,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","next",0.8655015963776929,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",12.694982832394556,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))) eps))","fresh",42.318469149389664,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",1.6547254325591134,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","next",1.9067598578982432,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",1.906763489254497,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (*.f64 eps eps))) eps))","fresh",2.81516883083903,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","fresh",29.273513657936498,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",13.412301723938075,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",13.463514649036153,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","fresh",13.451106756632866,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","fresh",13.643684253804647,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","fresh",1.8012947452978512,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))))","fresh",47.62872542199536,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))))","fresh",11.742410232654363,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","fresh",13.447451015763411,"binary64"],["#s(approx -1/2 #s(literal 1/6 binary64))","next",61.66386766394602,"binary64"]],"compiler":[[7,6],[16,12],[28,20],[19,14],[30,20],[19,14],[25,18],[37,23],[32,21],[43,29],[16,12],[16,12],[16,12],[16,12],[16,12],[13,10],[60,39],[54,33],[39,27],[42,29],[47,31],[31,22],[32,20],[27,18],[22,16],[16,12],[62,38],[60,39],[47,32],[24,17],[3,5],[16,12],[28,20],[19,14],[30,20],[19,14],[37,23],[32,21],[43,29],[16,12],[16,12],[16,12],[16,12],[16,12],[60,39],[54,33],[39,27],[42,29],[47,31],[31,22],[32,20],[27,18],[22,16],[16,12],[62,38],[60,39],[47,32],[24,17],[3,5]],"count":[[185,31]],"kept":[{"done":[1,1],"fresh":[5,1],"new":[174,27],"picked":[5,2]}],"memory":[[-11150608,20161680]],"min-error":[[0.03024010541562948,"binary64"]],"time":80.38623046875,"type":"prune"},{"egraph":[[0,8008,414,0.081568831],[15,7926,421,0.017943355],[14,7867,421,0.03660377],[13,7728,421,0.043128388],[12,7269,421,0.040457645],[11,6823,421,0.050342157],[10,6799,421,0.025578774],[9,6752,421,0.019554657],[8,6625,421,0.021039148],[7,5969,421,0.020193462],[6,4853,421,0.02223375],[5,2608,421,0.018984729],[4,1167,421,0.011310541],[3,523,421,0.004645645],[2,268,421,0.002438269],[1,142,421,0.001232949],[0,82,421,0.000925049],[0,50,421,0.000510091]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x)))","(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","(cos.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))","(*.f64 (sin.f64 x) eps)","(sin.f64 x)","#s(literal 1/6 binary64)","(neg.f64 (sin.f64 x))","#s(approx -1/2 #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))","(*.f64 #s(literal 1/6 binary64) eps)","#s(literal 1/6 binary64)","eps","#s(literal -1 binary64)","x","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x))","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","eps","(sin.f64 x)","x","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)","(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64))","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(*.f64 x x)","#s(literal -1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps))","cost-diff",0],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) eps)","cost-diff",0],["(-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x))","cost-diff",0],["(*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","cost-diff",0],["#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","cost-diff",0],["(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","cost-diff",1],["#s(approx -1/2 #s(literal 1/6 binary64))","cost-diff",0],["(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x)))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","cost-diff",0]],"memory":[[4940048,34677584]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 #s(literal 1/6 binary64) (*.f64 (sin.f64 x) eps))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 #s(literal 1/6 binary64) (*.f64 (sin.f64 x) eps))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 #s(literal 1/6 binary64) (*.f64 (sin.f64 x) eps))) eps (neg.f64 (sin.f64 x)))","(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 #s(literal 1/6 binary64) (*.f64 (sin.f64 x) eps)))","(cos.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))","(*.f64 #s(literal 1/6 binary64) (*.f64 (sin.f64 x) eps))","(*.f64 (sin.f64 x) eps)","(sin.f64 x)","#s(literal 1/6 binary64)","(neg.f64 (sin.f64 x))","#s(approx -1/2 #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) eps (neg.f64 x))) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) eps (neg.f64 x))) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) eps (neg.f64 x)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) eps (neg.f64 x))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))","(*.f64 #s(literal 1/6 binary64) eps)","#s(literal 1/6 binary64)","eps","#s(literal -1 binary64)","x","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(literal 1/2 binary64) eps (sin.f64 x)) (neg.f64 eps)))","(*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps)","(*.f64 (fma.f64 #s(literal 1/2 binary64) eps (sin.f64 x)) (neg.f64 eps))","(-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x))","(neg.f64 (fma.f64 #s(literal 1/2 binary64) eps (sin.f64 x)))","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","eps","(sin.f64 x)","x","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) (*.f64 #s(literal -1/2 binary64) eps))) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) (*.f64 #s(literal -1/2 binary64) eps))) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) (*.f64 #s(literal -1/2 binary64) eps)))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)","(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) (*.f64 #s(literal -1/2 binary64) eps))","(*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64))","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(*.f64 x x)","#s(literal -1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":517.552978515625,"type":"simplify"},{"compiler":[[294,43]],"locations":[["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps))","accuracy",0.015625],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps)","accuracy",0.125],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","accuracy",0.2607733755466384],["#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))","accuracy",1.6227915170384155],["(sin.f64 x)","accuracy",0.0],["(-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x))","accuracy",0.01171875],["(*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps)","accuracy",0.12109375],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","accuracy",0.7600343241538434],["(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","accuracy",0.125],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","accuracy",0.2607733755466384],["(*.f64 #s(literal 1/6 binary64) eps)","accuracy",0.33984375],["#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","accuracy",1.7964575020728355],["#s(approx -1/2 #s(literal 1/6 binary64))","accuracy",62.99600263525635],["(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","accuracy",0.015625],["(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","accuracy",0.125],["(*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))","accuracy",0.171875],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","accuracy",0.1928138142758286]],"memory":[[637296,74766288]],"mixsample":[[21.875244140625,"adjust",800],[53.11572265625,"ival-cos",1600],[0.116455078125,"ival-assert",0],[6.17333984375,"ival-sub",0],[6.49365234375,"ival-cos",0],[0.00390625,"ival-sub",400],[7.228515625,"const",0],[7.568115234375,"ival-cos",400],[13.942626953125,"adjust",2000],[21.81005859375,"ival-add",0],[51.195068359375,"ival-mult",0],[0.22509765625,"ival-cos",800],[4.440185546875,"ival-sin",0],[0.12890625,"ival-add",400],[0.285888671875,"ival-true",0],[0.499755859375,"exact",0],[0.141845703125,"ival-add",800],[2.270263671875,"ival-neg",0]],"outcomes":[[54.10888671875,1,"valid",79],[201.316162109375,2,"valid",173],[2.046875,0,"valid",4]],"time":298.60986328125,"type":"localize"},{"count":[[20,111]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x)))","(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","#s(approx -1/2 #s(literal 1/6 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x))","(*.f64 #s(literal -1/2 binary64) eps)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps))","(sin.f64 x)","(*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))","(*.f64 #s(literal 1/6 binary64) eps)","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))"]],"memory":[[-2791264,10797136]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* -1/2 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/6 (pow eps 2)) 1)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/2 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/2 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/6 (pow eps 2))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/2 (* eps (- (* 1/24 (pow eps 2)) 1/2))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/2 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/6 eps)))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ (* -1/2 (- (* 1/24 (pow eps 2)) 1/2)) (* -1/36 (* eps x))))))) 1/2)","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(+ (* -1 (* eps x)) (* -1/2 (pow eps 2)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2))))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps))))))","(+ (* -1 x) (* -1/2 eps))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow x 2)) 1)))","(+ (* -1/2 eps) (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/6 (* eps x))","(* x (+ (* -1/36 (* eps (pow x 2))) (* 1/6 eps)))","(* x (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/36 eps) (* 1/720 (* eps (pow x 2)))))))","(* x (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/36 eps) (* (pow x 2) (+ (* -1/30240 (* eps (pow x 2))) (* 1/720 eps)))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(* eps (- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x)))","(- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x))","(+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))","(* x (- (* 1/6 (pow eps 2)) 1))","(* x (- (+ (* -1/2 (/ eps x)) (* 1/6 (pow eps 2))) 1))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(* eps (- (* -1/2 eps) (sin x)))","(- (* -1/2 eps) (sin x))","(sin x)","(* 1/6 (* eps (sin x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* x (+ (* -1 (- (* 1/6 (pow eps 2)) 1)) (* 1/2 (/ eps x)))))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(* -1 (sin x))","(- (* -1/2 (* eps (cos x))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(* -1 x)","(+ (* -1 x) (* eps (- (* 1/6 (* eps x)) 1/2)))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* eps (+ (* -1 (sin x)) (* -1/2 eps)))","(* 1/6 eps)","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* 1/6 (* (pow eps 2) x))","(* (pow eps 2) (- (* 1/6 x) (* 1/2 (/ 1 eps))))","(* (pow eps 2) (- (+ (* -1 (/ x (pow eps 2))) (* 1/6 x)) (* 1/2 (/ 1 eps))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* (pow eps 2) (- (* -1 (/ (sin x) eps)) 1/2))","(* eps (- (* -1 (/ (sin x) eps)) 1/2))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 2) (+ (* -1 (/ (+ 1/2 (/ x eps)) eps)) (* 1/6 x)))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* eps (+ 1/2 (/ (sin x) eps))))"]],"series":[[8.3291015625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) -1/2 (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (* -1/2 eps) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (* (* (sin x) eps) 1/6) (* 1/6 eps) (cos x))","eps","-inf"],[3.406005859375,"((- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) -1/2 (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (* -1/2 eps) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (* (* (sin x) eps) 1/6) (* 1/6 eps) (cos x))","eps","inf"],[42.81494140625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) -1/2 (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (* -1/2 eps) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (* (* (sin x) eps) 1/6) (* 1/6 eps) (cos x))","eps","0"],[3.947021484375,"((- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) -1/2 (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (* -1/2 eps) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (* (* (sin x) eps) 1/6) (* 1/6 eps) (cos x))","x","-inf"],[4.532958984375,"((- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) -1/2 (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (* -1/2 eps) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (* (* (sin x) eps) 1/6) (* 1/6 eps) (cos x))","x","inf"],[2.35205078125,"((- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) -1/2 (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (* -1/2 eps) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (* (* (sin x) eps) 1/6) (* 1/6 eps) (cos x))","x","0"]],"time":67.68408203125,"type":"series"},{"count":[[111,110]],"egraph":[[0,8164,1529,0.089413089],[2,3671,1674,0.024609885],[1,1175,1737,0.013534722],[0,375,1773,0.003731917]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* -1/2 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/6 (pow eps 2)) 1)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/2 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/2 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/6 (pow eps 2))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/2 (* eps (- (* 1/24 (pow eps 2)) 1/2))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/2 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/6 eps)))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ (* -1/2 (- (* 1/24 (pow eps 2)) 1/2)) (* -1/36 (* eps x))))))) 1/2)","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(+ (* -1 (* eps x)) (* -1/2 (pow eps 2)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2))))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps))))))","(+ (* -1 x) (* -1/2 eps))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow x 2)) 1)))","(+ (* -1/2 eps) (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/6 (* eps x))","(* x (+ (* -1/36 (* eps (pow x 2))) (* 1/6 eps)))","(* x (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/36 eps) (* 1/720 (* eps (pow x 2)))))))","(* x (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/36 eps) (* (pow x 2) (+ (* -1/30240 (* eps (pow x 2))) (* 1/720 eps)))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(* eps (- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x)))","(- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x))","(+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))","(* x (- (* 1/6 (pow eps 2)) 1))","(* x (- (+ (* -1/2 (/ eps x)) (* 1/6 (pow eps 2))) 1))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(* eps (- (* -1/2 eps) (sin x)))","(- (* -1/2 eps) (sin x))","(sin x)","(* 1/6 (* eps (sin x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* x (+ (* -1 (- (* 1/6 (pow eps 2)) 1)) (* 1/2 (/ eps x)))))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(* -1 (sin x))","(- (* -1/2 (* eps (cos x))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(* -1 x)","(+ (* -1 x) (* eps (- (* 1/6 (* eps x)) 1/2)))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* eps (+ (* -1 (sin x)) (* -1/2 eps)))","(* 1/6 eps)","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* 1/6 (* (pow eps 2) x))","(* (pow eps 2) (- (* 1/6 x) (* 1/2 (/ 1 eps))))","(* (pow eps 2) (- (+ (* -1 (/ x (pow eps 2))) (* 1/6 x)) (* 1/2 (/ 1 eps))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* (pow eps 2) (- (* -1 (/ (sin x) eps)) 1/2))","(* eps (- (* -1 (/ (sin x) eps)) 1/2))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 2) (+ (* -1 (/ (+ 1/2 (/ x eps)) eps)) (* 1/6 x)))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* eps (+ 1/2 (/ (sin x) eps))))"]],"memory":[[2324480,48547056]],"method":["egg-herbie"],"outputs":[["(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)) #s(literal -1 binary64) (cos.f64 eps))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)))","(+ (* x (+ (* -1/2 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/6 (pow eps 2)) 1)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/2 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) x (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/2 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/6 (pow eps 2))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/2 (* eps (- (* 1/24 (pow eps 2)) 1/2))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(- (* 1/24 (pow eps 2)) 1/2)","(fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/2 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/6 eps)))) 1/2)","(fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ (* -1/2 (- (* 1/24 (pow eps 2)) 1/2)) (* -1/36 (* eps x))))))) 1/2)","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps x) #s(literal -1/36 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal -1/2 binary64))) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(* -1/2 (pow eps 2))","(*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps)","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(fma.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 x #s(literal 1/4 binary64) (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1 (* eps x)) (* -1/2 (pow eps 2)))","(*.f64 eps (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2))))))","(fma.f64 eps (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)) (*.f64 (*.f64 #s(literal 1/6 binary64) eps) (pow.f64 x #s(literal 3 binary64))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps))))))","(fma.f64 eps (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)))))","(+ (* -1 x) (* -1/2 eps))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* 1/6 (* eps x))","(*.f64 (*.f64 #s(literal 1/6 binary64) x) eps)","(* x (+ (* -1/36 (* eps (pow x 2))) (* 1/6 eps)))","(*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/36 binary64) #s(literal 1/6 binary64))) x)","(* x (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/36 eps) (* 1/720 (* eps (pow x 2)))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/36 binary64))) (*.f64 (*.f64 #s(literal 1/6 binary64) x) eps))","(* x (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/36 eps) (* (pow x 2) (+ (* -1/30240 (* eps (pow x 2))) (* 1/720 eps)))))))","(*.f64 (fma.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/36 binary64) #s(literal 1/6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/30240 binary64) #s(literal 1/720 binary64))))) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* eps (- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x)))","(* x (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (+ (* -1/2 (/ eps x)) (* 1/6 (pow eps 2))) 1))","(*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x)","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* eps (- (* -1/2 eps) (sin x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 (sin.f64 x))) eps)","(- (* -1/2 eps) (sin x))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 (sin.f64 x)))","(sin x)","(sin.f64 x)","(* 1/6 (* eps (sin x)))","(*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps)","(cos x)","(cos.f64 x)","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* x (+ (* -1 (- (* 1/6 (pow eps 2)) 1)) (* 1/2 (/ eps x)))))","(*.f64 (neg.f64 (fma.f64 (/.f64 eps x) #s(literal 1/2 binary64) (fma.f64 #s(literal -1/6 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) x)","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(- (* -1/2 (* eps (cos x))) (sin x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x)))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* -1/2 (cos x))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (cos.f64 x)))","(* -1 x)","(neg.f64 x)","(+ (* -1 x) (* eps (- (* 1/6 (* eps x)) 1/2)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) x #s(literal -1/2 binary64)) eps (neg.f64 x))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x)))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* eps (+ (* -1 (sin x)) (* -1/2 eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 (sin.f64 x))) eps)","(* 1/6 eps)","(*.f64 #s(literal 1/6 binary64) eps)","(* 1/24 (* (pow eps 4) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 3) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))","(* 1/24 (* (pow eps 2) (cos x)))","(*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) #s(literal 1/24 binary64))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (*.f64 eps eps))","(* 1/6 (* (pow eps 2) x))","(*.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/6 binary64))","(* (pow eps 2) (- (* 1/6 x) (* 1/2 (/ 1 eps))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps))","(* (pow eps 2) (- (+ (* -1 (/ x (pow eps 2))) (* 1/6 x)) (* 1/2 (/ 1 eps))))","(*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps))","(* 1/6 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (sin.f64 x))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* 1/6 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) eps) eps)","(* (pow eps 2) (- (* -1 (/ (sin x) eps)) 1/2))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) (*.f64 eps eps))","(* eps (- (* -1 (/ (sin x) eps)) 1/2))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (sin.f64 x))) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal -1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) eps)) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) eps)) (*.f64 eps eps))","(* (pow eps 2) (+ (* -1 (/ (+ 1/2 (/ x eps)) eps)) (* 1/6 x)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps)","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) eps))) eps) eps)","(* -1 (* eps (+ 1/2 (/ (sin x) eps))))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":236.7490234375,"type":"simplify"},{"count":[[20,160]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x)))","(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","#s(approx -1/2 #s(literal 1/6 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x))","(*.f64 #s(literal -1/2 binary64) eps)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps))","(sin.f64 x)","(*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))","(*.f64 #s(literal 1/6 binary64) eps)","#s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)))"]],"memory":[[-4614208,22544672]],"outputs":[["#s(approx 1/32 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(neg.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal -1/48 binary64))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64)) (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))) (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))) (neg.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64))))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)))","(+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))))","(+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 eps #s(literal 1/24 binary64)) (cos.f64 x)) eps) #s(literal 1/6 binary64))","(+.f64 (*.f64 (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)) #s(literal -1/48 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)) #s(literal 1/6 binary64)))","(neg.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal -1/48 binary64))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64)) (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))) (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))) (neg.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64))))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)))","(+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))))","(+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 eps #s(literal 1/24 binary64)) (cos.f64 x)) eps) #s(literal 1/6 binary64))","(+.f64 (*.f64 (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)) #s(literal -1/48 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)) #s(literal 1/6 binary64)))","(neg.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal -1/48 binary64))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal -1/2 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64)) (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))) (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(+.f64 (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))) (neg.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64))))","(+.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)))","(+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 #s(literal -1/48 binary64) (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64))))","(+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 eps #s(literal 1/24 binary64)) (cos.f64 x)) eps) #s(literal 1/6 binary64))","(+.f64 (*.f64 (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)) #s(literal -1/48 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal 1/6 binary64) #s(literal -1/48 binary64)) #s(literal 1/6 binary64)))","#s(approx 1/32 #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal -1/216 binary64)","#s(literal 1/36 binary64)","#s(literal -1/36 binary64)","#s(literal 1/46656 binary64)","#s(literal 1/1296 binary64)","#s(literal 1/10077696 binary64)","(neg.f64 #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))","(-.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","(-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))","#s(approx 1/32 (*.f64 #s(approx 1/6 #s(literal 1/6 binary64)) eps))","(*.f64 #s(approx 1/6 #s(literal 1/6 binary64)) eps)","#s(approx 1/6 #s(literal 1/6 binary64))","#s(approx 1/32 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/32 binary64)","#s(literal -1/32 binary64)","#s(literal 1/512 binary64)","#s(literal -1/512 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/32 binary64)","#s(literal -1/32 binary64)","#s(literal 1/512 binary64)","#s(literal -1/512 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/32 binary64)","#s(literal -1/32 binary64)","#s(literal 1/512 binary64)","#s(literal -1/512 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(approx 1/32 (*.f64 (fma.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps))","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/32 binary64)","#s(literal -1/32 binary64)","#s(literal 1/512 binary64)","#s(literal -1/512 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 1/6 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal -1/216 binary64)","#s(literal 1/36 binary64)","#s(literal -1/36 binary64)","#s(literal 1/46656 binary64)","#s(literal 1/1296 binary64)","#s(literal 1/10077696 binary64)","(neg.f64 #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))","(-.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","(-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","#s(literal -1/6 binary64)","#s(literal 1/216 binary64)","#s(literal -1/216 binary64)","#s(literal 1/36 binary64)","#s(literal -1/36 binary64)","#s(literal 1/46656 binary64)","#s(literal 1/1296 binary64)","#s(literal 1/10077696 binary64)","(neg.f64 #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))","(-.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","(-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))","#s(approx (cos x) #s(literal -1/2 binary64))"]],"time":741.767822265625,"type":"rewrite"},{"compiler":[[5639,784]],"memory":[[7804224,15550048]],"time":20.32421875,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",28.92463127624881,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","fresh",12.259177175106466,"binary64"],["#s(approx (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))))","fresh",12.24954534645161,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","fresh",61.643907080131584,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","done",0.3139078864440439,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","next",0.5059482529752721,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","done",0.3808396474994598,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","fresh",1.1474627462269464,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","done",1.0508902109755338,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps))","fresh",12.978582719117075,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","next",0.8569746747614128,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","fresh",13.175775236440117,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","fresh",12.900063306399476,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","fresh",12.630646450040974,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","done",0.8655015963776929,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",12.694982832394556,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))) eps))","fresh",42.318469149389664,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","next",1.6352275647106078,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",1.654688204952716,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","fresh",1.9067598835163186,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)) eps))","fresh",0.9149886006319445,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","fresh",60.18577105697331,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","next",59.99453949781386,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","fresh",60.165131114802946,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (*.f64 eps eps))) eps))","fresh",2.81516883083903,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","fresh",35.6999930763031,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","fresh",1.9832636176666854,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","fresh",3.9575190887427243,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","fresh",13.643684253804647,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","fresh",59.98459797410191,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","fresh",59.773927810769166,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","fresh",59.51590025459476,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","fresh",60.13213899752667,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","fresh",60.17968707701875,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",13.412301723938075,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",13.463514649036153,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","fresh",13.451106756632866,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","fresh",1.8012947452978512,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))))","fresh",47.62872542199536,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))))","fresh",11.742410232654363,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","fresh",13.447451015763411,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","fresh",61.67023575870574,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","next",61.80347542793236,"binary64"],["#s(approx -1/2 #s(literal 1/6 binary64))","done",61.66386766394602,"binary64"]],"compiler":[[7,6],[16,12],[28,20],[18,13],[30,20],[19,14],[25,18],[37,23],[32,21],[27,18],[42,29],[16,12],[16,12],[16,12],[16,12],[13,10],[60,39],[33,22],[28,20],[22,16],[25,18],[31,23],[31,22],[31,23],[47,31],[58,36],[53,34],[57,36],[44,28],[29,21],[29,21],[29,21],[29,21],[29,21],[32,20],[27,18],[22,16],[62,38],[60,39],[47,32],[24,17],[9,8],[9,8],[3,5],[16,12],[28,20],[18,13],[19,14],[37,23],[27,18],[42,29],[16,12],[16,12],[16,12],[60,39],[33,22],[28,20],[22,16],[25,18],[31,23],[31,22],[31,23],[47,31],[58,36],[53,34],[57,36],[44,28],[29,21],[29,21],[29,21],[29,21],[29,21],[32,20],[27,18],[22,16],[62,38],[60,39],[47,32],[24,17],[9,8],[9,8]],"count":[[197,44]],"kept":[{"done":[3,3],"fresh":[23,16],"new":[166,21],"picked":[5,4]}],"memory":[[-513024,25534288]],"min-error":[[0.03024010541562948,"binary64"]],"time":38.30078125,"type":"prune"},{"egraph":[[0,6850,406,0.042927249],[23,6850,421,0.061067322],[22,6834,421,0.074014513],[21,6834,421,0.042859543],[20,6834,421,0.035481138],[19,6834,421,0.033766198],[18,6598,421,0.036926915],[17,6078,421,0.047248334],[16,6078,421,0.032599549],[15,6070,421,0.032403044],[14,5991,421,0.035437372],[13,5705,421,0.030031388],[12,5705,421,0.015720119],[11,5693,421,0.01625611],[10,5667,421,0.014844414],[9,5318,421,0.016232087],[8,4571,421,0.026326046],[7,3313,421,0.025041168],[6,2060,421,0.017028905],[5,1320,421,0.011821956],[4,864,421,0.006502881],[3,504,421,0.003287674],[2,278,421,0.001877865],[1,155,424,0.001157577],[0,84,424,0.000758682],[0,55,424,0.00050413]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(literal -1/2 binary64)","(neg.f64 (sin.f64 x))","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(literal -1/512 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","(*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","#s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","#s(literal -1/120 binary64)","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x)))","#s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64)))","(fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))","eps","(fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps))","#s(literal 1/6 binary64)","x","(*.f64 #s(literal 1/24 binary64) eps)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(neg.f64 (sin.f64 x))","(sin.f64 x)"]],"locations":[["#s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64)))","cost-diff",0],["(fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x)))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","cost-diff",0],["#s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","cost-diff",0],["(*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","cost-diff",1],["#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","cost-diff",0],["(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","cost-diff",0],["(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","cost-diff",2],["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","cost-diff",0],["(*.f64 (cos.f64 x) eps)","cost-diff",0],["(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","cost-diff",0]],"memory":[[-4549440,21454832]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps) (sin.f64 x))))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","(*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps) (sin.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","(neg.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps) (sin.f64 x)))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(literal -1/2 binary64)","(neg.f64 (sin.f64 x))","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(literal -1/512 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/3 binary64)) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps)","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/3 binary64)) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","#s(literal 1/3 binary64)","#s(literal 1/6 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))))) eps))","(*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","(*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))))) eps)","#s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","#s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))))","(fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64))","#s(literal -1/120 binary64)","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) eps #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) eps #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x)))","(fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) eps #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x)))","#s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64)))","#s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) eps #s(literal -1/2 binary64)))","(fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) eps #s(literal -1/2 binary64))","eps","(fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps))","#s(literal 1/6 binary64)","x","(*.f64 #s(literal 1/24 binary64) eps)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(neg.f64 (sin.f64 x))","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":826.24609375,"type":"simplify"},{"compiler":[[276,53]],"locations":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","accuracy",0.1928138142758286],["(fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps))","accuracy",0.3359375],["(*.f64 #s(literal 1/24 binary64) eps)","accuracy",0.33984375],["#s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64)))","accuracy",1.7346636420269503],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","accuracy",0.01171875],["(*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","accuracy",0.12109375],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","accuracy",0.7600343241538434],["#s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","accuracy",1.5086706800673297],["(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","accuracy",0.0],["(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps)","accuracy",0.125],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","accuracy",0.2607733755466384],["#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","accuracy",60.92548843925676],["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","accuracy",61.31326619692619],["(cos.f64 x)","accuracy",0.0078125],["(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","accuracy",0.01953125],["(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","accuracy",0.1171875],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","accuracy",0.38485450297555635]],"memory":[[1417056,88892800]],"mixsample":[[0.077392578125,"const",800],[0.17529296875,"const",4000],[27.630615234375,"adjust",800],[0.188720703125,"adjust",4800],[53.171142578125,"ival-cos",1600],[0.02197265625,"ival-mult",2000],[0.18701171875,"adjust",4000],[0.053955078125,"const",400],[0.137939453125,"ival-assert",0],[6.34765625,"ival-sub",0],[4.9267578125,"ival-cos",0],[0.0048828125,"ival-sub",400],[13.62890625,"const",0],[7.903564453125,"ival-cos",400],[0.0078125,"ival-add",4000],[19.0244140625,"adjust",2000],[0.022216796875,"ival-mult",800],[31.95654296875,"ival-add",0],[0.02099609375,"ival-mult",400],[74.825927734375,"ival-mult",0],[0.222412109375,"ival-cos",800],[3.969482421875,"ival-sin",0],[0.00830078125,"ival-add",2000],[0.087890625,"const",2000],[0.130615234375,"ival-add",400],[0.18505859375,"adjust",2800],[0.2958984375,"ival-true",0],[0.501953125,"exact",0],[0.083251953125,"ival-add",800],[0.021240234375,"ival-mult",4000],[2.166748046875,"ival-neg",0]],"outcomes":[[63.31005859375,1,"valid",77],[233.146728515625,2,"valid",173],[3.845947265625,5,"exit",2],[1.830078125,0,"valid",4]],"time":351.345947265625,"type":"localize"},{"count":[[20,122]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (cos.f64 x) eps)","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","(*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","#s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x)))","#s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64)))","(cos.f64 x)","(*.f64 #s(literal 1/24 binary64) eps)","(fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps))"]],"memory":[[146720,10871664]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1/2 (pow eps 2))","(+ (* -1 (* eps x)) (* -1/2 (pow eps 2)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/4 (* (pow eps 2) x)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* x (+ (* 1/6 (* eps x)) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(+ (* -1/2 eps) (* x (- (* 1/4 (* eps x)) 1)))","(+ (* -1/2 eps) (* x (- (* x (+ (* 1/6 x) (* 1/4 eps))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow x 2)) 1)))","(+ (* -1/2 eps) (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2))))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps))))))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* -1/2 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/6 (pow eps 2)) 1)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/2 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/2 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/6 (pow eps 2))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/2 (* eps (- (* 1/24 (pow eps 2)) 1/2))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/2 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/6 eps)))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ (* -1/2 (- (* 1/24 (pow eps 2)) 1/2)) (* -1/36 (* eps x))))))) 1/2)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* 1/24 eps)","(+ (* 1/24 eps) (* 1/6 x))","(- (cos (+ eps x)) (cos x))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(- (* -1/2 (* eps (cos x))) (sin x))","(* eps (cos x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(* -1/120 (pow x 5))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(* (pow x 5) (- (+ (* -1/2 (/ eps (pow x 5))) (* 1/6 (/ 1 (pow x 2)))) (+ 1/120 (/ 1 (pow x 4)))))","(* eps (- (* -1/2 eps) (sin x)))","(- (* -1/2 eps) (sin x))","(* eps (- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x)))","(- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x))","(+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))","(cos x)","(* 1/6 x)","(* x (+ 1/6 (* 1/24 (/ eps x))))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (+ (* 1/2 (/ eps (pow x 5))) (/ 1 (pow x 4)))) (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* x (- (* -1/24 (/ eps x)) 1/6)))","(* -1 (* eps (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* -1 (sin x))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* eps (+ (* -1 (sin x)) (* -1/2 eps)))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(* -1/2 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))))","(* -1/2 (* eps (cos x)))","(* eps (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* eps (- (/ (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)) eps) 1/2))","(* (pow eps 2) (- (* -1 (/ (sin x) eps)) 1/2))","(* eps (- (* -1 (/ (sin x) eps)) 1/2))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* eps (+ 1/24 (* 1/6 (/ x eps))))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* eps (+ (* 1/2 (cos x)) (/ (sin x) eps))))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* eps (+ 1/2 (* -1 (/ (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)) eps)))))","(* -1 (* eps (+ 1/2 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* -1 (* eps (- (* -1/6 (/ x eps)) 1/24)))"]],"series":[[3.30517578125,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (* (cos x) eps) (- (cos (+ x eps)) (cos x)) (+ 1/6 1/6) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (cos x) (* 1/24 eps) (+ (* 1/6 x) (* 1/24 eps)))","eps","-inf"],[4.2021484375,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (* (cos x) eps) (- (cos (+ x eps)) (cos x)) (+ 1/6 1/6) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (cos x) (* 1/24 eps) (+ (* 1/6 x) (* 1/24 eps)))","eps","inf"],[3.045166015625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (* (cos x) eps) (- (cos (+ x eps)) (cos x)) (+ 1/6 1/6) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (cos x) (* 1/24 eps) (+ (* 1/6 x) (* 1/24 eps)))","eps","0"],[3.578857421875,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (* (cos x) eps) (- (cos (+ x eps)) (cos x)) (+ 1/6 1/6) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (cos x) (* 1/24 eps) (+ (* 1/6 x) (* 1/24 eps)))","x","-inf"],[4.14794921875,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (* (cos x) eps) (- (cos (+ x eps)) (cos x)) (+ 1/6 1/6) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (cos x) (* 1/24 eps) (+ (* 1/6 x) (* 1/24 eps)))","x","inf"],[1.621826171875,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (* (cos x) eps) (- (cos (+ x eps)) (cos x)) (+ 1/6 1/6) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (- (cos (+ x eps)) (cos x)) (* (- (* -1/2 eps) (sin x)) eps) (- (* -1/2 eps) (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) eps) (+ (* (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) eps) (neg (sin x))) (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (cos x) (* 1/24 eps) (+ (* 1/6 x) (* 1/24 eps)))","x","0"]],"time":22.256103515625,"type":"series"},{"count":[[122,121]],"egraph":[[0,8418,1704,0.092340532],[2,3866,1853,0.025460914],[1,1249,1906,0.013580213],[0,398,1943,0.004744776]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1/2 (pow eps 2))","(+ (* -1 (* eps x)) (* -1/2 (pow eps 2)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/4 (* (pow eps 2) x)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* x (+ (* 1/6 (* eps x)) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1 x) (* -1/2 eps))","(+ (* -1/2 eps) (* x (- (* 1/4 (* eps x)) 1)))","(+ (* -1/2 eps) (* x (- (* x (+ (* 1/6 x) (* 1/4 eps))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow x 2)) 1)))","(+ (* -1/2 eps) (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2))))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps))))))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* -1/2 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/6 (pow eps 2)) 1)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/2 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/2 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/6 (pow eps 2))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/2 (* eps (- (* 1/24 (pow eps 2)) 1/2))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/2 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/6 eps)))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ (* -1/2 (- (* 1/24 (pow eps 2)) 1/2)) (* -1/36 (* eps x))))))) 1/2)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* 1/24 eps)","(+ (* 1/24 eps) (* 1/6 x))","(- (cos (+ eps x)) (cos x))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(- (* -1/2 (* eps (cos x))) (sin x))","(* eps (cos x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(* -1/120 (pow x 5))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(* (pow x 5) (- (+ (* -1/2 (/ eps (pow x 5))) (* 1/6 (/ 1 (pow x 2)))) (+ 1/120 (/ 1 (pow x 4)))))","(* eps (- (* -1/2 eps) (sin x)))","(- (* -1/2 eps) (sin x))","(* eps (- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x)))","(- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x))","(+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))","(cos x)","(* 1/6 x)","(* x (+ 1/6 (* 1/24 (/ eps x))))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (+ (* 1/2 (/ eps (pow x 5))) (/ 1 (pow x 4)))) (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* x (- (* -1/24 (/ eps x)) 1/6)))","(* -1 (* eps (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* -1 (sin x))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* eps (+ (* -1 (sin x)) (* -1/2 eps)))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(* -1/2 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))))","(* -1/2 (* eps (cos x)))","(* eps (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* eps (- (/ (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)) eps) 1/2))","(* (pow eps 2) (- (* -1 (/ (sin x) eps)) 1/2))","(* eps (- (* -1 (/ (sin x) eps)) 1/2))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* eps (+ 1/24 (* 1/6 (/ x eps))))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* eps (+ (* 1/2 (cos x)) (/ (sin x) eps))))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* eps (+ 1/2 (* -1 (/ (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)) eps)))))","(* -1 (* eps (+ 1/2 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* -1 (* eps (- (* -1/6 (/ x eps)) 1/24)))"]],"memory":[[971792,50827536]],"method":["egg-herbie"],"outputs":[["(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)) #s(literal -1 binary64) (cos.f64 eps))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(+ (* -1 (* eps x)) (* -1/2 (pow eps 2)))","(*.f64 eps (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/4 (* (pow eps 2) x)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* x (+ (* 1/6 (* eps x)) (* 1/4 (pow eps 2)))))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1 x) (* -1/2 eps))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))","(+ (* -1/2 eps) (* x (- (* 1/4 (* eps x)) 1)))","(fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 eps x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (* x (+ (* 1/6 x) (* 1/4 eps))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) x #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 x x) eps)","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(fma.f64 (fma.f64 (*.f64 x #s(literal 1/4 binary64)) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (*.f64 x #s(literal 1/4 binary64))) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (* 1/6 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2))))))","(fma.f64 eps (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)) (*.f64 (*.f64 #s(literal 1/6 binary64) eps) (pow.f64 x #s(literal 3 binary64))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps))))))","(fma.f64 eps (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)))))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) eps)","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)))","(+ (* x (+ (* -1/2 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/6 (pow eps 2)) 1)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) x) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) eps))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/2 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) (*.f64 eps eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/2 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/6 (pow eps 2))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/2 (* eps (- (* 1/24 (pow eps 2)) 1/2))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps))","(- (* 1/24 (pow eps 2)) 1/2)","(fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(fma.f64 eps (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/2 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/6 eps)))) 1/2)","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ (* -1/2 (- (* 1/24 (pow eps 2)) 1/2)) (* -1/36 (* eps x))))))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal -1/2 binary64))) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* 1/24 eps)","(*.f64 #s(literal 1/24 binary64) eps)","(+ (* 1/24 eps) (* 1/6 x))","(fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal 1/6 binary64) x))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(- (* -1/2 (* eps (cos x))) (sin x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x)))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* -1/120 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) (pow.f64 x #s(literal 5 binary64)))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 5 binary64)))","(* (pow x 5) (- (+ (* -1/2 (/ eps (pow x 5))) (* 1/6 (/ 1 (pow x 2)))) (+ 1/120 (/ 1 (pow x 4)))))","(*.f64 (fma.f64 (/.f64 eps (pow.f64 x #s(literal 5 binary64))) #s(literal -1/2 binary64) (-.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 5 binary64)))","(* eps (- (* -1/2 eps) (sin x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 (sin.f64 x))) eps)","(- (* -1/2 eps) (sin x))","(fma.f64 #s(literal -1/2 binary64) eps (neg.f64 (sin.f64 x)))","(* eps (- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(- (* eps (+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))) (sin x))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(+ (* 1/6 (* eps (sin x))) (* (cos x) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x)))","(cos x)","(cos.f64 x)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/24 (/ eps x))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 1/24 binary64) #s(literal 1/6 binary64)) x)","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/6 binary64) (*.f64 x x)) #s(literal -1 binary64) #s(literal -1/120 binary64)) (pow.f64 x #s(literal 5 binary64)))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/120 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 x x)))))","(* -1 (* (pow x 5) (- (+ 1/120 (+ (* 1/2 (/ eps (pow x 5))) (/ 1 (pow x 4)))) (* 1/6 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (-.f64 (+.f64 (fma.f64 (/.f64 eps (pow.f64 x #s(literal 5 binary64))) #s(literal 1/2 binary64) #s(literal 1/120 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1/6 binary64) (*.f64 x x))))","(* -1 (* x (- (* -1/24 (/ eps x)) 1/6)))","(*.f64 (fma.f64 #s(literal -1/24 binary64) (/.f64 eps x) #s(literal -1/6 binary64)) (neg.f64 x))","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x)))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* eps (+ (* -1 (sin x)) (* -1/2 eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* -1/2 (cos x))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (cos.f64 x)))","(* -1/2 (* (pow eps 2) (cos x)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps)) eps)","(* -1/2 (* eps (cos x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)","(* eps (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))","(* 1/6 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (sin.f64 x))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* 1/6 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal 1/6 binary64))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (*.f64 eps eps))","(* eps (- (/ (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)) eps) 1/2))","(*.f64 (fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) eps) x #s(literal -1/2 binary64)) eps)","(* (pow eps 2) (- (* -1 (/ (sin x) eps)) 1/2))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) (*.f64 eps eps))","(* eps (- (* -1 (/ (sin x) eps)) 1/2))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)","(* 1/24 (* (pow eps 4) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 3) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))","(* 1/24 (* (pow eps 2) (cos x)))","(*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) #s(literal 1/24 binary64))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (*.f64 eps eps))","(* eps (+ 1/24 (* 1/6 (/ x eps))))","(*.f64 (fma.f64 (/.f64 x eps) #s(literal 1/6 binary64) #s(literal 1/24 binary64)) eps)","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* eps (+ (* 1/2 (cos x)) (/ (sin x) eps))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) eps) eps)","(* -1 (* eps (+ 1/2 (* -1 (/ (* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1)) eps)))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) eps) x #s(literal -1/2 binary64)) eps)","(* -1 (* eps (+ 1/2 (/ (sin x) eps))))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (sin.f64 x))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 #s(literal -1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (sin.f64 x))) (neg.f64 eps))) eps) eps)","(* -1 (* eps (- (* -1/6 (/ x eps)) 1/24)))","(*.f64 (fma.f64 (/.f64 x eps) #s(literal -1/6 binary64) #s(literal -1/24 binary64)) (neg.f64 eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":250.909912109375,"type":"simplify"},{"count":[[20,105]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps)","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (cos.f64 x) eps)","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","(+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","(*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps)","#s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","(*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps)","#s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x)))","#s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64)))","(cos.f64 x)","(*.f64 #s(literal 1/24 binary64) eps)","(fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps))"]],"memory":[[-1088480,17906800]],"outputs":[["#s(approx 1/24 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal -1/512 binary64)","#s(literal 1/6 binary64)","#s(literal -1/120 binary64)","#s(literal -1 binary64)","#s(literal 1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/576 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal -1/512 binary64)","#s(literal 1/6 binary64)","#s(literal -1/120 binary64)","#s(literal -1 binary64)","#s(literal 1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/576 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","(*.f64 (cos.f64 x) eps)","(*.f64 eps (cos.f64 x))","#s(approx 1/24 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal -1/512 binary64)","#s(literal 1/6 binary64)","#s(literal -1/120 binary64)","#s(literal -1 binary64)","#s(literal 1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/576 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(approx 1/24 (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","(*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps)","#s(approx 1/24 #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal -1/512 binary64)","#s(literal 1/6 binary64)","#s(literal -1/120 binary64)","#s(literal -1 binary64)","#s(literal 1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/576 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(approx 1/24 (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","(*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps)","#s(approx 1/24 #s(literal -1/2 binary64))","#s(approx 1/24 (*.f64 (fma.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps #s(literal -1/2 binary64)) eps))","(*.f64 (fma.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps #s(literal -1/2 binary64)) eps)","(fma.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps #s(literal -1/2 binary64))","#s(approx 1/24 #s(literal -1/2 binary64))","(cos.f64 x)","#s(literal -1/2 binary64)","#s(literal -1/512 binary64)","#s(literal 1/6 binary64)","#s(literal -1/120 binary64)","#s(literal -1 binary64)","#s(literal 1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/576 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -1/2 binary64)","#s(literal -1/512 binary64)","#s(literal 1/6 binary64)","#s(literal -1/120 binary64)","#s(literal -1 binary64)","#s(literal 1/24 binary64)","#s(literal 1/13824 binary64)","#s(literal 1/576 binary64)","#s(literal -2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)"]],"time":1265.921142578125,"type":"rewrite"},{"compiler":[[4723,671]],"memory":[[4140928,12094272]],"time":17.85888671875,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",28.92463127624881,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","fresh",12.259177175106466,"binary64"],["#s(approx (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))))","fresh",12.24954534645161,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","fresh",61.643907080131584,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","done",0.3139078864440439,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","done",0.5059482529752721,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","fresh",1.1474627459510427,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","fresh",1.0508918194178816,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","done",0.3808396474994598,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps))","fresh",12.978582719117075,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","fresh",0.8572815239489991,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","fresh",13.175775236440117,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","fresh",12.900063306399476,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","fresh",12.630646450040974,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","done",0.8655015963776929,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",12.694982832394556,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))) eps))","fresh",42.318469149389664,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","done",1.6352275647106078,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",1.654688204952716,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","fresh",1.9067598835163186,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","fresh",13.463514649036153,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) eps))","fresh",0.555108262743714,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","fresh",60.18577105697331,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","done",59.99453949781386,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","fresh",60.165131114802946,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","fresh",1.9832636176666854,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","fresh",13.643684253804647,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","fresh",59.98459797410191,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","fresh",59.773927810769166,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","fresh",59.51590025459476,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","fresh",60.13213899752667,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",13.412301723938075,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","fresh",13.451106756632866,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","fresh",60.17229744612649,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))))","fresh",47.62872542199536,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","fresh",1.8091072648712516,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","fresh",1.5531670730917408,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))))","fresh",11.742410232654363,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","fresh",13.447451015763411,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","fresh",61.65276235899364,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","fresh",29.969701621904207,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","done",61.80347542793236,"binary64"],["#s(approx -1/2 #s(literal 1/6 binary64))","done",61.66386766394602,"binary64"]],"compiler":[[1990,410],[7,6],[16,12],[28,20],[18,13],[30,20],[19,14],[31,19],[26,17],[25,18],[27,18],[47,31],[16,12],[16,12],[16,12],[16,12],[13,10],[60,39],[33,22],[28,20],[22,16],[50,31],[32,22],[31,23],[31,22],[31,23],[53,34],[44,28],[29,21],[29,21],[29,21],[29,21],[32,20],[22,16],[13,11],[60,39],[37,24],[40,26],[47,32],[24,17],[9,8],[9,8],[9,8],[3,5]],"count":[[174,43]],"kept":[{"done":[7,6],"fresh":[32,23],"new":[130,10],"picked":[5,4]}],"memory":[[-1012688,24349360]],"min-error":[[0.03024010541562948,"binary64"]],"time":35.291015625,"type":"prune"},{"accuracy":[0.3139078864440439],"baseline":[0.3139078864440439],"branch":[["x",0.3139078864440439,1,"binary64"],["eps",0.3139078864440439,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.3139078864440439,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[69,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (*.f64 eps eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))) eps))","#s(approx (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 3 binary64)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))"]],"memory":[[1895776,25114624]],"oracle":[63.350692308759804],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))"]],"repr":["binary64"],"time":46.18994140625,"times":[[15.130126953125,"x"],[14.427978515625,"eps"],[12.04296875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.3808396474994598],"baseline":[0.3808396474994598],"branch":[["x",0.38083964749945987,1,"binary64"],["eps",0.3808396474994598,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.3808396474994598,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[58,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))"]],"memory":[[-3641824,21556160]],"oracle":[63.29651326245573],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))"]],"repr":["binary64"],"time":40.906982421875,"times":[[13.617919921875,"x"],[13.001953125,"eps"],[11.077880859375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.5059482529752721],"baseline":[0.5059482529752721],"branch":[["x",0.5059482529752721,1,"binary64"],["eps",0.5059482529752721,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.5059482529752721,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[57,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* (cos x) eps) -1/2) (neg (sin x))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) eps))"]],"memory":[[1614128,21616192]],"oracle":[63.29651326245573],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))"]],"repr":["binary64"],"time":105.7041015625,"times":[[71.426025390625,"x"],[19.26708984375,"eps"],[11.589111328125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.8569746747614126],"baseline":[0.8569746747614128],"branch":[["x",0.8569746747614126,1,"binary64"],["eps",0.8569746747614126,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.8569746747614126,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[54,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal -1/2 binary64)) eps)) eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"memory":[[-3285248,20523680]],"oracle":[63.29651326245573],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))"]],"repr":["binary64"],"time":42.373046875,"times":[[12.5810546875,"x"],[15.158935546875,"eps"],[11.2041015625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.857281523948999],"baseline":[0.8572815239489991],"branch":[["x",0.8572815239489991,1,"binary64"],["eps",0.857281523948999,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.857281523948999,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[47,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(approx (cos x) (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps))"]],"memory":[[1476288,18452848]],"oracle":[63.29651326245573],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))"]],"repr":["binary64"],"time":34.282958984375,"times":[[11.447021484375,"x"],[10.670166015625,"eps"],[9.2548828125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.8655015963776928],"baseline":[0.8655015963776929],"branch":[["x",0.8655015963776928,1,"binary64"],["eps",0.8655015963776929,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.8655015963776929,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[45,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/24 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (sin.f64 x) eps)) eps)) eps))"]],"memory":[[2228144,17877216]],"oracle":[63.29651326245573],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))"]],"repr":["binary64"],"time":31.015869140625,"times":[[9.86083984375,"x"],[10.02001953125,"eps"],[8.47900390625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.5531670730917408],"baseline":[1.5531670730917408],"branch":[["eps",1.5531670730917408,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.5531670730917408,1,"binary64"],["x",1.5531670730917408,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[39,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1 binary64) #s(literal -1/2 binary64)) eps)) eps) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (/.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))"]],"memory":[[-2321008,16062800]],"oracle":[63.29651326245573],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))"]],"repr":["binary64"],"time":28.580078125,"times":[[8.75,"eps"],[7.822998046875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[9.575927734375,"x"]],"type":"regimes"},{"accuracy":[1.6352275647106076],"baseline":[1.6352275647106078],"branch":[["x",1.6352275647106078,1,"binary64"],["eps",1.6352275647106076,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.6352275647106076,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[30,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"]],"memory":[[-2544240,13401168]],"oracle":[62.270736317669126],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"]],"repr":["binary64"],"time":24.239990234375,"times":[[7.34619140625,"x"],[7.786865234375,"eps"],[6.702880859375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.6546882049527163],"baseline":[1.654688204952716],"branch":[["x",1.6546882049527163,1,"binary64"],["eps",1.6546882049527163,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.6546882049527163,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[29,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) #s(approx (+ (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (*.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/4 binary64) (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))"]],"memory":[[3792976,13037328]],"oracle":[62.27073631735742],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"]],"repr":["binary64"],"time":22.945068359375,"times":[[6.9130859375,"x"],[7.922119140625,"eps"],[6.074951171875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.9067598578982432],"baseline":[1.9067598578982432],"branch":[["x",1.9067598578982432,1,"binary64"],["eps",1.906759857898243,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.9067598578982432,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[23,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"]],"memory":[[-4862256,11323728]],"oracle":[62.27057679715409],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"]],"repr":["binary64"],"time":17.989990234375,"times":[[5.591064453125,"x"],[5.6220703125,"eps"],[5.096923828125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.9067598835163182],"baseline":[1.9067598835163186],"branch":[["x",1.9067598835163184,1,"binary64"],["eps",1.9067598835163182,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.9067598835163184,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[22,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (+.f64 (fma.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64) #s(literal 1/6 binary64)) (*.f64 (+.f64 #s(literal -1/48 binary64) #s(literal 1/6 binary64)) #s(literal -1/48 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))"]],"memory":[[2768240,10988880]],"oracle":[62.27057679715409],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))"]],"repr":["binary64"],"time":17.070068359375,"times":[[5.580078125,"x"],[5.474853515625,"eps"],[4.406982421875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[13.643684253804643],"baseline":[13.643684253804647],"branch":[["x",13.643684253804647,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",13.643684253804645,1,"binary64"],["eps",13.643684253804643,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[17,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(approx (+ (* (+ (* (* 1/6 eps) eps) -1) x) (* -1/2 eps)) (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal -1/2 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (+.f64 #s(literal 1/6 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (-.f64 #s(literal -1/2 binary64) #s(literal 1/6 binary64))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (*.f64 #s(literal -1/2 binary64) eps)) eps))"]],"memory":[[-216240,9379536]],"oracle":[62.27057675712273],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"repr":["binary64"],"time":14.1240234375,"times":[[4.26220703125,"x"],[4.218017578125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[4.240966796875,"eps"]],"type":"regimes"},{"accuracy":[29.969701621904196],"baseline":[29.969701621904207],"branch":[["x",29.969701621904207,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",29.969701621904207,1,"binary64"],["eps",29.969701621904196,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[11,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/13824 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 1/512 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx 1/24 #s(literal -1/2 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/6 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal -1/216 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/10077696 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/46656 binary64)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) #s(literal 1/6 binary64)) eps))"]],"memory":[[-633840,7532352]],"oracle":[62.270546268948145],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":10.169921875,"times":[[3.218994140625,"x"],[2.76806640625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[3.10693359375,"eps"]],"type":"regimes"},{"accuracy":[61.66386766394598],"baseline":[61.66386766394602],"branch":[["x",61.66386766394598,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",61.66386766394602,1,"binary64"],["eps",61.66386766394608,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[2,1]],"inputs":[["#s(approx -1/2 #s(literal 1/6 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal -1/512 binary64))"]],"link":["."],"memory":[[-3706720,4567680]],"name":["2cos (problem 3.3.5)"],"oracle":[62.27053143057308],"outputs":[["#s(approx -1/2 #s(literal 1/6 binary64))"]],"repr":["binary64"],"time":4.56298828125,"times":[[1.4150390625,"x"],[1.01708984375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[1.445068359375,"eps"]],"type":"regimes"},{"egraph":[[16,7018,367,0.020936064],[15,5447,367,0.030319289],[14,4663,367,0.023728184],[13,4080,367,0.026157856],[12,3469,367,0.020998254],[11,3365,367,0.017493936],[10,3293,367,0.013732388],[9,3202,367,0.013413333],[8,2867,367,0.013313725],[7,2141,367,0.015828552],[6,1375,367,0.015324363],[5,823,367,0.009082929],[4,526,367,0.004697384],[3,371,367,0.003221083],[2,265,367,0.002807096],[1,179,368,0.00221216],[0,117,369,0.00196513]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx -1/2 #s(literal 1/6 binary64))"]],"memory":[[4560512,12218688]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (cos x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (sin x) eps) 1/6)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 eps #s(approx (+ (* 1/6 x) (* 1/24 eps)) (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))) eps (neg.f64 (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (* (cos x) eps) -1/2) (neg (sin x))) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))) x (neg.f64 eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* -1/2 eps) (sin x)) (fma.f64 #s(literal -1/2 binary64) eps (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(literal 0 binary64))","#s(approx -1/2 #s(literal 1/6 binary64))"]],"stop":[["node limit",1]],"time":257.281982421875,"type":"simplify"},{"compiler":[[371,115]],"memory":[[2645152,2645152]],"stop":[["fuel",1]],"time":3.48193359375,"type":"soundness"},{"compiler":[[371,115],[371,115],[17,15],[17,15],[7,6],[7,6]],"memory":[[3061184,52006080]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":90.31005859375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02197265625,"type":"end"}]