[{"memory":[[52608,52608]],"time":0.06884765625,"type":"start"},{"compiler":[[52,27]],"memory":[[-2424752,49309904]],"method":["search"],"sampling":[[12,{"invalid":0.209961568909735,"precondition":0.7460122308758788,"unknown":0.04402620021438625,"valid":0.0}],[11,{"invalid":0.20363667817471048,"precondition":0.7460122308758788,"unknown":0.05035109094941075,"valid":0.0}],[10,{"invalid":0.19693973504350806,"precondition":0.7460122308758788,"unknown":0.05704803408061317,"valid":0.0}],[9,{"invalid":0.17164017210341007,"precondition":0.7460122308758788,"unknown":0.08234759702071119,"valid":0.0}],[8,{"invalid":0.160726635148858,"precondition":0.7460122308758788,"unknown":0.09326113397526327,"valid":0.0}],[7,{"invalid":0.1468366790248826,"precondition":0.7460122308758788,"unknown":0.10715109009923865,"valid":0.0}],[6,{"invalid":0.0714340600661591,"precondition":0.7460122308758788,"unknown":0.18255370905796214,"valid":0.0}],[5,{"invalid":0.04762270671077273,"precondition":0.7460122308758788,"unknown":0.2063650624133485,"valid":0.0}],[4,{"invalid":0.031748471140515155,"precondition":0.7460122308758788,"unknown":0.2222392979836061,"valid":0.0}],[3,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}]],"time":300.427001953125,"type":"analyze"},{"bogosity":[{"invalid":0.2489058342635154,"precondition":0.7460122308758788,"valid":0.005081934860605851}],"memory":[[138292440,4842981616]],"mixsample":[[506.114990234375,"ival-div",0],[439.465087890625,"ival-add",0],[802.244384765625,"ival-fabs",0],[2857.1884765625,"ival-mult",0],[1314.18310546875,"ival-expm1",0],[28.557861328125,"ival-assert",0],[397.224853515625,"ival-fmin",0],[221.313232421875,"ival-and",0],[1204.324951171875,"const",0],[50.35546875,"exact",0],[762.9189453125,"ival-<=",0]],"outcomes":[[9687.2998046875,0,"invalid",63268],[1404.09765625,0,"valid",8256]],"time":15022.43408203125,"type":"sample"},{"compiler":[[24,17],[101,19],[101,19]],"confusion":[[256,0,0,0]],"explanations":[["/.f64","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","n/u",23,0,[["(*.f64 b eps)","underflow",150],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","underflow",149],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","underflow",150],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","underflow",223],["(*.f64 a eps)","underflow",149]],[[]]],["-.f64","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","cancellation",106,0,[],[[2,2]]],["-.f64","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","cancellation",107,0,[],[[2,1]]],["-.f64","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","cancellation",138,0,[],[[1,2]]],["/.f64","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","u/u",200,0,[["(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","underflow",200],["(*.f64 (+.f64 a b) eps)","underflow",118],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","underflow",118],["(*.f64 b eps)","underflow",150],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","underflow",149],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","underflow",150],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","underflow",223],["(*.f64 a eps)","underflow",149]],[[]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))",138,0,false,0,false],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))",106,0,false,0,false],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))",107,0,false,0,false],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",225,0,false,2,[1.2913448101306333e-13,-3.3213324880402685e-83,9.717180329218063e-109]],["(+.f64 a b)",0,0,false,0,false],["(*.f64 b eps)",0,0,false,0,false],["(exp.f64 (*.f64 a eps))",0,0,false,0,false],["a",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 a eps)",0,0,false,0,false],["(exp.f64 (*.f64 (+.f64 a b) eps))",0,0,false,0,false],["eps",0,0,false,0,false],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))",0,0,false,0,false],["(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))",0,0,false,0,false],["(*.f64 (+.f64 a b) eps)",0,0,false,0,false],["(exp.f64 (*.f64 b eps))",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[4,42],[3,96],[1,118]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-2272352,115087360]],"mixsample":[[3.447021484375,"ival-div",0],[0.48583984375,"ival-true",0],[3.4736328125,"ival-add",0],[13.51611328125,"ival-exp",0],[16.02783203125,"ival-mult",0],[8.44189453125,"ival-expm1",0],[0.394287109375,"exact",0],[0.19921875,"ival-assert",0]],"outcomes":[[68.517822265625,0,"valid",512]],"time":200.823974609375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[24,17]],"egraph":[[0,8094,18,0.008555404],[12,7965,24,0.026278767],[11,7935,24,0.024439959],[10,7852,24,0.022626475],[9,7551,24,0.027957893],[8,6201,24,0.027455988],[7,3499,24,0.03134696],[6,1292,24,0.016491487],[5,656,24,0.005686375],[4,327,24,0.002186736],[3,176,24,0.001165791],[2,109,24,0.000783742],[1,56,24,0.000412145],[0,30,24,0.000392613],[0,17,24,0.000199381]],"inputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[5053552,22632656]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(/.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 b a) eps))) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"symmetry":[["(sort a b)"]],"time":447.09814453125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.118896484375,"type":"eval"},{"alts":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","next",64.0,"binary64"]],"compiler":[[24,17]],"memory":[[338960,338960]],"time":1.091064453125,"type":"prune"},{"egraph":[[0,8094,81,0.029417551],[12,7965,99,0.025910849],[11,7935,99,0.022355137],[10,7852,99,0.022950027],[9,7551,99,0.026659242],[8,6201,99,0.027266209],[7,3499,99,0.032950921],[6,1292,99,0.01782144],[5,656,99,0.004996819],[4,327,99,0.002358628],[3,176,99,0.001370213],[2,109,99,0.000693998],[1,56,99,0.00042066],[0,30,99,0.000386953],[0,17,99,0.000216067]],"inputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","eps","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 (+.f64 a b) eps))","(*.f64 (+.f64 a b) eps)","(+.f64 a b)","a","b","#s(literal 1 binary64)","(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 a eps))","(*.f64 a eps)","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 b eps))","(*.f64 b eps)"]],"locations":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[2481920,17770816]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))","(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)","eps","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 (+.f64 b a) eps))","(exp.f64 (*.f64 (+.f64 a b) eps))","(pow.f64 (exp.f64 eps) (+.f64 b a))","(*.f64 (+.f64 a b) eps)","(*.f64 (+.f64 b a) eps)","(+.f64 a b)","(+.f64 b a)","a","b","#s(literal 1 binary64)","(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps)))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 a eps))","(exp.f64 (*.f64 a eps))","(pow.f64 (exp.f64 eps) a)","(*.f64 a eps)","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 b eps))","(exp.f64 (*.f64 b eps))","(pow.f64 (exp.f64 eps) b)","(*.f64 b eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":274.761962890625,"type":"simplify"},{"compiler":[[101,19]],"locations":[["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","accuracy",23.697271976026745],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","accuracy",24.47487173898118],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","accuracy",31.078558581377827],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","accuracy",53.94441889688191]],"memory":[[-8164768,18398384]],"mixsample":[[1.72705078125,"ival-div",0],[0.25537109375,"ival-true",0],[1.50244140625,"ival-add",0],[6.306640625,"ival-exp",0],[7.756591796875,"ival-mult",0],[4.135986328125,"ival-expm1",0],[0.1826171875,"exact",0],[0.102294921875,"ival-assert",0]],"outcomes":[[66.158935546875,0,"valid",256]],"time":78.5029296875,"type":"localize"},{"count":[[4,44]],"inputs":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[6984960,6984960]],"outputs":[["(- (exp (* b eps)) 1)","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(* a eps)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(- (exp (* eps (+ a b))) 1)","(- (exp (* a eps)) 1)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (exp (* eps (- b (* -1 a)))) 1)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* eps (+ a b))","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"series":[[2.06591796875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","-inf"],[1.53515625,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","inf"],[3.760986328125,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","0"],[3.35205078125,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","-inf"],[1.58984375,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","inf"],[1.8740234375,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","0"],[2.322021484375,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","-inf"],[1.81396484375,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","inf"],[2.18701171875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","0"]],"time":21.998046875,"type":"series"},{"count":[[44,44]],"egraph":[[0,8118,1416,0.086549401],[2,3456,1586,0.024011701],[1,1079,1694,0.010778066],[0,336,1742,0.003726185]],"inputs":[["(- (exp (* b eps)) 1)","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(* a eps)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(- (exp (* eps (+ a b))) 1)","(- (exp (* a eps)) 1)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (exp (* eps (- b (* -1 a)))) 1)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* eps (+ a b))","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"memory":[[-763344,45959056]],"method":["egg-herbie"],"outputs":[["(- (exp (* b eps)) 1)","(expm1.f64 (*.f64 eps b))","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(fma.f64 (fma.f64 eps a #s(literal 1 binary64)) (pow.f64 (exp.f64 b) eps) #s(literal -1 binary64))","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(fma.f64 (*.f64 (pow.f64 (exp.f64 b) eps) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 eps eps) eps)) a (expm1.f64 (*.f64 eps b)))","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(fma.f64 (fma.f64 (*.f64 (pow.f64 (exp.f64 b) eps) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) eps #s(literal 1/2 binary64)))) a (*.f64 (pow.f64 (exp.f64 b) eps) eps)) a (expm1.f64 (*.f64 eps b)))","(* a eps)","(*.f64 eps a)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) eps) #s(literal 1/2 binary64) a) eps)","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) eps #s(literal 1/2 binary64))) a eps) a)","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) a eps) a)","(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) a #s(literal 1 binary64)) a)","(- (exp (* eps (+ a b))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(- (exp (* a eps)) 1)","(expm1.f64 (*.f64 eps a))","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(- (exp (* eps (- b (* -1 a)))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(fma.f64 (fma.f64 eps b #s(literal 1 binary64)) (pow.f64 (exp.f64 a) eps) #s(literal -1 binary64))","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(fma.f64 (*.f64 (pow.f64 (exp.f64 a) eps) (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps)) b (expm1.f64 (*.f64 eps a)))","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(fma.f64 (fma.f64 (*.f64 (pow.f64 (exp.f64 a) eps) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) b) eps #s(literal 1/2 binary64)))) b (*.f64 (pow.f64 (exp.f64 a) eps) eps)) b (expm1.f64 (*.f64 eps a)))","(* b eps)","(*.f64 eps b)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps) b)","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) b) eps #s(literal 1/2 binary64))) b eps) b)","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) b) #s(literal 1/24 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) b (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) b eps) b)","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) b #s(literal 1 binary64)) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(* eps (+ a b))","(*.f64 (+.f64 b a) eps)","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64)) eps (+.f64 b a)) eps)","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (+.f64 b a) #s(literal 1/2 binary64))) eps (+.f64 b a)) eps)","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64))) eps (+.f64 b a)) eps)","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) eps) #s(literal 1/2 binary64) a) eps)","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) eps) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) eps a) eps)","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) eps a) eps)","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps) b)","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) eps) #s(literal 1/6 binary64) (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) eps (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 b a) a) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)))))) eps (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))"]],"stop":[["iter limit",1],["node limit",1]],"time":227.77294921875,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[4318448,20345072]],"outputs":[["(neg.f64 (neg.f64 (expm1.f64 (*.f64 (+.f64 a b) eps))))","(+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (*.f64 (+.f64 a b) eps)))","(+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 a b) (*.f64 eps #s(literal 3 binary64)))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))))))","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 (+.f64 a b) eps))))","(-.f64 (/.f64 (exp.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 (+.f64 a b) (*.f64 eps #s(literal 3 binary64)))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))))","(*.f64 (+.f64 (exp.f64 (*.f64 (+.f64 a b) (/.f64 eps #s(literal 2 binary64)))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (+.f64 a b) (/.f64 eps #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 (+.f64 a b) eps)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (+.f64 a b) (+.f64 eps eps)))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (exp.f64 (*.f64 (+.f64 a b) eps))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (expm1.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (+.f64 a b) (+.f64 eps eps))) (expm1.f64 (*.f64 (+.f64 a b) (+.f64 eps eps)))) (expm1.f64 (*.f64 (+.f64 a b) eps)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 a eps))))","(+.f64 (exp.f64 (*.f64 a eps)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (*.f64 a eps)))","(+.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a eps) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 eps eps))))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 eps eps)))))))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 a eps))))","(-.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a eps) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 eps eps))))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 eps eps))))))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a eps)))","(*.f64 (+.f64 (exp.f64 (*.f64 a (/.f64 eps #s(literal 2 binary64)))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (/.f64 eps #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))) (expm1.f64 (*.f64 a (+.f64 eps eps))))","(*.f64 (/.f64 (expm1.f64 (*.f64 a (+.f64 eps eps))) (expm1.f64 (*.f64 a (+.f64 eps eps)))) (expm1.f64 (*.f64 a eps)))","(*.f64 (/.f64 (expm1.f64 (*.f64 a (+.f64 eps eps))) (neg.f64 (expm1.f64 (*.f64 a (+.f64 eps eps))))) (neg.f64 (expm1.f64 (*.f64 a eps))))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 b eps))))","(+.f64 (exp.f64 (*.f64 b eps)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (*.f64 b eps)))","(+.f64 (/.f64 (exp.f64 (*.f64 b (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 b (+.f64 eps eps))))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 b (+.f64 eps eps)))))))","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 b eps))))","(-.f64 (/.f64 (exp.f64 (*.f64 b (+.f64 eps eps))) (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 b (+.f64 eps eps))))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)) (exp.f64 (*.f64 b (+.f64 eps eps))))))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 b eps)))","(*.f64 (+.f64 (exp.f64 (*.f64 b (/.f64 eps #s(literal 2 binary64)))) #s(literal 1 binary64)) (expm1.f64 (*.f64 b (/.f64 eps #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))) (expm1.f64 (*.f64 b (+.f64 eps eps))))","(*.f64 (/.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 b (+.f64 eps eps)))) (expm1.f64 (*.f64 b eps)))","(*.f64 (/.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (neg.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))))) (neg.f64 (expm1.f64 (*.f64 b eps))))","(neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 a b) eps)) (neg.f64 eps)) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 a b) eps)) (neg.f64 eps)) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps))) (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps)))) (*.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) eps)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps)))) (neg.f64 eps)))","(+.f64 (*.f64 (*.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) eps) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps))))) (*.f64 (neg.f64 eps) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps))))))","(+.f64 (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps)))) #s(literal 1 binary64)) (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps)))) (exp.f64 (*.f64 b eps))))","(+.f64 (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps)))) (exp.f64 (*.f64 b eps))) (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps)))) (exp.f64 (*.f64 b (+.f64 eps eps)))) (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps)))) (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(+.f64 (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps)))) (+.f64 (exp.f64 (*.f64 b (+.f64 eps eps))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps)))) (exp.f64 (*.f64 b eps))))","(+.f64 (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps)))) (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps)))) (exp.f64 (*.f64 b (+.f64 eps eps)))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps))))) (*.f64 (exp.f64 (*.f64 b eps)) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps))))))","(+.f64 (*.f64 (exp.f64 (*.f64 b eps)) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps))))) (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 b (+.f64 eps eps))) (expm1.f64 (*.f64 a eps))))))","(+.f64 (*.f64 (exp.f64 (*.f64 b (+.f64 eps eps))) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps))))) (*.f64 (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (*.f64 b (+.f64 eps eps))) #s(literal 1 binary64)) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps))))) (*.f64 (exp.f64 (*.f64 b eps)) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps))))) (*.f64 (exp.f64 (*.f64 b (+.f64 eps eps))) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 b eps) #s(literal 3 binary64))) (expm1.f64 (*.f64 a eps))))))"]],"time":485.39697265625,"type":"rewrite"},{"compiler":[[4487,582]],"memory":[[15296,7944800]],"time":11.39501953125,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","next",50.940896652954194,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a))","next",36.856917224024585,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","next",0.125,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","next",33.50595002859496,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","next",31.048169573482316,"binary64"]],"compiler":[[66,38],[43,29],[32,21],[28,20],[28,20],[66,38],[43,29],[32,21],[28,20],[28,20]],"count":[[99,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[98,5],"picked":[1,0]}],"memory":[[-3297664,5910368]],"min-error":[[0.015625,"binary64"]],"time":5.883056640625,"type":"prune"},{"egraph":[[0,8460,350,0.088746061],[5,7658,370,0.016038111],[4,5764,400,0.017425921],[3,1477,430,0.016422781],[2,377,460,0.005262842],[1,164,463,0.00144911],[0,83,463,0.000852648],[0,52,473,0.000530343]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(*.f64 (*.f64 b a) (+.f64 b a))","(*.f64 b a)","b","a","(+.f64 b a)","#s(literal -1/2 binary64)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (*.f64 (*.f64 b a) a) b)","(*.f64 (*.f64 b a) a)","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(pow.f64 (+.f64 b a) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","eps","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))","eps","(+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))","#s(literal -1/2 binary64)","(/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))","(pow.f64 (exp.f64 b) eps)","(exp.f64 b)","b","(expm1.f64 (*.f64 eps b))","(*.f64 eps b)","a","#s(literal 1 binary64)"]],"locations":[["(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))","cost-diff",0],["(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64))","cost-diff",0],["(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a))","cost-diff",0],["(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","cost-diff",31],["(/.f64 #s(literal 1 binary64) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","cost-diff",0],["(/.f64 #s(literal 1 binary64) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","cost-diff",0],["(+.f64 b a)","cost-diff",0],["(/.f64 (+.f64 b a) b)","cost-diff",0],["(/.f64 (/.f64 (+.f64 b a) b) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","cost-diff",0]],"memory":[[-22448,43605456]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (fma.f64 #s(literal 0 binary64) eps (/.f64 #s(literal 1 binary64) a)) (/.f64 #s(literal 1 binary64) b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+.f64 (fma.f64 #s(literal 0 binary64) eps (/.f64 #s(literal 1 binary64) a)) (/.f64 #s(literal 1 binary64) b))","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(literal 0 binary64)","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (+.f64 b a) b))","(*.f64 (*.f64 b a) (+.f64 b a))","(*.f64 (*.f64 (+.f64 b a) b) a)","(*.f64 b a)","b","a","(+.f64 b a)","#s(literal -1/2 binary64)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(/.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) b) a) a)","(*.f64 (*.f64 (*.f64 b a) a) b)","(*.f64 (*.f64 b a) a)","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) b) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(pow.f64 (+.f64 b a) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","eps","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64)) a))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","(/.f64 (fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64)) a)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64))","(fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64)) eps)","eps","(+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))","(+.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))","(/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))","(pow.f64 (exp.f64 b) eps)","(exp.f64 b)","b","(expm1.f64 (*.f64 eps b))","(expm1.f64 (*.f64 b eps))","(*.f64 eps b)","(*.f64 b eps)","a","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":286.593017578125,"type":"simplify"},{"compiler":[[415,49]],"locations":[["(/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))","accuracy",0.109375],["(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64))","accuracy",0.1171875],["(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","accuracy",0.125],["(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))","accuracy",36.652752403486154],["(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","accuracy",0.2890625],["(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","accuracy",2.0271977075382934],["(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","accuracy",12.490386978214929],["(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","accuracy",62.800409831618],["(/.f64 #s(literal 1 binary64) b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","accuracy",33.50595002859496],["(/.f64 #s(literal 1 binary64) a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","accuracy",31.048169573482316],["(+.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","accuracy",0.0],["(/.f64 (+.f64 b a) b)","accuracy",0.0390625],["(/.f64 (/.f64 (+.f64 b a) b) a)","accuracy",0.125]],"memory":[[-426192,90238960]],"mixsample":[[19.91552734375,"adjust",800],[25.76220703125,"ival-div",0],[3.238037109375,"ival-exp",0],[1.42578125,"ival-mult",1200],[2.2021484375,"ival-div",400],[0.96337890625,"ival-pow2",400],[0.111083984375,"ival-assert",0],[3.2646484375,"ival-div",1600],[0.39404296875,"ival-pow2",1200],[18.4970703125,"ival-pow",0],[0.2861328125,"ival-pow2",2400],[19.040771484375,"ival-add",0],[4.277099609375,"ival-mult",800],[1.957275390625,"ival-mult",1600],[0.251708984375,"ival-add",400],[2.63720703125,"ival-div",2000],[0.407958984375,"ival-mult",2400],[3.099365234375,"ival-pow2",0],[0.69873046875,"ival-div",2400],[0.205078125,"ival-add",1200],[1.603271484375,"ival-pow2",800],[1.568359375,"ival-mult",2000],[0.30859375,"ival-pow2",2000],[18.9599609375,"adjust",2000],[0.807373046875,"ival-div",1200],[0.004150390625,"ival-add",1600],[37.684326171875,"ival-mult",0],[3.28955078125,"ival-mult",400],[0.010009765625,"ival-pow2",1600],[11.26318359375,"ival-expm1",0],[2.552734375,"ival-div",800],[0.272705078125,"ival-true",0],[0.5400390625,"exact",0],[0.500244140625,"ival-add",800]],"outcomes":[[251.481201171875,2,"valid",256]],"time":300.55908203125,"type":"localize"},{"count":[[20,117]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))"]],"memory":[[3791248,45376832]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","b","(+ a b)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* -1/2 (* a (pow b 2)))","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(/ (+ 1 (* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)))) a)","(+ 1 (* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))))","(+ b (* 2 a))","(+ b (* a (+ 2 (/ a b))))","(/ 1 (* (pow a 2) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(* 1/2 (/ b a))","(/ (+ a (* 1/2 b)) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(/ a b)","(* a (+ (/ 1 a) (/ 1 b)))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(* -1/2 (* (pow a 2) b))","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))","(+ (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 a))","(* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)))","(* a (+ (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 a)))","(/ (pow a 2) b)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(/ 1 (* a (pow b 2)))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(* 1/2 (/ a b))","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(* -1 (* a (- (* -1 (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(/ (+ 1 (* b (+ (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 a)))) b)","(/ (+ 1 (* b (+ (* b (+ (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 a)))) b)","(/ (+ a (* b (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) b)","(/ (+ a (* b (+ 1 (* b (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) b)","(/ (+ 1 (* (pow b 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) b)","(/ (+ 1 (* (pow b 2) (+ (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) b)","(/ (+ 1 (* (pow b 2) (+ (* b (+ (* b (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) b)","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/ (+ b (* 1/2 a)) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(/ 1 (* b eps))","(/ (+ (* 1/2 b) (/ 1 eps)) b)","(/ (+ (* b (+ 1/2 (* b (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) b)","(/ (+ (* b (+ 1/2 (* b (- (+ (* 1/2 eps) (* b (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) b)","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(/ (exp (* b eps)) (- (exp (* b eps)) 1))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (+ (* 1/6 (pow b 2)) (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (+ (* a (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (/ a b)))","(+ 1 (+ (* (pow eps 2) (+ (* a (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (* a (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))) (/ a b)))","(+ 1 (+ (* (pow eps 2) (+ (* a (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (* eps (+ (* a (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (* a (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))))))))))) (/ a b)))","(+ (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (+ (* 1/6 (pow b 2)) (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(/ (+ (* 1/2 eps) (/ 1 b)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))) (/ 1 b)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))))) (/ 1 b)) eps)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* a eps)) (/ (exp (* b eps)) (- (exp (* b eps)) 1))) 1/2))","(* eps (+ (* a (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 (* a eps)))))","(* -1 (* eps (- (* -1 (* a (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))) (/ 1 eps))))"]],"series":[[4.525146484375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","eps","-inf"],[3.739013671875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","eps","inf"],[30.68310546875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","eps","0"],[72.09619140625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","b","-inf"],[40.735107421875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","b","inf"],[6.444091796875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","b","0"],[10.991943359375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","a","-inf"],[16.053955078125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","a","inf"],[13.921142578125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) a) (+ (* (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) a) 1) (* eps (+ -1/2 (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp b) eps) (- (exp (* eps b)) 1)))","a","0"]],"time":203.423828125,"type":"series"},{"count":[[117,115]],"egraph":[[0,8599,2281,0.085134763],[2,5403,2516,0.029742809],[1,1650,2758,0.019482372],[0,551,3124,0.005090539]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","b","(+ a b)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* -1/2 (* a (pow b 2)))","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(/ (+ 1 (* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)))) a)","(+ 1 (* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))))","(+ b (* 2 a))","(+ b (* a (+ 2 (/ a b))))","(/ 1 (* (pow a 2) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(* 1/2 (/ b a))","(/ (+ a (* 1/2 b)) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(/ a b)","(* a (+ (/ 1 a) (/ 1 b)))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(* -1/2 (* (pow a 2) b))","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))","(+ (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 a))","(* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)))","(* a (+ (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 a)))","(/ (pow a 2) b)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(/ 1 (* a (pow b 2)))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(* 1/2 (/ a b))","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(* -1 (* a (- (* -1 (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(/ (+ 1 (* b (+ (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 a)))) b)","(/ (+ 1 (* b (+ (* b (+ (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 a)))) b)","(/ (+ a (* b (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) b)","(/ (+ a (* b (+ 1 (* b (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) b)","(/ (+ 1 (* (pow b 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) b)","(/ (+ 1 (* (pow b 2) (+ (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) b)","(/ (+ 1 (* (pow b 2) (+ (* b (+ (* b (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) b)","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/ (+ b (* 1/2 a)) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(/ 1 (* b eps))","(/ (+ (* 1/2 b) (/ 1 eps)) b)","(/ (+ (* b (+ 1/2 (* b (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) b)","(/ (+ (* b (+ 1/2 (* b (- (+ (* 1/2 eps) (* b (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) b)","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(/ (exp (* b eps)) (- (exp (* b eps)) 1))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (+ (* 1/6 (pow b 2)) (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (+ (* a (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (/ a b)))","(+ 1 (+ (* (pow eps 2) (+ (* a (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (* a (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))) (/ a b)))","(+ 1 (+ (* (pow eps 2) (+ (* a (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (* eps (+ (* a (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (* a (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))))))))))) (/ a b)))","(+ (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (+ (* 1/6 (pow b 2)) (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(/ (+ (* 1/2 eps) (/ 1 b)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))) (/ 1 b)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))))) (/ 1 b)) eps)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* a eps)) (/ (exp (* b eps)) (- (exp (* b eps)) 1))) 1/2))","(* eps (+ (* a (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 (* a eps)))))","(* -1 (* eps (- (* -1 (* a (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))) (/ 1 eps))))"]],"memory":[[4503984,48138864]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps))) a)) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps)) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps)))) a)) a #s(literal 1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","1","#s(literal 1 binary64)","(+ 1 (/ a b))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","b","(+ a b)","(+.f64 b a)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","#s(literal 0 binary64)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(* -1/2 (* a (pow b 2)))","(*.f64 (*.f64 (*.f64 b b) #s(literal -1/2 binary64)) a)","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(/ (+ 1 (* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)))) a)","(/.f64 (fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64)) a)","(+ 1 (* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64))","(+ b (* 2 a))","(fma.f64 #s(literal 2 binary64) a b)","(+ b (* a (+ 2 (/ a b))))","(fma.f64 (+.f64 (/.f64 a b) #s(literal 2 binary64)) a b)","(/ 1 (* (pow a 2) b))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a a) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(/.f64 (+.f64 (/.f64 (/.f64 a b) b) (/.f64 #s(literal 1 binary64) b)) (*.f64 a a))","(* 1/2 (/ b a))","(*.f64 (/.f64 b a) #s(literal 1/2 binary64))","(/ (+ a (* 1/2 b)) a)","(/.f64 (fma.f64 #s(literal 1/2 binary64) b a) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/.f64 (+.f64 a (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 a b) a b))) a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(/ a b)","(/.f64 a b)","(* a (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","a","(* a (+ 1 (/ b a)))","(fma.f64 (/.f64 b a) a a)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* -1/2 (* (pow a 2) b))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) a) b)","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(*.f64 (*.f64 (*.f64 (fma.f64 b (/.f64 b a) b) #s(literal -1/2 binary64)) a) a)","(* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))","(*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps)","(+ (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 a))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) a))","(* a (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)))","(*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps))","(* a (+ (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 a)))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64))","(/ (pow a 2) b)","(*.f64 (/.f64 a b) a)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(*.f64 a (fma.f64 (/.f64 #s(literal 2 binary64) a) a (/.f64 a b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(*.f64 (+.f64 (+.f64 (/.f64 (/.f64 b a) a) (/.f64 #s(literal 1 binary64) b)) (/.f64 #s(literal 2 binary64) a)) (*.f64 a a))","(/ 1 (* a (pow b 2)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 b b) a))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) b) (/.f64 (/.f64 #s(literal 1 binary64) b) a)) a)","(* 1/2 (/ a b))","(*.f64 (/.f64 #s(literal 1/2 binary64) b) a)","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(fma.f64 (*.f64 (/.f64 (/.f64 b a) a) #s(literal 1/2 binary64)) a (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(fma.f64 (/.f64 b (neg.f64 a)) (neg.f64 a) a)","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","#s(literal 0 binary64)","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* -1 (* a (- (* -1 (* eps (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))) (/ 1 a))))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(*.f64 a (fma.f64 (/.f64 (+.f64 (/.f64 b a) #s(literal 2 binary64)) a) a (/.f64 a b)))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (/.f64 b a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) a)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(/ (+ a b) b)","(/.f64 (+.f64 b a) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","#s(literal 0 binary64)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(/ (+ 1 (* b (+ (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 a)))) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) b (/.f64 #s(literal 1 binary64) a)) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (+ (* b (+ (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 a)))) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) b (*.f64 #s(literal 1/12 binary64) eps))) b (/.f64 #s(literal 1 binary64) a)) b #s(literal 1 binary64)) b)","(/ (+ a (* b (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) a) b #s(literal 1 binary64)) b a) b)","(/ (+ a (* b (+ 1 (* b (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) b (*.f64 #s(literal 1/12 binary64) eps))) a) b #s(literal 1 binary64)) b a) b)","(/ (+ 1 (* (pow b 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) b) b #s(literal 1 binary64)) b)","(/ (+ 1 (* (pow b 2) (+ (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) b (*.f64 #s(literal 1/12 binary64) eps))) b) b #s(literal 1 binary64)) b)","(/ (+ 1 (* (pow b 2) (+ (* b (+ (* b (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) eps (*.f64 (*.f64 eps (fma.f64 b (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps #s(literal 1/12 binary64))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) eps) #s(literal 1/2 binary64)))) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))))) b)) (*.f64 b b) #s(literal 1 binary64)) b)","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/.f64 (*.f64 a (fma.f64 #s(literal 2 binary64) b a)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) a b) b (*.f64 a a)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/.f64 (+.f64 (/.f64 (/.f64 b a) a) (/.f64 #s(literal 1 binary64) a)) (*.f64 b b))","(/ (+ b (* 1/2 a)) b)","(/.f64 (fma.f64 #s(literal 1/2 binary64) a b) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(/.f64 (+.f64 b (*.f64 #s(literal 1/2 binary64) (fma.f64 b (/.f64 b a) a))) b)","(/ 1 (* b eps))","(/.f64 (/.f64 #s(literal 1 binary64) b) eps)","(/ (+ (* 1/2 b) (/ 1 eps)) b)","(/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 #s(literal 1 binary64) eps)) b)","(/ (+ (* b (+ 1/2 (* b (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps #s(literal 1/12 binary64)) b #s(literal 1/2 binary64)) b (/.f64 #s(literal 1 binary64) eps)) b)","(/ (+ (* b (+ 1/2 (* b (- (+ (* 1/2 eps) (* b (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) b (*.f64 eps #s(literal 1/12 binary64))) b #s(literal 1/2 binary64)) b (/.f64 #s(literal 1 binary64) eps)) b)","(* b (+ 1 (/ a b)))","(fma.f64 (/.f64 a b) b b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(*.f64 (*.f64 (*.f64 (fma.f64 (/.f64 a b) a a) #s(literal -1/2 binary64)) b) b)","(* b (+ 1 (* 2 (/ a b))))","(*.f64 (fma.f64 (/.f64 a b) #s(literal 2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 a b) (+.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) b)","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(/.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) a) (/.f64 (/.f64 #s(literal 1 binary64) b) a)) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) #s(literal 1 binary64))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(fma.f64 (fma.f64 (/.f64 (/.f64 a b) b) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) a)) b #s(literal 1 binary64))","(/ (exp (* b eps)) (- (exp (* b eps)) 1))","(/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(fma.f64 (/.f64 (neg.f64 a) b) (neg.f64 b) b)","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","#s(literal 0 binary64)","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 b) b)","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (*.f64 (+.f64 (/.f64 a b) #s(literal 2 binary64)) a) b)) (neg.f64 b))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)) b)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a))))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (*.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal 1/2 binary64)) (*.f64 b a)))))) eps (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(+ (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) eps) eps (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64))) eps (*.f64 b #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (+ (* 1/6 (pow b 2)) (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 b #s(literal 1/12 binary64))) (*.f64 b b) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64))) b) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64)))) eps (*.f64 b #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(+ 1 (+ (* a (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (/ a b)))","(fma.f64 a (fma.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) b)) #s(literal 1 binary64))","(+ 1 (+ (* (pow eps 2) (+ (* a (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (* a (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))) (/ a b)))","(fma.f64 a (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64))) eps (*.f64 b #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) b)) #s(literal 1 binary64))","(+ 1 (+ (* (pow eps 2) (+ (* a (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (* eps (+ (* a (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (* a (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))))))))))) (/ a b)))","(fma.f64 (*.f64 a (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 b #s(literal 1/12 binary64))) (*.f64 b b) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64))) b) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64)))) eps (*.f64 b #s(literal 1/12 binary64)))) (*.f64 eps eps) (-.f64 (/.f64 a b) #s(literal -1 binary64)))","(+ (* (pow eps 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(fma.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) b))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64))) eps (*.f64 b #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) b))","(+ (* (pow eps 2) (- (+ (* 1/2 b) (* eps (- (+ (* 1/6 (pow b 2)) (* eps (- (* 1/24 (pow b 3)) (+ (* 1/120 (pow b 3)) (+ (* 1/48 (pow b 3)) (+ (* 1/6 (* (pow b 2) (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b))))) (* 1/2 (* b (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))))))))) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))) (/ 1 b))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 b #s(literal 1/12 binary64))) (*.f64 b b) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64))) b) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64)))) eps (*.f64 b #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) b))","(/ (+ (* 1/2 eps) (/ 1 b)) eps)","(/.f64 (fma.f64 #s(literal 1/2 binary64) eps (/.f64 #s(literal 1 binary64) b)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))) (/ 1 b)) eps)","(/.f64 (fma.f64 (fma.f64 (*.f64 b #s(literal 1/12 binary64)) eps #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 b) (* eps (- (* 1/6 (pow b 2)) (+ (* 1/24 (pow b 2)) (+ (* 1/12 (pow b 2)) (* 1/2 (* b (- (* 1/2 b) (+ (* 1/6 b) (* 1/4 b)))))))))) (+ (* 1/6 b) (* 1/4 b)))))) (/ 1 b)) eps)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) b) b (*.f64 (*.f64 (*.f64 b #s(literal 1/12 binary64)) b) #s(literal -1/2 binary64))) eps (*.f64 b #s(literal 1/12 binary64))) eps #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b)) eps)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","#s(literal 0 binary64)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(*.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) a) (/.f64 (/.f64 #s(literal 1 binary64) b) eps)) eps)","(* eps (- (+ (/ 1 (* a eps)) (/ (exp (* b eps)) (- (exp (* b eps)) 1))) 1/2))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) a) #s(literal 1/2 binary64))) eps)","(* eps (+ (* a (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 eps)))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)) eps) eps)","(* -1 (* eps (- (* -1 (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2)) (/ 1 (* a eps)))))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) a) #s(literal 1/2 binary64))) eps)","(* -1 (* eps (- (* -1 (* a (- (/ (exp (* b eps)) (- (exp (* b eps)) 1)) 1/2))) (/ 1 eps))))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) (*.f64 a eps) #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":244.511962890625,"type":"simplify"},{"count":[[20,230]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))"]],"memory":[[1885312,21341456]],"outputs":[["#s(approx (+ (* eps (exp (* eps a))) eps) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","#s(approx (+ (* eps (exp (* eps a))) eps) a)","a","(neg.f64 a)","(+.f64 a a)","(+.f64 #s(literal 1 binary64) a)","(-.f64 #s(literal 1 binary64) a)","(-.f64 a a)","(*.f64 a #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) a)","(*.f64 a a)","(/.f64 #s(literal 1 binary64) a)","(/.f64 a #s(literal 1 binary64))","(/.f64 a a)","(exp.f64 (log.f64 a))","(log.f64 (exp.f64 a))","(pow.f64 a #s(literal 1 binary64))","#s(approx (+ (* eps (exp (* eps a))) eps) b)","b","(neg.f64 b)","(+.f64 b b)","(+.f64 #s(literal 1 binary64) b)","(-.f64 #s(literal 1 binary64) b)","(-.f64 b b)","(*.f64 b #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) b)","(*.f64 b b)","(/.f64 #s(literal 1 binary64) b)","(/.f64 b #s(literal 1 binary64))","(/.f64 b b)","(/.f64 (+.f64 b #s(literal 1 binary64)) b)","(exp.f64 (log.f64 b))","(log.f64 (exp.f64 b))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","#s(approx (+ (* eps (exp (* eps a))) eps) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","#s(approx (+ (* eps (exp (* eps a))) eps) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","eps","(neg.f64 eps)","(+.f64 eps eps)","(-.f64 #s(literal 1 binary64) eps)","(-.f64 eps eps)","(*.f64 eps #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) eps)","(*.f64 eps eps)","(/.f64 eps #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) eps)","(/.f64 eps eps)","(/.f64 (+.f64 eps #s(literal 1 binary64)) eps)","(/.f64 (+.f64 #s(literal 1 binary64) eps) eps)","(exp.f64 (*.f64 (log.f64 eps) #s(literal 1 binary64)))","(log.f64 (exp.f64 eps))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","(neg.f64 (+.f64 b a))","(+.f64 b a)","(+.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 (+.f64 b a) #s(literal 1 binary64))","(+.f64 (+.f64 b a) b)","(+.f64 (+.f64 b a) a)","(+.f64 #s(literal 1 binary64) (+.f64 b a))","(+.f64 a (+.f64 b a))","(+.f64 b (+.f64 b a))","(-.f64 b a)","(-.f64 a b)","(-.f64 (+.f64 a #s(literal 1 binary64)) b)","(-.f64 (+.f64 b #s(literal 1 binary64)) a)","(-.f64 (+.f64 b a) (+.f64 b a))","#s(literal 1 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)"]],"time":521.3310546875,"type":"rewrite"},{"compiler":[[12615,1126]],"memory":[[-1560496,22557952]],"time":40.510986328125,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","done",0.125,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","done",33.50595002859496,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",31.048169573482316,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","fresh",62.41064387945294,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","next",62.27691460103505,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","fresh",62.413718583884624,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","next",62.41415187852375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 a a))","fresh",62.23705044065906,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","fresh",62.277181476306986,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 a a))","fresh",62.61767380793955,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","next",62.688527269217694,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 a))","fresh",62.769395192911574,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","fresh",0.15625,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","next",0.04296875,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) b)","fresh",62.30335837919812,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","next",62.238325469437534,"binary64"]],"compiler":[[32,21],[28,20],[28,20],[28,19],[28,20],[32,20],[30,20],[28,19],[28,20],[28,19],[27,19],[27,19],[40,26],[40,27],[26,18],[26,18],[28,19],[28,20],[32,20],[30,20],[28,19],[28,20],[28,19],[27,19],[27,19],[40,26],[40,27],[26,18],[26,18]],"count":[[227,16]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[222,13],"picked":[5,3]}],"memory":[[1676544,17542368]],"min-error":[[0.00390625,"binary64"]],"time":17.837158203125,"type":"prune"},{"egraph":[[0,8086,170,0.038649079],[8,6614,202,0.023627009],[7,3776,202,0.033400324],[6,1441,202,0.018805522],[5,751,202,0.007231048],[4,396,202,0.00238781],[3,230,202,0.001370909],[2,148,202,0.001338885],[1,78,202,0.000578422],[0,41,202,0.000418444],[0,34,202,0.000214975]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","#s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","(neg.f64 b)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","(-.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","(+.f64 (+.f64 b a) a)","(+.f64 b a)","b","a"]],"locations":[["(+.f64 b a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","cost-diff",0],["(+.f64 (+.f64 b a) a)","cost-diff",1],["(-.f64 #s(literal 1 binary64) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","cost-diff",0],["(/.f64 #s(literal 1 binary64) b)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","cost-diff",0],["#s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","cost-diff",0]],"memory":[[-6305296,21310592]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))))","#s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","(neg.f64 b)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","(-.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 #s(literal 2 binary64) a b))","(+.f64 (+.f64 b a) a)","(fma.f64 #s(literal 2 binary64) a b)","(+.f64 b a)","b","a"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":229.82080078125,"type":"simplify"},{"compiler":[[165,26]],"locations":[["(+.f64 b a)","accuracy",0.0],["(+.f64 (+.f64 b a) a)","accuracy",0.0390625],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","accuracy",62.41415187852375],["(-.f64 #s(literal 1 binary64) a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","accuracy",62.27691460103505],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","accuracy",62.688527269217694],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","accuracy",62.238325469437534],["(/.f64 #s(literal -1 binary64) a)","accuracy",0.0],["#s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","accuracy",0.0],["(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","accuracy",0.04296875]],"memory":[[5234544,21131376]],"mixsample":[[8.47998046875,"ival-div",0],[3.90966796875,"ival-add",0],[7.771484375,"ival-mult",0],[4.244140625,"ival-expm1",0],[0.09619140625,"ival-assert",0],[2.30029296875,"ival-sub",0],[0.185302734375,"ival-true",0],[0.27392578125,"exact",0],[1.047119140625,"ival-neg",0]],"outcomes":[[42.529296875,0,"valid",256]],"time":55.4541015625,"type":"localize"},{"count":[[13,38]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","#s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","(neg.f64 b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","(-.f64 #s(literal 1 binary64) a)","(+.f64 (+.f64 b a) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","(+.f64 b a)","(/.f64 #s(literal -1 binary64) a)"]],"memory":[[-1816000,8618864]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (* -1 a))","b","(+ b (* 2 a))","(+ a b)","(/ -1 a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(* -1 a)","(* a (- (/ 1 a) 1))","(* 2 a)","(* a (+ 2 (/ b a)))","a","(* a (+ 1 (/ b a)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- 1 (/ 1 a))))","(* -1 (* a (- (* -1 (/ b a)) 2)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(* -1 b)","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (/ a b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"series":[[1.14208984375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","eps","-inf"],[0.89404296875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","eps","inf"],[1.3359375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","eps","0"],[1.966064453125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","b","-inf"],[1.573974609375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","b","inf"],[1.327880859375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","b","0"],[1.802001953125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","a","-inf"],[3.93505859375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","a","inf"],[1.73291015625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (- (/ 1 b) (/ -1 a)) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (+ (+ b a) a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a) (/ -1 a))","a","0"]],"time":17.740966796875,"type":"series"},{"count":[[38,36]],"egraph":[[0,8070,1101,0.105802804],[2,2220,1218,0.02427073],[1,679,1298,0.009551437],[0,236,1339,0.002499721]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (* -1 a))","b","(+ b (* 2 a))","(+ a b)","(/ -1 a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(* -1 a)","(* a (- (/ 1 a) 1))","(* 2 a)","(* a (+ 2 (/ b a)))","a","(* a (+ 1 (/ b a)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- 1 (/ 1 a))))","(* -1 (* a (- (* -1 (/ b a)) 2)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(* -1 b)","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (/ a b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"memory":[[1953120,47635040]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (+.f64 (/.f64 a b) #s(literal 1 binary64)) a)","1","#s(literal 1 binary64)","(+ 1 (* -1 a))","(-.f64 #s(literal 1 binary64) a)","b","(+ b (* 2 a))","(fma.f64 #s(literal 2 binary64) a b)","(+ a b)","(+.f64 b a)","(/ -1 a)","(/.f64 #s(literal -1 binary64) a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (/ 1 b))","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(* -1 a)","(neg.f64 a)","(* a (- (/ 1 a) 1))","(-.f64 #s(literal 1 binary64) a)","(* 2 a)","(*.f64 #s(literal 2 binary64) a)","(* a (+ 2 (/ b a)))","(*.f64 (+.f64 (/.f64 b a) #s(literal 2 binary64)) a)","a","(* a (+ 1 (/ b a)))","(fma.f64 (/.f64 b a) a a)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* a (- 1 (/ 1 a))))","(-.f64 #s(literal 1 binary64) a)","(* -1 (* a (- (* -1 (/ b a)) 2)))","(*.f64 (+.f64 (/.f64 b a) #s(literal 2 binary64)) a)","(* -1 (* a (- (* -1 (/ b a)) 1)))","(fma.f64 (/.f64 b a) a a)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (+.f64 (/.f64 b a) #s(literal 1 binary64)) b)","(* -1 b)","(neg.f64 b)","(* b (+ 1 (* 2 (/ a b))))","(*.f64 (fma.f64 (/.f64 a b) #s(literal 2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (/ a b)))","(fma.f64 (/.f64 a b) b b)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 b) b)","(* -1 (* b (- (* -1 (/ a b)) 1)))","(fma.f64 (/.f64 a b) b b)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 a a) b)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 a a) b)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b))))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b)) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 a a) b)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b)))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))"]],"stop":[["iter limit",1],["node limit",1]],"time":317.5849609375,"type":"simplify"},{"count":[[13,0]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","#s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a)))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","(neg.f64 b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","(-.f64 #s(literal 1 binary64) a)","(+.f64 (+.f64 b a) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","(+.f64 b a)","(/.f64 #s(literal -1 binary64) a)"]],"memory":[[4146928,12282064]],"outputs":[[]],"time":144.580078125,"type":"rewrite"},{"compiler":[[1874,236]],"memory":[[-7722336,3655856]],"time":7.617919921875,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","done",0.125,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","done",33.50595002859496,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",31.048169573482316,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","next",62.41064387945294,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","done",62.27691460103505,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","next",62.413718583884624,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","done",62.41415187852375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 a a))","fresh",62.23705044065906,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","next",62.277181476306986,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 a a))","fresh",62.61767380793955,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","done",62.688527269217694,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 a))","fresh",62.769395192911574,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","next",0.15625,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","done",0.04296875,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","next",62.27717214761087,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","done",62.238325469437534,"binary64"]],"compiler":[[32,21],[28,20],[28,20],[28,19],[28,20],[32,20],[30,20],[28,19],[28,20],[28,19],[27,19],[27,19],[40,26],[40,27],[30,21],[26,18],[28,19],[32,20],[28,19],[28,20],[28,19],[27,19],[40,26],[30,21]],"count":[[45,16]],"kept":[{"done":[3,3],"fresh":[8,7],"new":[29,1],"picked":[5,5]}],"memory":[[-1777568,6517952]],"min-error":[[0.00390625,"binary64"]],"time":9.944091796875,"type":"prune"},{"egraph":[[0,8039,185,0.049624232],[8,6998,215,0.019556445],[7,3959,215,0.036501144],[6,1541,215,0.017884851],[5,840,215,0.006885841],[4,437,215,0.00321685],[3,265,215,0.001578338],[2,173,215,0.001202791],[1,87,215,0.000737568],[0,43,215,0.000545067],[0,36,219,0.000249892]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","#s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b))","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(-.f64 (/.f64 b a) #s(literal -1 binary64))","(/.f64 b a)","b","a","#s(literal -1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (- 1 a) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","(+.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","(-.f64 a b)","a","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","(+.f64 (+.f64 b a) (+.f64 b a))","(+.f64 b a)","b","a"]],"locations":[["(+.f64 b a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","cost-diff",0],["(+.f64 (+.f64 b a) (+.f64 b a))","cost-diff",2],["(-.f64 a b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","cost-diff",0],["(+.f64 #s(literal 1 binary64) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","cost-diff",0],["#s(approx (- 1 a) #s(literal 1 binary64))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 b a) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","cost-diff",0],["#s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","cost-diff",0]],"memory":[[122144,27619216]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","#s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b))","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(-.f64 (/.f64 b a) #s(literal -1 binary64))","(/.f64 b a)","b","a","#s(literal -1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (- 1 a) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 b #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) b)","(-.f64 b #s(literal -1 binary64))","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","(-.f64 a b)","a","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 #s(literal 2 binary64) (+.f64 b a)))","(+.f64 (+.f64 b a) (+.f64 b a))","(*.f64 #s(literal 2 binary64) (+.f64 b a))","(+.f64 b a)","b","a"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":288.35009765625,"type":"simplify"},{"compiler":[[173,27]],"locations":[["(+.f64 (+.f64 b a) (+.f64 b a))","accuracy",0.0],["(+.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","accuracy",62.413718583884624],["(-.f64 a b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","accuracy",62.41064387945294],["(+.f64 #s(literal 1 binary64) b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","accuracy",62.277181476306986],["#s(approx (- 1 a) #s(literal 1 binary64))","accuracy",2.0089957641227056],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","accuracy",62.27691460103505],["#s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b))","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","accuracy",0.0],["(-.f64 (/.f64 b a) #s(literal -1 binary64))","accuracy",0.00390625],["(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","accuracy",0.15234375]],"memory":[[-1809616,21943728]],"mixsample":[[8.639892578125,"ival-div",0],[4.177978515625,"ival-sub",0],[0.189208984375,"ival-true",0],[4.873046875,"ival-add",0],[7.73095703125,"ival-mult",0],[4.1142578125,"ival-expm1",0],[0.270263671875,"exact",0],[0.089599609375,"ival-assert",0]],"outcomes":[[43.675537109375,0,"valid",256]],"time":57.788818359375,"type":"localize"},{"count":[[13,50]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","#s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b))","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(-.f64 (/.f64 b a) #s(literal -1 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (- 1 a) #s(literal 1 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","(+.f64 #s(literal 1 binary64) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","(-.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","(+.f64 b a)"]],"memory":[[-1270544,9247024]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","(/ b a)","(/ (+ a b) a)","1","(+ 1 (* -1 a))","(* -1 b)","(- a b)","(* 2 b)","(+ (* 2 a) (* 2 b))","b","(+ a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(+ 1 (/ b a))","(* -1 a)","(* a (- (/ 1 a) 1))","a","(* a (+ 1 (* -1 (/ b a))))","(* 2 a)","(* a (+ 2 (* 2 (/ b a))))","(* a (+ 1 (/ b a)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- 1 (/ 1 a))))","(* -1 (* a (- (/ b a) 1)))","(* -1 (* a (- (* -2 (/ b a)) 2)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(+ 1 b)","(+ a (* -1 b))","(* b (+ (/ 1 a) (/ 1 b)))","(* b (+ 1 (/ 1 b)))","(* b (- (/ a b) 1))","(* b (+ 2 (* 2 (/ a b))))","(* b (+ 1 (/ a b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (+ 1 (* -1 (/ a b)))))","(* -1 (* b (- (* -2 (/ a b)) 2)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"series":[[1.078857421875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","eps","-inf"],[2.07421875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","eps","inf"],[1.37109375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","eps","0"],[2.423095703125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","b","-inf"],[2.012939453125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","b","inf"],[1.51904296875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","b","0"],[2.096923828125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","a","-inf"],[1.869140625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","a","inf"],[1.670166015625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (- (/ b a) -1) b) (- (/ b a) -1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- 1 a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (- a b) (+ (+ b a) (+ b a)) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ b a))","a","0"]],"time":18.048095703125,"type":"series"},{"count":[[50,48]],"egraph":[[0,8104,1161,0.088739347],[2,2388,1279,0.025579414],[1,743,1359,0.008202789],[0,255,1402,0.002297478]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","(/ b a)","(/ (+ a b) a)","1","(+ 1 (* -1 a))","(* -1 b)","(- a b)","(* 2 b)","(+ (* 2 a) (* 2 b))","b","(+ a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(+ 1 (/ b a))","(* -1 a)","(* a (- (/ 1 a) 1))","a","(* a (+ 1 (* -1 (/ b a))))","(* 2 a)","(* a (+ 2 (* 2 (/ b a))))","(* a (+ 1 (/ b a)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- 1 (/ 1 a))))","(* -1 (* a (- (/ b a) 1)))","(* -1 (* a (- (* -2 (/ b a)) 2)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(+ 1 b)","(+ a (* -1 b))","(* b (+ (/ 1 a) (/ 1 b)))","(* b (+ 1 (/ 1 b)))","(* b (- (/ a b) 1))","(* b (+ 2 (* 2 (/ a b))))","(* b (+ 1 (/ a b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (+ 1 (* -1 (/ a b)))))","(* -1 (* b (- (* -2 (/ a b)) 2)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"memory":[[8487632,47712608]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (+.f64 (/.f64 a b) #s(literal 1 binary64)) a)","(/ b a)","(/.f64 b a)","(/ (+ a b) a)","(/.f64 (+.f64 b a) a)","1","#s(literal 1 binary64)","(+ 1 (* -1 a))","(-.f64 #s(literal 1 binary64) a)","(* -1 b)","(neg.f64 b)","(- a b)","(-.f64 a b)","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(+ (* 2 a) (* 2 b))","(*.f64 #s(literal 2 binary64) (+.f64 b a))","b","(+ a b)","(+.f64 b a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (/ 1 b))","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(+ 1 (/ b a))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(* -1 a)","(neg.f64 a)","(* a (- (/ 1 a) 1))","(-.f64 #s(literal 1 binary64) a)","a","(* a (+ 1 (* -1 (/ b a))))","(fma.f64 (/.f64 (neg.f64 b) a) a a)","(* 2 a)","(*.f64 #s(literal 2 binary64) a)","(* a (+ 2 (* 2 (/ b a))))","(*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 b a) a a))","(* a (+ 1 (/ b a)))","(fma.f64 (/.f64 b a) a a)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* a (- 1 (/ 1 a))))","(-.f64 #s(literal 1 binary64) a)","(* -1 (* a (- (/ b a) 1)))","(fma.f64 (/.f64 (neg.f64 b) a) a a)","(* -1 (* a (- (* -2 (/ b a)) 2)))","(*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 b a) a a))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(fma.f64 (/.f64 b a) a a)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (+.f64 (/.f64 b a) #s(literal 1 binary64)) b)","(+ 1 b)","(+.f64 #s(literal 1 binary64) b)","(+ a (* -1 b))","(-.f64 a b)","(* b (+ (/ 1 a) (/ 1 b)))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(* b (+ 1 (/ 1 b)))","(+.f64 #s(literal 1 binary64) b)","(* b (- (/ a b) 1))","(fma.f64 (/.f64 a b) b (neg.f64 b))","(* b (+ 2 (* 2 (/ a b))))","(*.f64 (fma.f64 (/.f64 a b) #s(literal 2 binary64) #s(literal 2 binary64)) b)","(* b (+ 1 (/ a b)))","(fma.f64 (/.f64 a b) b b)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* b (+ 1 (* -1 (/ a b)))))","(fma.f64 (/.f64 a b) b (neg.f64 b))","(* -1 (* b (- (* -2 (/ a b)) 2)))","(*.f64 (fma.f64 (/.f64 a b) #s(literal 2 binary64) #s(literal 2 binary64)) b)","(* -1 (* b (- (* -1 (/ a b)) 1)))","(fma.f64 (/.f64 a b) b b)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) a) b)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) a) b) (/.f64 (/.f64 (+.f64 b a) a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) a) b) (/.f64 (/.f64 (+.f64 b a) a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b))))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b)) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) a) b) (/.f64 (/.f64 (+.f64 b a) a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) a) (/.f64 #s(literal 1/2 binary64) b)))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))"]],"stop":[["iter limit",1],["node limit",1]],"time":222.347900390625,"type":"simplify"},{"count":[[13,97]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","#s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b))","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(-.f64 (/.f64 b a) #s(literal -1 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (- 1 a) #s(literal 1 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","(+.f64 #s(literal 1 binary64) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","(-.f64 a b)","(+.f64 (+.f64 b a) (+.f64 b a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","(+.f64 b a)"]],"memory":[[62896,16131808]],"outputs":[["#s(approx (/ (+ 3 (exp (neg eps))) eps) #s(approx 3 #s(literal -1 binary64)))","#s(approx 3 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(approx (/ (+ 3 (exp (neg eps))) eps) #s(approx 3 #s(literal -1 binary64)))","#s(approx 3 #s(literal -1 binary64))","#s(approx (/ (+ 3 (exp (neg eps))) eps) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(approx (/ (+ 3 (exp (neg eps))) eps) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(approx (/ (+ 3 (exp (neg eps))) eps) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)"]],"time":330.72314453125,"type":"rewrite"},{"compiler":[[2787,311]],"memory":[[-5328800,6336320]],"time":9.218994140625,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","done",0.125,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","fresh",0.15234375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","done",33.50595002859496,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",31.048169573482316,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","done",62.27691460103505,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 a a))","fresh",62.23705044065906,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 a a))","fresh",62.61767380793955,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","done",62.688527269217694,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 a))","fresh",62.769395192911574,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","done",0.15625,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 #s(approx (- (/ b a) -1) (/.f64 b a)) b)))","fresh",31.169262580352164,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal 12 binary64)))","fresh",62.27308518898318,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))","fresh",62.2257023211265,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","done",62.238325469437534,"binary64"]],"compiler":[[783,118],[32,21],[32,21],[28,20],[28,20],[28,20],[28,19],[28,19],[27,19],[27,19],[40,26],[44,28],[34,23],[34,23],[26,18]],"count":[[72,14]],"kept":[{"done":[8,6],"fresh":[3,3],"new":[56,4],"picked":[5,1]}],"memory":[[633776,8903344]],"min-error":[[0.0,"binary64"]],"time":11.266845703125,"type":"prune"},{"accuracy":[0.04296875],"baseline":[0.04296875],"branch":[["a",0.04296875,1,"binary64"],["b",0.04296875,1,"binary64"],["eps",0.04296875,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",0.04296875,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[24,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal 12 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 #s(approx (- (/ b a) -1) (/.f64 b a)) b)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[-1128368,14936416]],"oracle":[64.0],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))"]],"repr":["binary64"],"time":25.926025390625,"times":[[6.291015625,"a"],[6.076904296875,"b"],[5.9951171875,"eps"],[5.6220703125,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[9.51290085087101],"baseline":[31.048169573482316],"branch":[["a",12.741357841826005,2,"binary64"],["b",9.51290085087101,2,"binary64"],["eps",28.250129054996425,3,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",31.048169573482316,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[17,2]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal 12 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (/.f64 #s(approx (- (/ b a) -1) (/.f64 b a)) b)))"]],"memory":[[3342368,12411392]],"oracle":[63.45779905527828],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"repr":["binary64"],"time":53.52197265625,"times":[[4.696044921875,"a"],[4.64599609375,"b"],[38.609130859375,"eps"],[3.889892578125,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[31.048169573482316],"baseline":[31.048169573482316],"branch":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",31.048169573482316,1,"binary64"],["eps",31.048169573482316,1,"binary64"],["a",31.048169573482316,1,"binary64"],["b",31.048169573482316,1,"binary64"]],"compiler":[[24,17],[1,3],[1,3],[1,3]],"count":[[15,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal 12 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"memory":[[-4582976,11639568]],"oracle":[63.41966659477247],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"repr":["binary64"],"time":19.59619140625,"times":[[3.97412109375,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"],[4.448974609375,"eps"],[4.758056640625,"a"],[4.52490234375,"b"]],"type":"regimes"},{"accuracy":[62.2257023211265],"baseline":[62.2257023211265],"branch":[["a",62.225702321126555,1,"binary64"],["b",62.22570232112655,1,"binary64"],["eps",62.225702321126526,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",62.2257023211265,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[14,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal 12 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (neg.f64 b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (-.f64 a b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (*.f64 a a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+.f64 (+.f64 b a) (+.f64 b a)))"]],"memory":[[3265344,11340816]],"oracle":[63.37948686376134],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))"]],"repr":["binary64"],"time":17.930908203125,"times":[[4.08203125,"a"],[4.199951171875,"b"],[4.137939453125,"eps"],[3.7919921875,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[62.238325469437505],"baseline":[62.238325469437534],"branch":[["a",62.238325469437505,1,"binary64"],["b",62.238325469437534,1,"binary64"],["eps",62.238325469437555,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",62.238325469437534,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[3,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (- 1 a) #s(literal 1 binary64)))"]],"link":["."],"memory":[[-2661776,6757440]],"name":["expq3 (problem 3.4.2)"],"oracle":[62.99869899855728],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)"]],"repr":["binary64"],"time":8.133056640625,"times":[[1.73779296875,"a"],[2.056884765625,"b"],[1.68017578125,"eps"],[1.497802734375,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"bstep":[[15.091064453125,1.9167221778526976e-181,1.5044217960644427e-177]],"compiler":[[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[26,16],[1,3]],"memory":[[-2225408,5933264]],"method":["binary-search"],"mixsample":[[0.847412109375,"ival-div",0],[0.08203125,"ival-true",0],[0.74462890625,"ival-add",0],[3.876953125,"ival-mult",0],[2.0380859375,"ival-expm1",0],[0.0546875,"ival-assert",0]],"outcomes":[[10.620361328125,0,"valid",128]],"stop":[["narrow-enough",1]],"time":17.7978515625,"type":"bsearch"},{"egraph":[[7,6542,188,0.030826501],[6,4028,188,0.028574018],[5,1503,188,0.021991857],[4,475,188,0.004953545],[3,245,188,0.001961557],[2,132,188,0.001259894],[1,68,188,0.000830161],[0,36,188,0.000579208]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","(if (<=.f64 b #s(literal 6843660926433293/4562440617622195218641171605700291324893228507248559930579192517899275167208677386505912811317371399778642309573594407310688704721375437998252661319722214188251994674360264950082874192246603776 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)"]],"memory":[[3901920,11477168]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal -1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) (-.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))))","(if (<=.f64 b #s(literal 6843660926433293/4562440617622195218641171605700291324893228507248559930579192517899275167208677386505912811317371399778642309573594407310688704721375437998252661319722214188251994674360264950082874192246603776 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)))","(if (<=.f64 b #s(literal 6843660926433293/4562440617622195218641171605700291324893228507248559930579192517899275167208677386505912811317371399778642309573594407310688704721375437998252661319722214188251994674360264950082874192246603776 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (/ (/ (+ b a) b) a) #s(literal -3 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) a)"]],"stop":[["node limit",1]],"time":111.587158203125,"type":"simplify"},{"compiler":[[188,36]],"memory":[[935424,935424]],"stop":[["fuel",1]],"time":1.369873046875,"type":"soundness"},{"compiler":[[188,36],[188,36],[7,7],[7,7],[24,17],[24,17],[40,26],[40,26],[40,26],[40,26],[40,26],[40,26]],"memory":[[1552448,26507392]],"remove-preprocessing":[["(sort a b)"],[],[],["(sort a b)"],[],["(sort a b)"]],"time":45.35302734375,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.01806640625,"type":"end"}]