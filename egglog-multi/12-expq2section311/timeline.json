[{"memory":[[11408,11408]],"time":0.047119140625,"type":"start"},{"compiler":[[11,7]],"memory":[[422880,422880]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.00036709150299429893,"valid":0.7514363066293299}],[11,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0007341830059885979,"valid":0.7510692151263356}],[10,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0014683660119771957,"valid":0.750335032120347}],[9,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0029367320239543915,"valid":0.7488666661083698}],[8,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.005873464047908783,"valid":0.7459299340844154}],[7,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.011746928095817566,"valid":0.7400564700365067}],[6,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.023493856191635132,"valid":0.7283095419406891}],[5,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.046987712383270264,"valid":0.704815685749054}],[4,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.09397542476654053,"valid":0.6578279733657837}],[3,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.18795084953308105,"valid":0.5638525485992432}],[2,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.3759016990661621,"valid":0.3759016990661621}],[1,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}]],"time":2.666015625,"type":"analyze"},{"bogosity":[{"infinite":0.00018212291621422583,"invalid":0.0,"precondition":0.24819660186767578,"valid":0.75162127521611}],"memory":[[16418336,182365488]],"mixsample":[[83.0634765625,"ival-div",0],[121.588623046875,"ival-exp",0],[31.287841796875,"ival->",0],[10.724853515625,"exact",0],[84.163818359375,"ival-expm1",0],[4.98193359375,"ival-assert",0]],"outcomes":[[532.565185546875,0,"valid",8256]],"time":802.364990234375,"type":"sample"},{"compiler":[[7,5],[17,7],[17,7]],"confusion":[[173,0,0,83]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",173,0,[],[[2]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",173,0,false,0,false],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,173],[0,83]],"maybe-confusion":[[173,0,0,0,0,83]],"memory":[[-4415200,31689824]],"mixsample":[[3.7705078125,"ival-div",0],[0.44921875,"ival-true",0],[6.016357421875,"ival-exp",0],[4.222900390625,"ival-expm1",0],[0.332763671875,"exact",0],[0.1962890625,"ival-assert",0]],"outcomes":[[26.375,0,"valid",512]],"time":69.35888671875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,5]],"egraph":[[0,14,5,0.000106784],[2,14,7,8.6347e-5],[1,13,7,9.5523e-5],[0,8,7,0.000167145],[0,5,7,9.2322e-5]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[-14576112,14902896]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":149.27294921875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.066162109375,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","next",40.866965701637646,"binary64"]],"compiler":[[7,5]],"memory":[[309312,309312]],"time":0.5009765625,"type":"prune"},{"egraph":[[0,14,11,9.7545e-5],[2,14,15,8.417e-5],[1,13,15,9.195e-5],[0,8,15,0.000171081],[0,5,15,7.6635e-5]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[492912,492912]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":6.013916015625,"type":"simplify"},{"compiler":[[17,7]],"locations":[["(exp.f64 x)","accuracy",0.0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.010097509768442016],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",39.760610093002704]],"memory":[[-1564816,6358256]],"mixsample":[[2.0712890625,"ival-div",0],[0.196533203125,"ival-true",0],[2.86962890625,"ival-exp",0],[1.85400390625,"ival-expm1",0],[0.335205078125,"exact",0],[0.07861328125,"ival-assert",0]],"outcomes":[[13.28515625,0,"valid",256]],"time":22.453125,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[710896,710896]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"series":[[0.586181640625,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","-inf"],[0.6318359375,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","inf"],[0.527099609375,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","0"]],"time":1.9990234375,"type":"series"},{"count":[[15,14]],"egraph":[[0,10260,87,0.068450454],[15,6870,105,0.027318279],[14,6130,105,0.017230271],[13,5581,105,0.013569106],[12,5216,105,0.012837584],[11,4930,105,0.011184071],[10,3369,105,0.015817984],[9,1981,105,0.010998329],[8,1506,105,0.009588941],[7,1088,105,0.006574569],[6,994,111,0.004832495],[5,972,111,0.004318288],[4,829,111,0.004796107],[3,574,111,0.00351465],[2,258,111,0.002010792],[1,122,111,0.000783753],[0,44,111,0.00041067]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"memory":[[459152,32521184]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (exp x) 1)","(expm1.f64 x)","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp x)","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":295.0078125,"type":"simplify"},{"count":[[3,36]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[-1385168,14931232]],"outputs":[["(neg.f64 (neg.f64 (expm1.f64 x)))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(-.f64 (/.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) #s(literal 1 binary64)))","(*.f64 (expm1.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(neg.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 #s(literal 0 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(neg.f64 (neg.f64 (exp.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x)))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(exp.f64 x)"]],"time":260.10302734375,"type":"rewrite"},{"compiler":[[875,178]],"memory":[[5829808,5829808]],"time":6.76416015625,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","fresh",41.35706646760443,"binary64"],["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","next",0.010097509768442016,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","fresh",40.888955436997065,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","next",20.227641122685746,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","next",20.188865362741975,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","next",20.20377134837799,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","next",20.265266896394078,"binary64"]],"compiler":[[11,8],[10,8],[8,8],[21,15],[16,12],[11,8],[13,10],[11,8],[10,8],[8,8],[21,15],[16,12],[11,8],[13,10]],"count":[[62,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[61,7],"picked":[1,0]}],"memory":[[-5615248,4810496]],"min-error":[[0.0,"binary64"]],"time":7.035888671875,"type":"prune"},{"egraph":[[0,149,142,0.000948582],[4,149,142,0.000561515],[3,124,142,0.000657881],[2,77,142,0.000734901],[1,53,142,0.000373017],[0,35,142,0.000368954],[0,22,142,0.000250616]],"inputs":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","(exp.f64 x)","x","#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(literal 1/12 binary64)","x","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(expm1.f64 x)","cost-diff",0],["#s(approx (- (exp x) 1) (expm1.f64 x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","cost-diff",0]],"memory":[[1483856,1483856]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","(exp.f64 x)","x","#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(literal 1/12 binary64)","x","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":11.489990234375,"type":"simplify"},{"compiler":[[123,19]],"locations":[["(*.f64 x x)","accuracy",0.0],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",0.03125],["(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","accuracy",0.05859375],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","accuracy",20.223734872685746],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.0],["(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",0.0859375],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","accuracy",20.188865362741975],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.0],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",20.265266896394078],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","accuracy",20.20377134837799],["(expm1.f64 x)","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["#s(approx (- (exp x) 1) (expm1.f64 x))","accuracy",0.0],["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","accuracy",0.010097509768442016]],"memory":[[-2525632,21267104]],"mixsample":[[4.226318359375,"ival-div",0],[4.98876953125,"ival-add",0],[3.56396484375,"ival-exp",0],[7.945556640625,"ival-mult",0],[3.774658203125,"ival-expm1",0],[0.121826171875,"ival-assert",0],[0.289794921875,"ival-true",0],[7.47412109375,"const",0],[0.388916015625,"exact",0]],"outcomes":[[52.188720703125,0,"valid",256]],"time":69.85205078125,"type":"localize"},{"count":[[14,33]],"inputs":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","(exp.f64 x)","#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[2559312,2559312]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(pow x 2)","(/ (exp x) (- (exp x) 1))","(exp x)","(- (exp x) 1)","1/2","(+ 1/2 (/ 1 x))","(* 1/12 x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"series":[[2.943115234375,"((/ (exp x) (- (exp x) 1)) (exp x) (- (exp x) 1) (- (exp x) 1) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","-inf"],[1.720947265625,"((/ (exp x) (- (exp x) 1)) (exp x) (- (exp x) 1) (- (exp x) 1) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","inf"],[1.59814453125,"((/ (exp x) (- (exp x) 1)) (exp x) (- (exp x) 1) (- (exp x) 1) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","0"]],"time":7.200927734375,"type":"series"},{"count":[[33,32]],"egraph":[[0,8427,210,0.086105655],[4,7694,244,0.020628677],[3,2512,244,0.028730833],[2,756,274,0.009857994],[1,257,284,0.00287784],[0,91,285,0.001490403]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(pow x 2)","(/ (exp x) (- (exp x) 1))","(exp x)","(- (exp x) 1)","1/2","(+ 1/2 (/ 1 x))","(* 1/12 x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"memory":[[6884816,36414288]],"method":["egg-herbie"],"outputs":[["(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1/12","#s(literal 1/12 binary64)","(+ 1/12 (* -1/720 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(pow x 2)","(*.f64 x x)","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp x)","(exp.f64 x)","(- (exp x) 1)","(expm1.f64 x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (/ 1 x))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(* 1/12 x)","(*.f64 #s(literal 1/12 binary64) x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(* -1/720 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/720 binary64))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(* -1/720 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/720 binary64))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) (fma.f64 (*.f64 #s(literal 1/720 binary64) x) x #s(literal -1/12 binary64)))) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":237.162109375,"type":"simplify"},{"count":[[14,126]],"inputs":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","(exp.f64 x)","#s(approx (- (exp x) 1) (expm1.f64 x))","(expm1.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[-5767728,15778432]],"outputs":[["(/.f64 #s(literal 1 binary64) #s(approx -43201/373248000 #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)","#s(approx -43201/373248000 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)","#s(approx -43201/373248000 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)","#s(approx -43201/373248000 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)","#s(approx -43201/373248000 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)","#s(approx -43201/373248000 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 1/12 binary64)","#s(literal -1/720 binary64)","#s(literal -43201/373248000 binary64)","#s(literal -59/518400 binary64)","#s(literal 43199/373248000 binary64)","#s(literal 61/518400 binary64)","#s(literal -1/12 binary64)","#s(literal 1/144 binary64)","#s(literal 1/1728 binary64)","#s(literal 1/720 binary64)","#s(literal -1/373248000 binary64)","#s(literal 1/518400 binary64)","#s(literal -1/8640 binary64)"]],"time":402.52490234375,"type":"rewrite"},{"compiler":[[834,162]],"memory":[[-2973152,4614976]],"time":7.10498046875,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","done",0.010097509768442016,"binary64"],["(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","next",42.17435982443694,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","fresh",40.888955436997065,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.227641122685746,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.188865362741975,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","next",62.2169331677681,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",20.234527572851174,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",20.20377134837799,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",20.265266896394078,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","next",61.99232561202144,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","next",62.03417590514009,"binary64"]],"compiler":[[10,8],[6,6],[8,8],[21,15],[16,12],[18,13],[22,15],[11,8],[13,10],[21,15],[15,11],[6,6],[8,8],[18,13],[22,15],[21,15],[15,11]],"count":[[56,11]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[49,5],"picked":[5,5]}],"memory":[[5122192,5122192]],"min-error":[[0.0,"binary64"]],"time":7.02001953125,"type":"prune"},{"egraph":[[0,288,174,0.001705555],[5,288,184,0.001023864],[4,243,184,0.00103444],[3,144,184,0.000979014],[2,86,184,0.000646422],[1,61,184,0.000633812],[0,42,184,0.000461585],[0,29,184,0.000263143]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(literal 1/12 binary64)","x","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","(exp.f64 x)","x","#s(approx -43201/373248000 #s(literal 1 binary64))","#s(literal 1 binary64)"]],"locations":[["#s(approx -43201/373248000 #s(literal 1 binary64))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","cost-diff",0],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","cost-diff",0],["(*.f64 #s(literal 1/12 binary64) x)","cost-diff",0],["#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","cost-diff",0],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0]],"memory":[[1967152,1967152]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(literal 1/12 binary64)","x","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","(exp.f64 x)","x","#s(approx -43201/373248000 #s(literal 1 binary64))","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":15.14599609375,"type":"simplify"},{"compiler":[[134,24]],"locations":[["(exp.f64 x)","accuracy",0.0],["(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","accuracy",0.00390625],["#s(approx -43201/373248000 #s(literal 1 binary64))","accuracy",62.989320936980214],["(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","accuracy",0.0859375],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","accuracy",20.188865362741975],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","accuracy",42.57945731857278],["(*.f64 #s(literal 1/12 binary64) x)","accuracy",0.328125],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","accuracy",20.188865362741975],["#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","accuracy",42.37297136923183],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","accuracy",20.265266896394078],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","accuracy",42.57945731857278],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","accuracy",0.02734375],["(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","accuracy",0.05859375],["(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",1.6298137835119761],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",20.223734872685746]],"memory":[[-1888736,23299104]],"mixsample":[[7.3173828125,"ival-div",0],[6.338623046875,"ival-add",0],[3.14404296875,"ival-exp",0],[9.51513671875,"ival-mult",0],[1.902099609375,"ival-expm1",0],[0.106201171875,"ival-assert",0],[0.2255859375,"ival-true",0],[9.723388671875,"const",0],[0.293212890625,"exact",0]],"outcomes":[[55.69580078125,0,"valid",256]],"time":71.487060546875,"type":"localize"},{"count":[[15,41]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","(exp.f64 x)","#s(approx -43201/373248000 #s(literal 1 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))"]],"memory":[[-4914400,2898480]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/12 x))))","(+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))))","1/2","(+ 1/2 (* 1/12 x))","(+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))","(* 1/12 x)","-373248000/43201","(- (* -373248000/43201 x) 373248000/43201)","(- (* x (- (* -186624000/43201 x) 373248000/43201)) 373248000/43201)","(- (* x (- (* x (- (* -62208000/43201 x) 186624000/43201)) 373248000/43201)) 373248000/43201)","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(/ (exp x) (- (exp x) 1))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 4))","(* (pow x 4) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(+ 1/2 (/ 1 x))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -373248000/43201 (exp x))","(exp x)","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))"]],"series":[[3.15283203125,"((/ (exp x) (- (exp x) 1)) (/ (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) -43201/373248000) (exp x) -43201/373248000 (+ (* (* x x) -1/720) 1/12))","x","-inf"],[1.76806640625,"((/ (exp x) (- (exp x) 1)) (/ (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) -43201/373248000) (exp x) -43201/373248000 (+ (* (* x x) -1/720) 1/12))","x","inf"],[1.087890625,"((/ (exp x) (- (exp x) 1)) (/ (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) -43201/373248000) (exp x) -43201/373248000 (+ (* (* x x) -1/720) 1/12))","x","0"]],"time":6.85205078125,"type":"series"},{"count":[[41,41]],"egraph":[[0,8048,288,0.075989578],[4,7828,332,0.016924691],[3,2583,332,0.030757886],[2,761,350,0.010216609],[1,269,358,0.00237319],[0,105,359,0.001092045]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/12 x))))","(+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))))","1/2","(+ 1/2 (* 1/12 x))","(+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))","(* 1/12 x)","-373248000/43201","(- (* -373248000/43201 x) 373248000/43201)","(- (* x (- (* -186624000/43201 x) 373248000/43201)) 373248000/43201)","(- (* x (- (* x (- (* -62208000/43201 x) 186624000/43201)) 373248000/43201)) 373248000/43201)","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(/ (exp x) (- (exp x) 1))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 4))","(* (pow x 4) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(+ 1/2 (/ 1 x))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -373248000/43201 (exp x))","(exp x)","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))"]],"memory":[[5708032,35245200]],"method":["egg-herbie"],"outputs":[["(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64) #s(literal 1 binary64))) x)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/12 x))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64) #s(literal 1 binary64)))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/12 x))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* 1/12 x)","(*.f64 #s(literal 1/12 binary64) x)","-373248000/43201","#s(literal -373248000/43201 binary64)","(- (* -373248000/43201 x) 373248000/43201)","(fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64))","(- (* x (- (* -186624000/43201 x) 373248000/43201)) 373248000/43201)","(fma.f64 (fma.f64 #s(literal -186624000/43201 binary64) x #s(literal -373248000/43201 binary64)) x #s(literal -373248000/43201 binary64))","(- (* x (- (* x (- (* -62208000/43201 x) 186624000/43201)) 373248000/43201)) 373248000/43201)","(fma.f64 (fma.f64 (fma.f64 #s(literal -62208000/43201 binary64) x #s(literal -186624000/43201 binary64)) x #s(literal -373248000/43201 binary64)) x #s(literal -373248000/43201 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","1/12","#s(literal 1/12 binary64)","(+ 1/12 (* -1/720 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(* -1/720 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/720 binary64))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* -1/720 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64))","(* (pow x 4) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 1/720 binary64)))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/12 binary64)) #s(literal -1/720 binary64)))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/12 binary64)) #s(literal -1/720 binary64)) #s(literal 1 binary64))","(+ 1/2 (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))","(* -373248000/43201 (exp x))","(*.f64 #s(literal -373248000/43201 binary64) (exp.f64 x))","(exp x)","(exp.f64 x)","(* -1/720 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/720 binary64))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) (fma.f64 (*.f64 #s(literal 1/720 binary64) x) x #s(literal -1/12 binary64))) (neg.f64 x))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":221.510009765625,"type":"simplify"},{"count":[[15,99]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","(exp.f64 x)","#s(approx -43201/373248000 #s(literal 1 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))"]],"memory":[[-4162688,15647712]],"outputs":[["#s(approx 1/720 #s(literal -1/720 binary64))","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal -1/8640 binary64)","#s(literal -1/373248000 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -43201/373248000 binary64)","#s(literal 4 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal -1/8640 binary64)","#s(literal -1/373248000 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -43201/373248000 binary64)","#s(literal 4 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal -1/8640 binary64)","#s(literal -1/373248000 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -43201/373248000 binary64)","#s(literal 4 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(approx 1/720 #s(approx 1/720 #s(literal -1/720 binary64)))","#s(approx 1/720 #s(literal -1/720 binary64))","#s(approx 1/720 #s(approx 1/720 #s(literal -1/720 binary64)))","#s(approx 1/720 #s(literal -1/720 binary64))","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal -1/8640 binary64)","#s(literal -1/373248000 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -43201/373248000 binary64)","#s(literal 4 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(approx 1/720 (fma.f64 #s(literal -1/720 binary64) #s(literal -1/720 binary64) #s(approx 1/720 #s(literal -1/720 binary64))))","(fma.f64 #s(literal -1/720 binary64) #s(literal -1/720 binary64) #s(approx 1/720 #s(literal -1/720 binary64)))","(/.f64 #s(literal -1/720 binary64) #s(approx 1/720 #s(literal -1/720 binary64)))","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal -1/8640 binary64)","#s(literal -1/373248000 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -43201/373248000 binary64)","#s(literal 4 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)","#s(approx 1/720 #s(literal -1/720 binary64))","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal -1/8640 binary64)","#s(literal -1/373248000 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -43201/373248000 binary64)","#s(literal 4 binary64)","#s(literal -1 binary64)","#s(literal 5 binary64)"]],"time":503.572021484375,"type":"rewrite"},{"compiler":[[1099,211]],"memory":[[5410448,5410448]],"time":9.035888671875,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","done",0.010097509768442016,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","fresh",40.888955436997065,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.227641122685746,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.188865362741975,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","done",20.234527572851174,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",20.273079396388884,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",20.20377134837799,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",20.265266896394078,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","next",62.03122341647981,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","next",42.5385598188128,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","next",61.98279548783779,"binary64"],["#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","fresh",62.1388789079364,"binary64"],["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","next",61.957480686368534,"binary64"]],"compiler":[[10,8],[8,8],[21,15],[16,12],[22,15],[26,19],[11,8],[13,10],[9,7],[9,7],[9,7],[9,7],[6,6],[8,8],[26,19],[9,7],[9,7],[9,7],[9,7],[6,6]],"count":[[69,13]],"kept":[{"done":[5,5],"fresh":[1,1],"new":[58,6],"picked":[5,1]}],"memory":[[-1973440,6180352]],"min-error":[[0.0,"binary64"]],"time":7.843994140625,"type":"prune"},{"egraph":[[0,87,97,0.000755961],[4,87,113,0.000371175],[3,82,113,0.000379492],[2,54,113,0.000375999],[1,42,113,0.000284774],[0,30,113,0.000330941],[0,27,113,0.000201263]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64))","#s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(literal -373248000/43201 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(literal -2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(literal 5 binary64)"]],"locations":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","cost-diff",0],["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","cost-diff",0],["#s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0]],"memory":[[1013648,1013648]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64))","#s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(literal -373248000/43201 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(literal -2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(literal 5 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":9.39404296875,"type":"simplify"},{"compiler":[[84,24]],"locations":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","accuracy",62.03122341647981],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","accuracy",42.5385598188128],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","accuracy",61.98279548783779],["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","accuracy",20.71992704528896],["(fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.01171875],["(/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",1.6298137835119761],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",20.223734872685746],["#s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64))","accuracy",20.51737286127153]],"memory":[[3186704,18779552]],"mixsample":[[6.495849609375,"ival-div",0],[3.324951171875,"ival-add",0],[2.93115234375,"ival-exp",0],[6.324462890625,"ival-mult",0],[1.892578125,"ival-expm1",0],[0.1005859375,"ival-assert",0],[0.203857421875,"ival-true",0],[12.78515625,"const",0],[0.64111328125,"exact",0]],"outcomes":[[46.037353515625,0,"valid",256]],"time":56.7119140625,"type":"localize"},{"count":[[8,28]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64))","#s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64))","#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))"]],"memory":[[-10200720,1507904]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/12 x))))","(+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))))","1/2","(+ 1/2 (* 1/12 x))","(+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))","-373248000/43201","(- (* -373248000/43201 x) 373248000/43201)","(- (* x (- (* -186624000/43201 x) 373248000/43201)) 373248000/43201)","(- (* x (- (* x (- (* -62208000/43201 x) 186624000/43201)) 373248000/43201)) 373248000/43201)","(/ (exp x) (- (exp x) 1))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 4))","(* (pow x 4) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -373248000/43201 (exp x))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"series":[[36.64306640625,"((/ (exp x) (- (exp x) 1)) (/ (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) (/ (exp x) -43201/373248000) (/ (exp x) (- (exp x) 1)) (/ (exp x) (- (exp x) 1)) (/ (exp x) (- (exp x) 1)))","x","-inf"],[0.81591796875,"((/ (exp x) (- (exp x) 1)) (/ (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) (/ (exp x) -43201/373248000) (/ (exp x) (- (exp x) 1)) (/ (exp x) (- (exp x) 1)) (/ (exp x) (- (exp x) 1)))","x","inf"],[0.442138671875,"((/ (exp x) (- (exp x) 1)) (/ (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) x) 1) (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) (/ (exp x) -43201/373248000) (/ (exp x) (- (exp x) 1)) (/ (exp x) (- (exp x) 1)) (/ (exp x) (- (exp x) 1)))","x","0"]],"time":38.533935546875,"type":"series"},{"count":[[28,28]],"egraph":[[0,8483,220,0.060832786],[4,5615,253,0.028543842],[3,1895,269,0.019113208],[2,595,274,0.00741323],[1,200,274,0.0019039],[0,85,275,0.000835857]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/12 x))))","(+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))))","1/2","(+ 1/2 (* 1/12 x))","(+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))","-373248000/43201","(- (* -373248000/43201 x) 373248000/43201)","(- (* x (- (* -186624000/43201 x) 373248000/43201)) 373248000/43201)","(- (* x (- (* x (- (* -62208000/43201 x) 186624000/43201)) 373248000/43201)) 373248000/43201)","(/ (exp x) (- (exp x) 1))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 4))","(* (pow x 4) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -373248000/43201 (exp x))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"memory":[[6791200,28140336]],"method":["egg-herbie"],"outputs":[["(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64) #s(literal 1 binary64))) x)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/12 x))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64) #s(literal 1 binary64)))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/12 x))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2)))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","-373248000/43201","#s(literal -373248000/43201 binary64)","(- (* -373248000/43201 x) 373248000/43201)","(fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64))","(- (* x (- (* -186624000/43201 x) 373248000/43201)) 373248000/43201)","(fma.f64 (fma.f64 #s(literal -186624000/43201 binary64) x #s(literal -373248000/43201 binary64)) x #s(literal -373248000/43201 binary64))","(- (* x (- (* x (- (* -62208000/43201 x) 186624000/43201)) 373248000/43201)) 373248000/43201)","(fma.f64 (fma.f64 (fma.f64 #s(literal -62208000/43201 binary64) x #s(literal -186624000/43201 binary64)) x #s(literal -373248000/43201 binary64)) x #s(literal -373248000/43201 binary64))","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(* -1/720 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/720 binary64))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(fma.f64 #s(literal 1/12 binary64) x (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))","(* -1/720 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64))","(* (pow x 4) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 #s(literal 1/12 binary64) (*.f64 x x)) #s(literal 1/720 binary64)))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/12 binary64)) (*.f64 x x)) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(fma.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/12 binary64)) (*.f64 x x)) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))","(* -373248000/43201 (exp x))","(*.f64 #s(literal -373248000/43201 binary64) (exp.f64 x))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))","(fma.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/12 binary64) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":185.14013671875,"type":"simplify"},{"count":[[8,8]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64))","#s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64))","#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))"]],"memory":[[-1032816,11568320]],"outputs":[["#s(approx (/ (exp x) (+ (exp x) -1)) (/.f64 (fma.f64 #s(approx (+ (+ 1/2 (* 1/12 x)) (* (pow x 3) -1/720)) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(approx (+ (+ 1/2 (* 1/12 x)) (* (pow x 3) -1/720)) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(approx (+ (+ 1/2 (* 1/12 x)) (* (pow x 3) -1/720)) #s(literal 1/2 binary64)) x #s(literal 1 binary64))","#s(approx (+ (+ 1/2 (* 1/12 x)) (* (pow x 3) -1/720)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (+ (exp x) -1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (+ (exp x) -1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (+ (exp x) -1)) #s(literal 5 binary64))"]],"time":867.916015625,"type":"rewrite"},{"compiler":[[812,149]],"memory":[[-4751312,3159072]],"time":5.260986328125,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","done",0.010097509768442016,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","fresh",40.888955436997065,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.227641122685746,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.188865362741975,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","done",20.234527572851174,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","done",20.273079396388884,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",20.20377134837799,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",20.265266896394078,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","done",62.03122341647981,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","done",42.5385598188128,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","done",61.98279548783779,"binary64"],["#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","fresh",62.1388789079364,"binary64"],["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","done",61.957480686368534,"binary64"]],"compiler":[[247,76],[10,8],[8,8],[21,15],[16,12],[22,15],[26,19],[11,8],[13,10],[9,7],[9,7],[9,7],[9,7],[6,6]],"count":[[46,13]],"kept":[{"done":[6,6],"fresh":[2,2],"new":[33,0],"picked":[5,5]}],"memory":[[5974448,5974448]],"min-error":[[0.0,"binary64"]],"time":8.946044921875,"type":"prune"},{"accuracy":[0.010097509768442016],"baseline":[0.010097509768442016],"branch":[["x",0.010097509768442016,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.010097509768442016,1,"binary64"],["(exp.f64 x)",0.010097509768442016,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[19,1]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[1380080,9258112]],"oracle":[63.33077076826476],"outputs":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))"]],"repr":["binary64"],"time":16.35205078125,"times":[[5.193115234375,"x"],[4.64892578125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[5.073974609375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.01171875],"baseline":[20.188865362741975],"branch":[["x",0.01171875,2,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.843830309390472,2,"binary64"],["(exp.f64 x)",0.01171875,2,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[17,2]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))"]],"memory":[[-8974672,8651696]],"oracle":[63.33077076826476],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":17.2109375,"times":[[4.85107421875,"x"],[4.796875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[4.737060546875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.08876726793275459],"baseline":[20.188865362741975],"branch":[["x",0.08876726793275459,2,"binary64"],["(exp.f64 x)",0.08876726793275459,2,"binary64"]],"compiler":[[1,1],[2,2]],"count":[[16,2]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (exp.f64 x) #s(approx -43201/373248000 #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))"]],"memory":[[6093568,6093568]],"oracle":[63.33077076826476],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":8.993896484375,"times":[[4.340087890625,"x"],[3.446044921875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.14763640287385543],"baseline":[20.188865362741975],"branch":[["x",0.14763640287385543,2,"binary64"],["(exp.f64 x)",0.14763640287385543,2,"binary64"]],"compiler":[[1,1],[2,2]],"count":[[12,2]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"memory":[[-3093232,5151120]],"oracle":[63.092370712729604],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":7.884033203125,"times":[[3.862060546875,"x"],[3.031982421875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.4067953451297535],"baseline":[20.20377134837799],"branch":[["x",0.4067953451297535,2,"binary64"],["(exp.f64 x)",0.4067953451297535,2,"binary64"]],"compiler":[[1,1],[2,2]],"count":[[11,2]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 (fma.f64 #s(approx (+ (* (+ (* (* x x) -1/720) 1/12) x) 1/2) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"memory":[[4933360,4933360]],"oracle":[63.092370712729604],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))"]],"repr":["binary64"],"time":7.93701171875,"times":[[3.818115234375,"x"],[2.991943359375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.8323184555835124],"baseline":[20.20377134837799],"branch":[["x",0.8323184555835124,2,"binary64"],["(exp.f64 x)",0.8323184555835124,2,"binary64"]],"compiler":[[1,1],[2,2]],"count":[[9,2]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-3760432,4488560]],"oracle":[63.092370712729604],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":7.867919921875,"times":[[3.82421875,"x"],[3.190185546875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[42.5385598188128],"baseline":[42.5385598188128],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",42.53855981881281,1,"binary64"],["x",42.53855981881281,1,"binary64"],["(exp.f64 x)",42.5385598188128,1,"binary64"]],"compiler":[[7,5],[1,1],[2,2]],"count":[[8,1]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 5 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) -43201/373248000) (fma.f64 #s(literal -373248000/43201 binary64) x #s(literal -373248000/43201 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))"]],"memory":[[-2156464,6017488]],"oracle":[63.092370712729604],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":9.260009765625,"times":[[2.633056640625,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[3.02001953125,"x"],[2.195068359375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[61.957480686368584],"baseline":[61.957480686368534],"branch":[["x",61.95748068636861,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",61.957480686368584,1,"binary64"],["(exp.f64 x)",61.9574806863686,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[2,1]],"inputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal -2 binary64))"]],"link":["."],"memory":[[4014016,4014016]],"name":["expq2 (section 3.11)"],"oracle":[62.00165070394337],"outputs":[["#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))"]],"repr":["binary64"],"time":7.05908203125,"times":[[2.10498046875,"x"],[1.843994140625,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.994140625,"(exp.f64 x)"]],"type":"regimes"},{"bstep":[[0.260986328125,0.8553484718550344,0.9985214894078527]],"compiler":[[7,7],[2,2]],"memory":[[169984,169984]],"method":["left-value"],"time":1.1201171875,"type":"bsearch"},{"bstep":[[0.076904296875,0.0,0.8553484718550344]],"compiler":[[7,7],[2,2]],"memory":[[153312,153312]],"method":["left-value"],"time":0.658935546875,"type":"bsearch"},{"bstep":[[0.0419921875,0.0,0.8553484718550344]],"compiler":[[7,7],[2,2]],"memory":[[149136,149136]],"method":["left-value"],"time":0.3818359375,"type":"bsearch"},{"bstep":[[0.031982421875,0.0,0.8553484718550344]],"compiler":[[7,7],[2,2]],"memory":[[147824,147824]],"method":["left-value"],"time":0.328125,"type":"bsearch"},{"bstep":[[0.037109375,0.0,0.8553484718550344]],"compiler":[[7,7],[2,2]],"memory":[[146448,146448]],"method":["left-value"],"time":0.375,"type":"bsearch"},{"egraph":[[16,1339,175,0.004587777],[15,1337,175,0.004440193],[14,1334,175,0.004122205],[13,1332,175,0.004077356],[12,1324,175,0.004185162],[11,1298,175,0.004757124],[10,1268,175,0.004875003],[9,799,175,0.008731551],[8,548,175,0.004225868],[7,389,175,0.002341765],[6,202,175,0.00222511],[5,143,175,0.001581328],[4,106,175,0.001231538],[3,89,175,0.001043644],[2,70,176,0.001042194],[1,56,176,0.000851483],[0,42,176,0.000822485]],"inputs":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","(if (<=.f64 (exp.f64 x) #s(literal 8106479329266893/9007199254740992 binary64)) (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))"]],"memory":[[-2710368,6111520]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) #s(approx (- (exp x) 1) (expm1.f64 x)))","(if (<=.f64 (exp.f64 x) #s(literal 8106479329266893/9007199254740992 binary64)) (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 8106479329266893/9007199254740992 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x)))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64)) #s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) #s(literal 0 binary64))","#s(approx (/ (exp x) -43201/373248000) #s(literal -373248000/43201 binary64))"]],"stop":[["saturated",1]],"time":69.590087890625,"type":"simplify"},{"compiler":[[175,41]],"memory":[[1974176,1974176]],"stop":[["fuel",1]],"time":3.325927734375,"type":"soundness"},{"compiler":[[175,41],[175,41],[6,6],[6,6],[7,5],[7,5]],"memory":[[2042176,34129392]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[]],"time":56.344970703125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01806640625,"type":"end"}]