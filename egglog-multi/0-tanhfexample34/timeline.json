[{"memory":[[10016,10016]],"time":0.02587890625,"type":"start"},{"compiler":[[9,8]],"memory":[[6913184,31673440]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5002439022064209,"valid":0.4992678165435791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5007319450378418,"valid":0.4987797737121582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5017080307006836,"valid":0.4978036880493164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5036602020263672,"valid":0.4958515167236328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5075645446777344,"valid":0.4919471740722656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5153732299804688,"valid":0.48413848876953125}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5309906005859375,"valid":0.4685211181640625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.562225341796875,"valid":0.437286376953125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.62469482421875,"valid":0.37481689453125}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.7496337890625,"valid":0.2498779296875}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":112.1259765625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[978352,320944400]],"mixsample":[[89.858642578125,"adjust",800],[135.62890625,"ival-div",0],[0.026123046875,"ival-div",400],[1.474609375,"ival-cos",6000],[530.916748046875,"ival-cos",1600],[0.124267578125,"adjust",4000],[0.0517578125,"ival-sub",2000],[3.870361328125,"ival-assert",0],[124.2529296875,"ival-sub",0],[316.347412109375,"ival-cos",0],[0.019775390625,"ival-sub",400],[76.267578125,"ival-cos",400],[2.490478515625,"ival-sin",4000],[49.48486328125,"adjust",2000],[0.1201171875,"ival-sin",400],[0.0107421875,"ival-sub",800],[277.19482421875,"ival-sin",0],[0.018798828125,"ival-div",800],[162.760009765625,"ival-cos",3600],[8.06494140625,"ival-true",0],[9.5126953125,"adjust",2800],[10.01904296875,"ival-sin",2000],[0.19482421875,"ival-div",2000],[0.125,"ival-div",4000],[0.04833984375,"ival-sub",4000],[0.34716796875,"ival-sin",800],[7.1552734375,"exact",0]],"outcomes":[[190.6826171875,1,"valid",1257],[898.40966796875,2,"valid",2249],[9.5029296875,4,"valid",5],[302.248291015625,3,"valid",538],[707.89404296875,0,"valid",4207]],"time":2474.91015625,"type":"sample"},{"compiler":[[7,6],[19,8],[19,8]],"confusion":[[122,1,1,132]],"explanations":[["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","u/n",49,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",49]],[[]]],["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",74,5,[],[[1]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",73,1,[-0.05306350726621964],0,false],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",54,0,false,5,[1.0970894020209562e-157]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,123],[0,133]],"maybe-confusion":[[122,1,0,1,4,128]],"memory":[[-15744784,43556016]],"mixsample":[[6.387939453125,"ival-div",0],[3.8154296875,"adjust",800],[23.111083984375,"ival-cos",1600],[15.676025390625,"ival-sin",0],[0.200927734375,"ival-assert",0],[8.964111328125,"ival-cos",3600],[5.384521484375,"ival-sub",0],[0.377685546875,"adjust",2800],[0.44873046875,"ival-true",0],[14.666748046875,"ival-cos",0],[2.936279296875,"ival-cos",400],[0.35498046875,"exact",0],[2.04052734375,"adjust",2000]],"outcomes":[[8.388427734375,1,"valid",68],[39.643310546875,2,"valid",128],[16.466552734375,3,"valid",30],[38.336181640625,0,"valid",286]],"time":149.94189453125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,626,4,0.001570184],[17,626,4,0.002730348],[16,625,4,0.002718501],[15,618,4,0.002858076],[14,611,4,0.002636734],[13,607,4,0.002733489],[12,601,4,0.002968997],[11,593,4,0.002737412],[10,590,4,0.002876269],[9,534,4,0.004089575],[8,317,4,0.003119669],[7,188,4,0.001887016],[6,114,4,0.000903808],[5,81,4,0.000627143],[4,58,4,0.000422505],[3,37,4,0.000423945],[2,26,4,0.000190901],[1,20,4,0.000152497],[0,10,4,0.000192498],[0,6,7,0.00014343]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"memory":[[274752,16347712]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(negabs x)"]],"time":185.362060546875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43696,43696]],"time":0.112060546875,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","next",27.32617806815606,"binary64"]],"compiler":[[7,6]],"memory":[[310912,310912]],"time":0.625,"type":"prune"},{"egraph":[[0,626,14,0.002021828],[17,626,14,0.002798097],[16,625,14,0.002867146],[15,618,14,0.003012203],[14,611,14,0.003531487],[13,607,14,0.003189722],[12,601,14,0.003150885],[11,593,14,0.002537737],[10,590,14,0.002859328],[9,534,14,0.00447973],[8,317,14,0.00318437],[7,188,14,0.001744535],[6,114,14,0.000963472],[5,81,14,0.000543857],[4,58,14,0.000381316],[3,37,14,0.000276433],[2,26,14,0.000249449],[1,20,14,0.000167477],[0,10,14,0.000173777],[0,6,17,9.6466e-5]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","cost-diff",3]],"memory":[[1505328,1505328]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":46.950927734375,"type":"simplify"},{"compiler":[[19,8]],"locations":[["(cos.f64 x)","accuracy",0.15625],["(sin.f64 x)","accuracy",0.158535009768442],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","accuracy",12.145863238452622],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",14.85415351974099]],"memory":[[2062720,11196704]],"mixsample":[[3.38134765625,"ival-div",0],[2.257568359375,"adjust",800],[12.050048828125,"ival-cos",1600],[9.370849609375,"ival-sin",0],[0.123291015625,"ival-assert",0],[4.7060546875,"ival-cos",3600],[6.0791015625,"ival-sub",0],[0.217529296875,"adjust",2800],[0.208251953125,"ival-true",0],[8.8095703125,"ival-cos",0],[1.6953125,"ival-cos",400],[0.174072265625,"exact",0],[1.0791015625,"adjust",2000]],"outcomes":[[4.364501953125,1,"valid",34],[24.87109375,2,"valid",64],[8.655029296875,3,"valid",15],[23.13623046875,0,"valid",143]],"time":68.83203125,"type":"localize"},{"count":[[4,20]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[882144,882144]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"series":[[0.75,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","-inf"],[0.56494140625,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","inf"],[0.89794921875,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","0"]],"time":2.47802734375,"type":"series"},{"count":[[20,19]],"egraph":[[0,8041,172,0.090858387],[8,6812,196,0.024235118],[7,5339,196,0.021715239],[6,4608,196,0.013503894],[5,4256,196,0.010056634],[4,3002,196,0.012884515],[3,1661,196,0.008689602],[2,555,196,0.00548981],[1,224,202,0.001722795],[0,79,202,0.000764886]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"memory":[[1813264,41062080]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(sin x)","(sin.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":285.68798828125,"type":"simplify"},{"count":[[4,46]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[-1281056,14867168]],"outputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(neg.f64 (*.f64 #s(literal 1 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(neg.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(neg.f64 (neg.f64 (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(sin.f64 x)"]],"time":275.75,"type":"rewrite"},{"compiler":[[898,227]],"memory":[[-5589072,6358464]],"time":53.803955078125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","next",27.50741334417784,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","next",27.35258287778239,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",27.32617806815606,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","fresh",27.510340157293754,"binary64"],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","fresh",29.606201797383253,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",29.15174255221845,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","fresh",27.689930201491787,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","fresh",27.55365722646946,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","fresh",27.462103224353353,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","fresh",0.42423637698974637,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","next",34.35259790082294,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",34.45948336898044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","fresh",34.52621989649066,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","next",34.34398268635298,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","next",0.3203888672213043,"binary64"]],"compiler":[[21,10],[11,8],[7,6],[18,13],[31,18],[26,12],[25,13],[9,7],[13,8],[9,9],[26,16],[21,14],[16,12],[11,9],[12,10],[21,10],[11,8],[18,13],[31,18],[26,12],[25,13],[9,7],[13,8],[9,9],[26,16],[21,14],[16,12],[11,9],[12,10]],"count":[[66,15]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[65,14],"picked":[1,1]}],"memory":[[76704,8422160]],"min-error":[[0.08041000976844201,"binary64"]],"time":12.032958984375,"type":"prune"},{"egraph":[[0,8173,172,0.042480761],[10,7577,172,0.014511091],[9,7509,172,0.017508229],[8,7339,172,0.01661271],[7,7056,172,0.019365521],[6,6342,172,0.024431352],[5,5177,172,0.02357266],[4,1935,172,0.020842536],[3,560,172,0.007476072],[2,184,172,0.002007217],[1,96,172,0.000801299],[0,52,172,0.00053012],[0,31,223,0.000325172]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64))","#s(literal 17/40320 binary64)","(*.f64 x x)","x","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(sin.f64 x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(sin.f64 x)"]],"locations":[["(+.f64 (cos.f64 x) #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","cost-diff",3],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","cost-diff",14],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","cost-diff",3],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","cost-diff",4],["(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","cost-diff",0]],"memory":[[-1696224,23830416]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 17/40320 binary64) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 17/40320 binary64) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 17/40320 binary64) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 17/40320 binary64) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64))","(fma.f64 (*.f64 x x) #s(literal 17/40320 binary64) #s(literal 1/240 binary64))","#s(literal 17/40320 binary64)","(*.f64 x x)","x","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(sin.f64 x)","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(sin.f64 x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","x","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(sin.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":288.257080078125,"type":"simplify"},{"compiler":[[206,30]],"locations":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",0.571763735039164],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","accuracy",12.145863238452622],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",14.85415351974099],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","accuracy",15.235940497000971],["(sin.f64 x)","accuracy",0.158535009768442],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","accuracy",0.2578125],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","accuracy",12.145863238452622],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",14.85415351974099],["(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","accuracy",0.025722509768442016],["(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","accuracy",0.053066259768442016],["(fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64))","accuracy",0.12337875976844201],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","accuracy",34.35259790082296],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","accuracy",34.34398268635298],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","accuracy",0.0],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.3203888672213043]],"memory":[[4157616,44001024]],"mixsample":[[7.9306640625,"adjust",800],[13.5576171875,"ival-div",0],[0.867431640625,"ival-div",400],[0.453125,"ival-sub",1600],[0.11279296875,"ival-assert",0],[0.7841796875,"ival-div",1600],[0.05078125,"ival-sub",3600],[4.880126953125,"ival-sub",0],[6.910400390625,"ival-tan",0],[9.16015625,"ival-cos",0],[5.634521484375,"ival-cos",1200],[1.699462890625,"ival-sub",400],[12.490966796875,"const",0],[0.02099609375,"ival-cos",400],[6.568603515625,"ival-add",0],[0.23583984375,"ival-sub",800],[0.5146484375,"ival-add",400],[1.04150390625,"adjust",2800],[4.595947265625,"ival-cos",1600],[0.05517578125,"ival-sub",2000],[0.054931640625,"ival-add",3600],[4.7939453125,"adjust",2000],[12.80126953125,"ival-mult",0],[0.415771484375,"ival-add",1600],[0.031005859375,"ival-sin",400],[7.585205078125,"ival-sin",0],[4.81591796875,"ival-cos",3600],[0.008056640625,"ival-div",800],[0.345703125,"ival-true",0],[0.157470703125,"ival-div",3600],[15.11328125,"ival-cos",2800],[0.355224609375,"exact",0],[0.007080078125,"ival-add",800]],"outcomes":[[17.4677734375,1,"valid",34],[59.5693359375,2,"valid",64],[23.52001953125,3,"valid",15],[55.667236328125,0,"valid",143]],"time":183.1318359375,"type":"localize"},{"count":[[19,58]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64))","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))"]],"memory":[[4218032,4218032]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))))","1/24","(+ 1/24 (* 1/240 (pow x 2)))","(+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1/240","(+ 1/240 (* 17/40320 (pow x 2)))","(+ 1/2 (* -3/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/16 (pow x 2)) 3/8)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/16 (* 1/640 (pow x 2)))) 3/8)))","(/ (- 1 (cos x)) (sin x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* 17/40320 (pow x 7))","(* (pow x 7) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(* (pow x 7) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(* (pow x 7) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (+ (* 1/240 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))))))","(* 17/40320 (pow x 6))","(* (pow x 6) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(* (pow x 6) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (+ (* 1/240 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))))))","(* 17/40320 (pow x 4))","(* (pow x 4) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(sin x)","(- 1 (cos x))","(cos x)","(/ 1 (+ 1 (cos x)))","(+ 1 (cos x))","(* 17/40320 (pow x 2))","(* (pow x 2) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(- (+ (cos x) (/ 1 (+ 1 (cos x)))) 1)","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/240 (* 1/24 (/ 1 (pow x 2)))) (pow x 2))) 17/40320)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/24 (* 1/2 (/ 1 (pow x 2)))) (pow x 4))) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))))"]],"series":[[4.094970703125,"((/ (- 1 (cos x)) (sin x)) (tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (* (+ (* (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (* x x)) 1/2) x) (+ (* (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (* x x)) 1/2) (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (/ 1 (/ 1 (sin x))) (/ (- 1 (cos x)) (/ 1 (/ 1 (sin x)))) (- 1 (cos x)) (cos x) (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (/ (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (sin x)) (/ 1 (+ (cos x) 1)) (+ (cos x) 1) (+ (* 17/40320 (* x x)) 1/240) (sin x) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x))))","x","-inf"],[3.04296875,"((/ (- 1 (cos x)) (sin x)) (tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (* (+ (* (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (* x x)) 1/2) x) (+ (* (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (* x x)) 1/2) (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (/ 1 (/ 1 (sin x))) (/ (- 1 (cos x)) (/ 1 (/ 1 (sin x)))) (- 1 (cos x)) (cos x) (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (/ (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (sin x)) (/ 1 (+ (cos x) 1)) (+ (cos x) 1) (+ (* 17/40320 (* x x)) 1/240) (sin x) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x))))","x","inf"],[2.26318359375,"((/ (- 1 (cos x)) (sin x)) (tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (* (+ (* (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (* x x)) 1/2) x) (+ (* (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (* x x)) 1/2) (+ (* (+ (* 17/40320 (* x x)) 1/240) (* x x)) 1/24) (/ 1 (/ 1 (sin x))) (/ (- 1 (cos x)) (/ 1 (/ 1 (sin x)))) (- 1 (cos x)) (cos x) (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (/ (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (sin x)) (/ 1 (+ (cos x) 1)) (+ (cos x) 1) (+ (* 17/40320 (* x x)) 1/240) (sin x) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x))))","x","0"]],"time":10.6201171875,"type":"series"},{"count":[[58,57]],"egraph":[[0,8293,540,0.083477629],[4,5570,602,0.028825527],[3,3561,602,0.017868567],[2,1190,602,0.012705426],[1,467,610,0.003994305],[0,164,610,0.001697054]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","1/2","(+ 1/2 (* 1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))))","1/24","(+ 1/24 (* 1/240 (pow x 2)))","(+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1/240","(+ 1/240 (* 17/40320 (pow x 2)))","(+ 1/2 (* -3/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/16 (pow x 2)) 3/8)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/16 (* 1/640 (pow x 2)))) 3/8)))","(/ (- 1 (cos x)) (sin x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* 17/40320 (pow x 7))","(* (pow x 7) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(* (pow x 7) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(* (pow x 7) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (+ (* 1/240 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))))))","(* 17/40320 (pow x 6))","(* (pow x 6) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(* (pow x 6) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (+ (* 1/240 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))))))","(* 17/40320 (pow x 4))","(* (pow x 4) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(sin x)","(- 1 (cos x))","(cos x)","(/ 1 (+ 1 (cos x)))","(+ 1 (cos x))","(* 17/40320 (pow x 2))","(* (pow x 2) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(- (+ (cos x) (/ 1 (+ 1 (cos x)))) 1)","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/240 (* 1/24 (/ 1 (pow x 2)))) (pow x 2))) 17/40320)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/24 (* 1/2 (/ 1 (pow x 2)))) (pow x 4))) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))))"]],"memory":[[4075152,41005568]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","1/24","#s(literal 1/24 binary64)","(+ 1/24 (* 1/240 (pow x 2)))","(fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1/2 (* 1/8 (pow x 2)))","(fma.f64 #s(literal 1/8 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/48 binary64) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/5760 binary64) (*.f64 x x) #s(literal 1/48 binary64)) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","2","#s(literal 2 binary64)","(+ 2 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","1/240","#s(literal 1/240 binary64)","(+ 1/240 (* 17/40320 (pow x 2)))","(fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64))","(+ 1/2 (* -3/8 (pow x 2)))","(fma.f64 #s(literal -3/8 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/16 (pow x 2)) 3/8)))","(fma.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -3/8 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/16 (* 1/640 (pow x 2)))) 3/8)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/640 binary64) (*.f64 x x) #s(literal 1/16 binary64)) (*.f64 x x) #s(literal -3/8 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(* 17/40320 (pow x 7))","(*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 17/40320 binary64))","(* (pow x 7) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (/.f64 #s(literal 1/240 binary64) (*.f64 x x)) #s(literal -17/40320 binary64)) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(*.f64 (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/240 binary64)) x) x) #s(literal -17/40320 binary64)) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (+ (* 1/240 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal -17/40320 binary64) (/.f64 #s(literal 1/240 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","(* 17/40320 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 17/40320 binary64))","(* (pow x 6) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)))","(* (pow x 6) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) x) x)","(* (pow x 6) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (+ (* 1/240 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 17/40320 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 17/40320 binary64))","(* (pow x 4) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) x) x)","(* (pow x 4) (+ 17/40320 (+ (/ 1/24 (pow x 4)) (* 1/240 (/ 1 (pow x 2))))))","(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","(sin x)","(sin.f64 x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(/ 1 (+ 1 (cos x)))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(+ 1 (cos x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(* 17/40320 (pow x 2))","(*.f64 #s(literal 17/40320 binary64) (*.f64 x x))","(* (pow x 2) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64))","(- (+ (cos x) (/ 1 (+ 1 (cos x)))) 1)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/240 (* 1/24 (/ 1 (pow x 2)))) (pow x 2))) 17/40320)))","(*.f64 (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/240 binary64)) x) x) #s(literal -17/40320 binary64)) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/24 (* 1/2 (/ 1 (pow x 2)))) (pow x 4))) (+ 17/40320 (* 1/240 (/ 1 (pow x 2)))))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 x x)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -17/40320 binary64) (/.f64 #s(literal 1/240 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":244.215087890625,"type":"simplify"},{"count":[[19,243]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64))","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))"]],"memory":[[-18154000,20368752]],"outputs":[["#s(approx 1/2 #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","(neg.f64 x)","(neg.f64 (neg.f64 x))","(+.f64 x x)","(-.f64 #s(literal 1/2 binary64) x)","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","(*.f64 (neg.f64 x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (neg.f64 x))","(/.f64 x #s(literal 1/2 binary64))","(/.f64 (neg.f64 x) #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1/2 binary64) (/.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/2 binary64)))","#s(approx 1/2 (neg.f64 x))","#s(approx 1/2 (*.f64 (neg.f64 x) x))","(neg.f64 (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))","(+.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(+.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","(neg.f64 (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))","(+.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(+.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","(neg.f64 (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))","(+.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(+.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","(neg.f64 (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))","(+.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(+.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(-.f64 (*.f64 (neg.f64 x) x) #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/2 binary64)","#s(literal 17/40320 binary64)","#s(literal 1/240 binary64)","#s(literal 1/24 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)"]],"time":1035.470947265625,"type":"rewrite"},{"compiler":[[3209,501]],"memory":[[6591152,14245632]],"time":20.126953125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","done",27.50741334417784,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","done",27.35258287778239,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",27.32617806815606,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","fresh",27.510340157293754,"binary64"],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","fresh",29.606201797383253,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",29.15174255221845,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","fresh",27.689930201491787,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","fresh",27.55365722646946,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","fresh",27.462103224353353,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","next",0.42423637698974637,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","next",61.182946617901464,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","fresh",57.88305611688868,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","done",34.35259790082294,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 17/40320 (* x x)) 1/240) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",34.45948336898044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","fresh",34.52621989649066,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",34.34398268635298,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (-.f64 #s(literal 1/2 binary64) x)))","fresh",59.300730512540035,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (+.f64 x x)))","fresh",55.54118408010432,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","done",0.3203888672213043,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","next",54.81823650683123,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","fresh",59.88813770007342,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","fresh",57.42416352055059,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","fresh",59.15704388594007,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","fresh",59.07950652499175,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","fresh",59.05898262533993,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","fresh",59.014987732680915,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","fresh",58.90863241633318,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","next",58.91394989002714,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","fresh",58.89573439652732,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","fresh",59.32340328888654,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","fresh",59.75330775037259,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","fresh",61.373934058521705,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","fresh",59.87525782033734,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","fresh",59.87877562451395,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","next",59.90703834930377,"binary64"]],"compiler":[[21,10],[11,8],[7,6],[18,13],[31,18],[26,12],[25,13],[9,7],[13,8],[9,9],[11,9],[11,8],[26,16],[29,20],[16,12],[11,9],[12,10],[12,9],[12,10],[12,10],[11,9],[11,9],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[18,13],[31,18],[26,12],[25,13],[9,7],[13,8],[9,9],[11,9],[11,8],[29,20],[16,12],[12,10],[12,9],[12,10],[11,9],[11,9],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8]],"count":[[160,35]],"kept":[{"done":[1,1],"fresh":[9,8],"new":[145,21],"picked":[5,5]}],"memory":[[306400,18314704]],"min-error":[[0.08041000976844201,"binary64"]],"time":25.903076171875,"type":"prune"},{"egraph":[[0,1544,65,0.003956493],[8,1544,65,0.007691798],[7,1540,65,0.006422714],[6,1504,65,0.007278],[5,989,65,0.011757565],[4,514,65,0.006248689],[3,237,65,0.003563849],[2,106,66,0.001793343],[1,59,66,0.000576621],[0,32,67,0.000423439],[0,23,92,0.000235537]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","#s(literal 1 binary64)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","x","#s(literal 2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(literal -2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","(tan.f64 (neg.f64 (neg.f64 x)))","(neg.f64 (neg.f64 x))","(neg.f64 x)","x"]],"locations":[["(neg.f64 x)","cost-diff",0],["(tan.f64 (neg.f64 (neg.f64 x)))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","cost-diff",0],["(neg.f64 (neg.f64 x))","cost-diff",2],["(-.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","cost-diff",0],["(tan.f64 (/.f64 x #s(literal 2 binary64)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","cost-diff",1],["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","cost-diff",4]],"memory":[[-5971168,2391232]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(tan.f64 (*.f64 #s(literal -1/2 binary64) x))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","#s(literal 1 binary64)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(/.f64 x #s(literal 2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","x","#s(literal 2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(literal -2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 x))","(tan.f64 (neg.f64 (neg.f64 x)))","(tan.f64 x)","(neg.f64 (neg.f64 x))","x","(neg.f64 x)","x"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":63.458984375,"type":"simplify"},{"compiler":[[81,21]],"locations":[["(neg.f64 (neg.f64 x))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(tan.f64 (neg.f64 (neg.f64 x)))","accuracy",0.3610726074528622],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","accuracy",54.81823650683123],["(-.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","accuracy",61.182946617901464],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","accuracy",58.91394989002714],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","accuracy",59.90703834930377],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","accuracy",0.15234375],["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","accuracy",0.2265625],["(tan.f64 (/.f64 x #s(literal 2 binary64)))","accuracy",0.3203888672213043]],"memory":[[681680,24812736]],"mixsample":[[4.267822265625,"adjust",800],[9.682373046875,"ival-div",0],[12.446044921875,"ival-cos",1600],[7.4091796875,"ival-sin",0],[0.09912109375,"ival-assert",0],[4.644775390625,"ival-cos",3600],[4.516357421875,"ival-sub",0],[0.572509765625,"adjust",2800],[15.444580078125,"ival-tan",0],[0.2490234375,"ival-true",0],[7.488037109375,"ival-cos",0],[1.719482421875,"ival-cos",400],[0.736328125,"exact",0],[2.516845703125,"adjust",2000],[3.308349609375,"ival-neg",0]],"outcomes":[[8.863037109375,1,"valid",34],[37.30029296875,2,"valid",64],[11.173095703125,3,"valid",15],[43.712890625,0,"valid",143]],"time":116.601806640625,"type":"localize"},{"count":[[12,27]],"inputs":[["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(literal 1/2 binary64) x)","(neg.f64 (neg.f64 x))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","(tan.f64 (neg.f64 (neg.f64 x)))","(neg.f64 x)"]],"memory":[[2602080,2602080]],"outputs":[["(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","1/2","(+ 1/2 (* -1 x))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 x)","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(* x (- (* 1/2 (/ 1 x)) 1))","(/ (sin x) (cos x))","(* -1 (* x (- 1 (* 1/2 (/ 1 x)))))","(/ (sin (neg (* -1 x))) (cos (neg (* -1 x))))"]],"series":[[2.074951171875,"((/ -1 (/ 1 (tan (/ x 2)))) (neg (/ -1 (/ 1 (tan (/ x 2))))) (/ 1 (tan (/ x 2))) (tan (/ x 2)) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (- 1/2 x) (neg (neg x)) (/ (- 1 (cos x)) (sin x)) (tan (neg (neg x))) (neg x))","x","-inf"],[2.177978515625,"((/ -1 (/ 1 (tan (/ x 2)))) (neg (/ -1 (/ 1 (tan (/ x 2))))) (/ 1 (tan (/ x 2))) (tan (/ x 2)) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (- 1/2 x) (neg (neg x)) (/ (- 1 (cos x)) (sin x)) (tan (neg (neg x))) (neg x))","x","inf"],[1.066162109375,"((/ -1 (/ 1 (tan (/ x 2)))) (neg (/ -1 (/ 1 (tan (/ x 2))))) (/ 1 (tan (/ x 2))) (tan (/ x 2)) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (- 1/2 x) (neg (neg x)) (/ (- 1 (cos x)) (sin x)) (tan (neg (neg x))) (neg x))","x","0"]],"time":5.926025390625,"type":"series"},{"count":[[27,26]],"egraph":[[0,8565,213,0.076723541],[4,6404,237,0.026813647],[3,3484,238,0.024300567],[2,673,238,0.011153885],[1,269,244,0.002099085],[0,107,247,0.001021353]],"inputs":[["(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","1/2","(+ 1/2 (* -1 x))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 x)","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(* x (- (* 1/2 (/ 1 x)) 1))","(/ (sin x) (cos x))","(* -1 (* x (- 1 (* 1/2 (/ 1 x)))))","(/ (sin (neg (* -1 x))) (cos (neg (* -1 x))))"]],"memory":[[3673728,36139568]],"method":["egg-herbie"],"outputs":[["(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -17/40320 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1 x))","(-.f64 #s(literal 1/2 binary64) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* -1 x)","(neg.f64 x)","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/.f64 (sin.f64 (*.f64 #s(literal -1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (- 1 (cos x)) (sin x))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(* x (- (* 1/2 (/ 1 x)) 1))","(-.f64 #s(literal 1/2 binary64) x)","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(* -1 (* x (- 1 (* 1/2 (/ 1 x)))))","(-.f64 #s(literal 1/2 binary64) x)","(/ (sin (neg (* -1 x))) (cos (neg (* -1 x))))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":265.130126953125,"type":"simplify"},{"count":[[12,124]],"inputs":[["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","(-.f64 #s(literal 1/2 binary64) x)","(neg.f64 (neg.f64 x))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","(tan.f64 (neg.f64 (neg.f64 x)))","(neg.f64 x)"]],"memory":[[-1914048,22062128]],"outputs":[["(neg.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))))","(+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(+.f64 (tan.f64 (/.f64 x #s(literal -2 binary64))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal -2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (sin.f64 (neg.f64 x))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (sin.f64 (neg.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 (neg.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (sin.f64 (neg.f64 x))))","(*.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(neg.f64 (tan.f64 (/.f64 x #s(literal -2 binary64))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (tan.f64 (/.f64 x #s(literal -2 binary64))))","(-.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (/.f64 (+.f64 (sin.f64 (+.f64 x x)) #s(literal 0 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (cos.f64 x)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 3/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (cos.f64 x)))","(+.f64 (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 #s(literal 3/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (cos.f64 x) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal -1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(neg.f64 (tan.f64 (/.f64 x #s(literal -2 binary64))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (tan.f64 (/.f64 x #s(literal -2 binary64))))","(-.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (/.f64 (+.f64 (sin.f64 (+.f64 x x)) #s(literal 0 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","#s(approx (tan (/ x 2)) #s(literal -2 binary64))","#s(approx (tan (/ x 2)) #s(literal 1 binary64))","#s(approx (tan (/ x 2)) (-.f64 #s(literal 1/2 binary64) x))","(neg.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1/4 binary64)) (+.f64 (neg.f64 x) #s(literal -1/2 binary64))))","(neg.f64 (/.f64 (+.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 x x) x)) (fma.f64 (+.f64 x #s(literal 1/2 binary64)) x #s(literal 1/4 binary64))))","(neg.f64 (/.f64 (+.f64 #s(literal -1/4 binary64) (*.f64 x x)) (+.f64 x #s(literal 1/2 binary64))))","(neg.f64 (/.f64 (fma.f64 (neg.f64 x) (*.f64 x x) #s(literal 1/8 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1/2 binary64)) x #s(literal 1/4 binary64)))))","(+.f64 (neg.f64 x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (neg.f64 x))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/2 binary64) x))","(+.f64 (/.f64 #s(literal 1/4 binary64) (+.f64 x #s(literal 1/2 binary64))) (neg.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1/2 binary64)))))","(+.f64 (/.f64 #s(literal 1/8 binary64) (fma.f64 (+.f64 x #s(literal 1/2 binary64)) x #s(literal 1/4 binary64))) (neg.f64 (/.f64 (*.f64 (*.f64 x x) x) (fma.f64 (+.f64 x #s(literal 1/2 binary64)) x #s(literal 1/4 binary64)))))","(-.f64 #s(literal 1/2 binary64) x)","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1/2 binary64)))","(-.f64 (/.f64 #s(literal 1/4 binary64) (+.f64 x #s(literal 1/2 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1/2 binary64))))","(-.f64 (/.f64 #s(literal 1/8 binary64) (fma.f64 (+.f64 x #s(literal 1/2 binary64)) x #s(literal 1/4 binary64))) (/.f64 (*.f64 (*.f64 x x) x) (fma.f64 (+.f64 x #s(literal 1/2 binary64)) x #s(literal 1/4 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) x))","(*.f64 (+.f64 #s(literal -1/4 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) #s(literal -1/2 binary64))))","x","(neg.f64 (neg.f64 x))","(+.f64 x #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) x)","(-.f64 #s(literal 0 binary64) (neg.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (neg.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (neg.f64 x))","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 (neg.f64 x) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) (neg.f64 x)))","(*.f64 (*.f64 (*.f64 x x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (*.f64 x x))) (*.f64 x x))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) x)","#s(approx (tan (/ x 2)) (tan.f64 x))","(neg.f64 (tan.f64 (neg.f64 x)))","(+.f64 #s(literal 0 binary64) (tan.f64 x))","(-.f64 #s(literal 0 binary64) (tan.f64 (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x))) (tan.f64 (neg.f64 x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (cos.f64 x)) (tan.f64 (neg.f64 x)))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (tan.f64 (neg.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (tan.f64 (neg.f64 x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (sin.f64 (neg.f64 x)))","(*.f64 (sin.f64 (neg.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 (neg.f64 x)) (neg.f64 (cos.f64 x)))","(neg.f64 x)","(+.f64 (neg.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(-.f64 #s(literal 0 binary64) x)","(-.f64 (/.f64 #s(literal 0 binary64) x) x)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) x)","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(*.f64 (neg.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 (neg.f64 x) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) x)) (*.f64 x x))","(/.f64 x #s(literal -1 binary64))"]],"time":736.528076171875,"type":"rewrite"},{"compiler":[[2156,489]],"memory":[[1721216,12833904]],"time":16.9169921875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","done",27.50741334417784,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",27.32617806815606,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","fresh",27.510340157293754,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (/.f64 (+.f64 (sin.f64 (+.f64 x x)) #s(literal 0 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",29.138430001789366,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","fresh",27.55365722646946,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","fresh",27.462103224353353,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","done",0.42423637698974637,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))))","fresh",0.7672471357660688,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","fresh",33.85436856923745,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","fresh",33.95971595629795,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","next",0.42585761722130433,"binary64"],["(neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal -1 binary64))))","fresh",27.3516484625623,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","done",61.182946617901464,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","fresh",57.88305611688868,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","done",34.35259790082294,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 17/40320 (* x x)) 1/240) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",34.45948336898044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","fresh",34.52621989649066,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",34.34398268635298,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (-.f64 #s(literal 1/2 binary64) x)))","fresh",59.300730512540035,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (+.f64 x x)))","fresh",55.54118408010432,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","done",0.3203888672213043,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","next",59.88813770007342,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 x))","fresh",54.81823650683123,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","next",57.42416352055059,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","fresh",58.89573439652732,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","fresh",59.15704388594007,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","fresh",59.07950652499175,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","fresh",59.05898262533993,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","next",59.014987732680915,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","fresh",58.90863241633318,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","done",58.91394989002714,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","fresh",59.32340328888654,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","fresh",59.75330775037259,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","fresh",61.373934058521705,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","fresh",59.87525782033734,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","next",59.87877562451395,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","done",59.90703834930377,"binary64"]],"compiler":[[21,10],[7,6],[18,13],[29,15],[9,7],[13,8],[9,9],[12,10],[28,19],[23,17],[19,15],[10,9],[11,9],[11,8],[26,16],[29,20],[16,12],[11,9],[12,10],[12,9],[12,10],[11,9],[10,8],[11,9],[13,11],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[18,13],[29,15],[9,7],[13,8],[12,10],[28,19],[23,17],[19,15],[10,9],[11,8],[29,20],[16,12],[12,10],[12,9],[11,9],[10,8],[11,9],[13,11],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8]],"count":[[167,37]],"kept":[{"done":[6,5],"fresh":[24,20],"new":[132,8],"picked":[5,4]}],"memory":[[-6729936,17651648]],"min-error":[[0.03515625,"binary64"]],"time":24.43994140625,"type":"prune"},{"egraph":[[0,1463,113,0.003896767],[12,1463,113,0.007434854],[11,1451,113,0.007330859],[10,1437,113,0.006866196],[9,1426,113,0.007722248],[8,1369,113,0.00712112],[7,1167,113,0.00847787],[6,884,113,0.00794709],[5,548,113,0.006246541],[4,304,113,0.003123859],[3,192,113,0.001918712],[2,97,113,0.00120162],[1,57,113,0.000608182],[0,35,113,0.000392119],[0,26,130,0.000255555]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","#s(literal -1 binary64)","#s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","(neg.f64 (neg.f64 x))","(neg.f64 x)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","(tan.f64 (neg.f64 x))","(neg.f64 x)","x"]],"locations":[["(neg.f64 x)","cost-diff",0],["(tan.f64 (neg.f64 x))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","cost-diff",0],["(neg.f64 x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","cost-diff",0],["(neg.f64 (neg.f64 x))","cost-diff",2],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","cost-diff",0],["#s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","cost-diff",1]],"memory":[[2920880,2920880]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","#s(literal -1 binary64)","#s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","#s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(cos.f64 (*.f64 #s(literal -1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","(neg.f64 (neg.f64 x))","x","(neg.f64 x)","x","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (tan.f64 x)))","(tan.f64 (neg.f64 x))","(neg.f64 (tan.f64 x))","(neg.f64 x)","x"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":84.826904296875,"type":"simplify"},{"compiler":[[90,23]],"locations":[["(neg.f64 x)","accuracy",0.0],["(tan.f64 (neg.f64 x))","accuracy",0.3610726074528622],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","accuracy",59.88813770007342],["(neg.f64 (neg.f64 x))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","accuracy",57.42416352055059],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","accuracy",59.014987732680915],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","accuracy",59.87877562451395],["(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.13119125976844204],["(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.16015625],["(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","accuracy",0.1640625],["(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","accuracy",0.2265625]],"memory":[[2941936,28134400]],"mixsample":[[8.654541015625,"adjust",800],[10.29443359375,"ival-div",0],[1.5888671875,"ival-mult",0],[11.717041015625,"ival-cos",1600],[13.877685546875,"ival-sin",0],[0.09375,"ival-assert",0],[4.4619140625,"ival-cos",3600],[2.64404296875,"ival-sub",0],[0.548828125,"adjust",2800],[0.21044921875,"ival-true",0],[13.915283203125,"ival-tan",0],[13.160888671875,"ival-cos",0],[1.7001953125,"ival-cos",400],[0.4990234375,"exact",0],[2.702392578125,"adjust",2000],[4.02734375,"ival-neg",0]],"outcomes":[[9.354248046875,1,"valid",34],[35.3994140625,2,"valid",64],[11.8896484375,3,"valid",15],[52.67724609375,0,"valid",143]],"time":123.93017578125,"type":"localize"},{"count":[[13,32]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","#s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","(neg.f64 (neg.f64 x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","(neg.f64 x)","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","(tan.f64 (neg.f64 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))"]],"memory":[[-5080576,2781024]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","x","(* -1 x)","(* x (- (* -1/3 (pow x 2)) 1))","(* x (- (* (pow x 2) (- (* -2/15 (pow x 2)) 1/3)) 1))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/315 (pow x 2)) 2/15)) 1/3)) 1))","1","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(/ (sin (neg x)) (cos (neg x)))","(cos (* 1/2 x))","(sin (* 1/2 x))","(/ (sin (* -1 x)) (cos (* -1 x)))"]],"series":[[3.007080078125,"((neg (/ -1 (/ 1 (tan (/ x 2))))) (/ -1 (/ 1 (tan (/ x 2)))) (/ 1 (tan (/ x 2))) (/ (cos (* 1/2 x)) (sin (* 1/2 x))) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (neg (neg x)) (/ (- 1 (cos x)) (sin x)) (neg x) (/ (- 1 (cos x)) (sin x)) (tan (neg x)) (cos (* 1/2 x)) (sin (* 1/2 x)))","x","-inf"],[1.759033203125,"((neg (/ -1 (/ 1 (tan (/ x 2))))) (/ -1 (/ 1 (tan (/ x 2)))) (/ 1 (tan (/ x 2))) (/ (cos (* 1/2 x)) (sin (* 1/2 x))) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (neg (neg x)) (/ (- 1 (cos x)) (sin x)) (neg x) (/ (- 1 (cos x)) (sin x)) (tan (neg x)) (cos (* 1/2 x)) (sin (* 1/2 x)))","x","inf"],[1.139892578125,"((neg (/ -1 (/ 1 (tan (/ x 2))))) (/ -1 (/ 1 (tan (/ x 2)))) (/ 1 (tan (/ x 2))) (/ (cos (* 1/2 x)) (sin (* 1/2 x))) (/ (- 1 (cos x)) (sin x)) (/ (- 1 (cos x)) (sin x)) (neg (neg x)) (/ (- 1 (cos x)) (sin x)) (neg x) (/ (- 1 (cos x)) (sin x)) (tan (neg x)) (cos (* 1/2 x)) (sin (* 1/2 x)))","x","0"]],"time":6.634765625,"type":"series"},{"count":[[32,31]],"egraph":[[0,8179,290,0.09285819],[6,6217,323,0.024410695],[5,4068,323,0.014467121],[4,3022,323,0.011590657],[3,1682,323,0.009760515],[2,707,323,0.005318921],[1,309,329,0.001988854],[0,138,329,0.001210327]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","x","(* -1 x)","(* x (- (* -1/3 (pow x 2)) 1))","(* x (- (* (pow x 2) (- (* -2/15 (pow x 2)) 1/3)) 1))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/315 (pow x 2)) 2/15)) 1/3)) 1))","1","(+ 1 (* -1/8 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (- 1 (cos x)) (sin x))","(/ (sin (neg x)) (cos (neg x)))","(cos (* 1/2 x))","(sin (* 1/2 x))","(/ (sin (* -1 x)) (cos (* -1 x)))"]],"memory":[[10082400,39736576]],"method":["egg-herbie"],"outputs":[["(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -17/40320 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","x","(* -1 x)","(neg.f64 x)","(* x (- (* -1/3 (pow x 2)) 1))","(neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x))","(* x (- (* (pow x 2) (- (* -2/15 (pow x 2)) 1/3)) 1))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2/15 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/315 (pow x 2)) 2/15)) 1/3)) 1))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal -17/315 binary64) (*.f64 x x) #s(literal -2/15 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)))","1","#s(literal 1 binary64)","(+ 1 (* -1/8 (pow x 2)))","(fma.f64 #s(literal -1/8 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/384 (pow x 2)) 1/8)))","(fma.f64 (fma.f64 #s(literal 1/384 binary64) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/384 (* -1/46080 (pow x 2)))) 1/8)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/46080 binary64) (*.f64 x x) #s(literal 1/384 binary64)) (*.f64 x x) #s(literal -1/8 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* x (+ 1/2 (* -1/48 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/3840 (pow x 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/3840 (* -1/645120 (pow x 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 x x) #s(literal 1/3840 binary64)) (*.f64 x x) #s(literal -1/48 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (- 1 (cos x)) (sin x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/ (sin (neg x)) (cos (neg x)))","(/.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))","(cos (* 1/2 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(sin (* 1/2 x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))","(/ (sin (* -1 x)) (cos (* -1 x)))","(/.f64 (neg.f64 (sin.f64 x)) (cos.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":249.3330078125,"type":"simplify"},{"count":[[13,84]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","#s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","(neg.f64 (neg.f64 x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","(neg.f64 x)","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","(tan.f64 (neg.f64 x))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))"]],"memory":[[-11174176,18433472]],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","#s(approx (/ 1 (tan (/ x 2))) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(neg.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal -1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 #s(literal -1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","#s(approx (tan (/ x 2)) #s(literal -1 binary64))","#s(approx (tan (/ x 2)) #s(literal 2 binary64))","x","(neg.f64 (neg.f64 x))","(+.f64 x #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) x)","(-.f64 #s(literal 0 binary64) (neg.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (neg.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (neg.f64 x))","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 (neg.f64 x) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) (neg.f64 x)))","(*.f64 (*.f64 (*.f64 x x) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) x)","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (*.f64 x x))) (*.f64 x x))","#s(approx (tan (/ x 2)) x)","(neg.f64 x)","(+.f64 (neg.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(-.f64 #s(literal 0 binary64) x)","(-.f64 (/.f64 #s(literal 0 binary64) x) x)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) x)","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(*.f64 (neg.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) x)) (*.f64 x x))","(/.f64 x #s(literal -1 binary64))","#s(approx (tan (/ x 2)) (tan.f64 (neg.f64 x)))","(neg.f64 (tan.f64 x))","(+.f64 #s(literal 0 binary64) (tan.f64 (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (tan.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (cos.f64 x)) (tan.f64 x))","(-.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (cos.f64 x)) (tan.f64 x))","(-.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (neg.f64 (cos.f64 x))) (tan.f64 x))","(*.f64 (tan.f64 x) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (tan.f64 x))","(*.f64 (sin.f64 (neg.f64 x)) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 x)) (sin.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 (neg.f64 x)))","(*.f64 #s(literal 1 binary64) (tan.f64 (neg.f64 x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (tan.f64 x) #s(literal -1 binary64))","(/.f64 (sin.f64 (neg.f64 x)) (cos.f64 x))","(neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(cos.f64 (*.f64 #s(literal 1/2 binary64) x))","(cos.f64 (*.f64 x #s(literal -1/2 binary64)))","(neg.f64 (sin.f64 (*.f64 x #s(literal -1/2 binary64))))","(neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) x))"]],"time":704.93408203125,"type":"rewrite"},{"compiler":[[2317,513]],"memory":[[5005600,12753584]],"time":16.137939453125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","done",27.50741334417784,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",27.32617806815606,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","fresh",27.510340157293754,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (/.f64 (+.f64 (sin.f64 (+.f64 x x)) #s(literal 0 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",29.138430001789366,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","fresh",27.55365722646946,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","fresh",27.462103224353353,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))))","fresh",0.7672471357660688,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","fresh",33.85436856923745,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","fresh",33.95971595629795,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","done",0.42585761722130433,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))))","fresh",0.42423637698974637,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))))","fresh",17.967575195368845,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))))))","fresh",0.4590989258319565,"binary64"],["(neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal -1 binary64))))","fresh",27.3516484625623,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","done",34.35259790082294,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 17/40320 (* x x)) 1/240) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","fresh",34.45948336898044,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","fresh",34.52621989649066,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","done",34.34398268635298,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (-.f64 #s(literal 1/2 binary64) x)))","fresh",59.300730512540035,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (+.f64 x x)))","fresh",55.54118408010432,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","done",0.3203888672213043,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","done",59.88813770007342,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 x))","fresh",54.81823650683123,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","fresh",58.89573439652732,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) x)","fresh",57.42416352055059,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","fresh",59.15704388594007,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","fresh",59.07950652499175,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","fresh",59.05898262533993,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","done",59.014987732680915,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","fresh",58.90863241633318,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","done",58.91394989002714,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","fresh",59.32340328888654,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","fresh",59.87525782033734,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","done",59.87877562451395,"binary64"],["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","done",59.90703834930377,"binary64"]],"compiler":[[703,177],[21,10],[7,6],[18,13],[29,15],[9,7],[13,8],[12,10],[28,19],[23,17],[19,15],[16,15],[27,17],[25,19],[10,9],[26,16],[29,20],[16,12],[11,9],[12,10],[12,9],[12,10],[11,9],[10,8],[13,11],[9,7],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8],[9,8]],"count":[[167,35]],"kept":[{"done":[9,7],"fresh":[23,20],"new":[130,4],"picked":[5,4]}],"memory":[[256128,18207184]],"min-error":[[0.02734375,"binary64"]],"time":23.037109375,"type":"prune"},{"accuracy":[0.3203888672213043],"baseline":[0.3203888672213043],"branch":[["x",0.3203888672213042,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",0.3203888672213043,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[48,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 17/40320 (* x x)) 1/240) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 x))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (+.f64 x x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (-.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))))","(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (/.f64 (+.f64 (sin.f64 (+.f64 x x)) #s(literal 0 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))"]],"memory":[[-1627936,13900272]],"oracle":[63.79478256112998],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))"]],"repr":["binary64"],"time":26.758056640625,"times":[[12.39794921875,"x"],[11.760009765625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[28.826808727485297],"baseline":[33.85436856923745],"branch":[["x",31.318487908772216,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",28.826808727485297,3,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[30,3]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 17/40320 (* x x)) 1/240) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (tan (/ x 2))) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x))))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 x))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (+.f64 x x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (-.f64 #s(literal 1/2 binary64) x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (neg.f64 (neg.f64 x))))"]],"memory":[[547856,9783744]],"oracle":[63.0349215149275],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":17.52294921875,"times":[[8.2529296875,"x"],[7.072998046875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[28.918496825507386],"baseline":[34.34398268635298],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",28.918496825507386,3,"binary64"]],"compiler":[[7,6]],"count":[[22,3]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 17/40320 (* x x)) 1/240) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))"]],"memory":[[-3722976,4508816]],"oracle":[63.02805196298748],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":6.7099609375,"times":[[5.080810546875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[29.01048403487658],"baseline":[34.34398268635298],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",29.01048403487658,3,"binary64"]],"compiler":[[7,6]],"count":[[20,3]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))"]],"memory":[[4234224,4234224]],"oracle":[63.01402828388346],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":6.18798828125,"times":[[5.001953125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[29.102604656745996],"baseline":[34.34398268635298],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",29.102604656745996,3,"binary64"]],"compiler":[[7,6]],"count":[[19,3]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))"]],"memory":[[-4183232,4084320]],"oracle":[62.96271420465708],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":6.39501953125,"times":[[5.0380859375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[52.14391913500453],"baseline":[57.42416352055059],"branch":[["x",55.042200476873006,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",52.14391913500453,3,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[18,3]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(approx (- 1/2 x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) (+.f64 x x))","#s(approx (/ (- 1 (cos x)) (sin x)) (-.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (sin x)) (neg.f64 (neg.f64 x)))"]],"memory":[[7079632,7079632]],"oracle":[62.96271420465708],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) x)","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":11.365966796875,"times":[[5.178955078125,"x"],[4.81591796875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[55.967409830920424],"baseline":[58.89573439652732],"branch":[["x",58.895734396527324,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",55.967409830920424,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[13,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 3 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 4 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 6 binary64))"]],"memory":[[-2375568,5793184]],"oracle":[62.80551964658846],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":8.64892578125,"times":[[3.7900390625,"x"],[3.70703125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[56.3957867557403],"baseline":[59.32340328888654],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.3957867557403,2,"binary64"]],"compiler":[[7,6]],"count":[[6,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))"]],"memory":[[2245168,2245168]],"oracle":[62.80413694836095],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64))"]],"repr":["binary64"],"time":3.0751953125,"times":[[2.31103515625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[56.826970118004425],"baseline":[59.75330775037259],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.826970118004425,2,"binary64"]],"compiler":[[7,6]],"count":[[5,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))"]],"memory":[[-6982240,2080160]],"oracle":[62.80285804758287],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64))"]],"repr":["binary64"],"time":2.621826171875,"times":[[2.150146484375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[58.718902286843395],"baseline":[59.87525782033734],"branch":[["x",59.87525782033738,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",58.718902286843395,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[4,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))"]],"memory":[[3720784,3720784]],"oracle":[62.53155218689303],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":4.3330078125,"times":[[1.802978515625,"x"],[1.909912109375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[59.87525782033733],"baseline":[59.87525782033734],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",59.87525782033733,1,"binary64"]],"compiler":[[7,6]],"count":[[3,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))"]],"memory":[[1804736,1804736]],"oracle":[60.15316953750104],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))"]],"repr":["binary64"],"time":1.990966796875,"times":[[1.572998046875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[59.878775624513935],"baseline":[59.87877562451395],"branch":[["x",59.87877562451394,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",59.878775624513935,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[2,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))"]],"memory":[[-5089984,3208528]],"oracle":[60.05846675381497],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))"]],"repr":["binary64"],"time":3.38818359375,"times":[[1.61181640625,"x"],[1.318115234375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[59.907038349303804],"baseline":[59.90703834930377],"branch":[["x",59.907038349303804,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",59.90703834930385,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))"]],"link":["."],"memory":[[3006784,3006784]],"name":["tanhf (example 3.4)"],"oracle":[59.90703834930377],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))"]],"repr":["binary64"],"time":2.6728515625,"times":[[1.09814453125,"x"],[1.089111328125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"bstep":[[0.071044921875,0.026588748385417874,0.02687838037596547],[0.27197265625,-0.0014560175705493866,0.0]],"compiler":[[3,4],[7,6]],"memory":[[305136,305136]],"method":["left-value","left-value"],"time":1.135009765625,"type":"bsearch"},{"bstep":[[0.06396484375,0.026588748385417874,0.02687838037596547],[0.14697265625,-0.0014560175705493866,0.0]],"compiler":[[3,4],[7,6]],"memory":[[281968,281968]],"method":["left-value","left-value"],"time":0.699951171875,"type":"bsearch"},{"bstep":[[0.069091796875,0.026588748385417874,0.02687838037596547],[0.113037109375,-0.0014560175705493866,0.0]],"compiler":[[3,4],[7,6]],"memory":[[344416,344416]],"method":["left-value","left-value"],"time":0.59521484375,"type":"bsearch"},{"bstep":[[0.058837890625,0.026588748385417874,0.02687838037596547],[0.107177734375,-0.0014560175705493866,0.0]],"compiler":[[3,4],[7,6]],"memory":[[280064,280064]],"method":["left-value","left-value"],"time":0.60791015625,"type":"bsearch"},{"bstep":[[0.06005859375,0.026588748385417874,0.02687838037596547],[0.10595703125,-0.0014560175705493866,0.0]],"compiler":[[3,4],[7,6]],"memory":[[276480,276480]],"method":["left-value","left-value"],"time":0.533935546875,"type":"bsearch"},{"bstep":[[11.181884765625,-0.0014560175705493866,0.0]],"compiler":[[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[3,4],[7,6]],"memory":[[-4244416,3975888]],"method":["binary-search"],"mixsample":[[0.117919921875,"ival-true",0],[0.072998046875,"ival-assert",0]],"outcomes":[[3.8203125,0,"valid",224]],"stop":[["narrow-enough",1]],"time":12.64111328125,"type":"bsearch"},{"bstep":[[4.005126953125,-0.0014560175705493866,0.0]],"compiler":[[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[3,4],[7,6]],"memory":[[1674448,1674448]],"method":["binary-search"],"mixsample":[[0.038818359375,"ival-true",0],[0.02197265625,"ival-assert",0]],"outcomes":[[0.933837890625,0,"valid",64]],"stop":[["narrow-enough",1]],"time":4.683837890625,"type":"bsearch"},{"bstep":[[5.035888671875,-0.0014560175705493866,0.0]],"compiler":[[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[3,4],[7,6]],"memory":[[2202880,2202880]],"method":["binary-search"],"mixsample":[[0.04638671875,"ival-true",0],[0.030517578125,"ival-assert",0]],"outcomes":[[1.29296875,0,"valid",96]],"stop":[["narrow-enough",1]],"time":5.7841796875,"type":"bsearch"},{"bstep":[[9.195068359375,-0.0014560175705493866,0.0]],"compiler":[[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[9,9],[3,4],[7,6]],"memory":[[-4371712,3761616]],"method":["binary-search"],"mixsample":[[0.086181640625,"ival-true",0],[0.09228515625,"ival-assert",0]],"outcomes":[[3.282470703125,0,"valid",208]],"stop":[["narrow-enough",1]],"time":10.433837890625,"type":"bsearch"},{"egraph":[[16,3152,343,0.009392758],[15,3119,343,0.010489602],[14,2938,343,0.011157],[13,2625,343,0.008824183],[12,2508,343,0.008689252],[11,2307,343,0.010400785],[10,1792,343,0.009267164],[9,1466,343,0.008292524],[8,937,343,0.007531758],[7,348,343,0.005792602],[6,218,343,0.002318804],[5,156,343,0.001948319],[4,127,343,0.001730926],[3,100,343,0.001575349],[2,87,343,0.001406575],[1,80,343,0.00140509],[0,69,343,0.001391397]],"inputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) x) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -8096090132292425/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -664132393664613/1581267603963364205878869896241541461324661326282360299663291859589299527874963647593440497667477535118649045814975093057732880760826511538023542187037019608761854877160674698159897716735103252665935684988068320848140683464255411707953932466009059033912578566502802887127604801681488301032705683661296923932091466727292928 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -2264377454892925/30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))"]],"memory":[[6910368,6910368]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- 1 (cos x)) (sin x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -1152921504606847/1152921504606846976 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) (if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 1916732001408883/72057594037927936 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) x) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64))))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/2 binary64)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -8096090132292425/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 1/24 binary64)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -664132393664613/1581267603963364205878869896241541461324661326282360299663291859589299527874963647593440497667477535118649045814975093057732880760826511538023542187037019608761854877160674698159897716735103252665935684988068320848140683464255411707953932466009059033912578566502802887127604801681488301032705683661296923932091466727292928 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 17/40320 binary64)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -2264377454892925/30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64)) #s(approx (/ (- 1 (cos x)) (sin x)) #s(literal 0 binary64)))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1/2 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -1 binary64))","#s(approx (/ (- 1 (cos x)) (sin x)) #s(literal -2 binary64))"]],"stop":[["saturated",1]],"time":115.13818359375,"type":"simplify"},{"compiler":[[424,70]],"memory":[[-4991248,3665744]],"stop":[["fuel",1]],"time":10.179931640625,"type":"soundness"},{"compiler":[[424,70],[424,70],[4,4],[4,4],[7,6],[7,6],[12,10],[12,10]],"memory":[[7337712,47116992]],"remove-preprocessing":[["(negabs x)"],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":79.0458984375,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.02197265625,"type":"end"}]