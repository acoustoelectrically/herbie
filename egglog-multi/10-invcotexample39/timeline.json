[{"memory":[[15584,15584]],"time":0.032958984375,"type":"start"},{"compiler":[[16,12]],"memory":[[1522400,1522400]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0007278900146484375,"valid":0.49617835998535154}],[11,{"invalid":0.0,"precondition":0.50309375,"unknown":0.001455780029296875,"valid":0.49545046997070313}],[10,{"invalid":0.0,"precondition":0.5030937499999999,"unknown":0.00291156005859375,"valid":0.4939946899414063}],[9,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0058231201171875,"valid":0.4910831298828125}],[8,{"invalid":0.0,"precondition":0.50309375,"unknown":0.011646240234375,"valid":0.485260009765625}],[7,{"invalid":0.0,"precondition":0.50309375,"unknown":0.02329248046875,"valid":0.47361376953125}],[6,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0465849609375,"valid":0.4503212890625}],[5,{"invalid":0.0,"precondition":0.50309375,"unknown":0.093169921875,"valid":0.403736328125}],[4,{"invalid":0.0,"precondition":0.50309375,"unknown":0.18633984375,"valid":0.31056640625}],[3,{"invalid":0.0,"precondition":0.50309375,"unknown":0.3726796875,"valid":0.1242265625}],[2,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}]],"time":5.87109375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50309375,"valid":0.49690625}],"memory":[[24342400,482257056]],"mixsample":[[610.125732421875,"ival-tan",2000],[151.478759765625,"ival-div",0],[169.220703125,"adjust",800],[31.3876953125,"ival-div",400],[5.274169921875,"ival-div",1600],[4.55224609375,"ival-assert",0],[109.99072265625,"ival-sub",0],[5823.959716796875,"ival-tan",2400],[84.3115234375,"ival-tan",0],[18.20361328125,"ival-and",0],[0.022705078125,"ival-sub",400],[269.4013671875,"const",0],[38.68408203125,"ival-tan",400],[64.6123046875,"adjust",2000],[2.624755859375,"ival-tan",1600],[708.1318359375,"ival-tan",800],[70.606201171875,"ival-div",1200],[0.080322265625,"ival-sub",800],[64.62890625,"ival-div",800],[19.7294921875,"ival-div",2000],[6.76513671875,"exact",0],[52.775634765625,"ival-<",0],[88.96044921875,"ival-div",2400],[53.4169921875,"ival-tan",1200]],"outcomes":[[1381.15966796875,1,"valid",4212],[7407.07421875,2,"valid",3949],[10.9326171875,0,"valid",95]],"time":9249.380859375,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cancellation",256,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",256,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(tan.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (tan.f64 x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[2189440,52404432]],"mixsample":[[27.065185546875,"ival-tan",2000],[8.832275390625,"ival-div",0],[9.29052734375,"adjust",800],[1.267578125,"ival-div",400],[0.327880859375,"ival-assert",0],[0.345703125,"ival-div",1600],[458.041015625,"ival-tan",2400],[6.64208984375,"ival-sub",0],[5.210205078125,"ival-tan",0],[0.010009765625,"ival-sub",400],[2.568359375,"ival-tan",400],[3.523193359375,"adjust",2000],[0.141357421875,"ival-tan",1600],[48.2861328125,"ival-tan",800],[3.957763671875,"ival-div",1200],[3.7451171875,"ival-div",800],[0.558349609375,"ival-true",0],[0.94384765625,"ival-div",2000],[0.4033203125,"exact",0],[3.290283203125,"ival-tan",1200],[5.20947265625,"ival-div",2400]],"outcomes":[[82.37744140625,1,"valid",270],[533.9111328125,2,"valid",236],[0.613037109375,0,"valid",6]],"time":674.467041015625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,257,8,0.000977641],[10,257,8,0.001335528],[9,235,8,0.001660737],[8,200,8,0.001503381],[7,137,8,0.001219439],[6,102,8,0.000902207],[5,63,8,0.000525287],[4,43,8,0.0002908],[3,31,8,0.000254004],[2,22,8,0.000174025],[1,14,8,0.000143099],[0,10,8,0.000155813],[0,6,8,0.000100722]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"memory":[[-5671264,15512128]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(negabs x)"]],"time":156.880126953125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06689453125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","next",59.76210434317813,"binary64"]],"compiler":[[8,6]],"memory":[[311792,311792]],"time":0.505126953125,"type":"prune"},{"egraph":[[0,257,19,0.001032125],[10,257,19,0.001331305],[9,235,19,0.001619321],[8,200,19,0.001395378],[7,137,19,0.001218871],[6,102,19,0.000889831],[5,63,19,0.000569583],[4,43,19,0.000302304],[3,31,19,0.00025532],[2,22,19,0.000174788],[1,14,19,0.000146884],[0,10,19,0.000158963],[0,6,19,8.7905e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"locations":[["(tan.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cost-diff",0]],"memory":[[1044256,1044256]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":16.281982421875,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","accuracy",0.00390625],["(tan.f64 x)","accuracy",0.0078125],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","accuracy",59.75848011858536]],"memory":[[-2418400,13409216]],"mixsample":[[14.039794921875,"ival-tan",2000],[3.907470703125,"ival-div",0],[5.343505859375,"adjust",800],[0.690185546875,"ival-div",400],[0.123046875,"ival-assert",0],[0.175048828125,"ival-div",1600],[231.255615234375,"ival-tan",2400],[3.91064453125,"ival-sub",0],[2.4599609375,"ival-tan",0],[0.00390625,"ival-sub",400],[1.266845703125,"ival-tan",400],[5.0908203125,"adjust",2000],[0.073974609375,"ival-tan",1600],[24.141357421875,"ival-tan",800],[1.681884765625,"ival-div",1200],[1.829345703125,"ival-div",800],[0.22412109375,"ival-true",0],[0.487060546875,"ival-div",2000],[0.1923828125,"exact",0],[1.615478515625,"ival-tan",1200],[2.643798828125,"ival-div",2400]],"outcomes":[[41.07470703125,1,"valid",135],[274.517578125,2,"valid",118],[0.173828125,0,"valid",3]],"time":325.23095703125,"type":"localize"},{"count":[[4,16]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[1386832,1386832]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"series":[[1.245849609375,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","-inf"],[1.272216796875,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","inf"],[1.139892578125,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","0"]],"time":3.969970703125,"type":"series"},{"count":[[16,15]],"egraph":[[0,8214,143,0.082538067],[9,7281,161,0.019490259],[8,5095,161,0.022088098],[7,3955,161,0.013818357],[6,3691,161,0.01090307],[5,3100,161,0.011410412],[4,2099,161,0.010470291],[3,1335,161,0.006825038],[2,458,161,0.004086134],[1,179,167,0.001376436],[0,67,167,0.000634224]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"memory":[[1132512,38465424]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/3 binary64) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/945 binary64) (*.f64 x x) #s(literal -1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/15 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(/ (cos x) (sin x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":272.68603515625,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[-3733632,15972800]],"outputs":[["(neg.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (tan.f64 x)) x) (*.f64 (tan.f64 x) x)))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 (tan.f64 x) (*.f64 (tan.f64 x) x)) (neg.f64 (/.f64 x (*.f64 (tan.f64 x) x))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (cos.f64 x) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(neg.f64 (neg.f64 (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(*.f64 (tan.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (neg.f64 (tan.f64 x)) (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)))","(*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (sin.f64 x) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (/.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"time":342.680908203125,"type":"rewrite"},{"compiler":[[1103,265]],"memory":[[-867936,6940784]],"time":10.112060546875,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","next",0.359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","next",0.371757519536884,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","next",0.43431512494062763,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","next",0.7436494199633715,"binary64"]],"compiler":[[27,16],[22,14],[17,12],[12,9]],"count":[[76,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,4],"picked":[1,0]}],"memory":[[3587840,3587840]],"min-error":[[0.359375,"binary64"]],"time":3.85302734375,"type":"prune"},{"egraph":[[0,7232,199,0.037984992],[19,7232,199,0.069209072],[18,7226,199,0.077008819],[17,7226,199,0.059001073],[16,7208,199,0.052440346],[15,7208,199,0.033487527],[14,7188,199,0.038927108],[13,6964,199,0.026809462],[12,6964,199,0.013933316],[11,6939,199,0.014328849],[10,6534,199,0.017355031],[9,4714,199,0.024497599],[8,1517,199,0.014789091],[7,1023,199,0.006967033],[6,986,199,0.004533978],[5,929,199,0.003539407],[4,624,199,0.004079998],[3,286,199,0.002440601],[2,136,199,0.001786313],[1,74,199,0.000829385],[0,42,199,0.000565506],[0,25,199,0.000413435]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(literal 2/945 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","(fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64))","#s(literal 1/4725 binary64)","(*.f64 x x)","x","#s(literal 2/945 binary64)","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","cost-diff",0],["(*.f64 #s(literal 1/3 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","cost-diff",0]],"memory":[[-1167008,22423936]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(fma.f64 #s(literal 1/45 binary64) (*.f64 x x) #s(literal 1/3 binary64))","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(literal 2/945 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","(fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64))","#s(literal 1/4725 binary64)","(*.f64 x x)","x","#s(literal 2/945 binary64)","#s(literal 1/45 binary64)","#s(literal 1/3 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":606.0,"type":"simplify"},{"compiler":[[171,29]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","accuracy",0.00390625],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","accuracy",0.0078125],["(fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64))","accuracy",0.01171875],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","accuracy",0.359375],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","accuracy",0.0078125],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","accuracy",0.012382519536884034],["(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","accuracy",0.359375],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","accuracy",0.00390625],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","accuracy",0.07884637494062764],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","accuracy",0.359375],["(*.f64 #s(literal 1/3 binary64) x)","accuracy",0.36328125],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","accuracy",0.38818056411882046]],"memory":[[-1273888,50319136]],"mixsample":[[13.66650390625,"ival-tan",2000],[14.044921875,"adjust",800],[4.0537109375,"ival-div",0],[0.70751953125,"ival-div",400],[0.182861328125,"ival-div",1600],[0.164306640625,"ival-assert",0],[229.06298828125,"ival-tan",2400],[3.16845703125,"ival-sub",0],[2.524658203125,"ival-tan",0],[0.006103515625,"ival-sub",400],[21.556884765625,"const",0],[1.34521484375,"ival-tan",400],[6.2578125,"adjust",2000],[0.072021484375,"ival-tan",1600],[24.171875,"ival-tan",800],[1.900634765625,"ival-div",1200],[13.50830078125,"ival-add",0],[32.811767578125,"ival-mult",0],[2.013427734375,"ival-div",800],[0.2646484375,"ival-true",0],[0.4697265625,"ival-div",2000],[0.218505859375,"exact",0],[1.726806640625,"ival-tan",1200],[2.895263671875,"ival-div",2400]],"outcomes":[[170.11865234375,1,"valid",135],[321.312744140625,2,"valid",118],[0.67578125,0,"valid",3]],"time":523.056884765625,"type":"localize"},{"count":[[15,44]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","(fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64))"]],"memory":[[4310864,4310864]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(pow x 2)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","1/45","(+ 1/45 (* 2/945 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2)))))))","(+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2)))))","2/945","(+ 2/945 (* 1/4725 (pow x 2)))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 2/945 (pow x 5))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 4))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 2))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* 1/4725 (pow x 7))","(* (pow x 7) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","(* 1/4725 (pow x 6))","(* (pow x 6) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* (pow x 6) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","(* 1/4725 (pow x 4))","(* (pow x 4) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* 1/4725 (pow x 2))","(* (pow x 2) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 2/945 (* 1/45 (/ 1 (pow x 2)))) (pow x 2))) 1/4725)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))))"]],"series":[[3.81103515625,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (+ (* 1/4725 (* x x)) 2/945))","x","-inf"],[2.73291015625,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (+ (* 1/4725 (* x x)) 2/945))","x","inf"],[2.449951171875,"((- (/ 1 x) (/ 1 (tan x))) (* 1/3 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* x x) 1/45) 1/3) x) (+ (* (* x x) 1/45) 1/3) (* x x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* 2/945 (* x x)) 1/45) (* x x)) 1/3) (+ (* 2/945 (* x x)) 1/45) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (+ (* 1/4725 (* x x)) 2/945))","x","0"]],"time":9.91015625,"type":"series"},{"count":[[44,44]],"egraph":[[0,8048,400,0.072971145],[4,4838,437,0.02715521],[3,2229,437,0.018748087],[2,841,437,0.007851663],[1,316,439,0.002834333],[0,96,439,0.001095441]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","1/3","(+ 1/3 (* 1/45 (pow x 2)))","(pow x 2)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","1/45","(+ 1/45 (* 2/945 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2)))))))","(+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2)))))","2/945","(+ 2/945 (* 1/4725 (pow x 2)))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/45 (pow x 2))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 2/945 (pow x 5))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 4))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(* 2/945 (pow x 2))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(* 1/4725 (pow x 7))","(* (pow x 7) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","(* 1/4725 (pow x 6))","(* (pow x 6) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* (pow x 6) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","(* 1/4725 (pow x 4))","(* (pow x 4) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 4) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* 1/4725 (pow x 2))","(* (pow x 2) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 2/945 (* 1/45 (/ 1 (pow x 2)))) (pow x 2))) 1/4725)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))))"]],"memory":[[3619600,34540688]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 1/45 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(pow x 2)","(*.f64 x x)","(+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","1/45","#s(literal 1/45 binary64)","(+ 1/45 (* 2/945 (pow x 2)))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","2/945","#s(literal 2/945 binary64)","(+ 2/945 (* 1/4725 (pow x 2)))","(fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* 1/45 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/45 binary64))","(* (pow x 2) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(* 2/945 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/945 binary64))","(* (pow x 5) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(* (pow x 5) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* 2/945 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2/945 binary64))","(* (pow x 4) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) x)","(* (pow x 4) (+ 2/945 (+ (/ 1/3 (pow x 4)) (* 1/45 (/ 1 (pow x 2))))))","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(* 2/945 (pow x 2))","(*.f64 #s(literal 2/945 binary64) (*.f64 x x))","(* (pow x 2) (+ 2/945 (* 1/45 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","(* 1/4725 (pow x 7))","(*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/4725 binary64))","(* (pow x 7) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (/.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/4725 binary64)) (/.f64 #s(literal -2/945 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/4725 binary64)) (-.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal -2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","(* 1/4725 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/4725 binary64))","(* (pow x 6) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)))","(* (pow x 6) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) x) x)","(* (pow x 6) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(* 1/4725 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4725 binary64))","(* (pow x 4) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) x) x)","(* (pow x 4) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","(* 1/4725 (pow x 2))","(*.f64 #s(literal 1/4725 binary64) (*.f64 x x))","(* (pow x 2) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64))","(* -1 (* (pow x 5) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 2))) 2/945)))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* -1 (* (pow x 7) (- (* -1 (/ (+ 2/945 (* 1/45 (/ 1 (pow x 2)))) (pow x 2))) 1/4725)))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/4725 binary64)) (/.f64 #s(literal -2/945 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":209.8759765625,"type":"simplify"},{"count":[[15,162]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64))","(*.f64 x x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))","(fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64))"]],"memory":[[-5791824,75280848]],"outputs":[["#s(approx (+ (/ 1 x) (/ -1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","(*.f64 x #s(literal 1/3 binary64))","(*.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) x))","(/.f64 (*.f64 #s(literal 1/3 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (neg.f64 x) #s(literal 1/3 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1/3 binary64) (neg.f64 x)) #s(literal -1 binary64))","#s(approx (+ (/ 1 x) (/ -1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(+.f64 (*.f64 (*.f64 x #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (*.f64 x #s(literal 1/45 binary64)) (*.f64 x x)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","(*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) #s(literal 1 binary64)) x)","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal -1/27 binary64))) (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) (*.f64 x x) (fma.f64 (*.f64 x #s(literal 1/135 binary64)) x #s(literal 1/9 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) x))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/8303765625 binary64)))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64))) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/4100625 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (neg.f64 (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(+.f64 (*.f64 (*.f64 x #s(literal 1/45 binary64)) x) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x #s(literal 1/45 binary64)) x))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64)) (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64)) (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(-.f64 (/.f64 #s(literal 1/9 binary64) (+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64)) (+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 x x) #s(literal -1/45 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal -1/27 binary64))) (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) (*.f64 x x) (fma.f64 (*.f64 x #s(literal 1/135 binary64)) x #s(literal 1/9 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (/.f64 (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)) (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(neg.f64 (*.f64 (neg.f64 x) x))","(*.f64 x x)","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 x (/.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(pow.f64 x #s(literal 2 binary64))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","#s(approx (+ (/ 1 x) (/ -1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(+.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) x)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) x)))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 x (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x)) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x)) #s(literal -1/27 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) x))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x)) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x)) #s(literal 1/27 binary64)) x) (fma.f64 (*.f64 #s(literal 1/9 binary64) (*.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (-.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))))) (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/3 binary64) #s(literal 1/9 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal 6 binary64)))) (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/3 binary64) #s(literal 1/9 binary64)) (-.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/3 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)))) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x)) #s(literal 1/27 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) x)) #s(literal 1/27 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal 1/45 binary64)) x) (fma.f64 (*.f64 x #s(literal 2/945 binary64)) (*.f64 (*.f64 x x) x) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 2/945 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(+.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 2/945 binary64))))","(+.f64 (+.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 2/945 binary64)))) (*.f64 (*.f64 x #s(literal 1/45 binary64)) x))","(+.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)))) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (-.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64) #s(literal -1/2025 binary64)) (fma.f64 (*.f64 x x) #s(literal -2/945 binary64) #s(literal 1/45 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 8/843908625 binary64) #s(literal 1/91125 binary64))) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 4/893025 binary64)) #s(literal 2/42525 binary64)) #s(literal 1/2025 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64) #s(literal -1/2025 binary64))) (fma.f64 (*.f64 x #s(literal 2/945 binary64)) x #s(literal -1/45 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 8/843908625 binary64) #s(literal 1/91125 binary64)) (neg.f64 (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 4/893025 binary64)) #s(literal 2/42525 binary64)) #s(literal 1/2025 binary64)))))","(+.f64 (*.f64 (*.f64 x #s(literal 2/945 binary64)) x) #s(literal 1/45 binary64))","(+.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 x #s(literal 2/945 binary64)) x))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64)) (fma.f64 (*.f64 x #s(literal 2/945 binary64)) x #s(literal -1/45 binary64))) (neg.f64 (/.f64 #s(literal 1/2025 binary64) (fma.f64 (*.f64 x #s(literal 2/945 binary64)) x #s(literal -1/45 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64)) (fma.f64 (*.f64 x #s(literal 2/945 binary64)) x #s(literal -1/45 binary64))) (/.f64 #s(literal 1/2025 binary64) (fma.f64 (*.f64 x #s(literal 2/945 binary64)) x #s(literal -1/45 binary64))))","(-.f64 (/.f64 #s(literal 1/2025 binary64) (+.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 x x) #s(literal -2/945 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64)) (+.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 x x) #s(literal -2/945 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64) #s(literal -1/2025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -2/945 binary64) #s(literal 1/45 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64) #s(literal -1/2025 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64) #s(literal -1/2025 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64) #s(literal -1/2025 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 8/843908625 binary64) #s(literal -1/91125 binary64))) (fma.f64 (*.f64 (*.f64 x x) #s(literal 4/893025 binary64)) (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 2/42525 binary64) #s(literal 1/2025 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -2/945 binary64) #s(literal 1/45 binary64))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 4/893025 binary64) #s(literal -1/2025 binary64)))","(*.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (/.f64 (fma.f64 (*.f64 x #s(literal 2/945 binary64)) x #s(literal -1/45 binary64)) (fma.f64 (*.f64 x #s(literal 2/945 binary64)) x #s(literal -1/45 binary64))))","#s(approx (+ (/ 1 x) (/ -1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) x)) (*.f64 #s(literal 1/3 binary64) x))","(+.f64 (*.f64 #s(literal 1/3 binary64) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x) #s(literal 1 binary64))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) x))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal -1/27 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 x x) #s(literal 1/3 binary64)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/27 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) x))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (neg.f64 x) x) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/27 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/27 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) #s(literal 1/9 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)))","(+.f64 (*.f64 (*.f64 x #s(literal 1/45 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/3 binary64)))","(+.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))))","(+.f64 (+.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)))) (*.f64 (*.f64 x #s(literal 1/45 binary64)) x))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)))) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x))) (-.f64 #s(literal 1/3 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x)) #s(literal -1/9 binary64)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) #s(literal -1/2025 binary64)) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) #s(literal 1/45 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) #s(literal -1/2025 binary64))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal -1/45 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) x) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) x)) #s(literal 1/91125 binary64)) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal 1/2025 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) x) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) x)) #s(literal 1/91125 binary64))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal -1/45 binary64)) #s(literal 1/2025 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/4725 binary64))) (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)))","(+.f64 (*.f64 (*.f64 x #s(literal 2/945 binary64)) x) (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) (*.f64 (*.f64 x x) x) #s(literal 1/45 binary64)))","(+.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/4725 binary64))))","(+.f64 (+.f64 #s(literal 1/45 binary64) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 1/4725 binary64)))) (*.f64 (*.f64 x #s(literal 2/945 binary64)) x))","(+.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) #s(literal 1/45 binary64))","(+.f64 #s(literal 1/45 binary64) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal -1/45 binary64))) (neg.f64 (/.f64 #s(literal 1/2025 binary64) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal -1/45 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x))) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal -1/45 binary64))) (/.f64 #s(literal 1/2025 binary64) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal -1/45 binary64))))","(-.f64 (/.f64 #s(literal 1/2025 binary64) (-.f64 #s(literal 1/45 binary64) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)))) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x))) (-.f64 #s(literal 1/45 binary64) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x)) #s(literal -1/2025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (neg.f64 x) x) (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) #s(literal 1/45 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64) #s(literal -4/893025 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/4725 binary64) #s(literal 2/945 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/105488578125 binary64) #s(literal 8/843908625 binary64))) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/22325625 binary64)) #s(literal 2/4465125 binary64)) #s(literal 4/893025 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64) #s(literal -4/893025 binary64))) (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) x #s(literal -2/945 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/105488578125 binary64) #s(literal 8/843908625 binary64)) (neg.f64 (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/22325625 binary64)) #s(literal 2/4465125 binary64)) #s(literal 4/893025 binary64)))))","(+.f64 (*.f64 (*.f64 x #s(literal 1/4725 binary64)) x) #s(literal 2/945 binary64))","(+.f64 #s(literal 2/945 binary64) (*.f64 (*.f64 x #s(literal 1/4725 binary64)) x))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64)) (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) x #s(literal -2/945 binary64))) (neg.f64 (/.f64 #s(literal 4/893025 binary64) (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) x #s(literal -2/945 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64)) (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) x #s(literal -2/945 binary64))) (/.f64 #s(literal 4/893025 binary64) (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) x #s(literal -2/945 binary64))))","(-.f64 (/.f64 #s(literal 4/893025 binary64) (+.f64 #s(literal 2/945 binary64) (*.f64 (*.f64 x x) #s(literal -1/4725 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64)) (+.f64 #s(literal 2/945 binary64) (*.f64 (*.f64 x x) #s(literal -1/4725 binary64)))))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64) #s(literal -4/893025 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/4725 binary64) #s(literal 2/945 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64) #s(literal -4/893025 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64) #s(literal -4/893025 binary64))) (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64) #s(literal -4/893025 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/105488578125 binary64) #s(literal -8/843908625 binary64))) (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/22325625 binary64)) (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 2/4465125 binary64) #s(literal 4/893025 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/4725 binary64) #s(literal 2/945 binary64))) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/22325625 binary64) #s(literal -4/893025 binary64)))","(*.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (/.f64 (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) x #s(literal -2/945 binary64)) (fma.f64 (*.f64 x #s(literal 1/4725 binary64)) x #s(literal -2/945 binary64))))"]],"time":2541.7509765625,"type":"rewrite"},{"compiler":[[9878,1238]],"memory":[[-3966064,28110768]],"time":36.590087890625,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","next",0.7889030738873912,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.371757519536884,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","next",0.30150262494062763,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","next",0.32103387494062763,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.43431512494062763,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/8303765625 binary64)))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64))) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/4100625 binary64)))))","fresh",0.4752989260981655,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (+.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 2/945 binary64)))) x))","fresh",0.367851269536884,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","next",0.5055214479503772,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","fresh",0.48738138470906966,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.7436494199633715,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))))","next",54.368443591804294,"binary64"]],"compiler":[[14,11],[27,16],[22,14],[38,21],[28,18],[17,12],[112,31],[27,17],[40,23],[30,19],[12,9],[54,36],[14,11],[38,21],[28,18],[112,31],[27,17],[40,23],[30,19],[54,36]],"count":[[282,12]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[278,8],"picked":[4,4]}],"memory":[[7423584,15763520]],"min-error":[[0.015625,"binary64"]],"time":14.65380859375,"type":"prune"},{"egraph":[[0,8313,493,0.062408871],[5,4231,515,0.024963966],[4,2068,515,0.014168684],[3,848,515,0.011118327],[2,356,515,0.00314806],[1,169,547,0.001683766],[0,96,561,0.001036642],[0,62,619,0.000722403]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/3 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(*.f64 (*.f64 x x) (*.f64 x x))","(*.f64 x x)","x","#s(literal 1/2025 binary64)","#s(literal -1/9 binary64)","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","(fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))","(*.f64 x #s(literal 1/45 binary64))","#s(literal 1/45 binary64)","#s(literal -1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)","(fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","#s(literal 1 binary64)","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x))))","(/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64)))","(+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64))","(/.f64 #s(literal 1/3 binary64) (*.f64 x x))","#s(literal 1/3 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","(-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))","#s(literal -1/4725 binary64)","(/.f64 #s(literal 2/945 binary64) (*.f64 x x))","#s(literal 2/945 binary64)","(pow.f64 x #s(literal 7 binary64))","#s(literal 7 binary64)"]],"locations":[["(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x))))","cost-diff",0],["#s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64))))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))))","cost-diff",0],["(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","cost-diff",2],["(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","cost-diff",1],["(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","cost-diff",2],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","cost-diff",4],["(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","cost-diff",0],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",2],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","cost-diff",0],["(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","cost-diff",1],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","cost-diff",4]],"memory":[[-2899824,35216544]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(/.f64 x (fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64)))","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) (*.f64 x x))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x))","(*.f64 #s(literal 1/3 binary64) x)","#s(literal 1/3 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(*.f64 (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) (fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","(*.f64 x x)","x","#s(literal 1/2025 binary64)","#s(literal -1/9 binary64)","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","(/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))","(fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))","(*.f64 x #s(literal 1/45 binary64))","(*.f64 #s(literal 1/45 binary64) x)","#s(literal 1/45 binary64)","#s(literal -1/3 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x)","(fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64)))","#s(literal 1 binary64)","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(fma.f64 (fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(fma.f64 #s(literal 1/2025 binary64) (*.f64 x x) #s(literal -1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) (*.f64 x x))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/945 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/4725 binary64))))))","#s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64))))","#s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/945 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/4725 binary64)))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2/945 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/4725 binary64))))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x))))","(/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64)))","(+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64))","(/.f64 #s(literal 1/3 binary64) (*.f64 x x))","#s(literal 1/3 binary64)","(*.f64 x x)","x","#s(literal 1/45 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","(-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))","#s(literal -1/4725 binary64)","(/.f64 #s(literal 2/945 binary64) (*.f64 x x))","#s(literal 2/945 binary64)","(pow.f64 x #s(literal 7 binary64))","#s(literal 7 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":203.212158203125,"type":"simplify"},{"compiler":[[479,60]],"locations":[["(/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64)))","accuracy",0.078125],["(/.f64 #s(literal 1/3 binary64) (*.f64 x x))","accuracy",0.1796875],["(/.f64 #s(literal 2/945 binary64) (*.f64 x x))","accuracy",0.23642016389084772],["(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","accuracy",53.22006381325847],["(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","accuracy",0.12109375],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.12890625],["(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","accuracy",0.2642338132413075],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)","accuracy",0.33203125],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.12890625],["(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","accuracy",0.1875],["(*.f64 x #s(literal 1/45 binary64))","accuracy",0.234375],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","accuracy",0.28515625],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",0.38818056411882046],["(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.40625],["(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","accuracy",0.12109375],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.12890625],["(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","accuracy",0.3125],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","accuracy",0.3359375]],"memory":[[-5005936,110171680]],"mixsample":[[2.12255859375,"const",800],[13.838623046875,"ival-tan",2000],[27.199462890625,"adjust",800],[27.354248046875,"ival-div",0],[1.5869140625,"ival-div",400],[0.2080078125,"ival-assert",0],[0.19091796875,"ival-div",1600],[10.2099609375,"ival-sub",0],[2.935546875,"ival-tan",0],[0.022216796875,"ival-sub",400],[59.783203125,"const",0],[1.509033203125,"ival-tan",400],[13.442626953125,"ival-pow",0],[24.81396484375,"ival-tan",800],[0.087158203125,"ival-tan",1600],[19.372802734375,"ival-add",0],[0.143310546875,"ival-mult",800],[0.02392578125,"ival-sub",800],[0.43212890625,"ival-add",400],[4.330810546875,"adjust",2800],[0.885498046875,"ival-div",2000],[2.9716796875,"ival-div",2400],[1.744873046875,"const",400],[231.6416015625,"ival-tan",2400],[14.86376953125,"adjust",2000],[2.04052734375,"ival-div",1200],[71.424072265625,"ival-mult",0],[0.3115234375,"ival-mult",400],[0.198486328125,"ival-add",2000],[2.810791015625,"ival-div",800],[0.931884765625,"const",2000],[0.331787109375,"ival-true",0],[0.659423828125,"exact",0],[0.460693359375,"ival-add",800],[1.88916015625,"ival-tan",1200]],"outcomes":[[131.483642578125,1,"valid",107],[348.395263671875,2,"valid",107],[142.360595703125,3,"valid",39],[1.490966796875,0,"valid",3]],"time":688.847900390625,"type":"localize"},{"count":[[24,62]],"inputs":[["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 x x) (*.f64 x x))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64))))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(*.f64 x #s(literal 1/45 binary64))","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)","(/.f64 #s(literal 2/945 binary64) (*.f64 x x))","(/.f64 #s(literal 1/3 binary64) (*.f64 x x))","(/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64)))"]],"memory":[[93248,10433712]],"outputs":[["(pow x 6)","(pow x 4)","-1/135","(- (* 1/2025 (pow x 2)) 1/135)","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(/ 1/3 (pow x 6))","(/ (+ 1/3 (* 1/45 (pow x 2))) (pow x 6))","(/ (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))) (pow x 6))","(/ (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))) (pow x 6))","(* 9 x)","(* x (+ 9 (* 3/5 (pow x 2))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* -1/375 (pow x 4))))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* (pow x 4) (- (* -1/5625 (pow x 2)) 1/375))))))","(* 1/2025 (pow x 2))","(* 1/45 x)","(* -3 x)","(* x (- (* -1/5 (pow x 2)) 3))","(* x (- (* (pow x 2) (- (* -1/75 (pow x 2)) 1/5)) 3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/1125 (pow x 2)) 1/75)) 1/5)) 3))","(* 1/27 x)","(* x (+ 1/27 (* 1/91125 (pow x 6))))","(/ 2/945 (pow x 2))","(/ 1/3 (pow x 2))","(* (pow x 2) (- 1/2025 (* 1/135 (/ 1 (pow x 2)))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* 1/4725 (pow x 7))","(* (pow x 7) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","1/4725","(+ 1/4725 (* 2/945 (/ 1 (pow x 2))))","(+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2)))))","(+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6))))))","(/ 2025 (pow x 3))","(/ (+ 2025 (* 30375 (/ 1 (pow x 2)))) (pow x 3))","(/ (- (+ 2025 (* 30375 (/ 1 (pow x 2)))) (/ 6834375 (pow x 6))) (pow x 3))","(/ (+ 2025 (+ (* -1 (/ (+ 6834375 (* 102515625 (/ 1 (pow x 2)))) (pow x 6))) (* 30375 (/ 1 (pow x 2))))) (pow x 3))","(/ 45 x)","(/ (+ 45 (* 675 (/ 1 (pow x 2)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (/ 10125 (pow x 4)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (+ (* 151875 (/ 1 (pow x 6))) (/ 10125 (pow x 4))))) x)","(* 1/91125 (pow x 7))","(* (pow x 7) (+ 1/91125 (* 1/27 (/ 1 (pow x 6)))))","(/ 1/45 (pow x 4))","(/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 2/945 (* 1/45 (/ 1 (pow x 2)))) (pow x 2))) 1/4725)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))))","(* -1 (/ (- (/ 6834375 (pow x 6)) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (+ (* 102515625 (/ 1 (pow x 8))) (/ 6834375 (pow x 6))) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) x))","(* -1 (/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) x))"]],"series":[[9.576904296875,"((* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (- (* (* x x) 1/2025) 1/135) (- (/ 1 x) (/ 1 (tan x))) (/ 1/3 (/ 1 x)) (- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3))) (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (* (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 1 (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (* (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (pow x 7)) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (* (* x x) 1/2025) (* x 1/45) (/ x (+ (* (* x 1/45) x) -1/3)) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 2/945 (* x x)) (/ 1/3 (* x x)) (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)))","x","-inf"],[6.22900390625,"((* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (- (* (* x x) 1/2025) 1/135) (- (/ 1 x) (/ 1 (tan x))) (/ 1/3 (/ 1 x)) (- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3))) (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (* (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 1 (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (* (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (pow x 7)) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (* (* x x) 1/2025) (* x 1/45) (/ x (+ (* (* x 1/45) x) -1/3)) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 2/945 (* x x)) (/ 1/3 (* x x)) (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)))","x","inf"],[5.1591796875,"((* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (- (* (* x x) 1/2025) 1/135) (- (/ 1 x) (/ 1 (tan x))) (/ 1/3 (/ 1 x)) (- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3))) (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (* (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 1 (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (* (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (pow x 7)) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (* (* x x) 1/2025) (* x 1/45) (/ x (+ (* (* x 1/45) x) -1/3)) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 2/945 (* x x)) (/ 1/3 (* x x)) (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)))","x","0"]],"time":22.55908203125,"type":"series"},{"count":[[62,62]],"egraph":[[0,8820,621,0.074259275],[4,7691,651,0.021608817],[3,3441,651,0.028449827],[2,1361,653,0.012961544],[1,530,660,0.005945867],[0,206,661,0.002346652]],"inputs":[["(pow x 6)","(pow x 4)","-1/135","(- (* 1/2025 (pow x 2)) 1/135)","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(/ 1/3 (pow x 6))","(/ (+ 1/3 (* 1/45 (pow x 2))) (pow x 6))","(/ (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))) (pow x 6))","(/ (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))) (pow x 6))","(* 9 x)","(* x (+ 9 (* 3/5 (pow x 2))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* -1/375 (pow x 4))))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* (pow x 4) (- (* -1/5625 (pow x 2)) 1/375))))))","(* 1/2025 (pow x 2))","(* 1/45 x)","(* -3 x)","(* x (- (* -1/5 (pow x 2)) 3))","(* x (- (* (pow x 2) (- (* -1/75 (pow x 2)) 1/5)) 3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/1125 (pow x 2)) 1/75)) 1/5)) 3))","(* 1/27 x)","(* x (+ 1/27 (* 1/91125 (pow x 6))))","(/ 2/945 (pow x 2))","(/ 1/3 (pow x 2))","(* (pow x 2) (- 1/2025 (* 1/135 (/ 1 (pow x 2)))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(* 1/4725 (pow x 7))","(* (pow x 7) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","1/4725","(+ 1/4725 (* 2/945 (/ 1 (pow x 2))))","(+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2)))))","(+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6))))))","(/ 2025 (pow x 3))","(/ (+ 2025 (* 30375 (/ 1 (pow x 2)))) (pow x 3))","(/ (- (+ 2025 (* 30375 (/ 1 (pow x 2)))) (/ 6834375 (pow x 6))) (pow x 3))","(/ (+ 2025 (+ (* -1 (/ (+ 6834375 (* 102515625 (/ 1 (pow x 2)))) (pow x 6))) (* 30375 (/ 1 (pow x 2))))) (pow x 3))","(/ 45 x)","(/ (+ 45 (* 675 (/ 1 (pow x 2)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (/ 10125 (pow x 4)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (+ (* 151875 (/ 1 (pow x 6))) (/ 10125 (pow x 4))))) x)","(* 1/91125 (pow x 7))","(* (pow x 7) (+ 1/91125 (* 1/27 (/ 1 (pow x 6)))))","(/ 1/45 (pow x 4))","(/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 2/945 (* 1/45 (/ 1 (pow x 2)))) (pow x 2))) 1/4725)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))))","(* -1 (/ (- (/ 6834375 (pow x 6)) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (+ (* 102515625 (/ 1 (pow x 8))) (/ 6834375 (pow x 6))) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) x))","(* -1 (/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) x))"]],"memory":[[-1534464,38540976]],"method":["egg-herbie"],"outputs":[["(pow x 6)","(pow.f64 x #s(literal 6 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","-1/135","#s(literal -1/135 binary64)","(- (* 1/2025 (pow x 2)) 1/135)","(fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64))","(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 2/945 binary64) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4725 binary64) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","-1/9","#s(literal -1/9 binary64)","(- (* 1/2025 (pow x 4)) 1/9)","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(/ 1/3 (pow x 6))","(/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 6 binary64)))","(/ (+ 1/3 (* 1/45 (pow x 2))) (pow x 6))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 6 binary64)))","(/ (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))) (pow x 6))","(/.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 2/945 binary64) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 6 binary64)))","(/ (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))) (pow x 6))","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4725 binary64) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) (pow.f64 x #s(literal 6 binary64)))","(* 9 x)","(*.f64 #s(literal 9 binary64) x)","(* x (+ 9 (* 3/5 (pow x 2))))","(*.f64 (fma.f64 #s(literal 3/5 binary64) (*.f64 x x) #s(literal 9 binary64)) x)","(* x (+ 9 (* (pow x 2) (+ 3/5 (* -1/375 (pow x 4))))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/375 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 3/5 binary64)) (*.f64 x x) #s(literal 9 binary64)) x)","(* x (+ 9 (* (pow x 2) (+ 3/5 (* (pow x 4) (- (* -1/5625 (pow x 2)) 1/375))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5625 binary64) (*.f64 x x) #s(literal -1/375 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 3/5 binary64)) (*.f64 x x) #s(literal 9 binary64)) x)","(* 1/2025 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(* 1/45 x)","(*.f64 #s(literal 1/45 binary64) x)","(* -3 x)","(*.f64 #s(literal -3 binary64) x)","(* x (- (* -1/5 (pow x 2)) 3))","(*.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)) x)","(* x (- (* (pow x 2) (- (* -1/75 (pow x 2)) 1/5)) 3))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/75 binary64) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal -3 binary64)) x)","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/1125 (pow x 2)) 1/75)) 1/5)) 3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/1125 binary64) (*.f64 x x) #s(literal -1/75 binary64)) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal -3 binary64)) x)","(* 1/27 x)","(*.f64 #s(literal 1/27 binary64) x)","(* x (+ 1/27 (* 1/91125 (pow x 6))))","(*.f64 (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)) x)","(/ 2/945 (pow x 2))","(/.f64 #s(literal 2/945 binary64) (*.f64 x x))","(/ 1/3 (pow x 2))","(/.f64 #s(literal 1/3 binary64) (*.f64 x x))","(* (pow x 2) (- 1/2025 (* 1/135 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* 1/2025 (pow x 4))","(*.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(fma.f64 #s(literal 1/2025 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/9 binary64))","(* 1/4725 (pow x 7))","(*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/4725 binary64))","(* (pow x 7) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))","(*.f64 (+.f64 (/.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/4725 binary64)) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/4725 binary64)) (/.f64 #s(literal 2/945 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6)))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/4725 binary64)) (+.f64 (/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","1/4725","#s(literal 1/4725 binary64)","(+ 1/4725 (* 2/945 (/ 1 (pow x 2))))","(+.f64 (/.f64 #s(literal 2/945 binary64) (*.f64 x x)) #s(literal 1/4725 binary64))","(+ 1/4725 (+ (/ 1/45 (pow x 4)) (* 2/945 (/ 1 (pow x 2)))))","(+.f64 (+.f64 (/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/4725 binary64)) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))","(+ 1/4725 (+ (/ 1/45 (pow x 4)) (+ (* 2/945 (/ 1 (pow x 2))) (* 1/3 (/ 1 (pow x 6))))))","(+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/4725 binary64)) (+.f64 (/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 2/945 binary64) (*.f64 x x))))","(/ 2025 (pow x 3))","(/.f64 #s(literal 2025 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2025 (* 30375 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (+.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal 2025 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (- (+ 2025 (* 30375 (/ 1 (pow x 2)))) (/ 6834375 (pow x 6))) (pow x 3))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal -2025 binary64)) (/.f64 #s(literal 6834375 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2025 (+ (* -1 (/ (+ 6834375 (* 102515625 (/ 1 (pow x 2)))) (pow x 6))) (* 30375 (/ 1 (pow x 2))))) (pow x 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal 2025 binary64)) (/.f64 (+.f64 (/.f64 #s(literal 102515625 binary64) (*.f64 x x)) #s(literal 6834375 binary64)) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/ 45 x)","(/.f64 #s(literal 45 binary64) x)","(/ (+ 45 (* 675 (/ 1 (pow x 2)))) x)","(/.f64 (+.f64 (/.f64 #s(literal 675 binary64) (*.f64 x x)) #s(literal 45 binary64)) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (/ 10125 (pow x 4)))) x)","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 45 binary64)) (/.f64 #s(literal 675 binary64) (*.f64 x x))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (+ (* 151875 (/ 1 (pow x 6))) (/ 10125 (pow x 4))))) x)","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 151875 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 45 binary64)) (+.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 675 binary64) (*.f64 x x)))) x)","(* 1/91125 (pow x 7))","(*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/91125 binary64))","(* (pow x 7) (+ 1/91125 (* 1/27 (/ 1 (pow x 6)))))","(*.f64 (+.f64 (/.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/91125 binary64)) (pow.f64 x #s(literal 7 binary64)))","(/ 1/45 (pow x 4))","(/.f64 #s(literal 1/45 binary64) (pow.f64 x #s(literal 4 binary64)))","(/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))","(/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 2/945 (* 1/45 (/ 1 (pow x 2)))) (pow x 2))) 1/4725)))","(*.f64 (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/45 binary64) (*.f64 x x)) #s(literal 2/945 binary64)) x) x) #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* (pow x 7) (- (* -1 (/ (+ 1/45 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))) (+ 1/4725 (* 2/945 (/ 1 (pow x 2)))))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","(* -1 (/ (- (/ 6834375 (pow x 6)) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal -2025 binary64)) (/.f64 #s(literal 6834375 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (+ (* 102515625 (/ 1 (pow x 8))) (/ 6834375 (pow x 6))) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal -102515625 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal -2025 binary64)) (-.f64 (/.f64 #s(literal 6834375 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 30375 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) x))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 10125 binary64) (*.f64 x x)) #s(literal 675 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -45 binary64) x))","(* -1 (/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) x))","(-.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 151875 binary64) (*.f64 x x)) #s(literal 10125 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -675 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal -45 binary64) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":265.304931640625,"type":"simplify"},{"count":[[24,290]],"inputs":[["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 x x) (*.f64 x x))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64))))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(*.f64 x #s(literal 1/45 binary64))","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)","(/.f64 #s(literal 2/945 binary64) (*.f64 x x))","(/.f64 #s(literal 1/3 binary64) (*.f64 x x))","(/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64)))"]],"memory":[[7057648,23194768]],"outputs":[["x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","#s(approx (* x (tan x)) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","#s(approx (* x (tan x)) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","#s(approx (* x (tan x)) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","(neg.f64 (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal 7 binary64)) x) (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal 7 binary64)) x) (*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal -1/4725 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal 7 binary64)) x) (*.f64 #s(literal -1/4725 binary64) (pow.f64 x #s(literal 7 binary64))))","(+.f64 (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))) (*.f64 (pow.f64 x #s(literal 7 binary64)) x))","(+.f64 (*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal -1/4725 binary64)) (*.f64 (pow.f64 x #s(literal 7 binary64)) x))","(+.f64 (*.f64 #s(literal -1/4725 binary64) (pow.f64 x #s(literal 7 binary64))) (*.f64 (pow.f64 x #s(literal 7 binary64)) x))","(*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64)))","(*.f64 (pow.f64 x #s(literal 7 binary64)) (+.f64 x #s(literal -1/4725 binary64)))","(*.f64 (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))) (pow.f64 x #s(literal 7 binary64)))","(*.f64 (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))) (+.f64 x #s(literal -1/4725 binary64)))","(*.f64 #s(literal 1/2025 binary64) (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))))","(*.f64 (+.f64 x #s(literal -1/4725 binary64)) (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))))","(*.f64 (pow.f64 x #s(literal 7 binary64)) (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))))","(/.f64 (pow.f64 x #s(literal 7 binary64)) (+.f64 x #s(literal -1/4725 binary64)))","#s(approx (* x (tan x)) #s(approx (* x -8/3987468253125) (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (* x -8/3987468253125) (*.f64 (+.f64 x #s(literal -1/4725 binary64)) (pow.f64 x #s(literal 7 binary64))))","(neg.f64 (+.f64 x #s(literal -1/4725 binary64)))","(+.f64 x #s(literal -1/4725 binary64))","(+.f64 #s(literal -1/4725 binary64) x)","(+.f64 (+.f64 x #s(literal -1/4725 binary64)) (+.f64 x #s(literal -1/4725 binary64)))","(+.f64 (+.f64 x #s(literal -1/4725 binary64)) x)","(+.f64 (+.f64 x #s(literal -1/4725 binary64)) #s(literal 1/2025 binary64))","(+.f64 (+.f64 x #s(literal -1/4725 binary64)) #s(literal -1/4725 binary64))","(+.f64 #s(literal -1/4725 binary64) (+.f64 x #s(literal -1/4725 binary64)))","(+.f64 #s(literal 1/2025 binary64) (+.f64 x #s(literal -1/4725 binary64)))","(+.f64 x (+.f64 x #s(literal -1/4725 binary64)))","(-.f64 x #s(literal -1/4725 binary64))","(-.f64 #s(literal -1/4725 binary64) x)","(-.f64 x (+.f64 x #s(literal -1/4725 binary64)))","(-.f64 (+.f64 x #s(literal -1/4725 binary64)) (+.f64 x #s(literal -1/4725 binary64)))","(-.f64 (+.f64 x #s(literal -1/4725 binary64)) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2025 binary64))","(+.f64 #s(literal 1/2025 binary64) x)","(+.f64 x x)","(-.f64 x #s(literal 1/2025 binary64))","(-.f64 #s(literal 1/2025 binary64) x)","(-.f64 x x)","(*.f64 x x)","(*.f64 x #s(literal 1/2025 binary64))","(*.f64 #s(literal 1/2025 binary64) x)","(/.f64 #s(literal 1/2025 binary64) x)","(/.f64 x #s(literal 1/2025 binary64))","(/.f64 x x)","(exp.f64 (log.f64 x))"]],"time":541.955078125,"type":"rewrite"},{"compiler":[[5288,661]],"memory":[[-9051456,12217344]],"time":17.2890625,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","done",0.7889030738873912,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.371757519536884,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","next",0.7827118142001576,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.43431512494062763,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","next",0.8719421926172319,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/8303765625 binary64)))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64))) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/4100625 binary64)))))","fresh",0.4752989260981655,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","next",0.31034265983267284,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","next",0.5055214857799453,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.7436494199633715,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 #s(approx (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 7 binary64)))))","fresh",54.74814799231251,"binary64"],["#s(approx (* x (tan x)) x)","next",52.66112140498863,"binary64"]],"compiler":[[14,11],[27,16],[22,14],[43,26],[17,12],[28,19],[112,31],[31,21],[45,28],[12,9],[60,37],[6,4],[43,26],[28,19],[112,31],[31,21],[45,28],[60,37],[6,4]],"count":[[140,12]],"kept":[{"done":[4,4],"fresh":[3,1],"new":[128,6],"picked":[5,1]}],"memory":[[566944,8865216]],"min-error":[[0.015625,"binary64"]],"time":9.419921875,"type":"prune"},{"egraph":[[0,8033,384,0.032799405],[12,7453,400,0.020671806],[11,6659,400,0.017761974],[10,6180,400,0.017283584],[9,4615,400,0.022859953],[8,1345,400,0.015367766],[7,788,400,0.005885414],[6,755,400,0.003645935],[5,712,400,0.003476484],[4,674,400,0.003965261],[3,413,400,0.002834959],[2,235,400,0.001912455],[1,134,422,0.001148824],[0,83,434,0.000789188],[0,56,476,0.000461316]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","(*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","#s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64))","#s(literal -1/9 binary64)","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","x","(fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))","(*.f64 x #s(literal 1/45 binary64))","#s(literal 1/45 binary64)","#s(literal -1/3 binary64)","#s(approx (* x (tan x)) x)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","#s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))","(*.f64 #s(literal 9 binary64) x)","#s(literal 9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","#s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x))","(*.f64 #s(literal 1/27 binary64) x)","#s(literal 1/27 binary64)","x","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","#s(literal 1 binary64)","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(*.f64 x x)","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","x","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(*.f64 x x)","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)"]],"locations":[["(fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","cost-diff",0],["(*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","cost-diff",0],["(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","cost-diff",1],["#s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","cost-diff",0],["(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","cost-diff",1],["(*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","cost-diff",2],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","cost-diff",0],["(*.f64 (*.f64 x x) (*.f64 x x))","cost-diff",4],["(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","cost-diff",4],["#s(approx (* x (tan x)) x)","cost-diff",0],["(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","cost-diff",0],["#s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","cost-diff",0],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","cost-diff",0]],"memory":[[714160,17712880]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64))))","(*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","(*.f64 (/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))) #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)))","#s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64))","#s(literal -1/9 binary64)","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","(/.f64 x (fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64)))","x","(fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))","(fma.f64 (*.f64 #s(literal 1/45 binary64) x) x #s(literal -1/3 binary64))","(*.f64 x #s(literal 1/45 binary64))","(*.f64 #s(literal 1/45 binary64) x)","#s(literal 1/45 binary64)","#s(literal -1/3 binary64)","#s(approx (* x (tan x)) x)","x","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)))","(*.f64 #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)) (fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(fma.f64 #s(literal 1/91125 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/27 binary64))","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(pow.f64 x #s(literal 6 binary64))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","(pow.f64 x #s(literal 4 binary64))","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","#s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))","(*.f64 #s(literal 9 binary64) x)","#s(literal 9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))))","(*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(/.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64)))","#s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x))","(*.f64 #s(literal 1/27 binary64) x)","#s(literal 1/27 binary64)","x","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64)))","#s(literal 1 binary64)","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))","(*.f64 x x)","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 x (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/91125 binary64) x #s(literal 1/27 binary64))))","(*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(*.f64 (/.f64 x (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/91125 binary64) x #s(literal 1/27 binary64)))","(fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(fma.f64 #s(literal 1/91125 binary64) x #s(literal 1/27 binary64))","x","#s(literal 1/91125 binary64)","#s(literal 1/27 binary64)","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","(/.f64 x (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64)))","(fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64)) (*.f64 x x) #s(literal 1/9 binary64))","(*.f64 x x)","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","#s(literal 1/2025 binary64)","#s(literal 1/135 binary64)","#s(literal 1/9 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":225.446044921875,"type":"simplify"},{"compiler":[[360,44]],"locations":[["(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","accuracy",0.12109375],["(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))","accuracy",0.3125],["(*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","accuracy",0.33984375],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","accuracy",0.6616090600153596],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","accuracy",0.07884637494062764],["(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","accuracy",0.12109375],["(*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","accuracy",0.2642338132413075],["(*.f64 #s(literal 1/27 binary64) x)","accuracy",0.33203125],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","accuracy",0.07884637494062764],["(*.f64 (*.f64 x x) (*.f64 x x))","accuracy",0.12890625],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)))","accuracy",0.3359375],["#s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))","accuracy",0.4624756302197953],["#s(approx (* x (tan x)) x)","accuracy",59.501470381046026],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","accuracy",0.07884637494062764],["(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","accuracy",0.1875],["(*.f64 x #s(literal 1/45 binary64))","accuracy",0.234375],["(*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","accuracy",0.28515625]],"memory":[[6118960,78482752]],"mixsample":[[2.18359375,"const",800],[13.628173828125,"ival-tan",2000],[16.28271484375,"adjust",800],[13.433837890625,"ival-div",0],[1.446044921875,"ival-div",400],[0.136474609375,"ival-assert",0],[0.210205078125,"ival-div",1600],[5.611572265625,"ival-sub",0],[2.752685546875,"ival-tan",0],[0.01611328125,"ival-sub",400],[37.849609375,"const",0],[1.4453125,"ival-tan",400],[24.9521484375,"ival-tan",800],[0.078369140625,"ival-tan",1600],[12.884033203125,"ival-add",0],[0.124755859375,"ival-mult",800],[0.02197265625,"ival-sub",800],[0.4443359375,"ival-add",400],[2.50732421875,"adjust",2800],[0.87060546875,"ival-div",2000],[2.974853515625,"ival-div",2400],[1.782470703125,"const",400],[231.49169921875,"ival-tan",2400],[8.927978515625,"adjust",2000],[2.257080078125,"ival-div",1200],[43.263916015625,"ival-mult",0],[0.3076171875,"ival-mult",400],[0.193603515625,"ival-add",2000],[2.64208984375,"ival-div",800],[0.91455078125,"const",2000],[0.285400390625,"ival-true",0],[0.418701171875,"exact",0],[0.351318359375,"ival-add",800],[1.8232421875,"ival-tan",1200]],"outcomes":[[98.4921875,1,"valid",107],[271.805908203125,2,"valid",107],[122.40087890625,3,"valid",39],[1.196044921875,0,"valid",3]],"time":538.134033203125,"type":"localize"},{"count":[[21,60]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","(*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","#s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64))","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","#s(approx (* x (tan x)) x)","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)))","(*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(*.f64 x #s(literal 1/45 binary64))","#s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))","(*.f64 #s(literal 1/27 binary64) x)","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))"]],"memory":[[1101296,8698464]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(* -3 x)","(* x (- (* -1/5 (pow x 2)) 3))","(* x (- (* (pow x 2) (- (* -1/75 (pow x 2)) 1/5)) 3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/1125 (pow x 2)) 1/75)) 1/5)) 3))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(pow x 6)","(pow x 4)","-1/135","(- (* 1/2025 (pow x 2)) 1/135)","(* 1/27 x)","(* x (+ 1/27 (* 1/91125 (pow x 6))))","(* x (+ 1/3 (* 1/10125 x)))","(* x (+ 1/3 (* x (+ 1/10125 (* 1/45 x)))))","(* x (+ 1/3 (* x (+ 1/10125 (* x (+ 1/45 (* 1/151875 x)))))))","1/27","(+ 1/27 (* 1/91125 x))","(* 1/45 x)","(* 9 x)","(* x (+ 9 (* 3/5 (pow x 2))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* -1/375 (pow x 4))))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* (pow x 4) (- (* -1/5625 (pow x 2)) 1/375))))))","(* 1/2025 (pow x 2))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(/ 45 x)","(/ (+ 45 (* 675 (/ 1 (pow x 2)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (/ 10125 (pow x 4)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (+ (* 151875 (/ 1 (pow x 6))) (/ 10125 (pow x 4))))) x)","(/ (* x (sin x)) (cos x))","(* (pow x 2) (- 1/2025 (* 1/135 (/ 1 (pow x 2)))))","(* 1/91125 (pow x 7))","(* (pow x 7) (+ 1/91125 (* 1/27 (/ 1 (pow x 6)))))","(/ 1/45 (pow x 2))","(/ (+ 1/45 (* 75 (/ 1 x))) (pow x 2))","(/ (+ 1/45 (+ (/ 1/3 (pow x 2)) (* 75 (/ 1 x)))) (pow x 2))","(/ (+ 1/45 (+ (/ 1/3 (pow x 2)) (+ (* 75 (/ 1 x)) (* 1125 (/ 1 (pow x 3)))))) (pow x 2))","(* 1/91125 x)","(* x (+ 1/91125 (* 1/27 (/ 1 x))))","(/ 2025 (pow x 3))","(/ (+ 2025 (* 30375 (/ 1 (pow x 2)))) (pow x 3))","(/ (- (+ 2025 (* 30375 (/ 1 (pow x 2)))) (/ 6834375 (pow x 6))) (pow x 3))","(/ (+ 2025 (+ (* -1 (/ (+ 6834375 (* 102515625 (/ 1 (pow x 2)))) (pow x 6))) (* 30375 (/ 1 (pow x 2))))) (pow x 3))","(* -1 (/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) x))","(* -1 (/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) x))","(/ (+ 1/45 (* -1 (/ (- (* -1 (/ (+ 1/3 (* 1125 (/ 1 x))) x)) 75) x))) (pow x 2))","(* -1 (/ (- (/ 6834375 (pow x 6)) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (+ (* 102515625 (/ 1 (pow x 8))) (/ 6834375 (pow x 6))) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))"]],"series":[[5.432861328125,"((- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3))) (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3)) (* x (tan x)) (* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (* (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 1 (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (- (* (* x x) 1/2025) 1/135) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (+ (* x 1/91125) 1/27) (* x 1/45) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (* 1/27 x) (* (* x x) 1/2025) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)))","x","-inf"],[5.02294921875,"((- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3))) (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3)) (* x (tan x)) (* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (* (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 1 (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (- (* (* x x) 1/2025) 1/135) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (+ (* x 1/91125) 1/27) (* x 1/45) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (* 1/27 x) (* (* x x) 1/2025) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)))","x","inf"],[4.94384765625,"((- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3))) (+ (* (* (* x x) (* x x)) 1/2025) -1/9) (/ x (+ (* (* x 1/45) x) -1/3)) (* x (tan x)) (* (* x x) (* (* x x) (* x x))) (* (* x x) (* x x)) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (* (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (/ 1 (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (- (* (* x x) 1/2025) 1/135) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (- (/ 1 x) (/ 1 (tan x))) (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (+ (* x 1/91125) 1/27) (* x 1/45) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (* 1/27 x) (* (* x x) 1/2025) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)))","x","0"]],"time":16.823974609375,"type":"series"},{"count":[[60,60]],"egraph":[[0,8181,557,0.083880815],[3,4167,595,0.031606902],[2,1601,604,0.016346151],[1,644,614,0.006121554],[0,240,615,0.002148805]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","-1/9","(- (* 1/2025 (pow x 4)) 1/9)","(* -3 x)","(* x (- (* -1/5 (pow x 2)) 3))","(* x (- (* (pow x 2) (- (* -1/75 (pow x 2)) 1/5)) 3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/1125 (pow x 2)) 1/75)) 1/5)) 3))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(pow x 6)","(pow x 4)","-1/135","(- (* 1/2025 (pow x 2)) 1/135)","(* 1/27 x)","(* x (+ 1/27 (* 1/91125 (pow x 6))))","(* x (+ 1/3 (* 1/10125 x)))","(* x (+ 1/3 (* x (+ 1/10125 (* 1/45 x)))))","(* x (+ 1/3 (* x (+ 1/10125 (* x (+ 1/45 (* 1/151875 x)))))))","1/27","(+ 1/27 (* 1/91125 x))","(* 1/45 x)","(* 9 x)","(* x (+ 9 (* 3/5 (pow x 2))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* -1/375 (pow x 4))))))","(* x (+ 9 (* (pow x 2) (+ 3/5 (* (pow x 4) (- (* -1/5625 (pow x 2)) 1/375))))))","(* 1/2025 (pow x 2))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(* 1/45 (pow x 3))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(* 1/2025 (pow x 4))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(/ 45 x)","(/ (+ 45 (* 675 (/ 1 (pow x 2)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (/ 10125 (pow x 4)))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (+ (* 151875 (/ 1 (pow x 6))) (/ 10125 (pow x 4))))) x)","(/ (* x (sin x)) (cos x))","(* (pow x 2) (- 1/2025 (* 1/135 (/ 1 (pow x 2)))))","(* 1/91125 (pow x 7))","(* (pow x 7) (+ 1/91125 (* 1/27 (/ 1 (pow x 6)))))","(/ 1/45 (pow x 2))","(/ (+ 1/45 (* 75 (/ 1 x))) (pow x 2))","(/ (+ 1/45 (+ (/ 1/3 (pow x 2)) (* 75 (/ 1 x)))) (pow x 2))","(/ (+ 1/45 (+ (/ 1/3 (pow x 2)) (+ (* 75 (/ 1 x)) (* 1125 (/ 1 (pow x 3)))))) (pow x 2))","(* 1/91125 x)","(* x (+ 1/91125 (* 1/27 (/ 1 x))))","(/ 2025 (pow x 3))","(/ (+ 2025 (* 30375 (/ 1 (pow x 2)))) (pow x 3))","(/ (- (+ 2025 (* 30375 (/ 1 (pow x 2)))) (/ 6834375 (pow x 6))) (pow x 3))","(/ (+ 2025 (+ (* -1 (/ (+ 6834375 (* 102515625 (/ 1 (pow x 2)))) (pow x 6))) (* 30375 (/ 1 (pow x 2))))) (pow x 3))","(* -1 (/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) x))","(* -1 (/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) x))","(/ (+ 1/45 (* -1 (/ (- (* -1 (/ (+ 1/3 (* 1125 (/ 1 x))) x)) 75) x))) (pow x 2))","(* -1 (/ (- (/ 6834375 (pow x 6)) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (- (+ (* 102515625 (/ 1 (pow x 8))) (/ 6834375 (pow x 6))) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))"]],"memory":[[1595632,41904528]],"method":["egg-herbie"],"outputs":[["(* 1/3 x)","(*.f64 #s(literal 1/3 binary64) x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","-1/9","#s(literal -1/9 binary64)","(- (* 1/2025 (pow x 4)) 1/9)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(* -3 x)","(*.f64 #s(literal -3 binary64) x)","(* x (- (* -1/5 (pow x 2)) 3))","(*.f64 (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal -3 binary64)) x)","(* x (- (* (pow x 2) (- (* -1/75 (pow x 2)) 1/5)) 3))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/75 binary64) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal -3 binary64)) x)","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/1125 (pow x 2)) 1/75)) 1/5)) 3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/1125 binary64) (*.f64 x x) #s(literal -1/75 binary64)) (*.f64 x x) #s(literal -1/5 binary64)) (*.f64 x x) #s(literal -3 binary64)) x)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/3 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x) x)","(pow x 6)","(pow.f64 x #s(literal 6 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","-1/135","#s(literal -1/135 binary64)","(- (* 1/2025 (pow x 2)) 1/135)","(fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64))","(* 1/27 x)","(*.f64 #s(literal 1/27 binary64) x)","(* x (+ 1/27 (* 1/91125 (pow x 6))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x)","(* x (+ 1/3 (* 1/10125 x)))","(*.f64 (fma.f64 #s(literal 1/10125 binary64) x #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* x (+ 1/10125 (* 1/45 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/45 binary64) x #s(literal 1/10125 binary64)) x #s(literal 1/3 binary64)) x)","(* x (+ 1/3 (* x (+ 1/10125 (* x (+ 1/45 (* 1/151875 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/151875 binary64) x #s(literal 1/45 binary64)) x #s(literal 1/10125 binary64)) x #s(literal 1/3 binary64)) x)","1/27","#s(literal 1/27 binary64)","(+ 1/27 (* 1/91125 x))","(fma.f64 #s(literal 1/91125 binary64) x #s(literal 1/27 binary64))","(* 1/45 x)","(*.f64 #s(literal 1/45 binary64) x)","(* 9 x)","(*.f64 #s(literal 9 binary64) x)","(* x (+ 9 (* 3/5 (pow x 2))))","(*.f64 (fma.f64 #s(literal 3/5 binary64) (*.f64 x x) #s(literal 9 binary64)) x)","(* x (+ 9 (* (pow x 2) (+ 3/5 (* -1/375 (pow x 4))))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/375 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 3/5 binary64)) (*.f64 x x) #s(literal 9 binary64)) x)","(* x (+ 9 (* (pow x 2) (+ 3/5 (* (pow x 4) (- (* -1/5625 (pow x 2)) 1/375))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5625 binary64) (*.f64 x x) #s(literal -1/375 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 3/5 binary64)) (*.f64 x x) #s(literal 9 binary64)) x)","(* 1/2025 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(* -1 (/ (cos x) (sin x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(- (/ 1 x) (/ (cos x) (sin x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(* 1/45 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/45 binary64))","(* (pow x 3) (+ 1/45 (* 1/3 (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x)","(* 1/2025 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64))","(* (pow x 4) (- 1/2025 (* 1/9 (/ 1 (pow x 4)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64))","(/ 45 x)","(/.f64 #s(literal 45 binary64) x)","(/ (+ 45 (* 675 (/ 1 (pow x 2)))) x)","(/.f64 (+.f64 (/.f64 #s(literal 675 binary64) (*.f64 x x)) #s(literal 45 binary64)) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (/ 10125 (pow x 4)))) x)","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 45 binary64)) (/.f64 #s(literal 675 binary64) (*.f64 x x))) x)","(/ (+ 45 (+ (* 675 (/ 1 (pow x 2))) (+ (* 151875 (/ 1 (pow x 6))) (/ 10125 (pow x 4))))) x)","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 151875 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 45 binary64)) (+.f64 (/.f64 #s(literal 10125 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 675 binary64) (*.f64 x x)))) x)","(/ (* x (sin x)) (cos x))","(*.f64 (/.f64 x (cos.f64 x)) (sin.f64 x))","(* (pow x 2) (- 1/2025 (* 1/135 (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) #s(literal 1/2025 binary64) #s(literal -1/135 binary64))","(* 1/91125 (pow x 7))","(*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/91125 binary64))","(* (pow x 7) (+ 1/91125 (* 1/27 (/ 1 (pow x 6)))))","(*.f64 (+.f64 (/.f64 #s(literal 1/27 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/91125 binary64)) (pow.f64 x #s(literal 7 binary64)))","(/ 1/45 (pow x 2))","(/.f64 #s(literal 1/45 binary64) (*.f64 x x))","(/ (+ 1/45 (* 75 (/ 1 x))) (pow x 2))","(/.f64 (/.f64 (+.f64 (/.f64 #s(literal 75 binary64) x) #s(literal 1/45 binary64)) x) x)","(/ (+ 1/45 (+ (/ 1/3 (pow x 2)) (* 75 (/ 1 x)))) (pow x 2))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 75 binary64) x) (/.f64 #s(literal 1/3 binary64) (*.f64 x x))) #s(literal 1/45 binary64)) (*.f64 x x))","(/ (+ 1/45 (+ (/ 1/3 (pow x 2)) (+ (* 75 (/ 1 x)) (* 1125 (/ 1 (pow x 3)))))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1/45 binary64) (/.f64 (-.f64 #s(literal -75 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1125 binary64) x) #s(literal 1/3 binary64)) x)) x)) x) x)","(* 1/91125 x)","(*.f64 #s(literal 1/91125 binary64) x)","(* x (+ 1/91125 (* 1/27 (/ 1 x))))","(fma.f64 #s(literal 1/91125 binary64) x #s(literal 1/27 binary64))","(/ 2025 (pow x 3))","(/.f64 #s(literal 2025 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2025 (* 30375 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (+.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal 2025 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (- (+ 2025 (* 30375 (/ 1 (pow x 2)))) (/ 6834375 (pow x 6))) (pow x 3))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal -2025 binary64)) (/.f64 #s(literal 6834375 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2025 (+ (* -1 (/ (+ 6834375 (* 102515625 (/ 1 (pow x 2)))) (pow x 6))) (* 30375 (/ 1 (pow x 2))))) (pow x 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal 2025 binary64)) (/.f64 (+.f64 (/.f64 #s(literal 102515625 binary64) (*.f64 x x)) #s(literal 6834375 binary64)) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (+ 675 (* 10125 (/ 1 (pow x 2)))) (pow x 2))) 45) x))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 10125 binary64) (*.f64 x x)) #s(literal 675 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -45 binary64) x))","(* -1 (/ (- (* -1 (/ (+ 10125 (* 151875 (/ 1 (pow x 2)))) (pow x 4))) (+ 45 (* 675 (/ 1 (pow x 2))))) x))","(/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 151875 binary64) (*.f64 x x)) #s(literal 10125 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -45 binary64) (/.f64 #s(literal 675 binary64) (*.f64 x x)))) x)","(/ (+ 1/45 (* -1 (/ (- (* -1 (/ (+ 1/3 (* 1125 (/ 1 x))) x)) 75) x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1/45 binary64) (/.f64 (-.f64 #s(literal -75 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1125 binary64) x) #s(literal 1/3 binary64)) x)) x)) x) x)","(* -1 (/ (- (/ 6834375 (pow x 6)) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 30375 binary64) (*.f64 x x)) #s(literal -2025 binary64)) (/.f64 #s(literal 6834375 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (+ (* 102515625 (/ 1 (pow x 8))) (/ 6834375 (pow x 6))) (+ 2025 (* 30375 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal -102515625 binary64) (pow.f64 x #s(literal 8 binary64))) #s(literal -2025 binary64)) (+.f64 (/.f64 #s(literal -30375 binary64) (*.f64 x x)) (/.f64 #s(literal 6834375 binary64) (pow.f64 x #s(literal 6 binary64))))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":236.923828125,"type":"simplify"},{"count":[[21,0]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","(*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64))))","#s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64))","(/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))","#s(approx (* x (tan x)) x)","(*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 x x) (*.f64 x x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x)))","(*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64))))","(fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64))","(*.f64 x #s(literal 1/45 binary64))","#s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))","(*.f64 #s(literal 1/27 binary64) x)","(*.f64 (*.f64 x x) #s(literal 1/2025 binary64))","(/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))"]],"memory":[[-6755968,13430144]],"outputs":[[]],"time":143.0341796875,"type":"rewrite"},{"compiler":[[2260,384]],"memory":[[-1827888,6119888]],"time":9.90380859375,"type":"eval"},{"alts":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","done",0.7889030738873912,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.359375,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","done",0.371757519536884,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","done",0.43431512494062763,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(approx (- (* (* x x) 1/2025) 1/135) #s(literal -1/135 binary64)) #s(literal 1/9 binary64)))))","fresh",0.8719423370665476,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/8303765625 binary64)))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64))) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/4100625 binary64)))))","fresh",0.4752989260981655,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","done",0.31034265983267284,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) #s(approx (/ x (+ (* (* x 1/45) x) -1/3)) (*.f64 #s(literal -3 binary64) x))))","fresh",0.76937192760837,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(approx (- (* (* x x) 1/2025) 1/135) #s(literal -1/135 binary64)) #s(literal 1/9 binary64)))))","fresh",0.49254525459832066,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","done",0.7436494199633715,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 #s(approx (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 7 binary64)))))","fresh",54.74814799231251,"binary64"],["#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (*.f64 (fma.f64 #s(literal 1/10125 binary64) x #s(literal 1/3 binary64)) x)))","fresh",1.0115145825045633,"binary64"],["#s(approx (* x (tan x)) x)","done",52.66112140498863,"binary64"]],"compiler":[[792,190],[14,11],[27,16],[22,14],[17,12],[30,22],[112,31],[31,21],[36,25],[47,30],[12,9],[60,37],[37,26],[6,4]],"count":[[70,13]],"kept":[{"done":[5,5],"fresh":[2,2],"new":[58,4],"picked":[5,2]}],"memory":[[432512,8678160]],"min-error":[[0.015625,"binary64"]],"time":11.613037109375,"type":"prune"},{"accuracy":[0.30150262494062763],"baseline":[0.30150262494062763],"branch":[["x",0.30150262494062763,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.30150262494062763,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[23,1]],"inputs":[["#s(approx (* x (tan x)) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) #s(approx (/ x (+ (* (* x 1/45) x) -1/3)) (*.f64 #s(literal -3 binary64) x))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (*.f64 (fma.f64 #s(literal 1/10125 binary64) x #s(literal 1/3 binary64)) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(approx (- (* (* x x) 1/2025) 1/135) #s(literal -1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(approx (- (* (* x x) 1/2025) 1/135) #s(literal -1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (+.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 2/945 binary64)))) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 #s(approx (- (/ (+ (/ 1/3 (* x x)) 1/45) (pow x 4)) (- -1/4725 (/ 2/945 (* x x)))) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) x) (fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))) #s(literal 1/8303765625 binary64)))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal -1/135 binary64) #s(literal 1/9 binary64)) (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64))) (*.f64 (*.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/4100625 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* (+ (* (+ (* 1/4725 (* x x)) 2/945) (* x x)) 1/45) (* x x)) 1/3) x) (*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 x x)) #s(literal 1/45 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1/4725 binary64) (/.f64 #s(literal 2/945 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 7 binary64)))))"]],"memory":[[-1921840,7280512]],"oracle":[63.43169910548617],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))"]],"repr":["binary64"],"time":11.549072265625,"times":[[5.2021484375,"x"],[4.1171875,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[0.31034265983267284],"baseline":[0.31034265983267284],"branch":[["x",0.31034265983267284,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.31034265983267284,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[17,1]],"inputs":[["#s(approx (* x (tan x)) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) #s(approx (/ x (+ (* (* x 1/45) x) -1/3)) (*.f64 #s(literal -3 binary64) x))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (*.f64 (fma.f64 #s(literal 1/10125 binary64) x #s(literal 1/3 binary64)) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 #s(literal 2/945 binary64) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(approx (- (* (* x x) 1/2025) 1/135) #s(literal -1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) #s(approx (- (* (* x x) 1/2025) 1/135) #s(literal -1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4725 binary64) (*.f64 x x) #s(literal 2/945 binary64)) (*.f64 x x) #s(literal 1/45 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (+.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) (*.f64 (*.f64 (*.f64 x x) x) (*.f64 x #s(literal 2/945 binary64)))) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) #s(approx (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9)) (*.f64 #s(literal 9 binary64) x))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (* (+ (* (* (* x x) (* (* x x) (* x x))) 1/91125) 1/27) x) (*.f64 #s(literal 1/27 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 x #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/2025 binary64) #s(literal -1/9 binary64)) x) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal -1/45 binary64) #s(literal 1/3 binary64)))))"]],"memory":[[5982672,5982672]],"oracle":[52.66112140498863],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))"]],"repr":["binary64"],"time":8.362060546875,"times":[[4.074951171875,"x"],[3.260986328125,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[0.43431512494062763],"baseline":[0.43431512494062763],"branch":[["x",0.43431512494062763,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.43431512494062763,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[6,1]],"inputs":[["#s(approx (* x (tan x)) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) #s(approx (/ x (+ (* (* x 1/45) x) -1/3)) (*.f64 #s(literal -3 binary64) x))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (*.f64 (fma.f64 #s(literal 1/10125 binary64) x #s(literal 1/3 binary64)) x)))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)))"]],"memory":[[-4537024,3678576]],"oracle":[52.66112140498863],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))"]],"repr":["binary64"],"time":4.384033203125,"times":[[2.180908203125,"x"],[1.672119140625,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[0.7436494199633714],"baseline":[0.7436494199633715],"branch":[["x",0.7436494199633714,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",0.7436494199633714,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[4,1]],"inputs":[["#s(approx (* x (tan x)) x)","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) #s(approx (/ x (+ (* (* x 1/45) x) -1/3)) (*.f64 #s(literal -3 binary64) x))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) #s(approx (* (+ (* x 1/91125) 1/27) (/ x (+ (* (* x x) (- (* (* x x) 1/2025) 1/135)) 1/9))) (*.f64 (fma.f64 #s(literal 1/10125 binary64) x #s(literal 1/3 binary64)) x)))"]],"memory":[[3298256,3298256]],"oracle":[52.66112140498863],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]],"repr":["binary64"],"time":3.44189453125,"times":[[1.709228515625,"x"],[1.31494140625,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[52.66112140498863],"baseline":[52.66112140498863],"branch":[["x",52.66112140498863,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",52.66112140498863,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[1,1]],"inputs":[["#s(approx (* x (tan x)) x)"]],"link":["."],"memory":[[2692624,2692624]],"name":["invcot (example 3.9)"],"oracle":[52.66112140498863],"outputs":[["#s(approx (* x (tan x)) x)"]],"repr":["binary64"],"time":2.18603515625,"times":[[0.991943359375,"x"],[0.903076171875,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"egraph":[[9,7985,102,0.042566642],[8,3532,102,0.042562083],[7,1276,102,0.018754829],[6,314,102,0.006990464],[5,190,102,0.002940295],[4,130,102,0.001772676],[3,107,102,0.001409443],[2,85,102,0.000871875],[1,57,102,0.000749086],[0,42,104,0.000678944]],"inputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (* x (tan x)) x)"]],"memory":[[-2251776,13456832]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) #s(literal 1/91125 binary64) #s(literal 1/27 binary64)) (/.f64 x (fma.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2025 binary64)) #s(literal 1/135 binary64)) #s(literal 1/9 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(approx (+ (* (* (* x x) (* x x)) 1/2025) -1/9) #s(literal -1/9 binary64)) (/.f64 x (fma.f64 (*.f64 x #s(literal 1/45 binary64)) x #s(literal -1/3 binary64)))))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/45 binary64) #s(literal 1/3 binary64)) x))","#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))","#s(approx (* x (tan x)) x)"]],"stop":[["node limit",1]],"time":144.990966796875,"type":"simplify"},{"compiler":[[104,44]],"memory":[[1055328,1055328]],"stop":[["fuel",1]],"time":1.839111328125,"type":"soundness"},{"compiler":[[104,44],[104,44],[24,17],[24,17],[8,6],[8,6],[38,21],[38,21]],"memory":[[2356464,27425424]],"remove-preprocessing":[["(negabs x)"],[],[],[],[],[]],"time":54.702880859375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01806640625,"type":"end"}]