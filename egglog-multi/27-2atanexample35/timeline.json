[{"memory":[[14864,14864]],"time":0.030029296875,"type":"start"},{"compiler":[[15,11]],"memory":[[554720,554720]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":3.959452955618883e-5,"valid":0.08105000200151859}],[11,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":7.918905911237766e-5,"valid":0.08101040747196239}],[10,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.00015837811822475538,"valid":0.08093121841285002}],[9,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0003167562364495108,"valid":0.08077284029462527}],[8,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0006335124728990216,"valid":0.08045608405817575}],[7,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0012670249457980432,"valid":0.07982257158527672}],[6,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0025340498915960865,"valid":0.07855554663947868}],[5,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.005068099783192173,"valid":0.0760214967478826}],[4,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.010136199566384346,"valid":0.07095339696469043}],[3,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.020272399132768692,"valid":0.06081719739830608}],[2,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.040544798265537384,"valid":0.040544798265537384}],[1,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.08108959653107477,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.08108959653107477,"valid":0.0}]],"time":2.677978515625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.9189104034689253,"valid":0.08108959653107478}],"memory":[[11440608,362894992]],"mixsample":[[1.278076171875,"ival-atan",1600],[249.261962890625,"adjust",800],[65.291015625,"ival-add",0],[0.120361328125,"ival-sub",800],[185.4375,"ival-atan",0],[4.278076171875,"ival-assert",0],[38.13427734375,"ival-add",400],[106.3173828125,"ival-sub",0],[15.939208984375,"ival-and",0],[0.101806640625,"ival-sub",400],[132.099853515625,"const",0],[354.64794921875,"ival-atan",400],[31.400146484375,"ival->",0],[9.69287109375,"exact",0],[10.70947265625,"adjust",2000],[24.03955078125,"ival-<",0]],"outcomes":[[1374.064697265625,1,"valid",7416],[93.28564453125,2,"valid",398],[48.649169921875,0,"valid",442]],"time":1901.510009765625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[251,0,0,5]],"explanations":[["-.f64","(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","cancellation",251,1,[],[[]]]],"fperrors":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",251,0,false,0,false],["N",0,0,false,0,false],["(+.f64 N #s(literal 1 binary64))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(atan.f64 N)",0,0,false,0,false],["(atan.f64 (+.f64 N #s(literal 1 binary64)))",0,0,false,0,false]],"freqs":[[1,251],[0,5]],"maybe-confusion":[[251,0,0,0,1,4]],"memory":[[1788704,44296048]],"mixsample":[[0.10888671875,"ival-atan",1600],[15.955322265625,"adjust",800],[4.335205078125,"ival-add",0],[0.011962890625,"ival-sub",800],[13.831298828125,"ival-atan",0],[0.26123046875,"ival-assert",0],[6.25390625,"ival-sub",0],[2.20556640625,"ival-add",400],[0.635986328125,"ival-true",0],[23.287353515625,"ival-atan",400],[0.42626953125,"exact",0],[0.727783203125,"adjust",2000]],"outcomes":[[82.408447265625,1,"valid",448],[6.91162109375,2,"valid",26],[4.469482421875,0,"valid",38]],"time":156.066162109375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,7,0.000639277],[10,182,7,0.000814802],[9,174,7,0.00094753],[8,158,7,0.001047743],[7,109,7,0.000769514],[6,80,7,0.000788271],[5,48,7,0.000466232],[4,33,7,0.000253086],[3,25,7,0.000180814],[2,19,7,0.000125749],[1,15,7,0.000116552],[0,10,7,0.000149071],[0,6,7,9.6704e-5]],"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"memory":[[5807296,13774096]],"method":["egg-herbie"],"outputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(-.f64 (atan.f64 (+.f64 #s(literal 1 binary64) N)) (atan.f64 N))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":160.5869140625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.068115234375,"type":"eval"},{"alts":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","next",57.215401607333305,"binary64"]],"compiler":[[7,6]],"memory":[[311456,311456]],"time":0.553955078125,"type":"prune"},{"egraph":[[0,182,18,0.000706567],[10,182,18,0.000750937],[9,174,18,0.000854357],[8,158,18,0.000901171],[7,109,18,0.000767214],[6,80,18,0.000762863],[5,48,18,0.000438675],[4,33,18,0.000270707],[3,25,18,0.000181055],[2,19,18,0.000129682],[1,15,18,0.000121472],[0,10,18,0.000194413],[0,6,18,8.9206e-5]],"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(atan.f64 N)"]],"locations":[["(atan.f64 N)","cost-diff",0],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(atan.f64 (+.f64 N #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","cost-diff",0]],"memory":[[-12225104,861488]],"method":["egg-herbie"],"outputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(-.f64 (atan.f64 (+.f64 #s(literal 1 binary64) N)) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(atan.f64 (+.f64 #s(literal 1 binary64) N))","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","N","#s(literal 1 binary64)","(atan.f64 N)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":15.515869140625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(atan.f64 (+.f64 N #s(literal 1 binary64)))","accuracy",0.0],["(atan.f64 N)","accuracy",0.0],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","accuracy",57.215401607333305]],"memory":[[2979968,10896160]],"mixsample":[[0.05712890625,"ival-atan",1600],[6.0400390625,"adjust",800],[1.674072265625,"ival-add",0],[0.0048828125,"ival-sub",800],[5.7470703125,"ival-atan",0],[0.16162109375,"ival-assert",0],[4.0341796875,"ival-sub",0],[0.89697265625,"ival-add",400],[0.1904296875,"ival-true",0],[9.02001953125,"ival-atan",400],[0.139892578125,"exact",0],[0.37109375,"adjust",2000]],"outcomes":[[34.125,1,"valid",224],[2.503662109375,2,"valid",13],[1.545166015625,0,"valid",19]],"time":45.2109375,"type":"localize"},{"count":[[4,9]],"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","(atan.f64 N)"]],"memory":[[521360,521360]],"outputs":[["(- (atan (+ 1 N)) (atan N))","(atan (+ 1 N))","1","(+ 1 N)","(atan N)","N","(* N (+ 1 (/ 1 N)))","(- (atan (- 1 (* -1 N))) (atan N))","(atan (- 1 (* -1 N)))"]],"series":[[0.576904296875,"((- (atan (+ N 1)) (atan N)) (atan (+ N 1)) (+ N 1) (atan N))","N","-inf"],[0.358154296875,"((- (atan (+ N 1)) (atan N)) (atan (+ N 1)) (+ N 1) (atan N))","N","inf"],[0.226806640625,"((- (atan (+ N 1)) (atan N)) (atan (+ N 1)) (+ N 1) (atan N))","N","0"]],"time":1.4111328125,"type":"series"},{"count":[[9,8]],"egraph":[[0,540,32,0.00168636],[10,540,32,0.002021608],[9,532,32,0.002130922],[8,516,32,0.002132155],[7,457,32,0.002113864],[6,417,32,0.002035357],[5,369,32,0.002117465],[4,189,32,0.002036739],[3,89,32,0.000775788],[2,44,32,0.000487619],[1,34,32,0.000237968],[0,14,32,0.000216743]],"inputs":[["(- (atan (+ 1 N)) (atan N))","(atan (+ 1 N))","1","(+ 1 N)","(atan N)","N","(* N (+ 1 (/ 1 N)))","(- (atan (- 1 (* -1 N))) (atan N))","(atan (- 1 (* -1 N)))"]],"memory":[[1224768,1224768]],"method":["egg-herbie"],"outputs":[["(- (atan (+ 1 N)) (atan N))","(-.f64 (atan.f64 (-.f64 N #s(literal -1 binary64))) (atan.f64 N))","(atan (+ 1 N))","(atan.f64 (-.f64 N #s(literal -1 binary64)))","1","#s(literal 1 binary64)","(+ 1 N)","(-.f64 N #s(literal -1 binary64))","(atan N)","(atan.f64 N)","N","(* N (+ 1 (/ 1 N)))","(-.f64 N #s(literal -1 binary64))","(- (atan (- 1 (* -1 N))) (atan N))","(-.f64 (atan.f64 (-.f64 N #s(literal -1 binary64))) (atan.f64 N))","(atan (- 1 (* -1 N)))","(atan.f64 (-.f64 N #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["saturated",1]],"time":24.89990234375,"type":"simplify"},{"count":[[4,32]],"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","(atan.f64 N)"]],"memory":[[-45904,15991328]],"outputs":[["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(neg.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(+.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (neg.f64 (atan.f64 N)))","(+.f64 (neg.f64 (atan.f64 N)) (atan.f64 (+.f64 N #s(literal 1 binary64))))","(+.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (neg.f64 (/.f64 (pow.f64 (atan.f64 N) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(+.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (atan.f64 N) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(-.f64 (+.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 0 binary64)) (atan.f64 N))","(-.f64 #s(literal 0 binary64) (-.f64 (atan.f64 N) (atan.f64 (+.f64 N #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (/.f64 (pow.f64 (atan.f64 N) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(-.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 (atan.f64 N) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) N)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (+.f64 N #s(literal -1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 N N) N #s(literal 1 binary64)) (neg.f64 (fma.f64 N (+.f64 N #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 N N) N #s(literal 1 binary64))) (fma.f64 N (+.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","(+.f64 (/.f64 (*.f64 N N) (+.f64 N #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N))))","(-.f64 (/.f64 (*.f64 N N) (+.f64 N #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(*.f64 (+.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 N #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)))","(*.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64))) (+.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)) (fma.f64 N N #s(literal -1 binary64)))","(*.f64 (+.f64 N #s(literal 1 binary64)) (/.f64 (+.f64 N #s(literal -1 binary64)) (+.f64 N #s(literal -1 binary64))))","(atan.f64 N)"]],"time":317.632080078125,"type":"rewrite"},{"compiler":[[696,136]],"memory":[[3800608,3800608]],"time":4.408935546875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","next",0.36822133791597816,"binary64"],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","next",0.26009750976844204,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","next",0.3317375488422101,"binary64"]],"compiler":[[36,12],[10,6],[36,13]],"count":[[38,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[37,3],"picked":[1,0]}],"memory":[[-7110400,2355824]],"min-error":[[0.201503759768442,"binary64"]],"time":3.923095703125,"type":"prune"},{"egraph":[[0,8379,205,0.03874371],[12,7829,213,0.010055845],[11,6724,213,0.021811541],[10,5015,213,0.026471108],[9,4595,213,0.015479872],[8,3873,213,0.018471358],[7,3369,213,0.015337039],[6,2869,213,0.014603578],[5,2273,213,0.013286863],[4,1379,213,0.012888377],[3,490,213,0.008076589],[2,163,213,0.002292862],[1,65,239,0.000722387],[0,32,239,0.00038973],[0,16,297,0.000221777]],"inputs":[["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","#s(literal 1 binary64)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","N","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"locations":[["(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","cost-diff",0],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",0],["(+.f64 (+.f64 N #s(literal 1 binary64)) N)","cost-diff",1],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","cost-diff",26],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","cost-diff",0],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",2],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",0],["(+.f64 (+.f64 N #s(literal 1 binary64)) N)","cost-diff",1],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","cost-diff",2],["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","cost-diff",24]],"memory":[[4623328,19115888]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(neg.f64 (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","#s(literal 1 binary64)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","N","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(/.f64 #s(literal 1 binary64) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":266.2470703125,"type":"simplify"},{"compiler":[[327,20]],"locations":[["(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","accuracy",0.04296875],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.25],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.33203125],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","accuracy",0.45054628907376815],["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.0],["(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","accuracy",0.015625],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.25],["(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","accuracy",0.02734375],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.25],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.33203125],["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","accuracy",0.359375]],"memory":[[-3020368,23736080]],"mixsample":[[3.386474609375,"ival-div",0],[5.087646484375,"ival-add",0],[7.947509765625,"ival-mult",0],[0.162109375,"ival-assert",0],[5.72412109375,"ival-atan2",0],[1.297607421875,"ival-sub",0],[0.203125,"ival-true",0],[0.15625,"exact",0],[2.173583984375,"ival-neg",0]],"outcomes":[[41.006591796875,0,"valid",256]],"time":85.001953125,"type":"localize"},{"count":[[11,24]],"inputs":[["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"memory":[[2736496,2736496]],"outputs":[["(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(atan2 1 (+ 1 (* N (+ 1 N))))","1","(+ 1 (* 2 N))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(+ 1 N)","(+ 1 (* N (+ 1 N)))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(/ 1 (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(pow N 2)","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","N","(* N (+ 1 (/ 1 N)))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))","(/ 1 (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))"]],"series":[[2.177001953125,"((/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (+ (+ N 1) N) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (+ N 1) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))","N","-inf"],[2.883056640625,"((/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (+ (+ N 1) N) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (+ N 1) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))","N","inf"],[2.02197265625,"((/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (+ (+ N 1) N) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (+ N 1) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))","N","0"]],"time":8.056884765625,"type":"series"},{"count":[[24,23]],"egraph":[[0,8287,197,0.066671785],[5,6352,225,0.020443974],[4,3347,225,0.024599786],[3,682,225,0.01423404],[2,197,225,0.002374713],[1,117,225,0.000744851],[0,45,229,0.000466061]],"inputs":[["(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(atan2 1 (+ 1 (* N (+ 1 N))))","1","(+ 1 (* 2 N))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(+ 1 N)","(+ 1 (* N (+ 1 N)))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(/ 1 (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(pow N 2)","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","N","(* N (+ 1 (/ 1 N)))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))","(/ 1 (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))"]],"memory":[[-2858016,29538912]],"method":["egg-herbie"],"outputs":[["(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(atan2 1 (+ 1 (* N (+ 1 N))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 2 N))","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(+ 1 N)","(-.f64 N #s(literal -1 binary64))","(+ 1 (* N (+ 1 N)))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(/ 1 (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(/.f64 #s(literal 1 binary64) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(* 2 N)","(*.f64 #s(literal 2 binary64) N)","(* N (+ 2 (/ 1 N)))","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (+ 1 (/ 1 N)))","(fma.f64 N N N)","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","N","(* N (+ 1 (/ 1 N)))","(-.f64 N #s(literal -1 binary64))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(/ 1 (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(/.f64 #s(literal 1 binary64) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"stop":[["iter limit",1],["node limit",1]],"time":200.701171875,"type":"simplify"},{"count":[[11,165]],"inputs":[["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"memory":[[7029776,15250848]],"outputs":[["#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 18 binary64)","#s(literal 2 binary64)","#s(literal 5 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 16 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)"]],"time":262.510009765625,"type":"rewrite"},{"compiler":[[1622,165]],"memory":[[-2469184,5487168]],"time":9.413818359375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","done",0.36822133791597816,"binary64"],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","fresh",5.724587128693548,"binary64"],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","fresh",3.331476668973853,"binary64"],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","fresh",3.237357373425457,"binary64"],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","next",58.80397431653207,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","done",0.3317375488422101,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","next",3.2995636722717983,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","next",5.696534109069534,"binary64"],["(neg.f64 #s(literal 0 binary64))","fresh",61.38465021727131,"binary64"],["(neg.f64 #s(literal -1 binary64))","next",59.81198062824759,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","next",0.26009750976844204,"binary64"]],"compiler":[[36,12],[38,17],[42,16],[16,10],[15,11],[36,13],[42,17],[38,18],[2,3],[2,3],[48,21],[38,17],[42,16],[16,10],[15,11],[42,17],[38,18],[2,3],[2,3],[48,21]],"count":[[58,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[55,9],"picked":[3,2]}],"memory":[[-4266640,6491728]],"min-error":[[0.193691259768442,"binary64"]],"time":39.199951171875,"type":"prune"},{"egraph":[[0,8011,363,0.028980079],[11,7207,377,0.02709738],[10,5831,377,0.028781551],[9,4679,377,0.025418029],[8,4673,377,0.012920589],[7,4643,377,0.012727578],[6,4318,377,0.014327761],[5,3696,377,0.015792863],[4,2515,377,0.012996889],[3,856,377,0.013295576],[2,263,379,0.003475074],[1,119,429,0.00103959],[0,70,433,0.000584485],[0,42,463,0.000409605]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","#s(literal 1 binary64)","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","N","#s(literal -1 binary64)","(neg.f64 #s(literal -1 binary64))","#s(literal -1 binary64)","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","#s(literal 1 binary64)","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64))))","#s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))","(-.f64 N #s(literal -1 binary64))","N","#s(literal -1 binary64)","(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","N","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))","#s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"locations":[["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","cost-diff",0],["(+.f64 (+.f64 N #s(literal 1 binary64)) N)","cost-diff",1],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","cost-diff",2],["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","cost-diff",24],["(*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",0],["(/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","cost-diff",0],["(+.f64 (+.f64 N #s(literal 1 binary64)) N)","cost-diff",1],["(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","cost-diff",2],["(-.f64 N #s(literal -1 binary64))","cost-diff",0],["#s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))","cost-diff",0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64))))","cost-diff",0],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","cost-diff",2],["(neg.f64 #s(literal -1 binary64))","cost-diff",1],["(-.f64 N #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","cost-diff",0],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","cost-diff",0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","cost-diff",0]],"memory":[[-330640,14725344]],"method":["egg-herbie"],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","#s(literal 1 binary64)","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","N","#s(literal -1 binary64)","(neg.f64 #s(literal -1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64))))","#s(literal 1 binary64)","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64))))","#s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))","(-.f64 N #s(literal -1 binary64))","N","#s(literal -1 binary64)","(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (/.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (/.f64 (neg.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","N","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(neg.f64 (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","(*.f64 (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))","#s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(neg.f64 (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":255.39404296875,"type":"simplify"},{"compiler":[[447,24]],"locations":[["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))","accuracy",0.25],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","accuracy",0.33203125],["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","accuracy",0.359375],["#s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))","accuracy",3.0225159581969097],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.25],["(*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.33203125],["(/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","accuracy",0.359375],["#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","accuracy",58.843995575472654],["(-.f64 N #s(literal -1 binary64))","accuracy",0.0],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","accuracy",0.0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64))))","accuracy",0.25],["#s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))","accuracy",58.80679968045433],["(neg.f64 #s(literal -1 binary64))","accuracy",0.0],["(-.f64 N #s(literal -1 binary64))","accuracy",0.0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","accuracy",0.0],["(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","accuracy",0.015625],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","accuracy",0.25]],"memory":[[3895456,29641088]],"mixsample":[[1.81591796875,"ival-div",0],[7.4375,"ival-add",0],[7.703369140625,"ival-mult",0],[0.09619140625,"ival-assert",0],[7.09912109375,"ival-atan2",0],[2.4462890625,"ival-sub",0],[0.210205078125,"ival-true",0],[0.292724609375,"exact",0],[3.2333984375,"ival-neg",0]],"outcomes":[[48.843017578125,0,"valid",256]],"time":91.7451171875,"type":"localize"},{"count":[[19,20]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","(neg.f64 #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64))))","#s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","#s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))"]],"memory":[[2360272,2360272]],"outputs":[["(atan2 1 (+ 1 (* N (+ 1 N))))","1","(+ 1 N)","(+ 1 (* N (+ 1 N)))","(+ 1 (* 2 N))","(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(pow N 2)","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","N","(* N (+ 1 (/ 1 N)))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))"]],"series":[[1.012939453125,"((neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (- N -1) (neg -1) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (+ (+ N 1) N) (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (+ (+ N 1) N) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (atan2 1 (+ (* (+ N 1) N) 1)))","N","-inf"],[1.027099609375,"((neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (- N -1) (neg -1) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (+ (+ N 1) N) (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (+ (+ N 1) N) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (atan2 1 (+ (* (+ N 1) N) 1)))","N","inf"],[1.0,"((neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (- N -1) (neg -1) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (+ (+ N 1) N) (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (+ (+ N 1) N) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (atan2 1 (+ (* (+ N 1) N) 1)))","N","0"]],"time":4.262939453125,"type":"series"},{"count":[[20,19]],"egraph":[[0,8288,149,0.058735167],[5,6330,169,0.018811939],[4,3308,169,0.02463743],[3,673,169,0.013986549],[2,195,169,0.002772967],[1,115,169,0.000736713],[0,43,173,0.000448288]],"inputs":[["(atan2 1 (+ 1 (* N (+ 1 N))))","1","(+ 1 N)","(+ 1 (* N (+ 1 N)))","(+ 1 (* 2 N))","(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(pow N 2)","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","N","(* N (+ 1 (/ 1 N)))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))"]],"memory":[[-1401984,29387584]],"method":["egg-herbie"],"outputs":[["(atan2 1 (+ 1 (* N (+ 1 N))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 N)","(-.f64 N #s(literal -1 binary64))","(+ 1 (* N (+ 1 N)))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(+ 1 (* 2 N))","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (+ 1 (/ 1 N)))","(fma.f64 N N N)","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","N","(* N (+ 1 (/ 1 N)))","(-.f64 N #s(literal -1 binary64))","(* 2 N)","(*.f64 #s(literal 2 binary64) N)","(* N (+ 2 (/ 1 N)))","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"stop":[["iter limit",1],["node limit",1]],"time":197.06494140625,"type":"simplify"},{"count":[[19,103]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","(neg.f64 #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64))))","#s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","#s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))"]],"memory":[[-114528,15421296]],"outputs":[["#s(approx 2 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx 2 #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx 2 #s(literal 1 binary64)))","#s(approx 2 #s(literal 1 binary64))","(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx 2 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","(/.f64 (*.f64 (atan2.f64 #s(approx 2 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (atan2.f64 #s(approx 2 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx 2 #s(literal 1 binary64)))) #s(literal 1 binary64))","(neg.f64 (/.f64 (*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx 2 #s(literal 1 binary64)))) #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx 2 #s(literal 1 binary64))))","#s(approx 2 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(approx 2 #s(literal 1 binary64))","(atan2.f64 #s(literal 1 binary64) #s(approx 2 #s(literal 1 binary64)))"]],"time":294.5830078125,"type":"rewrite"},{"compiler":[[1459,132]],"memory":[[3815456,3815456]],"time":5.732177734375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","done",0.36822133791597816,"binary64"],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","next",5.724587128693548,"binary64"],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","fresh",3.331476668973853,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","done",0.3317375488422101,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","fresh",3.2427770172176262,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","fresh",5.689934711548447,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","done",0.26009750976844204,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","next",3.237357373425457,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))","fresh",58.80397431653207,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","next",5.774374697992722,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","next",59.80235689635162,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","fresh",59.81198062824759,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","next",61.38465021727131,"binary64"]],"compiler":[[36,12],[38,17],[42,16],[36,13],[46,22],[42,20],[48,21],[54,24],[53,25],[53,24],[51,23],[41,17],[41,17],[38,17],[42,16],[46,22],[42,20],[54,24],[53,25],[53,24],[51,23],[41,17],[41,17]],"count":[[50,13]],"kept":[{"done":[2,2],"fresh":[4,2],"new":[39,8],"picked":[5,1]}],"memory":[[-3818832,7516688]],"min-error":[[0.193691259768442,"binary64"]],"time":16.77197265625,"type":"prune"},{"egraph":[[0,8366,281,0.073130046],[14,7630,289,0.01732547],[13,6526,289,0.025729534],[12,5358,289,0.031643336],[11,4791,289,0.024608963],[10,4349,289,0.02476626],[9,4293,289,0.016907786],[8,4233,289,0.016212413],[7,4035,289,0.016329064],[6,3693,289,0.01677125],[5,2845,289,0.018986736],[4,1660,289,0.0148736],[3,535,289,0.007981157],[2,194,289,0.002465205],[1,97,393,0.000779663],[0,62,403,0.000528909],[0,43,412,0.000387719]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N)))","#s(literal 1 binary64)","#s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))","(fma.f64 N N N)","N","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N)))","#s(literal 1 binary64)","#s(approx (+ (* (- N -1) N) 1) (*.f64 N N))","(*.f64 N N)","N","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))"]],"locations":[["(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","cost-diff",0],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",0],["(+.f64 (+.f64 N #s(literal 1 binary64)) N)","cost-diff",1],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","cost-diff",2],["(*.f64 N N)","cost-diff",0],["#s(approx (+ (* (- N -1) N) 1) (*.f64 N N))","cost-diff",0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N)))","cost-diff",0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","cost-diff",0],["#s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))","cost-diff",0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64)))","cost-diff",0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","cost-diff",0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","cost-diff",0],["(fma.f64 N N N)","cost-diff",0],["#s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))","cost-diff",0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N)))","cost-diff",0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","cost-diff",0]],"memory":[[5722848,27227424]],"method":["egg-herbie"],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N)))","#s(literal 1 binary64)","#s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))","(fma.f64 N N N)","N","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N)))","#s(literal 1 binary64)","#s(approx (+ (* (- N -1) N) 1) (*.f64 N N))","(*.f64 N N)","N","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (/.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(-.f64 N #s(literal -1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":397.410888671875,"type":"simplify"},{"compiler":[[366,25]],"locations":[["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.25],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.33203125],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","accuracy",0.45054628907376815],["#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","accuracy",58.843995575472654],["(*.f64 N N)","accuracy",0.0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","accuracy",0.0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N)))","accuracy",0.25],["#s(approx (+ (* (- N -1) N) 1) (*.f64 N N))","accuracy",5.581156916963543],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","accuracy",0.0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64)))","accuracy",0.25],["#s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))","accuracy",59.809713358548265],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","accuracy",61.38465021727131],["(fma.f64 N N N)","accuracy",0.0],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","accuracy",0.0],["(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N)))","accuracy",0.25],["#s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))","accuracy",3.0225159581969097]],"memory":[[-4907344,25118912]],"mixsample":[[3.767822265625,"ival-div",0],[6.2431640625,"ival-add",0],[7.38671875,"ival-mult",0],[0.0966796875,"ival-assert",0],[8.306640625,"ival-atan2",0],[2.66064453125,"ival-sub",0],[0.20361328125,"ival-true",0],[0.412109375,"exact",0],[2.54736328125,"ival-neg",0]],"outcomes":[[111.164306640625,0,"valid",256]],"time":128.988037109375,"type":"localize"},{"count":[[18,19]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N)))","#s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))","(fma.f64 N N N)","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64)))","#s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N)))","#s(approx (+ (* (- N -1) N) 1) (*.f64 N N))","(*.f64 N N)","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))"]],"memory":[[-5248720,2637808]],"outputs":[["(atan2 1 (+ 1 (* N (+ 1 N))))","1","(+ 1 N)","(+ 1 (* N (+ 1 N)))","N","(* N (+ 1 N))","(pow N 2)","(+ 1 (* 2 N))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))"]],"series":[[1.445068359375,"((neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (+ (* N N) N) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (* N N) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (+ (+ N 1) N) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (+ (+ N 1) N) (atan2 1 (+ (* (+ N 1) N) 1)))","N","-inf"],[2.35107421875,"((neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (+ (* N N) N) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (* N N) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (+ (+ N 1) N) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (+ (+ N 1) N) (atan2 1 (+ (* (+ N 1) N) 1)))","N","inf"],[1.114013671875,"((neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (+ (* N N) N) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2 1 (+ (* (- N -1) N) 1)) (+ (* (- N -1) N) 1) (* N N) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (+ (+ N 1) N) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (+ (+ N 1) N) (atan2 1 (+ (* (+ N 1) N) 1)))","N","0"]],"time":6.02099609375,"type":"series"},{"count":[[19,18]],"egraph":[[0,8255,145,0.058505941],[5,6338,167,0.020829728],[4,3333,167,0.024672338],[3,688,167,0.012990805],[2,182,167,0.002547308],[1,102,167,0.000675882],[0,39,167,0.000396514]],"inputs":[["(atan2 1 (+ 1 (* N (+ 1 N))))","1","(+ 1 N)","(+ 1 (* N (+ 1 N)))","N","(* N (+ 1 N))","(pow N 2)","(+ 1 (* 2 N))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))"]],"memory":[[6752112,29255104]],"method":["egg-herbie"],"outputs":[["(atan2 1 (+ 1 (* N (+ 1 N))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 N)","(-.f64 N #s(literal -1 binary64))","(+ 1 (* N (+ 1 N)))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","N","(* N (+ 1 N))","(fma.f64 N N N)","(pow N 2)","(*.f64 N N)","(+ 1 (* 2 N))","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(atan2 1 (+ 1 (+ N (pow N 2))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(* (pow N 2) (+ 1 (/ 1 N)))","(fma.f64 N N N)","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","(fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))","(* 2 N)","(*.f64 #s(literal 2 binary64) N)","(* N (+ 2 (/ 1 N)))","(fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64)))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(*.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))) (atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))","(atan2.f64 (fma.f64 #s(literal 2 binary64) N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))"]],"stop":[["iter limit",1],["node limit",1]],"time":198.3369140625,"type":"simplify"},{"count":[[18,102]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N)))","#s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))","(fma.f64 N N N)","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64)))","#s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N)))","#s(approx (+ (* (- N -1) N) 1) (*.f64 N N))","(*.f64 N N)","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","#s(approx (+ (+ N 1) N) #s(literal 1 binary64))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))"]],"memory":[[-6355504,14509600]],"outputs":[["#s(approx 3 (atan2.f64 #s(literal 1 binary64) #s(approx 3 #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx 3 #s(literal 1 binary64)))","#s(approx 3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(approx 3 #s(literal 1 binary64))","#s(approx 3 (atan2.f64 #s(literal 1 binary64) #s(approx 3 #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx 3 #s(literal 1 binary64)))","#s(approx 3 #s(literal 1 binary64))","#s(approx 3 (atan2.f64 #s(literal 1 binary64) #s(approx 3 #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) #s(approx 3 #s(literal 1 binary64)))","#s(approx 3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx 3 #s(literal 1 binary64)) #s(literal 1 binary64))))","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(approx 3 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)"]],"time":336.1240234375,"type":"rewrite"},{"compiler":[[2585,249]],"memory":[[-1608656,6391088]],"time":8.89111328125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","done",0.36822133791597816,"binary64"],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","fresh",3.331476668973853,"binary64"],["(*.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","fresh",5.718083248382722,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","done",0.3317375488422101,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","fresh",3.2427770172176262,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","fresh",5.689934711548447,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","done",0.26009750976844204,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","done",3.237357373425457,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))","fresh",58.80397431653207,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","done",5.774374697992722,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 12 binary64))))","fresh",59.74899124847524,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","fresh",59.729959162218606,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","fresh",59.81198062824759,"binary64"],["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","done",61.38465021727131,"binary64"]],"compiler":[[857,96],[36,12],[42,16],[42,19],[36,13],[46,22],[42,20],[48,21],[54,24],[53,25],[53,24],[51,24],[51,24],[41,17],[41,17]],"count":[[75,14]],"kept":[{"done":[3,3],"fresh":[5,5],"new":[62,3],"picked":[5,3]}],"memory":[[1392640,9652016]],"min-error":[[0.193691259768442,"binary64"]],"time":13.137939453125,"type":"prune"},{"accuracy":[0.26009750976844204],"baseline":[0.26009750976844204],"branch":[["N",0.26009750976844204,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",0.26009750976844204,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[24,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 12 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (*.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 #s(approx (+ (+ N 1) N) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 #s(approx (+ (+ N 1) N) (*.f64 #s(literal 2 binary64) N)) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (fma.f64 N N N)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))"]],"memory":[[-36720,7932960]],"oracle":[61.48524972084427],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))"]],"repr":["binary64"],"time":13.068115234375,"times":[[6.06298828125,"N"],[5.4189453125,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[3.2373573734254566],"baseline":[3.237357373425457],"branch":[["N",3.2373573734254566,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",3.2373573734254566,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[11,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 12 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ N 1) N) 1) (-.f64 N #s(literal -1 binary64)))))"]],"memory":[[5050336,5050336]],"oracle":[61.48524972084427],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))"]],"repr":["binary64"],"time":6.91796875,"times":[[3.316162109375,"N"],[2.614013671875,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[5.77437469799272],"baseline":[5.774374697992722],"branch":[["N",5.774374697992722,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",5.77437469799272,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[9,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 12 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))"]],"memory":[[-4640320,4563568]],"oracle":[61.48524972084427],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))"]],"repr":["binary64"],"time":6.48681640625,"times":[[2.8818359375,"N"],[2.791015625,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[58.80397431653208],"baseline":[58.80397431653207],"branch":[["N",58.80397431653208,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",58.80397431653208,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[8,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 12 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))"]],"memory":[[4383200,4383200]],"oracle":[61.48524972084427],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))"]],"repr":["binary64"],"time":5.828125,"times":[[2.656982421875,"N"],[2.14501953125,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[59.72995916221857],"baseline":[59.729959162218606],"branch":[["N",59.72995916221857,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",59.7299591622186,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[7,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 12 binary64))))"]],"memory":[[-4120448,4150288]],"oracle":[61.48524972084427],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))"]],"repr":["binary64"],"time":5.43798828125,"times":[[2.409912109375,"N"],[2.134033203125,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[59.80235689635162],"baseline":[59.80235689635162],"branch":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",59.80235689635162,1,"binary64"],["N",59.80235689635162,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[5,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))"]],"memory":[[3668720,3668720]],"oracle":[61.48524972084427],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))"]],"repr":["binary64"],"time":4.8779296875,"times":[[1.9599609375,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"],[2.06201171875,"N"]],"type":"regimes"},{"accuracy":[59.81198062824758],"baseline":[59.81198062824759],"branch":[["N",59.81198062824759,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",59.81198062824758,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[4,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))"]],"memory":[[-4726512,3497776]],"oracle":[61.48524972084427],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))"]],"repr":["binary64"],"time":4.906005859375,"times":[[2.280029296875,"N"],[1.81787109375,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[61.38465021727128],"baseline":[61.38465021727131],"branch":[["N",61.38465021727128,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",61.38465021727129,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))"]],"link":["."],"memory":[[2735312,2735312]],"name":["2atan (example 3.5)"],"oracle":[61.38465021727131],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))"]],"repr":["binary64"],"time":3.1650390625,"times":[[1.18212890625,"N"],[1.27685546875,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"egraph":[[11,6750,152,0.019544087],[10,5945,152,0.017998989],[9,5364,152,0.015400134],[8,4652,152,0.022078585],[7,4198,152,0.013067417],[6,3589,152,0.016704087],[5,2610,152,0.014531928],[4,2091,152,0.01044284],[3,486,152,0.008693275],[2,163,168,0.002052984],[1,75,376,0.001002252],[0,44,392,0.000776934]],"inputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))"]],"memory":[[1535040,9823552]],"method":["egg-herbie"],"outputs":[["#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (-.f64 N #s(literal -1 binary64)) N #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (fma.f64 N N N))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (*.f64 N N))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) (-.f64 N #s(literal -1 binary64)))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 4 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (- N -1) N) 1) #s(literal 1 binary64))))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 1 binary64))","#s(approx (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) #s(literal 0 binary64))"]],"stop":[["node limit",1]],"time":160.992919921875,"type":"simplify"},{"compiler":[[392,46]],"memory":[[1921600,1921600]],"stop":[["fuel",1]],"time":2.84814453125,"type":"soundness"},{"compiler":[[392,46],[392,46],[8,5],[8,5],[7,6],[7,6]],"memory":[[-7886560,31762560]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[]],"time":62.10791015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01806640625,"type":"end"}]