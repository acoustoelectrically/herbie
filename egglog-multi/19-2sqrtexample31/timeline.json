[{"memory":[[14864,14864]],"time":0.029052734375,"type":"start"},{"compiler":[[15,11]],"memory":[[573520,573520]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":2.1640625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[17209248,371803968]],"mixsample":[[170.678955078125,"adjust",800],[58.786376953125,"ival-add",0],[95.358154296875,"ival-sqrt",800],[4.397705078125,"ival-assert",0],[102.98974609375,"ival-sub",0],[17.46484375,"ival-add",400],[15.1357421875,"ival-and",0],[0.05078125,"ival-sub",400],[155.671875,"const",0],[141.32958984375,"ival-sqrt",0],[31.29150390625,"ival->",0],[34.630859375,"ival-add",800],[8.800048828125,"exact",0],[41.6982421875,"ival-sqrt",400],[31.57470703125,"ival-<",0]],"outcomes":[[1138.58203125,1,"valid",7987],[21.642578125,0,"valid",269]],"time":1505.135009765625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[255,0,0,1]],"explanations":[["-.f64","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cancellation",255,0,[],[[]]]],"fperrors":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",255,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,0,1]],"memory":[[2358912,45096560]],"mixsample":[[8.72021484375,"adjust",800],[3.16748046875,"ival-add",0],[5.595947265625,"ival-sqrt",800],[0.20458984375,"ival-assert",0],[4.986083984375,"ival-sub",0],[0.629638671875,"ival-add",400],[0.57666015625,"ival-true",0],[8.28955078125,"ival-sqrt",0],[1.7958984375,"ival-add",800],[0.3701171875,"exact",0],[1.955078125,"ival-sqrt",400]],"outcomes":[[54.44921875,1,"valid",490],[1.01953125,0,"valid",22]],"time":102.52294921875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,7,0.000695822],[10,182,7,0.000733805],[9,174,7,0.000853666],[8,158,7,0.000929049],[7,109,7,0.00087797],[6,80,7,0.000796789],[5,48,7,0.000428699],[4,33,7,0.000244297],[3,25,7,0.000180965],[2,19,7,0.000138632],[1,15,7,0.000117199],[0,10,7,0.000153044],[0,6,7,9.9034e-5]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[-6638208,14629376]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":165.56396484375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.071044921875,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","next",59.26144231184912,"binary64"]],"compiler":[[7,6]],"memory":[[311456,311456]],"time":0.447998046875,"type":"prune"},{"egraph":[[0,182,18,0.000665508],[10,182,18,0.000861877],[9,174,18,0.001051882],[8,158,18,0.001405961],[7,109,18,0.001276162],[6,80,18,0.00083895],[5,48,18,0.000491766],[4,33,18,0.000259401],[3,25,18,0.000316252],[2,19,18,0.000162226],[1,15,18,0.000195416],[0,10,18,0.000202484],[0,6,18,9.5597e-5]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"locations":[["(sqrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cost-diff",0]],"memory":[[830960,830960]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":15.010009765625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",59.26144231184912]],"memory":[[3211264,11152032]],"mixsample":[[6.099365234375,"adjust",800],[1.55615234375,"ival-add",0],[2.4296875,"ival-sqrt",800],[0.09130859375,"ival-assert",0],[2.331787109375,"ival-sub",0],[0.44189453125,"ival-add",400],[0.163818359375,"ival-true",0],[4.473388671875,"ival-sqrt",0],[0.87353515625,"ival-add",800],[0.1435546875,"exact",0],[0.93603515625,"ival-sqrt",400]],"outcomes":[[26.770751953125,1,"valid",245],[1.2314453125,0,"valid",11]],"time":35.39794921875,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[-6087392,1902384]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"series":[[2.277099609375,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","-inf"],[1.5361328125,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","inf"],[0.589111328125,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","0"]],"time":5.759033203125,"type":"series"},{"count":[[27,26]],"egraph":[[0,8163,351,0.092980263],[4,4919,387,0.030552597],[3,2292,387,0.021286747],[2,807,395,0.007726261],[1,299,399,0.002341097],[0,113,451,0.000953371]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"memory":[[6115136,42792064]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(sqrt x)","(sqrt.f64 x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (/.f64 #s(literal 5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":253.487060546875,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[1679344,13056800]],"outputs":[["x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)"]],"time":215.135986328125,"type":"rewrite"},{"compiler":[[593,132]],"memory":[[-3885104,3976928]],"time":6.435791015625,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","fresh",59.51594186052191,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",59.26144231184912,"binary64"],["(-.f64 x x)","next",61.55607524301683,"binary64"],["(-.f64 x #s(literal 1 binary64))","fresh",61.11026002395219,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","next",0.5426124483324299,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","next",0.6445270539233032,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","fresh",0.8836777004811653,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","next",1.6352314258715335,"binary64"],["x","next",61.12100301440257,"binary64"]],"compiler":[[3,3],[7,6],[3,2],[3,3],[36,28],[28,22],[20,16],[14,12],[1,1],[3,3],[3,2],[3,3],[36,28],[28,22],[20,16],[14,12],[1,1]],"count":[[41,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[40,8],"picked":[1,1]}],"memory":[[5117552,5117552]],"min-error":[[0.10440760044808975,"binary64"]],"time":7.022216796875,"type":"prune"},{"egraph":[[0,7569,309,0.02982827],[27,7569,309,0.050470769],[26,7569,309,0.049647778],[25,6434,309,0.055619399],[24,6314,309,0.053701308],[23,6314,309,0.039847295],[22,6283,309,0.04236026],[21,6224,309,0.041697207],[20,6212,309,0.030460727],[19,6143,309,0.028756984],[18,6140,309,0.015487724],[17,5930,309,0.021916215],[16,5385,309,0.022380581],[15,3623,309,0.020290111],[14,2421,309,0.019171935],[13,1353,309,0.019639202],[12,769,309,0.007673778],[11,527,309,0.003684426],[10,455,309,0.002742945],[9,409,309,0.002955207],[8,349,309,0.001817426],[7,266,309,0.002036304],[6,221,309,0.001478232],[5,186,309,0.001060592],[4,169,309,0.000798872],[3,150,309,0.000880542],[2,105,309,0.000891967],[1,74,309,0.000552277],[0,52,309,0.000567027],[0,32,311,0.000353616]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","#s(literal -5/128 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","(-.f64 x x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"locations":[["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","cost-diff",0],["(-.f64 x x)","cost-diff",2],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","cost-diff",0],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","cost-diff",0]],"memory":[[324416,15509168]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","#s(literal -5/128 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","(-.f64 x x)","#s(literal 0 binary64)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":646.69091796875,"type":"simplify"},{"compiler":[[270,33]],"locations":[["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","accuracy",0.2421875],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","accuracy",0.4101520539262602],["(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.8019610904384626],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",23.301739059174626],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","accuracy",0.0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.11328125],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","accuracy",1.5219501758715335],["(-.f64 x x)","accuracy",0.0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","accuracy",0.30823744833242994],["(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.8019610904384626],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","accuracy",10.547988064171266],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",23.301739059174626]],"memory":[[64704,45345312]],"mixsample":[[12.115478515625,"ival-div",0],[14.084228515625,"adjust",800],[8.2705078125,"ival-add",0],[9.80078125,"ival-mult",0],[2.94287109375,"ival-sqrt",800],[0.125244140625,"ival-assert",0],[3.557861328125,"ival-sub",0],[0.51904296875,"ival-add",400],[0.246337890625,"ival-true",0],[0.004150390625,"ival-sub",400],[9.480224609375,"ival-sqrt",0],[1.113037109375,"ival-add",800],[0.873046875,"exact",0],[10.788330078125,"ival-pow",0],[1.0947265625,"ival-sqrt",400]],"outcomes":[[111.932373046875,1,"valid",245],[2.52978515625,0,"valid",11]],"time":225.093017578125,"type":"localize"},{"count":[[14,51]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(-.f64 x x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[-2408096,5270560]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(* -5/128 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(sqrt (/ 1 (pow x 5)))","0","(* 1/2 (sqrt (/ 1 x)))","(sqrt (/ 1 x))","(/ 1 x)","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(sqrt (/ 1 (pow x 3)))","(/ 1 (pow x 3))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))"]],"series":[[3.724853515625,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (sqrt (/ 1 (pow x 5))) (- x x) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (sqrt (/ 1 x)) (/ 1 x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (sqrt (/ 1 (pow x 3))) (/ 1 (pow x 3)))","x","-inf"],[1.911865234375,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (sqrt (/ 1 (pow x 5))) (- x x) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (sqrt (/ 1 x)) (/ 1 x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (sqrt (/ 1 (pow x 3))) (/ 1 (pow x 3)))","x","inf"],[2.982177734375,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (sqrt (/ 1 (pow x 5))) (- x x) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (sqrt (/ 1 x)) (/ 1 x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (sqrt (/ 1 (pow x 3))) (/ 1 (pow x 3)))","x","0"]],"time":11.3798828125,"type":"series"},{"count":[[51,51]],"egraph":[[0,8266,728,0.091864501],[4,6617,786,0.025628186],[3,3161,790,0.027302532],[2,1359,796,0.011092496],[1,432,807,0.005111991],[0,171,937,0.001556468]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(* -5/128 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(sqrt (/ 1 (pow x 5)))","0","(* 1/2 (sqrt (/ 1 x)))","(sqrt (/ 1 x))","(/ 1 x)","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(sqrt (/ 1 (pow x 3)))","(/ 1 (pow x 3))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))"]],"memory":[[7617216,44457808]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal -5/128 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* -5/128 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal -5/128 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(sqrt (/ 1 (pow x 5)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","0","#s(literal 0 binary64)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(* 1/16 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/ 1 (pow x 3))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) #s(literal 5/128 binary64) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64))) x))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) x)) (/.f64 (/.f64 (fma.f64 #s(literal 5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64))) x) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64) (/.f64 (fma.f64 #s(literal 5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64))) x)))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":263.467041015625,"type":"simplify"},{"count":[[14,168]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(-.f64 x x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[-2655536,16837280]],"outputs":[["#s(approx 27 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(approx 27 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(approx 27 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 5 binary64)","#s(literal -5/128 binary64)","#s(literal 3 binary64)","#s(literal 1/16 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 27 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 10 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)"]],"time":572.748046875,"type":"rewrite"},{"compiler":[[2686,318]],"memory":[[-784480,7067696]],"time":9.68603515625,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",59.26144231184912,"binary64"],["(-.f64 x #s(literal 1 binary64))","next",61.11026002395219,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","done",0.5426124483324299,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","done",0.6445270539233032,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","next",0.8836777004811653,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","fresh",1.7446066261226187,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))) x))","fresh",44.53244487200198,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","done",1.6352314258715335,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","next",0.5312457886036037,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","next",48.84575569348537,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/2 binary64))","fresh",59.53034726129775,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","next",59.46685634679646,"binary64"]],"compiler":[[7,6],[3,3],[36,28],[28,22],[20,16],[44,33],[50,36],[14,12],[62,47],[65,47],[9,8],[9,8],[3,3],[20,16],[44,33],[50,36],[62,47],[65,47],[9,8],[9,8]],"count":[[85,12]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[76,6],"picked":[5,3]}],"memory":[[-345344,7831104]],"min-error":[[0.08487635044808975,"binary64"]],"time":10.675048828125,"type":"prune"},{"egraph":[[0,8192,475,0.066999393],[13,6096,487,0.030921605],[12,3712,487,0.023924196],[11,2525,487,0.019310513],[10,1483,487,0.013527254],[9,909,487,0.007505577],[8,769,487,0.004126614],[7,619,487,0.003927899],[6,539,487,0.00314027],[5,500,487,0.002211913],[4,448,487,0.002133366],[3,364,487,0.001678402],[2,245,487,0.001441248],[1,142,487,0.00108861],[0,92,487,0.000867705],[0,60,487,0.000521476]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal -1/8 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1/2 binary64)","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(literal 1/16 binary64)","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))))","(*.f64 x x)","x","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(literal 1/2 binary64)","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","(sqrt.f64 x)","(*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))","(fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))","#s(literal 1/16 binary64)","#s(literal -5/128 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)"]],"locations":[["(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","cost-diff",0],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64))))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","cost-diff",0],["(fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))))","cost-diff",1],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","cost-diff",0],["(-.f64 x #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","cost-diff",0],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","cost-diff",0]],"memory":[[5857184,35415008]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal -1/8 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1/2 binary64)","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(literal 1/16 binary64)","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)) x #s(literal -5/128 binary64)) (sqrt.f64 x) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)) x #s(literal -5/128 binary64)) (sqrt.f64 x) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)) x #s(literal -5/128 binary64)) (sqrt.f64 x) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) (pow.f64 x #s(literal 4 binary64)))","(fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)) x #s(literal -5/128 binary64)) (sqrt.f64 x) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))))","(*.f64 x x)","x","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 x) #s(literal -1/8 binary64)))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(literal 1/2 binary64)","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal -1/8 binary64))","#s(literal -1/8 binary64)","(sqrt.f64 x)","(*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))","(*.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)) (sqrt.f64 x))","(fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))","#s(literal 1/16 binary64)","#s(literal -5/128 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":271.82080078125,"type":"simplify"},{"compiler":[[330,50]],"locations":[["(*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))","accuracy",0.16796875],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","accuracy",0.30823744833242994],["(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","accuracy",23.23188745306421],["(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","accuracy",47.3362861797287],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",0.0078125],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.11328125],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","accuracy",0.234375],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","accuracy",0.6571152014820911],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","accuracy",59.46685634679646],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))))","accuracy",0.41258644562161784],["(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.8019610904384626],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","accuracy",10.547988064171266],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",23.301739059174626]],"memory":[[-9566832,70888560]],"mixsample":[[20.46533203125,"ival-div",0],[26.555908203125,"adjust",800],[21.671630859375,"ival-add",0],[123.265869140625,"ival-mult",0],[3.7509765625,"ival-sqrt",800],[0.16015625,"ival-assert",0],[4.158203125,"ival-sub",0],[0.534912109375,"ival-add",400],[0.34423828125,"ival-true",0],[0.005126953125,"ival-sub",400],[18.554443359375,"ival-sqrt",0],[1.494873046875,"ival-add",800],[1.15771484375,"exact",0],[22.189697265625,"ival-pow",0],[1.172119140625,"ival-sqrt",400]],"outcomes":[[292.43505859375,1,"valid",245],[4.70751953125,0,"valid",11]],"time":343.6591796875,"type":"localize"},{"count":[[18,69]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","(-.f64 x #s(literal 1 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))"]],"memory":[[-3387328,6632368]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(sqrt (/ 1 (pow x 3)))","-1","(- x 1)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt (/ 1 x))","(* -5/128 (sqrt x))","(+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3))))","(+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x)))))","(+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3))))))))","(sqrt (/ 1 (pow x 5)))","(/ 1 (pow x 3))","(sqrt (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","x","(* x (- 1 (/ 1 x)))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* 1/2 (sqrt (pow x 7)))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(* 1/16 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -5/128 (sqrt (/ 1 (pow x 3)))) (* 1/16 (sqrt (/ 1 x)))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (* x (- (/ 1 x) 1)))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt (pow x 7)) (pow (sqrt -1) 2)))","(* (pow x 4) (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))","(* -1/16 (* (sqrt (pow x 3)) (pow (sqrt -1) 2)))","(* (pow x 2) (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))))"]],"series":[[7.09912109375,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 3))) -1/8) (+ (* (sqrt (/ 1 x)) 1/2) (* (sqrt (/ 1 (pow x 5))) 1/16))) (sqrt (/ 1 (pow x 3))) (- (sqrt (+ x 1)) (sqrt x)) (- x 1) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (+ (* (* x x) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x)))) (* (sqrt x) (+ (* 1/16 x) -5/128))) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/ (+ (* (* x x) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x)))) (* (sqrt x) (+ (* 1/16 x) -5/128))) (pow x 4)) (sqrt (/ 1 (pow x 5))) (/ 1 (pow x 3)) (sqrt (pow x 3)) (* (sqrt x) (+ (* 1/16 x) -5/128)))","x","-inf"],[2.888916015625,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 3))) -1/8) (+ (* (sqrt (/ 1 x)) 1/2) (* (sqrt (/ 1 (pow x 5))) 1/16))) (sqrt (/ 1 (pow x 3))) (- (sqrt (+ x 1)) (sqrt x)) (- x 1) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (+ (* (* x x) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x)))) (* (sqrt x) (+ (* 1/16 x) -5/128))) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/ (+ (* (* x x) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x)))) (* (sqrt x) (+ (* 1/16 x) -5/128))) (pow x 4)) (sqrt (/ 1 (pow x 5))) (/ 1 (pow x 3)) (sqrt (pow x 3)) (* (sqrt x) (+ (* 1/16 x) -5/128)))","x","inf"],[3.9140625,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 3))) -1/8) (+ (* (sqrt (/ 1 x)) 1/2) (* (sqrt (/ 1 (pow x 5))) 1/16))) (sqrt (/ 1 (pow x 3))) (- (sqrt (+ x 1)) (sqrt x)) (- x 1) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (+ (* (* x x) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x)))) (* (sqrt x) (+ (* 1/16 x) -5/128))) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/ (+ (* (* x x) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x)))) (* (sqrt x) (+ (* 1/16 x) -5/128))) (pow x 4)) (sqrt (/ 1 (pow x 5))) (/ 1 (pow x 3)) (sqrt (pow x 3)) (* (sqrt x) (+ (* 1/16 x) -5/128)))","x","0"]],"time":15.595947265625,"type":"series"},{"count":[[69,68]],"egraph":[[0,8210,925,0.112328808],[3,3811,996,0.039521482],[2,1541,998,0.018072719],[1,494,1007,0.007188438],[0,187,1219,0.002074069]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(sqrt (/ 1 (pow x 3)))","-1","(- x 1)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt (/ 1 x))","(* -5/128 (sqrt x))","(+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3))))","(+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x)))))","(+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3))))))))","(sqrt (/ 1 (pow x 5)))","(/ 1 (pow x 3))","(sqrt (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","x","(* x (- 1 (/ 1 x)))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* 1/2 (sqrt (pow x 7)))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(* 1/16 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -5/128 (sqrt (/ 1 (pow x 3)))) (* 1/16 (sqrt (/ 1 x)))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (* x (- (/ 1 x) 1)))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(* 1/2 (* (sqrt (pow x 7)) (pow (sqrt -1) 2)))","(* (pow x 4) (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))","(* -1/16 (* (sqrt (pow x 3)) (pow (sqrt -1) 2)))","(* (pow x 2) (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))))"]],"memory":[[6316000,46524288]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal -5/128 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -1/8 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(* -5/128 (sqrt x))","(*.f64 #s(literal -5/128 binary64) (sqrt.f64 x))","(+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal -5/128 binary64) (sqrt.f64 x)))","(+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x)))))","(fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))))","(+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3))))))))","(fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))))","(sqrt (/ 1 (pow x 5)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/ 1 (pow x 3))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(sqrt (pow x 3))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))))","x","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)","(* 1/2 (sqrt (pow x 7)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal 1/2 binary64))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))) (pow.f64 x #s(literal 4 binary64)))","(* 1/16 (sqrt (pow x 3)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64))","(* (pow x 2) (+ (* -5/128 (sqrt (/ 1 (pow x 3)))) (* 1/16 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -5/128 binary64))) (*.f64 x x))","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) #s(literal 5/128 binary64) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64))) x)) x))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal -1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* 1/2 (* (sqrt (pow x 7)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal 7 binary64))))","(* (pow x 4) (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -5/128 binary64))) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -5/128 binary64))) x)) x))","(* (sqrt (/ 1 (pow x 5))) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(* -1/16 (* (sqrt (pow x 3)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64))","(* (pow x 2) (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -5/128 binary64))) (*.f64 x x))"]],"stop":[["iter limit",1],["node limit",1]],"time":281.807861328125,"type":"simplify"},{"count":[[18,186]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","(-.f64 x #s(literal 1 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))"]],"memory":[[1817408,17868000]],"outputs":[["#s(approx 25 #s(approx 25/16384 #s(literal 1 binary64)))","#s(approx 25/16384 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(approx 25 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(approx 25 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(literal -5/128 binary64)","#s(literal 25/16384 binary64)","#s(literal -5/2048 binary64)","#s(literal -3125/34359738368 binary64)","#s(literal 25/262144 binary64)","#s(literal 25/4194304 binary64)","#s(literal -125/8589934592 binary64)","#s(literal 5/2048 binary64)","#s(literal -25/16384 binary64)","#s(literal -125/2097152 binary64)","#s(literal 625/268435456 binary64)","#s(literal 125/2097152 binary64)","#s(literal 15625/4398046511104 binary64)","#s(literal -1953125/9223372036854775808 binary64)","#s(literal 5/128 binary64)","#s(approx 25 #s(approx 25/16384 #s(literal -5/128 binary64)))","#s(approx 25/16384 #s(literal -5/128 binary64))","#s(literal -5/128 binary64)","#s(literal 25/16384 binary64)","#s(literal -5/2048 binary64)","#s(literal -3125/34359738368 binary64)","#s(literal 25/262144 binary64)","#s(literal 25/4194304 binary64)","#s(literal -125/8589934592 binary64)","#s(literal 5/2048 binary64)","#s(literal -25/16384 binary64)","#s(literal -125/2097152 binary64)","#s(literal 625/268435456 binary64)","#s(literal 125/2097152 binary64)","#s(literal 15625/4398046511104 binary64)","#s(literal -1953125/9223372036854775808 binary64)","#s(literal 5/128 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 5 binary64)","#s(literal 1/16 binary64)","#s(literal 4 binary64)","#s(literal 25 binary64)","#s(literal 1/32 binary64)","#s(literal 20 binary64)","#s(literal -25 binary64)","#s(literal -125 binary64)","#s(literal -27 binary64)","#s(literal -1/128 binary64)","#s(literal 1/65536 binary64)","#s(literal -5/128 binary64)","#s(literal 25/16384 binary64)","#s(literal -5/2048 binary64)","#s(literal -3125/34359738368 binary64)","#s(literal 25/262144 binary64)","#s(literal 25/4194304 binary64)","#s(literal -125/8589934592 binary64)","#s(literal 5/2048 binary64)","#s(literal -25/16384 binary64)","#s(literal -125/2097152 binary64)","#s(literal 625/268435456 binary64)","#s(literal 125/2097152 binary64)","#s(literal 15625/4398046511104 binary64)","#s(literal -1953125/9223372036854775808 binary64)","#s(literal 5/128 binary64)"]],"time":354.6591796875,"type":"rewrite"},{"compiler":[[4958,473]],"memory":[[-11344064,9184320]],"time":62.598876953125,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",59.26144231184912,"binary64"],["(-.f64 x #s(literal 1 binary64))","done",61.11026002395219,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","done",0.5426124483324299,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","done",0.6445270539233032,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","done",0.8836777004811653,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","next",1.7446066261226187,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))) x))","fresh",44.53244487200198,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","done",1.6352314258715335,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","done",0.5312457886036037,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","done",48.84575569348537,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","next",59.53034726129775,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","next",59.46536021726795,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","next",59.31998390215393,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","next",44.73282673503734,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","done",59.46685634679646,"binary64"]],"compiler":[[7,6],[3,3],[36,28],[28,22],[20,16],[44,33],[50,36],[14,12],[62,47],[65,47],[41,31],[41,31],[41,31],[36,26],[9,8],[44,33],[50,36],[41,31],[41,31],[41,31],[36,26]],"count":[[111,15]],"kept":[{"done":[4,4],"fresh":[3,2],"new":[99,4],"picked":[5,5]}],"memory":[[836544,8783488]],"min-error":[[0.08097010044808975,"binary64"]],"time":11.303955078125,"type":"prune"},{"egraph":[[0,8258,426,0.084599953],[25,7334,455,0.048204529],[24,7334,455,0.035695814],[23,7330,455,0.03482528],[22,7312,455,0.035400559],[21,7274,455,0.032369063],[20,7258,455,0.028515263],[19,7161,455,0.030250853],[18,7145,455,0.017586795],[17,7016,455,0.019535513],[16,6696,455,0.023961696],[15,5077,455,0.023864563],[14,3710,455,0.021616473],[13,1817,455,0.020263639],[12,903,455,0.007648122],[11,567,455,0.004370089],[10,470,455,0.003198324],[9,398,455,0.002455229],[8,330,455,0.001878849],[7,256,455,0.001416167],[6,222,455,0.00151555],[5,190,455,0.001085237],[4,175,455,0.000813618],[3,156,455,0.000818661],[2,113,455,0.000701438],[1,84,455,0.000619956],[0,61,455,0.000620742],[0,50,455,0.000385406]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64))","#s(literal 1/65536 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64))","#s(literal 1/32 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/2 binary64)","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","(sqrt.f64 x)","(*.f64 x x)"]],"locations":[["(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","cost-diff",0],["#s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x)))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","cost-diff",0],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","cost-diff",0],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","cost-diff",0]],"memory":[[-2516128,35125968]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","#s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64))","#s(literal 1/65536 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64))","#s(literal 1/32 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 x) #s(literal -1/8 binary64))) (*.f64 x x))))","#s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x)))","#s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 x) #s(literal -1/8 binary64))) (*.f64 x x)))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 x) #s(literal -1/8 binary64))) (*.f64 x x))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 x) #s(literal -1/8 binary64)))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/2 binary64)","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal -1/8 binary64))","#s(literal -1/8 binary64)","(sqrt.f64 x)","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":613.607177734375,"type":"simplify"},{"compiler":[[260,39]],"locations":[["(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","accuracy",0.01953125],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","accuracy",0.6571152014820911],["(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","accuracy",23.23188745306421],["(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","accuracy",32.870920600418614],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","accuracy",0.30823744833242994],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64))","accuracy",59.530578927363436],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","accuracy",0.30823744833242994],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64))","accuracy",59.46532649003381],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","accuracy",0.30823744833242994],["#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64))","accuracy",59.319975775949594],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","accuracy",0.234375],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","accuracy",0.30823744833242994],["#s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",1.5245275531410252]],"memory":[[5123648,46866016]],"mixsample":[[16.2314453125,"ival-div",0],[14.9736328125,"adjust",800],[9.811767578125,"ival-add",0],[17.478271484375,"ival-mult",0],[2.85498046875,"ival-sqrt",800],[0.10595703125,"ival-assert",0],[2.398681640625,"ival-sub",0],[0.384033203125,"ival-add",400],[0.23046875,"ival-true",0],[0.00390625,"ival-sub",400],[14.43017578125,"ival-sqrt",0],[1.11669921875,"ival-add",800],[1.15380859375,"exact",0],[14.654296875,"ival-pow",0],[0.966796875,"ival-sqrt",400]],"outcomes":[[124.15234375,1,"valid",245],[2.9267578125,0,"valid",11]],"time":156.47998046875,"type":"localize"},{"count":[[16,49]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[-5304592,4371936]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(* -5/128 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(* 1/2 (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt x))","(+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3))))","(sqrt x)","(sqrt (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(* 1/2 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* 1/2 (* (sqrt (pow x 3)) (pow (sqrt -1) 2)))","(* (pow x 2) (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))"]],"series":[[5.135009765625,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (* 1/2 (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/ (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (* x x)) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (sqrt x) (sqrt (pow x 3)))","x","-inf"],[1.906982421875,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (* 1/2 (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/ (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (* x x)) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (sqrt x) (sqrt (pow x 3)))","x","inf"],[1.793212890625,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (* 1/2 (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/ (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (* x x)) (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (sqrt x) (sqrt (pow x 3)))","x","0"]],"time":10.160888671875,"type":"series"},{"count":[[49,49]],"egraph":[[0,8150,716,0.086415204],[4,7135,775,0.024779927],[3,3390,775,0.031837083],[2,1446,781,0.013788344],[1,448,789,0.004827744],[0,170,941,0.001474857]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(* -5/128 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 3))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(* 1/2 (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt x))","(+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3))))","(sqrt x)","(sqrt (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(* 1/2 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* 1/2 (* (sqrt (pow x 3)) (pow (sqrt -1) 2)))","(* (pow x 2) (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))"]],"memory":[[1801328,45525696]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* -5/128 (sqrt (/ 1 (pow x 7))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 4))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal -5/128 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 4))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 4))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* -5/128 (sqrt (/ 1 (pow x 5))))","(*.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/ (+ (* -5/128 (sqrt x)) (* 1/16 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal -5/128 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* -5/128 (sqrt x)) (* x (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -1/8 (sqrt x))","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","(+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt x)","(sqrt.f64 x)","(sqrt (pow x 3))","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* -5/128 (sqrt (/ 1 (pow x 7)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal -5/128 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))))) x)","(* 1/2 (sqrt (pow x 3)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64))","(* (pow x 2) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 #s(literal 5/128 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64))) x)) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* 5/128 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/16 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/16 binary64))) x)))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(* 1/2 (* (sqrt (pow x 3)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(* (pow x 2) (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x) x)","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* (sqrt (pow x 3)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":334.43896484375,"type":"simplify"},{"count":[[16,86]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","#s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x)))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","(sqrt.f64 (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[371280,16392032]],"outputs":[["#s(approx x (/.f64 #s(approx (+ x (* -5/128 x)) x) x))","(/.f64 #s(approx (+ x (* -5/128 x)) x) x)","#s(approx (+ x (* -5/128 x)) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1/2 binary64))","(+.f64 x x)","(+.f64 #s(literal 1/2 binary64) x)","(-.f64 x #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) x)","(-.f64 x x)","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1/2 binary64))","(/.f64 x #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) x)","(/.f64 x x)","(exp.f64 (log.f64 x))","#s(approx x #s(approx (+ x (* -5/128 x)) #s(literal 1/2 binary64)))","#s(approx (+ x (* -5/128 x)) #s(literal 1/2 binary64))","#s(approx x #s(approx (+ x (* -5/128 x)) #s(literal 1/32 binary64)))","#s(approx (+ x (* -5/128 x)) #s(literal 1/32 binary64))","#s(approx x #s(approx (+ x (* -5/128 x)) #s(literal 1/2 binary64)))","#s(approx (+ x (* -5/128 x)) #s(literal 1/2 binary64))","#s(approx x #s(approx x x))","#s(approx x x)","x","(neg.f64 x)","(+.f64 x #s(literal 1/2 binary64))","(+.f64 x x)","(+.f64 #s(literal 1/2 binary64) x)","(-.f64 x #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) x)","(-.f64 x x)","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1/2 binary64))","(/.f64 x #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) x)","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2 binary64))","(+.f64 x x)","(+.f64 #s(literal 1/2 binary64) x)","(-.f64 x #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) x)","(-.f64 x x)","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1/2 binary64))","(/.f64 x #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) x)","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2 binary64))","(+.f64 x x)","(+.f64 #s(literal 1/2 binary64) x)","(-.f64 x #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) x)","(-.f64 x x)","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1/2 binary64))","(/.f64 x #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) x)","(/.f64 x x)","(exp.f64 (log.f64 x))","x","(neg.f64 x)","(+.f64 x #s(literal 1/2 binary64))","(+.f64 x x)","(+.f64 #s(literal 1/2 binary64) x)","(-.f64 x #s(literal 1/2 binary64))","(-.f64 #s(literal 1/2 binary64) x)","(-.f64 x x)","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x x)","(*.f64 x #s(literal 1/2 binary64))","(/.f64 x #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) x)","(/.f64 x x)","(exp.f64 (log.f64 x))"]],"time":316.6640625,"type":"rewrite"},{"compiler":[[2992,345]],"memory":[[-3866992,6854592]],"time":9.87890625,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",59.26144231184912,"binary64"],["(-.f64 x #s(literal 1 binary64))","done",61.11026002395219,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))","done",0.5426124483324299,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","done",0.6445270539233032,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","done",0.8836777004811653,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","done",1.7446066261226187,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))) x))","fresh",44.53244487200198,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","done",1.6352314258715335,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","done",0.5312457886036037,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","done",48.84575569348537,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","done",59.53034726129775,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","done",59.46536021726795,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","done",59.31998390215393,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","done",44.73282673503734,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 #s(approx (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64))) (*.f64 x x))))","fresh",45.585943606508394,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","done",59.46685634679646,"binary64"]],"compiler":[[557,111],[7,6],[3,3],[36,28],[28,22],[20,16],[44,33],[50,36],[14,12],[62,47],[65,47],[41,31],[41,31],[41,31],[36,26],[44,30],[9,8]],"count":[[88,16]],"kept":[{"done":[9,9],"fresh":[1,1],"new":[73,1],"picked":[5,5]}],"memory":[[1892944,10142016]],"min-error":[[0.08097010044808975,"binary64"]],"time":13.260009765625,"type":"prune"},{"accuracy":[0.5312457886036036],"baseline":[0.5312457886036037],"branch":[["x",0.5312457886036036,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.5312457886036037,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[20,1]],"inputs":[["x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 #s(approx (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x))"]],"memory":[[-1037856,7049520]],"oracle":[63.4074923392691],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))"]],"repr":["binary64"],"time":11.085205078125,"times":[[5.308837890625,"x"],[4.2109375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[0.6445270539233032],"baseline":[0.6445270539233032],"branch":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.6445270539233032,1,"binary64"],["x",0.6445270539233032,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[18,1]],"inputs":[["x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 #s(approx (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) x #s(literal -5/128 binary64)))) (pow.f64 x #s(literal 4 binary64)))))"]],"memory":[[-1292784,6685104]],"oracle":[63.4074923392691],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))"]],"repr":["binary64"],"time":10.202880859375,"times":[[3.904052734375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"],[4.876953125,"x"]],"type":"regimes"},{"accuracy":[0.8836777004811653],"baseline":[0.8836777004811653],"branch":[["x",0.8836777004811653,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.8836777004811653,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[16,1]],"inputs":[["x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 #s(approx (+ (* (sqrt (pow x 3)) 1/2) (* -1/8 (sqrt x))) (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))) x))"]],"memory":[[6132624,6132624]],"oracle":[63.06231313764538],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))"]],"repr":["binary64"],"time":8.763916015625,"times":[[4.06982421875,"x"],[3.5009765625,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[1.635231425871533],"baseline":[1.6352314258715335],"branch":[["x",1.635231425871533,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",1.6352314258715335,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[12,1]],"inputs":[["x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[-4038544,5186896]],"oracle":[61.95869359454578],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))"]],"repr":["binary64"],"time":7.95703125,"times":[[3.528076171875,"x"],[3.4599609375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[59.3199839021539],"baseline":[59.31998390215393],"branch":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",59.319983902153915,1,"binary64"],["x",59.3199839021539,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[9,1]],"inputs":[["x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/32 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/2 binary64)))","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[-3674704,4576704]],"oracle":[61.95869359454578],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))"]],"repr":["binary64"],"time":6.045166015625,"times":[[2.48095703125,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"],[2.7060546875,"x"]],"type":"regimes"},{"accuracy":[59.46685634679645],"baseline":[59.46685634679646],"branch":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",59.46685634679645,1,"binary64"],["x",59.466856346796476,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[3,1]],"inputs":[["x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/2 binary64))"]],"memory":[[3262032,3262032]],"oracle":[61.12283978343437],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))"]],"repr":["binary64"],"time":3.23291015625,"times":[[1.22802734375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"],[1.5390625,"x"]],"type":"regimes"},{"accuracy":[61.1210030144025],"baseline":[61.12100301440257],"branch":[["x",61.1210030144025,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",61.12100301440257,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["x"]],"link":["."],"memory":[[2696960,2696960]],"name":["2sqrt (example 3.1)"],"oracle":[61.12100301440257],"outputs":[["x"]],"repr":["binary64"],"time":2.388916015625,"times":[[1.010009765625,"x"],[0.952880859375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"egraph":[[9,7707,175,0.017256027],[8,3422,175,0.047003977],[7,505,175,0.010686832],[6,244,175,0.002564317],[5,187,175,0.001376073],[4,170,175,0.001089181],[3,149,175,0.001082185],[2,106,175,0.00106598],[1,78,175,0.000925981],[0,55,175,0.001409527]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","x"]],"memory":[[-6692624,9839888]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) (fma.f64 (sqrt.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (pow.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1 binary64))) #s(literal 1/16 binary64))))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 (pow x 5))) -5/128) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))))) x) #s(literal 1/65536 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(literal 1/16 binary64))","x"]],"stop":[["node limit",1]],"time":104.74609375,"type":"simplify"},{"compiler":[[175,61]],"memory":[[1359056,1359056]],"stop":[["fuel",1]],"time":6.44287109375,"type":"soundness"},{"compiler":[[175,61],[175,61],[5,5],[5,5],[7,6],[7,6]],"memory":[[6457600,30171424]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":47.783203125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.011962890625,"type":"end"}]