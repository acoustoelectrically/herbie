[{"memory":[[10640,10640]],"time":0.030029296875,"type":"start"},{"compiler":[[10,8]],"memory":[[448400,448400]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":2.55712890625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[10088720,300285024]],"mixsample":[[70.443115234375,"adjust",800],[116.029296875,"ival-div",0],[472.80859375,"ival-cos",1600],[0.01318359375,"ival-div",400],[0.01806640625,"ival-mult",2000],[0.02294921875,"ival-sub",2000],[3.58642578125,"ival-assert",0],[107.0546875,"ival-sub",0],[286.830322265625,"ival-cos",0],[0.009033203125,"ival-sub",400],[63.9208984375,"ival-cos",400],[37.37451171875,"adjust",2000],[0.057861328125,"ival-mult",800],[0.068115234375,"ival-sub",800],[0.011962890625,"ival-mult",400],[71.029296875,"ival-mult",0],[0.163330078125,"ival-div",800],[153.03759765625,"ival-cos",3600],[7.483642578125,"ival-true",0],[8.2216796875,"adjust",2800],[0.032958984375,"ival-div",2000],[6.1103515625,"exact",0]],"outcomes":[[154.2265625,1,"valid",1166],[797.52783203125,2,"valid",2317],[277.964111328125,3,"valid",580],[434.50537109375,0,"valid",4193]],"time":1992.239013671875,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[131,2,4,119]],"explanations":[["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","n/o",5,0,[["(*.f64 x x)","overflow",74]],[[]]],["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",65,5,[],[[1]]],["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","u/u",65,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",65],["(*.f64 x x)","underflow",65]],[[]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",67,0,false,2,[4.601545813822614e+105]],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",73,1,[-6.036062164988527e+161],4,[7.524373652511627e-156]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(*.f64 x x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,135],[0,121]],"maybe-confusion":[[131,2,0,4,3,116]],"memory":[[2069904,44937072]],"mixsample":[[6.309814453125,"ival-div",0],[4.259765625,"adjust",800],[4.009521484375,"ival-mult",0],[26.403564453125,"ival-cos",1600],[0.239013671875,"ival-assert",0],[7.18798828125,"ival-cos",3600],[5.593505859375,"ival-sub",0],[0.48583984375,"adjust",2800],[0.47021484375,"ival-true",0],[15.890869140625,"ival-cos",0],[3.324462890625,"ival-cos",400],[0.398193359375,"exact",0],[2.259765625,"adjust",2000]],"outcomes":[[7.6328125,1,"valid",60],[46.260986328125,2,"valid",144],[16.09814453125,3,"valid",44],[26.919921875,0,"valid",264]],"time":142.7109375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,1179,8,0.002893156],[10,1179,8,0.00653785],[9,1047,8,0.010457802],[8,629,8,0.006789121],[7,324,8,0.003429413],[6,188,8,0.00162536],[5,131,8,0.001062802],[4,82,8,0.000607715],[3,46,8,0.000366464],[2,30,8,0.000331329],[1,19,8,0.000187362],[0,10,8,0.00017403],[0,6,8,0.000103517]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"memory":[[-950032,16410176]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(abs x)"]],"time":187.640869140625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.078125,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","next",31.377274188421485,"binary64"]],"compiler":[[8,6]],"memory":[[291392,291392]],"time":0.427978515625,"type":"prune"},{"egraph":[[0,1179,19,0.003063146],[10,1179,19,0.006716992],[9,1047,19,0.010475555],[8,629,19,0.006960869],[7,324,19,0.00394749],[6,188,19,0.001524718],[5,131,19,0.000858723],[4,82,19,0.000616115],[3,46,19,0.000459321],[2,30,19,0.00021094],[1,19,19,0.000165044],[0,10,19,0.000200655],[0,6,19,8.9739e-5]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","cost-diff",0]],"memory":[[2147600,2147600]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":46.26904296875,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(*.f64 x x)","accuracy",0.0],["(cos.f64 x)","accuracy",0.154628759768442],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",13.736142749247506],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","accuracy",16.58887216754966]],"memory":[[-5195216,10838096]],"mixsample":[[3.123291015625,"ival-div",0],[1.832275390625,"adjust",800],[1.95361328125,"ival-mult",0],[13.61083984375,"ival-cos",1600],[0.09423828125,"ival-assert",0],[3.5634765625,"ival-cos",3600],[12.54638671875,"ival-sub",0],[0.249267578125,"adjust",2800],[0.2197265625,"ival-true",0],[7.7607421875,"ival-cos",0],[1.56201171875,"ival-cos",400],[0.167236328125,"exact",0],[1.14404296875,"adjust",2000]],"outcomes":[[3.916259765625,1,"valid",30],[22.664306640625,2,"valid",72],[8.249755859375,3,"valid",22],[22.9130859375,0,"valid",132]],"time":65.655029296875,"type":"localize"},{"count":[[4,16]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[1307840,1307840]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"series":[[0.947021484375,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","-inf"],[0.948974609375,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","inf"],[1.02099609375,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","0"]],"time":3.246826171875,"type":"series"},{"count":[[16,16]],"egraph":[[0,8119,135,0.069582799],[13,7710,153,0.033524095],[12,7708,153,0.018028414],[11,7690,153,0.01931655],[10,7480,153,0.020014454],[9,6581,153,0.027809381],[8,4960,153,0.02640039],[7,3409,153,0.019696649],[6,2536,153,0.009332022],[5,1981,153,0.007608543],[4,1281,153,0.006798534],[3,601,153,0.004603484],[2,258,153,0.002022949],[1,105,153,0.000905843],[0,42,153,0.000431881]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"memory":[[4325968,33989584]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/720 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(pow x 2)","(*.f64 x x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":355.216064453125,"type":"simplify"},{"count":[[4,51]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[-5917920,15499216]],"outputs":[["(neg.f64 (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x)))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(+.f64 (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (*.f64 x x)) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))))","(neg.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(*.f64 x x)","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 #s(literal 1 binary64) x) x)","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 (/.f64 x #s(literal 1 binary64)) (/.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x (/.f64 x #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 x)) x)","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))"]],"time":338.330078125,"type":"rewrite"},{"compiler":[[1038,213]],"memory":[[5243136,5243136]],"time":7.1728515625,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.377274188421485,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","next",44.5815007170896,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","fresh",31.390687028167445,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","fresh",31.441501293526237,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","next",31.511288690233908,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","fresh",31.430373268203745,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","fresh",31.577455992146113,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","next",31.86785764223595,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.653148360141852,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","fresh",31.896476738562214,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","next",30.463205813076698,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","next",31.296539739133888,"binary64"]],"compiler":[[8,6],[10,7],[19,13],[27,13],[12,7],[15,8],[11,9],[25,15],[20,13],[15,11],[17,12],[10,8],[10,7],[19,13],[27,13],[12,7],[15,8],[11,9],[25,15],[20,13],[15,11],[17,12],[10,8]],"count":[[68,12]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[67,11],"picked":[1,1]}],"memory":[[-1266272,6765584]],"min-error":[[0.06919627155338329,"binary64"]],"time":8.52001953125,"type":"prune"},{"egraph":[[0,7959,167,0.030962993],[23,7959,167,0.050957877],[22,7955,167,0.056100202],[21,7955,167,0.037621468],[20,7955,167,0.033672042],[19,7915,167,0.039873584],[18,7805,167,0.041766064],[17,7805,167,0.027283371],[16,7805,167,0.02562575],[15,7803,167,0.026225938],[14,7801,167,0.028028388],[13,7786,167,0.029421719],[12,7757,167,0.024601901],[11,7654,167,0.028461479],[10,7172,167,0.025231439],[9,5746,167,0.030224906],[8,2977,167,0.031177921],[7,1419,167,0.017636874],[6,1012,167,0.005640288],[5,848,167,0.003829412],[4,574,167,0.003443203],[3,267,167,0.001907976],[2,121,167,0.001017739],[1,73,167,0.000536991],[0,43,167,0.000434236],[0,27,171,0.000285559]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","x","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","#s(literal -1/40320 binary64)","(*.f64 x x)","x","#s(literal 1/720 binary64)","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(/.f64 (cos.f64 x) (*.f64 x x))","(cos.f64 x)"]],"locations":[["(/.f64 (cos.f64 x) (*.f64 x x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","cost-diff",4],["(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (cos x) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","cost-diff",0],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","cost-diff",0]],"memory":[[1234464,16344128]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) x)","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","x","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","#s(literal -1/40320 binary64)","(*.f64 x x)","x","#s(literal 1/720 binary64)","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(/.f64 (cos.f64 x) (*.f64 x x))","(/.f64 (/.f64 (cos.f64 x) x) x)","(cos.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":677.447021484375,"type":"simplify"},{"compiler":[[145,23]],"locations":[["(cos.f64 x)","accuracy",0.154628759768442],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",0.5178876504972433],["(/.f64 (cos.f64 x) (*.f64 x x))","accuracy",0.5206912372863274],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","accuracy",30.489514322952257],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","accuracy",0.01953125],["(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","accuracy",0.0546875],["(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","accuracy",0.2595629312790521],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","accuracy",31.86785764223595],["(*.f64 x x)","accuracy",0.0],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","accuracy",13.736142749247506],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","accuracy",16.58887216754966],["#s(approx (cos x) #s(literal 1 binary64))","accuracy",28.734089006406617],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","accuracy",31.296539739133888],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","accuracy",0.06869125976844201],["(cos.f64 x)","accuracy",0.154628759768442],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",13.736142749247506],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","accuracy",15.773297545802832]],"memory":[[-2122256,31681248]],"mixsample":[[5.15087890625,"adjust",800],[10.458740234375,"ival-div",0],[0.072021484375,"ival-div",400],[3.38525390625,"ival-cos",1600],[0.006103515625,"ival-sub",2000],[0.26904296875,"ival-div",1600],[0.0986328125,"ival-assert",0],[4.107177734375,"ival-sub",0],[0.114990234375,"ival-cos",4000],[9.152099609375,"ival-cos",0],[4.931396484375,"ival-cos",2400],[11.869384765625,"const",0],[2.650390625,"ival-cos",1200],[0.10595703125,"ival-cos",400],[0.037109375,"adjust",2000],[5.04541015625,"ival-add",0],[0.282958984375,"ival-div",1200],[0.009033203125,"ival-sub",800],[1.338134765625,"ival-cos",800],[7.794189453125,"ival-mult",0],[9.193115234375,"ival-cos",2000],[0.273681640625,"ival-div",800],[0.0390625,"adjust",2800],[0.218017578125,"ival-true",0],[0.60400390625,"ival-cos",2800],[0.4521484375,"ival-div",2000],[0.292236328125,"exact",0],[0.248779296875,"ival-div",2400]],"outcomes":[[65.73681640625,1,"valid",123],[1.572998046875,3,"valid",1],[32.544921875,0,"valid",132]],"time":147.30712890625,"type":"localize"},{"count":[[17,40]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 (cos.f64 x) (*.f64 x x))","(cos.f64 x)"]],"memory":[[3513280,3513280]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","-1/24","(- (* 1/720 (pow x 2)) 1/24)","(- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)","1/720","(+ 1/720 (* -1/40320 (pow x 2)))","(/ 1 (pow x 2))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(/ (- 1 (cos x)) (pow x 2))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(cos x)","(* -1/40320 (pow x 6))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/720 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 4))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 2))","(* (pow x 2) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(/ (cos x) (pow x 2))"]],"series":[[1.989990234375,"((/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (/ (- 1 (cos x)) (* x x)) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (/ (- 1 (cos x)) (* x x)) (+ (* (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (* x x)) 1/2) (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (+ (* -1/40320 (* x x)) 1/720) (- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (/ (cos x) (* x x)) (cos x))","x","-inf"],[2.904052734375,"((/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (/ (- 1 (cos x)) (* x x)) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (/ (- 1 (cos x)) (* x x)) (+ (* (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (* x x)) 1/2) (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (+ (* -1/40320 (* x x)) 1/720) (- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (/ (cos x) (* x x)) (cos x))","x","inf"],[1.273193359375,"((/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (/ (- 1 (cos x)) (* x x)) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (/ (- 1 (cos x)) (* x x)) (+ (* (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (* x x)) 1/2) (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (+ (* -1/40320 (* x x)) 1/720) (- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (/ (cos x) (* x x)) (cos x))","x","0"]],"time":6.994873046875,"type":"series"},{"count":[[40,40]],"egraph":[[0,8152,347,0.048629337],[5,4639,391,0.028507094],[4,2267,391,0.014160641],[3,959,391,0.009492484],[2,412,391,0.004468984],[1,183,391,0.001442627],[0,74,391,0.00073071]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","-1/24","(- (* 1/720 (pow x 2)) 1/24)","(- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)","1/720","(+ 1/720 (* -1/40320 (pow x 2)))","(/ 1 (pow x 2))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(/ (- 1 (cos x)) (pow x 2))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(cos x)","(* -1/40320 (pow x 6))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/720 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 4))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 2))","(* (pow x 2) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(/ (cos x) (pow x 2))"]],"memory":[[3119936,26010576]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/720 binary64) #s(literal 1/2 binary64)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/720 binary64) #s(literal 1/2 binary64))) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/720 binary64) #s(literal 1/2 binary64))) (*.f64 x x))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(pow x 2)","(*.f64 x x)","-1/24","#s(literal -1/24 binary64)","(- (* 1/720 (pow x 2)) 1/24)","(fma.f64 (*.f64 #s(literal 1/720 binary64) x) x #s(literal -1/24 binary64))","(- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)","(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","1/720","#s(literal 1/720 binary64)","(+ 1/720 (* -1/40320 (pow x 2)))","(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/ (- 1 (cos x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(* -1/40320 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/40320 binary64))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) x) x)","(* (pow x 6) (- (+ (* 1/720 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* -1/40320 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/40320 binary64))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(*.f64 (*.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) x) x)","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","(* -1/40320 (pow x 2))","(*.f64 #s(literal -1/40320 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","(/ (cos x) (pow x 2))","(/.f64 (/.f64 (cos.f64 x) x) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":172.76318359375,"type":"simplify"},{"count":[[17,171]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","(fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 (cos.f64 x) (*.f64 x x))","(cos.f64 x)"]],"memory":[[-10924464,17391920]],"outputs":[["#s(approx (cos 40319/29030400) (cos.f64 #s(literal 1 binary64)))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 #s(literal 1 binary64))) (sin.f64 #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 #s(literal 1 binary64)) (sin.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 #s(literal 1 binary64))) (sin.f64 #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 #s(literal 1 binary64)) (sin.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 #s(literal 1 binary64))) (sin.f64 #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 #s(literal 1 binary64)) (sin.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","#s(approx (cos 40319/29030400) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos 40319/29030400) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) #s(approx (cos 40319/29030400) #s(literal 1 binary64)))","#s(approx (cos 40319/29030400) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/40320 binary64)","#s(literal 1/720 binary64)","#s(literal -1/24 binary64)","#s(literal 40319/29030400 binary64)","#s(literal -40321/29030400 binary64)","#s(literal 11/5806080 binary64)","#s(literal -83/2612736000 binary64)","#s(literal 40321/29030400 binary64)","#s(literal -40319/29030400 binary64)","#s(literal 19/9676800 binary64)","#s(literal 97/2612736000 binary64)","#s(literal -1/967680 binary64)","#s(literal 1/967680 binary64)","#s(approx (cos 40319/29030400) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/40320 binary64)","#s(literal 1/720 binary64)","#s(literal -1/24 binary64)","#s(literal 40319/29030400 binary64)","#s(literal -40321/29030400 binary64)","#s(literal 11/5806080 binary64)","#s(literal -83/2612736000 binary64)","#s(literal 40321/29030400 binary64)","#s(literal -40319/29030400 binary64)","#s(literal 19/9676800 binary64)","#s(literal 97/2612736000 binary64)","#s(literal -1/967680 binary64)","#s(literal 1/967680 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/40320 binary64)","#s(literal 1/720 binary64)","#s(literal -1/24 binary64)","#s(literal 40319/29030400 binary64)","#s(literal -40321/29030400 binary64)","#s(literal 11/5806080 binary64)","#s(literal -83/2612736000 binary64)","#s(literal 40321/29030400 binary64)","#s(literal -40319/29030400 binary64)","#s(literal 19/9676800 binary64)","#s(literal 97/2612736000 binary64)","#s(literal -1/967680 binary64)","#s(literal 1/967680 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/40320 binary64)","#s(literal 1/720 binary64)","#s(literal -1/24 binary64)","#s(literal 40319/29030400 binary64)","#s(literal -40321/29030400 binary64)","#s(literal 11/5806080 binary64)","#s(literal -83/2612736000 binary64)","#s(literal 40321/29030400 binary64)","#s(literal -40319/29030400 binary64)","#s(literal 19/9676800 binary64)","#s(literal 97/2612736000 binary64)","#s(literal -1/967680 binary64)","#s(literal 1/967680 binary64)","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 #s(literal 1 binary64))) (sin.f64 #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 #s(literal 1 binary64)) (sin.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/40320 binary64)","#s(literal 1/720 binary64)","#s(literal -1/24 binary64)","#s(literal 40319/29030400 binary64)","#s(literal -40321/29030400 binary64)","#s(literal 11/5806080 binary64)","#s(literal -83/2612736000 binary64)","#s(literal 40321/29030400 binary64)","#s(literal -40319/29030400 binary64)","#s(literal 19/9676800 binary64)","#s(literal 97/2612736000 binary64)","#s(literal -1/967680 binary64)","#s(literal 1/967680 binary64)","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 #s(literal 1 binary64))) (sin.f64 #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 #s(literal 1 binary64)) (sin.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(neg.f64 (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(+.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sin.f64 #s(literal 1 binary64))) (sin.f64 #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(-.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))","(*.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sin.f64 #s(literal 1 binary64)) (sin.f64 #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (sin.f64 #s(literal 1 binary64))))","(/.f64 (cos.f64 #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (cos.f64 #s(literal 1 binary64)) (cos.f64 #s(literal 1 binary64)))"]],"time":527.617919921875,"type":"rewrite"},{"compiler":[[2822,454]],"memory":[[6242480,13878784]],"time":20.9150390625,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.377274188421485,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",44.07297206967141,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","next",31.390687028167445,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","fresh",31.441501293526237,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","done",31.511288690233908,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","fresh",31.47145646463085,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","fresh",31.430373268203745,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","next",31.577455992146113,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","done",31.86785764223595,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.653092506497366,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","next",31.653148360141852,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","next",31.896476738562214,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","done",30.463205813076698,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","next",47.940451812211464,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64))))","fresh",55.44168603719286,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",31.296539739133888,"binary64"]],"compiler":[[8,6],[8,6],[19,13],[27,13],[12,7],[19,12],[15,8],[11,9],[25,15],[23,16],[28,18],[15,11],[17,12],[23,13],[13,10],[10,8],[8,6],[19,13],[27,13],[19,12],[15,8],[11,9],[23,16],[28,18],[15,11],[23,13],[13,10]],"count":[[164,16]],"kept":[{"done":[1,1],"fresh":[6,5],"new":[152,6],"picked":[5,4]}],"memory":[[-5781952,12330896]],"min-error":[[0.06529002155338329,"binary64"]],"time":16.455810546875,"type":"prune"},{"egraph":[[0,8045,270,0.030470164],[6,6224,278,0.025930222],[5,4051,278,0.027128629],[4,1559,278,0.020948201],[3,618,278,0.007585235],[2,246,281,0.003015871],[1,122,282,0.001363403],[0,64,286,0.000829836],[0,39,287,0.000506668]],"inputs":[["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","#s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64))","#s(literal 1/720 binary64)","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","(/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)","(/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x)","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","#s(literal -1 binary64)","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 x x)","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","cost-diff",1],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","cost-diff",2],["#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","cost-diff",0],["(/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x)","cost-diff",0],["(/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","cost-diff",0],["#s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64))","cost-diff",0],["(fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","cost-diff",1],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","cost-diff",1],["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","cost-diff",2]],"memory":[[1945264,16575600]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (cos.f64 x) x x) x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 (cos.f64 x) #s(literal -1 binary64))","(cos.f64 x)","x","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(cos.f64 (*.f64 #s(literal 2 binary64) x))","(+.f64 x x)","(*.f64 #s(literal 2 binary64) x)","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","#s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64))","#s(literal 1/720 binary64)","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x x)))","(/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)","(/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x x))","(/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x)","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)","#s(literal -1 binary64)","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(*.f64 x x)","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":168.531005859375,"type":"simplify"},{"compiler":[[227,36]],"locations":[["(cos.f64 x)","accuracy",0.154628759768442],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","accuracy",0.6801703351241483],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",13.736142749247506],["(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",16.15766046464264],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","accuracy",0.0],["(/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)","accuracy",0.06869125976844201],["(/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x)","accuracy",15.773297545802832],["#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","accuracy",31.289545514785257],["(fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","accuracy",0.01953125],["(fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","accuracy",0.0546875],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","accuracy",31.86785764223595],["#s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64))","accuracy",32.29427368727194],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","accuracy",0.29220489844186315],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","accuracy",31.896476137506905],["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","accuracy",0.1875],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",0.33457042462406944],["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","accuracy",13.743509085896896],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","accuracy",16.58887216754966]],"memory":[[4447616,54547120]],"mixsample":[[20.615478515625,"ival-div",0],[7.874755859375,"adjust",800],[0.275146484375,"ival-cos",6000],[29.9990234375,"ival-cos",1600],[0.06787109375,"adjust",4000],[0.007080078125,"ival-sub",2000],[0.0068359375,"ival-mult",2000],[0.12451171875,"ival-assert",0],[5.1455078125,"ival-sub",0],[2.809814453125,"ival-cos",4000],[15.591064453125,"ival-cos",0],[28.84521484375,"const",0],[3.100830078125,"ival-cos",400],[6.771484375,"adjust",2000],[0.006103515625,"ival-mult",800],[12.55517578125,"ival-add",0],[0.135009765625,"ival-mult",3600],[0.170654296875,"ival-cos",800],[17.22021484375,"ival-mult",0],[0.826904296875,"ival-mult",400],[0.751220703125,"ival-mult",1600],[0.51513671875,"ival-cos",2000],[0.0078125,"ival-add",2000],[3.286865234375,"ival-cos",3600],[1.0478515625,"adjust",2800],[0.325927734375,"ival-true",0],[0.020263671875,"ival-div",2000],[0.005859375,"ival-div",4000],[0.0048828125,"ival-sub",4000],[0.5087890625,"exact",0],[2.450927734375,"ival-neg",0]],"outcomes":[[18.82861328125,1,"valid",32],[83.164794921875,2,"valid",73],[2.6728515625,4,"valid",1],[26.42333984375,3,"valid",18],[68.611328125,0,"valid",132]],"time":233.701171875,"type":"localize"},{"count":[[21,64]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","#s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","(/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)","(/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x)","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)"]],"memory":[[-1815344,5700016]],"outputs":[["(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","-1/24","(- (* 1/720 (pow x 2)) 1/24)","(- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)","1/720","(+ 1/720 (* -1/40320 (pow x 2)))","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","-1/2","(- (* 1/24 (pow x 2)) 1/2)","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 1 (cos x)))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (* (pow x 2) (+ 1 (cos x))))","(- 1/2 (* 1/2 (cos (* 2 x))))","(/ 1 (+ 1 (cos x)))","(/ (- 1 (cos x)) (pow x 2))","(* -1/24 (pow x 2))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(* -1/40320 (pow x 6))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/720 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 4))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 2))","(* (pow x 2) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/ (pow x 2) (- 1 (cos x)))","(+ 1 (cos x))","(cos x)","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (+ 1 (cos x)))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (pow x 2) (+ 1 (cos x))))","(- 1/2 (* 1/2 (cos (neg (* -2 x)))))"]],"series":[[6.1669921875,"((* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (- 1/2 (* (cos (+ x x)) 1/2)) (/ 1 (+ (cos x) 1)) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (/ (- 1 (cos x)) (* x x)) (+ (* (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (* x x)) 1/2) (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (+ (* -1/40320 (* x x)) 1/720) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (/ -1 (/ (* x x) (- 1 (cos x)))) (neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ (* x x) (- 1 (cos x))) (+ (cos x) 1) (- 1 (cos x)) (cos x))","x","-inf"],[5.370849609375,"((* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (- 1/2 (* (cos (+ x x)) 1/2)) (/ 1 (+ (cos x) 1)) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (/ (- 1 (cos x)) (* x x)) (+ (* (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (* x x)) 1/2) (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (+ (* -1/40320 (* x x)) 1/720) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (/ -1 (/ (* x x) (- 1 (cos x)))) (neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ (* x x) (- 1 (cos x))) (+ (cos x) 1) (- 1 (cos x)) (cos x))","x","inf"],[2.8330078125,"((* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (- 1/2 (* (cos (+ x x)) 1/2)) (/ 1 (+ (cos x) 1)) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (/ (- 1 (cos x)) (* x x)) (+ (* (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (* x x)) 1/2) (+ (* (+ (* -1/40320 (* x x)) 1/720) (* x x)) -1/24) (+ (* -1/40320 (* x x)) 1/720) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (/ -1 (/ (* x x) (- 1 (cos x)))) (neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ (* x x) (- 1 (cos x))) (+ (cos x) 1) (- 1 (cos x)) (cos x))","x","0"]],"time":16.053955078125,"type":"series"},{"count":[[64,64]],"egraph":[[0,8137,584,0.081782942],[5,7952,654,0.019064866],[4,5680,654,0.030087396],[3,2736,654,0.020324408],[2,995,655,0.009684802],[1,411,661,0.002989809],[0,151,661,0.001384721]],"inputs":[["(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","-1/24","(- (* 1/720 (pow x 2)) 1/24)","(- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)","1/720","(+ 1/720 (* -1/40320 (pow x 2)))","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","-1/2","(- (* 1/24 (pow x 2)) 1/2)","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 1 (cos x)))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (* (pow x 2) (+ 1 (cos x))))","(- 1/2 (* 1/2 (cos (* 2 x))))","(/ 1 (+ 1 (cos x)))","(/ (- 1 (cos x)) (pow x 2))","(* -1/24 (pow x 2))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(* -1/40320 (pow x 6))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* (pow x 6) (- (+ (* 1/720 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 4))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(* -1/40320 (pow x 2))","(* (pow x 2) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/ (pow x 2) (- 1 (cos x)))","(+ 1 (cos x))","(cos x)","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (+ 1 (cos x)))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (pow x 2) (+ 1 (cos x))))","(- 1/2 (* 1/2 (cos (neg (* -2 x)))))"]],"memory":[[8977296,38852064]],"method":["egg-herbie"],"outputs":[["(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/40320 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/40320 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/3 binary64) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/45 binary64) (*.f64 x x) #s(literal -1/3 binary64)) x) x)","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/315 binary64) (*.f64 x x) #s(literal 2/45 binary64)) (*.f64 x x) #s(literal -1/3 binary64)) x) x)","(+ 1/2 (* 1/8 (pow x 2)))","(fma.f64 #s(literal 1/8 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/48 binary64) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/5760 binary64) (*.f64 x x) #s(literal 1/48 binary64)) (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","-1/24","#s(literal -1/24 binary64)","(- (* 1/720 (pow x 2)) 1/24)","(fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/24 binary64))","(- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/40320 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","1/720","#s(literal 1/720 binary64)","(+ 1/720 (* -1/40320 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/40320 binary64) #s(literal 1/720 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/40320 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","-1/2","#s(literal -1/2 binary64)","(- (* 1/24 (pow x 2)) 1/2)","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","2","#s(literal 2 binary64)","(+ 2 (* 1/6 (pow x 2)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3024 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 1 (cos x)))","(/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (* (pow x 2) (+ 1 (cos x))))","(/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (cos.f64 x) x x) x))","(- 1/2 (* 1/2 (cos (* 2 x))))","(fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","(/ 1 (+ 1 (cos x)))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(* -1/24 (pow x 2))","(*.f64 #s(literal -1/24 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(* -1/40320 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/40320 binary64))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(*.f64 (-.f64 (/.f64 #s(literal 1/720 binary64) (*.f64 x x)) #s(literal 1/40320 binary64)) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/720 binary64) (*.f64 x x)) #s(literal 1/40320 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (- (+ (* 1/720 (/ 1 (pow x 2))) (* 1/2 (/ 1 (pow x 6)))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1/720 binary64) (*.f64 x x)) #s(literal 1/40320 binary64)) (/.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 6 binary64)))","(* -1/40320 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/40320 binary64))","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/40320 binary64) #s(literal 1/720 binary64)) x) x)","(* (pow x 4) (- (* 1/720 (/ 1 (pow x 2))) (+ 1/40320 (/ 1/24 (pow x 4)))))","(fma.f64 (*.f64 #s(literal 1/720 binary64) x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/40320 binary64))))","(* -1/40320 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/40320 binary64))","(* (pow x 2) (- (* 1/720 (/ 1 (pow x 2))) 1/40320))","(fma.f64 (*.f64 x x) #s(literal -1/40320 binary64) #s(literal 1/720 binary64))","(/ (- 1 (cos x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)","(/ (pow x 2) (- 1 (cos x)))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(+ 1 (cos x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos x)","(cos.f64 x)","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (+ 1 (cos x)))","(/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (pow x 2) (+ 1 (cos x))))","(/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (cos.f64 x) x x) x))","(- 1/2 (* 1/2 (cos (neg (* -2 x)))))","(fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":259.498046875,"type":"simplify"},{"count":[[21,189]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64))","#s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","(/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x)","(/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x)","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)"]],"memory":[[-24014672,20107776]],"outputs":[["#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(approx -1/40320 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(approx -1/40320 (fma.f64 (fma.f64 #s(approx -1/40320 #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(approx -1/40320 #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(approx -1/40320 #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal 1 binary64))","#s(approx -1/40320 #s(literal 1 binary64))","#s(approx -1/40320 (/.f64 (/.f64 #s(approx -1/40320 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (/.f64 #s(approx -1/40320 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(approx -1/40320 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx -1/40320 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/24 binary64)","#s(literal 1/720 binary64)","#s(literal -1 binary64)","#s(literal -1/40320 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)"]],"time":1702.5869140625,"type":"rewrite"},{"compiler":[[2004,368]],"memory":[[-58096,7729360]],"time":11.531005859375,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.377274188421485,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","next",44.07297206967141,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","done",31.390687028167445,"binary64"],["(/.f64 #s(approx (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","fresh",31.37412329649187,"binary64"],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","next",41.94846646933397,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","fresh",42.00708114385349,"binary64"],["(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","next",42.04934005165082,"binary64"],["(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","fresh",42.591646922966575,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","fresh",31.441501293526237,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","done",31.511288690233908,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","next",31.47145646463085,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","fresh",31.430373268203745,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","done",31.577455992146113,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","next",31.07283359472798,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","done",31.86785764223595,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.653092506497366,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","done",31.653148360141852,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","done",31.896476738562214,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","done",30.463205813076698,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",31.296539739133888,"binary64"],["#s(approx (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (cos.f64 x) x x) x)))","fresh",31.388158407322248,"binary64"]],"compiler":[[8,6],[8,6],[19,13],[32,24],[5,4],[5,4],[5,4],[5,4],[27,13],[12,7],[19,12],[15,8],[11,9],[20,15],[25,15],[23,16],[28,18],[15,11],[17,12],[10,8],[35,24],[8,6],[32,24],[5,4],[5,4],[5,4],[5,4],[27,13],[19,12],[15,8],[20,15],[23,16],[35,24]],"count":[[103,21]],"kept":[{"done":[5,5],"fresh":[6,5],"new":[87,7],"picked":[5,4]}],"memory":[[1503696,9755184]],"min-error":[[0.05909876178494127,"binary64"]],"time":13.31201171875,"type":"prune"},{"egraph":[[0,1851,169,0.005943258],[13,1851,169,0.010910329],[12,1803,169,0.012271112],[11,1638,169,0.013745535],[10,1463,169,0.010866173],[9,1085,169,0.00879835],[8,634,169,0.006649927],[7,366,169,0.003384193],[6,270,169,0.001995046],[5,183,169,0.001260934],[4,139,169,0.000839158],[3,112,169,0.000724156],[2,89,169,0.00057476],[1,70,169,0.000488437],[0,44,169,0.00044157],[0,28,172,0.000274252]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","#s(literal -1 binary64)","#s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","#s(literal 1/2 binary64)","(*.f64 x x)","x","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","#s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x))","(/.f64 (/.f64 (cos.f64 x) x) x)","(/.f64 (cos.f64 x) x)","(cos.f64 x)"]],"locations":[["#s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (cos x) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",2],["(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","cost-diff",0],["#s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","cost-diff",1]],"memory":[[3744240,3744240]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","#s(literal -1 binary64)","#s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","#s(literal 1/2 binary64)","(*.f64 x x)","x","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","#s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x))","(/.f64 (/.f64 (cos.f64 x) x) x)","(/.f64 (cos.f64 x) x)","(cos.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":94.625,"type":"simplify"},{"compiler":[[127,23]],"locations":[["(/.f64 (/.f64 (cos.f64 x) x) x)","accuracy",0.13671875],["(cos.f64 x)","accuracy",0.154628759768442],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",0.5178876504972433],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","accuracy",30.489514322952257],["(*.f64 x x)","accuracy",0.0],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",0.5374187426628931],["(*.f64 x x)","accuracy",0.0],["(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","accuracy",0.4983564663070901],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",0.0],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","accuracy",13.736142749247506],["#s(approx (cos x) #s(literal 1 binary64))","accuracy",28.734089006406617],["(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","accuracy",0.39843199386619266],["(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","accuracy",0.6801703351241483],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",13.736142749247506],["(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",15.64947232658838]],"memory":[[-3463504,29350352]],"mixsample":[[3.809326171875,"adjust",800],[21.070068359375,"ival-div",0],[0.14990234375,"ival-mult",1200],[0.085205078125,"ival-div",400],[3.422607421875,"ival-cos",1600],[0.27197265625,"ival-mult",2000],[0.295166015625,"ival-div",1600],[0.096435546875,"ival-assert",0],[3.9423828125,"ival-sub",0],[8.363525390625,"ival-cos",0],[5.209228515625,"ival-cos",2400],[2.693603515625,"ival-cos",1200],[0.0966796875,"ival-cos",400],[0.197998046875,"ival-mult",800],[0.38916015625,"ival-div",1200],[0.02880859375,"ival-mult",400],[0.5771484375,"ival-cos",800],[4.474853515625,"ival-mult",0],[0.13525390625,"ival-mult",1600],[9.06787109375,"ival-cos",2000],[0.32666015625,"ival-div",800],[0.211181640625,"ival-true",0],[0.598388671875,"ival-div",2000],[0.12890625,"ival-mult",2400],[0.5458984375,"exact",0],[1.740234375,"ival-neg",0],[0.310791015625,"ival-div",2400]],"outcomes":[[68.237060546875,1,"valid",124],[28.00146484375,0,"valid",132]],"time":115.986083984375,"type":"localize"},{"count":[[17,38]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","#s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (/.f64 (cos.f64 x) x) x)"]],"memory":[[3788032,3788032]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","-1/2","(- (* 1/24 (pow x 2)) 1/2)","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ 1/2 (pow x 2))","(pow x 2)","(/ 2 (pow x 2))","(/ 1 (pow x 2))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(/ 2 x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(/ (- 1 (cos x)) (pow x 2))","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/ (pow x 2) (- 1 (cos x)))","(- 1 (cos x))","(cos x)","(/ (cos x) (pow x 2))","(/ x (- 1 (cos x)))"]],"series":[[2.05615234375,"((neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ -1 (/ (* x x) (- 1 (cos x)))) (/ (* x x) (- 1 (cos x))) (* (/ x (- 1 (cos x))) x) (/ (- 1 (cos x)) 1) (- 1 (cos x)) (cos x) (/ 1/2 (* x x)) (* x x) (/ 2 (* x x)) (- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (/ (cos x) (* x x)) (/ x (- 1 (cos x))) (- 1 (cos x)) (cos x) (/ (/ (cos x) x) x))","x","-inf"],[1.97900390625,"((neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ -1 (/ (* x x) (- 1 (cos x)))) (/ (* x x) (- 1 (cos x))) (* (/ x (- 1 (cos x))) x) (/ (- 1 (cos x)) 1) (- 1 (cos x)) (cos x) (/ 1/2 (* x x)) (* x x) (/ 2 (* x x)) (- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (/ (cos x) (* x x)) (/ x (- 1 (cos x))) (- 1 (cos x)) (cos x) (/ (/ (cos x) x) x))","x","inf"],[1.64501953125,"((neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ -1 (/ (* x x) (- 1 (cos x)))) (/ (* x x) (- 1 (cos x))) (* (/ x (- 1 (cos x))) x) (/ (- 1 (cos x)) 1) (- 1 (cos x)) (cos x) (/ 1/2 (* x x)) (* x x) (/ 2 (* x x)) (- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (/ (cos x) (* x x)) (/ x (- 1 (cos x))) (- 1 (cos x)) (cos x) (/ (/ (cos x) x) x))","x","0"]],"time":6.43603515625,"type":"series"},{"count":[[38,38]],"egraph":[[0,8065,333,0.058083377],[6,5632,375,0.03131627],[5,3215,375,0.019700123],[4,2111,375,0.011070105],[3,1070,375,0.007617314],[2,470,376,0.003695148],[1,183,376,0.001419335],[0,79,376,0.000735612]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","-1/2","(- (* 1/24 (pow x 2)) 1/2)","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ 1/2 (pow x 2))","(pow x 2)","(/ 2 (pow x 2))","(/ 1 (pow x 2))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(/ 2 x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(/ (- 1 (cos x)) (pow x 2))","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/ (pow x 2) (- 1 (cos x)))","(- 1 (cos x))","(cos x)","(/ (cos x) (pow x 2))","(/ x (- 1 (cos x)))"]],"memory":[[-1306032,29855904]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* 1/24 (pow x 2)) 1/2)","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/40320 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","2","#s(literal 2 binary64)","(+ 2 (* 1/6 (pow x 2)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3024 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ 1/2 (pow x 2))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(pow x 2)","(*.f64 x x)","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3024 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))","(/ (pow x 2) (- 1 (cos x)))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(/ (cos x) (pow x 2))","(/.f64 (/.f64 (cos.f64 x) x) x)","(/ x (- 1 (cos x)))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":210.4599609375,"type":"simplify"},{"count":[[17,143]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","#s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (/.f64 (cos.f64 x) x) x)"]],"memory":[[-2169376,16553152]],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx 1/4 #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) #s(approx 1/4 #s(literal -1 binary64)))","#s(approx 1/4 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","(/.f64 (-.f64 #s(literal -1 binary64) #s(approx 1/4 #s(literal -1 binary64))) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) #s(approx 1/4 #s(literal -1 binary64)))","#s(approx 1/4 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","(-.f64 #s(literal -1 binary64) #s(approx 1/4 #s(literal -1 binary64)))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(approx 1/4 #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 5 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 1/8 binary64)","#s(literal 3 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)"]],"time":372.61083984375,"type":"rewrite"},{"compiler":[[1037,233]],"memory":[[5545984,5545984]],"time":6.817138671875,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.377274188421485,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","done",44.07297206967141,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","done",31.390687028167445,"binary64"],["(/.f64 #s(approx (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","fresh",31.37412329649187,"binary64"],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","done",41.94846646933397,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","fresh",42.00708114385349,"binary64"],["(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","done",42.04934005165082,"binary64"],["(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","fresh",42.591646922966575,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","fresh",31.441501293526237,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","done",31.511288690233908,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","done",31.47145646463085,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","fresh",31.430373268203745,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","done",31.577455992146113,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","done",31.07283359472798,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","fresh",57.3162682104941,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","done",31.86785764223595,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.653092506497366,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","done",31.653148360141852,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","done",31.896476738562214,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","done",30.463205813076698,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",31.296539739133888,"binary64"],["#s(approx (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (cos.f64 x) x x) x)))","fresh",31.388158407322248,"binary64"]],"compiler":[[423,116],[8,6],[8,6],[19,13],[32,24],[5,4],[5,4],[5,4],[5,4],[27,13],[12,7],[19,12],[15,8],[11,9],[20,15],[13,11],[25,15],[23,16],[28,18],[15,11],[17,12],[10,8],[35,24]],"count":[[81,22]],"kept":[{"done":[9,9],"fresh":[7,7],"new":[60,1],"picked":[5,5]}],"memory":[[-5925040,10272000]],"min-error":[[0.05909876178494127,"binary64"]],"time":14.1240234375,"type":"prune"},{"accuracy":[0.2290444456214824],"baseline":[30.463205813076698],"branch":[["x",0.2290444456214824,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",14.517456904118818,2,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[26,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (/ (cos x) (* x x)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","#s(approx (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (cos.f64 x) x x) x)))","(/.f64 #s(approx (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))"]],"memory":[[591152,8492560]],"oracle":[63.131338762646806],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))"]],"repr":["binary64"],"time":13.781982421875,"times":[[6.735107421875,"x"],[5.453125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[0.6345841770168834],"baseline":[31.296539739133888],"branch":[["x",0.6345841770168834,2,"binary64"]],"compiler":[[1,1]],"count":[[16,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"memory":[[3742784,3742784]],"oracle":[63.05123347349322],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"repr":["binary64"],"time":5.15283203125,"times":[[4.174072265625,"x"]],"type":"regimes"},{"accuracy":[11.600163260747685],"baseline":[31.296539739133888],"branch":[["x",11.600163260747685,2,"binary64"]],"compiler":[[1,1]],"count":[[15,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (-.f64 #s(literal 1 binary64) (cos.f64 #s(literal 1 binary64))))"]],"memory":[[-7303200,3624304]],"oracle":[63.05123347349322],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))"]],"repr":["binary64"],"time":43.19921875,"times":[[4.06201171875,"x"]],"type":"regimes"},{"accuracy":[11.636499684190294],"baseline":[31.296539739133888],"branch":[["x",11.636499684190294,2,"binary64"]],"compiler":[[1,1]],"count":[[13,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x) x))"]],"memory":[[3579456,3579456]],"oracle":[63.00979751129935],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))"]],"repr":["binary64"],"time":4.846923828125,"times":[[3.72607421875,"x"]],"type":"regimes"},{"accuracy":[11.63655552337782],"baseline":[31.296539739133888],"branch":[["x",11.63655552337782,2,"binary64"]],"compiler":[[1,1]],"count":[[11,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(approx (+ (* -1/40320 (* x x)) 1/720) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))"]],"memory":[[3038784,3038784]],"oracle":[63.00979751129935],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))"]],"repr":["binary64"],"time":4.2890625,"times":[[3.316162109375,"x"]],"type":"regimes"},{"accuracy":[11.670271414107784],"baseline":[31.296539739133888],"branch":[["x",11.670271414107784,2,"binary64"]],"compiler":[[1,1]],"count":[[9,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))"]],"memory":[[-5398048,2788400]],"oracle":[63.0097444164594],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))"]],"repr":["binary64"],"time":3.60400390625,"times":[[2.968994140625,"x"]],"type":"regimes"},{"accuracy":[11.731527785965485],"baseline":[31.296539739133888],"branch":[["x",11.731527785965485,2,"binary64"]],"compiler":[[1,1]],"count":[[7,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))"]],"memory":[[2496400,2496400]],"oracle":[62.50228946581706],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))"]],"repr":["binary64"],"time":2.911865234375,"times":[[2.33203125,"x"]],"type":"regimes"},{"accuracy":[11.776853388963762],"baseline":[31.296539739133888],"branch":[["x",11.776853388963762,2,"binary64"]],"compiler":[[1,1]],"count":[[6,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))"]],"memory":[[2359712,2359712]],"oracle":[62.50228946581706],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1/2 binary64) (*.f64 x x))"]],"repr":["binary64"],"time":3.092041015625,"times":[[2.537841796875,"x"]],"type":"regimes"},{"accuracy":[12.327584986738911],"baseline":[31.296539739133888],"branch":[["x",12.327584986738911,2,"binary64"]],"compiler":[[1,1]],"count":[[5,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))"]],"memory":[[-6071760,2240112]],"oracle":[62.50225693459506],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1/720 binary64) (*.f64 x x))"]],"repr":["binary64"],"time":3.218017578125,"times":[[2.1689453125,"x"]],"type":"regimes"},{"accuracy":[13.46021989599883],"baseline":[31.296539739133888],"branch":[["x",13.46021989599883,2,"binary64"]],"compiler":[[1,1]],"count":[[4,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[2085568,2085568]],"oracle":[62.50111665856956],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))"]],"repr":["binary64"],"time":2.3720703125,"times":[[1.89111328125,"x"]],"type":"regimes"},{"accuracy":[31.296539739133852],"baseline":[31.296539739133888],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",31.296539739133852,1,"binary64"],["x",31.29653973913394,1,"binary64"]],"compiler":[[8,6],[1,1]],"count":[[3,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- 1 (cos x))) #s(literal 9 binary64))))"]],"link":["."],"memory":[[3226400,3226400]],"name":["cos2 (problem 3.4.1)"],"oracle":[58.11302039427194],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":3.625,"times":[[1.494140625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"],[1.587890625,"x"]],"type":"regimes"},{"bstep":[[12.885986328125,0.0001817356789150392,0.37562294414024644]],"compiler":[[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[17,13],[15,12],[10,9],[1,1]],"memory":[[-4259408,3902304]],"method":["binary-search"],"mixsample":[[0.765869140625,"ival-sub",0],[0.8408203125,"ival-div",0],[0.087158203125,"ival-true",0],[1.816650390625,"ival-cos",0],[1.031494140625,"ival-mult",0],[0.07568359375,"exact",0],[0.051025390625,"ival-assert",0]],"outcomes":[[7.254150390625,0,"valid",128]],"stop":[["narrow-enough",1]],"time":14.671875,"type":"bsearch"},{"bstep":[[1.39404296875,0.0001817356789150392,0.37562294414024644]],"compiler":[[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[10,9],[1,1]],"memory":[[583504,583504]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":2.071044921875,"type":"bsearch"},{"bstep":[[14.370849609375,0.37562294414024644,3967.286579618929]],"compiler":[[5,5],[25,16],[5,5],[25,16],[5,5],[25,16],[5,5],[25,16],[5,5],[25,16],[5,5],[25,16],[5,5],[25,16],[5,5],[25,16],[10,9],[1,1]],"memory":[[4394656,4394656]],"method":["binary-search"],"mixsample":[[0.645751953125,"ival-sub",0],[0.67236328125,"ival-div",0],[0.09130859375,"ival-true",0],[4.6123046875,"ival-cos",0],[0.932373046875,"ival-mult",0],[0.082275390625,"exact",0],[0.08544921875,"ival-assert",0]],"outcomes":[[9.6201171875,0,"valid",128]],"stop":[["narrow-enough",1]],"time":16.319091796875,"type":"bsearch"},{"bstep":[[13.034912109375,0.37562294414024644,3967.286579618929]],"compiler":[[5,5],[23,17],[5,5],[23,17],[5,5],[23,17],[5,5],[23,17],[5,5],[23,17],[5,5],[23,17],[5,5],[23,17],[5,5],[23,17],[10,9],[1,1]],"memory":[[-5133280,3456272]],"method":["binary-search"],"mixsample":[[0.5126953125,"ival-sub",0],[0.68115234375,"ival-div",0],[0.174560546875,"ival-true",0],[3.35986328125,"ival-cos",0],[0.65283203125,"ival-mult",0],[0.05712890625,"exact",0],[0.0380859375,"ival-assert",0]],"outcomes":[[7.503173828125,0,"valid",96]],"stop":[["narrow-enough",1]],"time":14.77197265625,"type":"bsearch"},{"bstep":[[1.0361328125,0.37562294414024644,3967.286579618929]],"compiler":[[5,5],[20,14],[5,5],[20,14],[5,5],[20,14],[5,5],[20,14],[5,5],[20,14],[5,5],[20,14],[5,5],[20,14],[5,5],[20,14],[10,9],[1,1]],"memory":[[592848,592848]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.6279296875,"type":"bsearch"},{"bstep":[[4.735107421875,0.37562294414024644,3967.286579618929]],"compiler":[[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[10,9],[1,1]],"memory":[[1467072,1467072]],"method":["binary-search"],"mixsample":[[0.169677734375,"ival-sub",0],[0.182373046875,"ival-div",0],[0.029296875,"ival-true",0],[1.130126953125,"ival-cos",0],[0.22021484375,"ival-mult",0],[0.021484375,"exact",0],[0.01220703125,"ival-assert",0]],"outcomes":[[2.48095703125,0,"valid",32]],"stop":[["narrow-enough",1]],"time":5.487060546875,"type":"bsearch"},{"bstep":[[5.844970703125,0.37562294414024644,3967.286579618929]],"compiler":[[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[10,9],[1,1]],"memory":[[1942880,1942880]],"method":["binary-search"],"mixsample":[[0.2470703125,"ival-sub",0],[0.2529296875,"ival-div",0],[0.036376953125,"ival-true",0],[1.855712890625,"ival-cos",0],[0.304443359375,"ival-mult",0],[0.025146484375,"exact",0],[0.017333984375,"ival-assert",0]],"outcomes":[[3.616455078125,0,"valid",48]],"stop":[["narrow-enough",1]],"time":6.77880859375,"type":"bsearch"},{"bstep":[[2.572021484375,0.37562294414024644,3967.286579618929]],"compiler":[[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[10,9],[1,1]],"memory":[[1016016,1016016]],"method":["binary-search"],"mixsample":[[0.078125,"ival-sub",0],[0.084228515625,"ival-div",0],[0.013916015625,"ival-true",0],[0.551513671875,"ival-cos",0],[0.10205078125,"ival-mult",0],[0.0087890625,"exact",0],[0.005859375,"ival-assert",0]],"outcomes":[[1.163818359375,0,"valid",16]],"stop":[["narrow-enough",1]],"time":3.244140625,"type":"bsearch"},{"bstep":[[4.49609375,0.37562294414024644,3967.286579618929]],"compiler":[[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[5,5],[15,12],[10,9],[1,1]],"memory":[[1559728,1559728]],"method":["binary-search"],"mixsample":[[0.161376953125,"ival-sub",0],[0.189453125,"ival-div",0],[0.02099609375,"ival-true",0],[1.232177734375,"ival-cos",0],[0.21728515625,"ival-mult",0],[0.01904296875,"exact",0],[0.010986328125,"ival-assert",0]],"outcomes":[[2.579833984375,0,"valid",32]],"stop":[["narrow-enough",1]],"time":5.470947265625,"type":"bsearch"},{"bstep":[[21.552001953125,2.6077607001762214e+61,3.777599977693442e+77]],"compiler":[[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[8,7],[10,9],[10,9],[1,1]],"memory":[[-2811712,5339808]],"method":["binary-search"],"mixsample":[[1.13671875,"ival-sub",0],[1.04541015625,"ival-div",0],[0.15087890625,"ival-true",0],[7.2607421875,"ival-cos",0],[1.963623046875,"ival-mult",0],[0.1064453125,"exact",0],[0.05908203125,"ival-assert",0]],"outcomes":[[15.408935546875,0,"valid",160]],"stop":[["narrow-enough",1]],"time":24.363037109375,"type":"bsearch"},{"egraph":[[10,6884,284,0.032018955],[9,4163,284,0.037427628],[8,2275,284,0.01975428],[7,823,284,0.01458629],[6,323,284,0.003854052],[5,216,284,0.002450855],[4,159,284,0.001702739],[3,115,284,0.002351217],[2,96,284,0.001355025],[1,82,284,0.001658723],[0,66,284,0.00120932]],"inputs":[["(if (<=.f64 x #s(literal 1498797955988901/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) #s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(if (<=.f64 x #s(literal 1498797955988901/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(if (<=.f64 x #s(literal 4728779608739021/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3039929748475085/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3039929748475085/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 5404319552844595/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3602879701896397/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 7/2 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/720 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 140000000000000000160666652390804640313986050345482420611089958357404152233984 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"memory":[[-2696144,13197920]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x #s(literal 1498797955988901/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) #s(approx (/ (- 1 (cos x)) (* x x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(if (<=.f64 x #s(literal 1498797955988901/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(if (<=.f64 x #s(literal 4728779608739021/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3039929748475085/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) #s(literal 40321/29030400 binary64) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3039929748475085/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 5404319552844595/2251799813685248 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 3 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (pow.f64 (*.f64 x x) #s(literal -1 binary64)))","(if (<=.f64 x #s(literal 3602879701896397/1125899906842624 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 7/2 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/720 binary64) (*.f64 x x)))","(if (<=.f64 x #s(literal 140000000000000000160666652390804640313986050345482420611089958357404152233984 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(if (<=.f64 x #s(literal 140000000000000000160666652390804640313986050345482420611089958357404152233984 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"stop":[["node limit",1]],"time":152.14599609375,"type":"simplify"},{"compiler":[[284,67]],"memory":[[2817024,2817024]],"stop":[["fuel",1]],"time":4.06103515625,"type":"soundness"},{"compiler":[[284,67],[284,67],[8,6],[8,6],[36,20],[36,20]],"memory":[[2285040,34641984]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[]],"time":56.64794921875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.014892578125,"type":"end"}]