[{"memory":[[20384,20384]],"time":0.037109375,"type":"start"},{"compiler":[[19,16]],"memory":[[-2057424,44223232]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":153.615966796875,"type":"analyze"},{"bogosity":[{"infinite":0.060545869403689466,"invalid":0.24685662658201335,"precondition":0.0014641286106780171,"valid":0.6911333754036192}],"memory":[[21379280,443738752]],"mixsample":[[7.14208984375,"ival-sub",1200],[59.9111328125,"adjust",800],[103.401123046875,"ival-div",0],[0.104736328125,"ival-sub",4800],[4.2578125,"ival-mult",1200],[0.005859375,"ival-div",400],[2.42578125,"ival-sub",1600],[3.60009765625,"ival-assert",0],[0.02197265625,"ival-sub",3600],[10.4912109375,"ival-sqrt",1200],[129.352294921875,"ival-sub",0],[0.305419921875,"ival-sqrt",4800],[70.5166015625,"ival-sqrt",0],[3.74169921875,"ival-sub",400],[4.60400390625,"ival-mult",800],[0.513916015625,"ival-sub",4400],[5.093017578125,"ival-sub",800],[0.55810546875,"ival-mult",1600],[2.5830078125,"adjust",2800],[0.06689453125,"ival-sqrt",3600],[0.0078125,"ival-div",2000],[0.211181640625,"ival-sub",4000],[6.227783203125,"ival-sqrt",400],[4.62353515625,"ival-sqrt",2000],[0.072998046875,"ival-mult",2000],[8.554931640625,"ival-sqrt",800],[2.44091796875,"ival-sub",2000],[0.537841796875,"ival-sqrt",4000],[0.005126953125,"ival-sub",6400],[1.26220703125,"ival-sqrt",4400],[23.821533203125,"adjust",2000],[2.87158203125,"ival-sub",2400],[5.63916015625,"ival-mult",400],[242.07177734375,"ival-mult",0],[4.379638671875,"ival-sqrt",1600],[0.014892578125,"ival-sqrt",6400],[0.031982421875,"ival-div",800],[5.5693359375,"ival-sqrt",2400],[7.125,"ival-true",0],[10.4697265625,"exact",0],[50.955810546875,"ival-neg",0]],"outcomes":[[214.1875,1,"valid",1336],[245.159423828125,2,"valid",1178],[86.004150390625,0,"invalid",912],[49.496337890625,3,"valid",173],[476.341064453125,0,"valid",5569]],"time":1496.931884765625,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[125,0,20,111]],"explanations":[["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",8,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",35],["(*.f64 a c)","overflow",35]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",9,0,[["(*.f64 b b)","underflow",63],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",35],["(*.f64 a c)","underflow",35],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",9]],[[1,2]]],["/.f64","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",13,0,[["(*.f64 b b)","underflow",63],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",23],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",35],["(*.f64 a c)","underflow",35],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",9]],[[]]],["-.f64","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",58,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",99,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",35],["(*.f64 a c)","overflow",35],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",99]],[[1,2]]]],"fperrors":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",15,0,false,2,[-2.4037068325785666e-279,-1.642989429527455e-183,-9.611387114568408e-227]],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",8,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",109,0,false,1,[6.4407263546189735e-270,-3.102143099060293e-158,3.90761189829843e-102]],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",58,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[3,5],[2,32],[1,108],[0,111]],"maybe-confusion":[[125,0,0,20,0,111]],"memory":[[-18036816,87510272]],"mixsample":[[0.384765625,"ival-sub",1200],[6.08203125,"ival-div",0],[3.735595703125,"adjust",800],[0.009033203125,"ival-sub",4800],[0.198486328125,"ival-mult",1200],[0.107421875,"ival-sub",1600],[0.372314453125,"ival-assert",0],[6.978515625,"ival-sub",0],[0.677978515625,"ival-sqrt",1200],[0.02685546875,"ival-sqrt",4800],[4.22900390625,"ival-sqrt",0],[0.186767578125,"ival-sub",400],[0.0615234375,"ival-sub",4400],[0.269775390625,"ival-mult",800],[0.354248046875,"ival-sub",800],[0.02880859375,"ival-mult",1600],[0.191650390625,"adjust",2800],[0.010009765625,"ival-sub",4000],[0.424560546875,"ival-sqrt",400],[0.302001953125,"ival-sqrt",2000],[0.636474609375,"ival-sqrt",800],[0.136474609375,"ival-sub",2000],[0.02490234375,"ival-sqrt",4000],[0.112548828125,"ival-sqrt",4400],[1.14990234375,"adjust",2000],[0.125,"ival-sub",2400],[14.041015625,"ival-mult",0],[0.30908203125,"ival-mult",400],[0.172119140625,"ival-sqrt",1600],[0.256591796875,"ival-sqrt",2400],[0.599609375,"ival-true",0],[0.59228515625,"exact",0],[2.639892578125,"ival-neg",0]],"outcomes":[[16.533203125,1,"valid",86],[15.781494140625,2,"valid",60],[3.57080078125,3,"valid",10],[38.16748046875,0,"valid",356]],"time":181.942138671875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"egraph":[[0,2395,15,0.007546031],[12,2395,16,0.016737943],[11,2389,16,0.017503566],[10,2389,16,0.012710669],[9,2379,16,0.013093642],[8,2306,16,0.015173486],[7,2142,16,0.016673241],[6,1613,16,0.016300262],[5,746,16,0.008320223],[4,409,16,0.003768896],[3,247,16,0.001563038],[2,104,17,0.00092182],[1,45,17,0.000666404],[0,23,17,0.000276281],[0,14,17,0.000164302]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-4111984,20684576]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":350.051025390625,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.0859375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",29.95382500309717,"binary64"]],"compiler":[[17,14]],"memory":[[352944,352944]],"time":0.6669921875,"type":"prune"},{"egraph":[[0,2395,65,0.008796864],[12,2395,69,0.020336333],[11,2389,69,0.019268195],[10,2389,69,0.013167955],[9,2379,69,0.013086865],[8,2306,69,0.017389878],[7,2142,69,0.015402855],[6,1613,69,0.014238871],[5,746,69,0.008539368],[4,409,69,0.00319704],[3,247,69,0.00162299],[2,104,70,0.000887556],[1,45,70,0.000415722],[0,23,70,0.00030909],[0,14,70,0.000162669]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[4658240,4658240]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":157.494873046875,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",1.5937500000000002],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.1231409090810107],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",13.112651304621604],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",25.411130893416303]],"memory":[[-933264,16358112]],"mixsample":[[0.19970703125,"ival-sub",1200],[3.133056640625,"ival-div",0],[1.93505859375,"adjust",800],[0.0048828125,"ival-sub",4800],[0.12109375,"ival-mult",1200],[0.05078125,"ival-sub",1600],[0.1044921875,"ival-assert",0],[3.54296875,"ival-sub",0],[0.32275390625,"ival-sqrt",1200],[0.01416015625,"ival-sqrt",4800],[2.147705078125,"ival-sqrt",0],[0.1005859375,"ival-sub",400],[0.015380859375,"ival-sub",4400],[0.28857421875,"ival-mult",800],[0.218017578125,"ival-sub",800],[0.018798828125,"ival-mult",1600],[0.07080078125,"adjust",2800],[0.005859375,"ival-sub",4000],[0.16259765625,"ival-sqrt",400],[0.166748046875,"ival-sqrt",2000],[0.473388671875,"ival-sqrt",800],[0.095458984375,"ival-sub",2000],[0.01220703125,"ival-sqrt",4000],[0.036865234375,"ival-sqrt",4400],[0.834228515625,"adjust",2000],[0.064697265625,"ival-sub",2400],[13.30126953125,"ival-mult",0],[0.197021484375,"ival-mult",400],[0.092041015625,"ival-sqrt",1600],[0.123046875,"ival-sqrt",2400],[0.2373046875,"ival-true",0],[0.3193359375,"exact",0],[1.481689453125,"ival-neg",0]],"outcomes":[[9.2275390625,1,"valid",43],[9.075439453125,2,"valid",30],[1.66943359375,3,"valid",5],[35.82421875,0,"valid",178]],"time":67.422119140625,"type":"localize"},{"count":[[5,99]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[379296,8373312]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[3.843994140625,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[2.97607421875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[1.55908203125,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[2.065185546875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[3.317138671875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[2.497802734375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[2.60791015625,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[3.867919921875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[1.785888671875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":26.549072265625,"type":"series"},{"count":[[99,98]],"egraph":[[0,8487,2534,0.098527287],[2,5883,2670,0.027292576],[1,1718,2710,0.018491039],[0,545,2739,0.007253303]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[-5868464,53129536]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) #s(literal 2 binary64))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c)) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) a) b) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 (neg.f64 b) a))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) (/.f64 (neg.f64 b) a))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64)) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) b)","(* -1 (/ c b))","(/.f64 c (neg.f64 b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c))) (neg.f64 b))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64))) b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal -1 binary64)) b)","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) (neg.f64 b))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b)) #s(literal -2 binary64)) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal -2 binary64))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64)))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c)) c)","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) c) b) c)))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":309.988037109375,"type":"simplify"},{"count":[[5,75]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[5001536,21063456]],"outputs":[["(neg.f64 (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64))))","(+.f64 (/.f64 b (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))))","(+.f64 (*.f64 (/.f64 b (*.f64 a #s(literal -2 binary64))) #s(literal 4 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) #s(literal 4 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 b (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))) (/.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)) (*.f64 a #s(literal -2 binary64))))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a a) #s(literal 4 binary64))))","(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))) (/.f64 (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 a #s(literal -2 binary64))) (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(+.f64 (-.f64 (*.f64 b b) #s(literal 0 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(+.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 a) (neg.f64 c)))","(+.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 a) c))","(+.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b b))","(+.f64 (*.f64 b b) (neg.f64 (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 (neg.f64 a)) c))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 (neg.f64 c)) a))","(+.f64 (*.f64 b b) (*.f64 (*.f64 (neg.f64 a) c) #s(literal -16 binary64)))","(+.f64 (*.f64 b b) (*.f64 #s(literal -16 binary64) (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b b) (neg.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 (*.f64 a a) (*.f64 c c)))))","(+.f64 (*.f64 b b) (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(+.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) #s(literal 0 binary64)) b)","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (-.f64 b #s(literal 0 binary64)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b))))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))))","(+.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))))","(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(-.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) #s(literal 0 binary64)) b)","(-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(-.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(-.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)))","b","(neg.f64 b)","(+.f64 b #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b)","(-.f64 #s(literal 0 binary64) b)","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(*.f64 b #s(literal 4 binary64))","(*.f64 b #s(literal -16 binary64))","(*.f64 #s(literal 4 binary64) b)","(*.f64 #s(literal -16 binary64) b)","(*.f64 (*.f64 b b) (/.f64 #s(literal 4 binary64) b))","(*.f64 (*.f64 b b) (*.f64 b b))","(*.f64 (*.f64 (*.f64 b b) b) b)","(*.f64 b (*.f64 (*.f64 b b) b))","(neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b)","(+.f64 (*.f64 (*.f64 a c) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)))","(+.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (*.f64 a c) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(+.f64 b (*.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) c)))","(-.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(-.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)))","(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))))"]],"time":460.5009765625,"type":"rewrite"},{"compiler":[[6257,918]],"memory":[[-281792,16033104]],"time":22.304931640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",57.4867028149283,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",39.167924754317205,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",37.3066421383916,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",44.12429476370122,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",48.76000318402943,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",39.7505486651865,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","next",45.85032951840928,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","next",62.08382646183039,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",47.3031404524971,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","fresh",44.04564917525996,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","next",45.81781571583095,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",45.80218568349853,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","next",42.62715031085084,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.786821110226846,"binary64"]],"compiler":[[15,11],[18,14],[18,15],[32,23],[21,16],[23,18],[26,19],[15,11],[25,19],[31,21],[27,19],[22,17],[22,17],[25,18],[15,11],[18,14],[18,15],[32,23],[21,16],[23,18],[26,19],[15,11],[25,19],[31,21],[27,19],[22,17],[22,17],[25,18]],"count":[[171,14]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[170,14],"picked":[1,0]}],"memory":[[-3869264,12455296]],"min-error":[[7.348819640688126,"binary64"]],"time":13.073974609375,"type":"prune"},{"egraph":[[0,8348,275,0.052256406],[6,5042,286,0.032075425],[5,2058,286,0.02597412],[4,1085,286,0.009366275],[3,645,294,0.005021371],[2,286,297,0.002411127],[1,131,297,0.001165865],[0,69,297,0.000678748],[0,43,297,0.000397205]],"inputs":[["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","c","(neg.f64 b)","b","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(fma.f64 (/.f64 c b) a (neg.f64 b))","(/.f64 c b)","c","b","a","(neg.f64 b)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(*.f64 #s(literal -2 binary64) c)","#s(literal -2 binary64)","c","(/.f64 a b)","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(*.f64 (neg.f64 a) c)","cost-diff",0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","cost-diff",0],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",5],["(/.f64 c b)","cost-diff",0],["(fma.f64 (/.f64 c b) a (neg.f64 b))","cost-diff",0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","cost-diff",0],["(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","cost-diff",2],["(neg.f64 b)","cost-diff",0],["(/.f64 c (neg.f64 b))","cost-diff",0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","cost-diff",0],["(*.f64 b #s(literal -16 binary64))","cost-diff",0],["(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[6257712,28576256]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 16 binary64) b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 #s(literal -16 binary64) b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 b #s(literal -16 binary64))","(*.f64 #s(literal -16 binary64) b)","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","c","(neg.f64 b)","b","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(-.f64 (/.f64 c b) (/.f64 b a))","(fma.f64 (/.f64 c b) a (neg.f64 b))","(/.f64 c b)","c","b","a","(neg.f64 b)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 (*.f64 c c) #s(literal -2 binary64)) a (/.f64 b a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 c a) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 c a) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","(*.f64 c a)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) b))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)","(*.f64 #s(literal -2 binary64) c)","#s(literal -2 binary64)","c","(/.f64 a b)","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":204.0,"type":"simplify"},{"compiler":[[263,36]],"locations":[["(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","accuracy",2.8589886363841996],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.1231409090810107],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","accuracy",13.112651304621604],["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","accuracy",46.25299296341482],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","accuracy",0.11947250976844202],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","accuracy",3.7722671750873507],["(neg.f64 b)","accuracy",0.0],["(fma.f64 (/.f64 c b) a (neg.f64 b))","accuracy",1.9523180538513614],["(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","accuracy",4.0943313030324155],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","accuracy",45.779008610226846],["(/.f64 c (neg.f64 b))","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","accuracy",42.62715031085084],["(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",0.015625],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.18359375],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",1.5937500000000002],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",25.411130893416303]],"memory":[[-322800,41926544]],"mixsample":[[0.158935546875,"ival-sub",1200],[0.013916015625,"ival-sub",4800],[14.3056640625,"ival-div",0],[4.376953125,"adjust",800],[0.113037109375,"ival-mult",1200],[0.053955078125,"ival-sub",1600],[0.126953125,"adjust",4000],[0.104248046875,"ival-assert",0],[4.97998046875,"ival-sub",0],[0.3056640625,"ival-sqrt",1200],[0.04296875,"ival-sqrt",4800],[2.056640625,"ival-sqrt",0],[0.174072265625,"ival-sub",400],[0.019775390625,"ival-sub",4400],[5.0791015625,"ival-add",0],[0.16845703125,"ival-mult",800],[0.238037109375,"ival-sub",800],[0.013916015625,"ival-mult",1600],[0.2998046875,"adjust",2800],[0.029052734375,"ival-sub",4000],[0.184814453125,"ival-sqrt",400],[0.156982421875,"ival-sqrt",2000],[0.113037109375,"ival-sub",2000],[0.361572265625,"ival-sqrt",800],[0.011962890625,"ival-sqrt",4000],[0.04443359375,"ival-sqrt",4400],[1.83740234375,"adjust",2000],[0.072021484375,"ival-sub",2400],[16.56640625,"ival-mult",0],[0.20458984375,"ival-mult",400],[0.0849609375,"ival-sqrt",1600],[0.229736328125,"ival-true",0],[0.13818359375,"ival-sqrt",2400],[0.564453125,"exact",0],[2.177490234375,"ival-neg",0]],"outcomes":[[20.21484375,1,"valid",45],[17.973876953125,2,"valid",30],[3.0859375,3,"valid",4],[2.343017578125,4,"valid",2],[46.302734375,0,"valid",175]],"time":122.26708984375,"type":"localize"},{"count":[[22,202]],"inputs":[["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","(neg.f64 b)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","(fma.f64 (/.f64 c b) a (neg.f64 b))","(/.f64 c b)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(neg.f64 a)","(*.f64 #s(literal 2 binary64) a)","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)"]],"memory":[[-1617168,17861632]],"outputs":[["(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(- (* -16 b) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -1 b)","(- (/ (* a c) b) b)","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 2 b)","(+ (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* a c))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 a)","(* 2 a)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(/ c b)","(+ (* -1 (/ b a)) (/ c b))","(/ (* a c) b)","(* a (+ (* -1 (/ b a)) (/ c b)))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (* 2 (/ b (pow a 2)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ c b)) (/ b a))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(* -16 b)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(* -1 (/ c b))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(/ (+ (* -1 (pow b 2)) (* a c)) b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(* -17/2 (/ b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -17 b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (/ (* a c) (pow b 2)) 1))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -15 b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ 1 (* -1 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 2)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(* c (+ (* -1 (/ b c)) (/ a b)))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (* 2 (/ b (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(* -1 (* c (+ (* -1 (/ a b)) (/ b c))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))"]],"series":[[3.802001953125,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","c","-inf"],[37.680908203125,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","c","inf"],[3.25,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","c","0"],[3.6669921875,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","b","-inf"],[3.610107421875,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","b","inf"],[3.8818359375,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","b","0"],[6.8798828125,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","a","-inf"],[4.43701171875,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","a","inf"],[6.548828125,"((/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (+ (* (/ c b) a) (neg b)) a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* (/ c b) a) (neg b)) (/ c b) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (- (* b b) (* 4 (* a c)))) (neg a) (* 2 a) (+ (* (* -2 c) (/ a b)) b))","a","0"]],"time":77.94580078125,"type":"series"},{"count":[[202,201]],"egraph":[[0,8365,4550,0.098346215],[1,2612,4775,0.026128821],[0,830,4868,0.008280709]],"inputs":[["(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(- (* -16 b) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -1 b)","(- (/ (* a c) b) b)","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 2 b)","(+ (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* a c))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 a)","(* 2 a)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(/ c b)","(+ (* -1 (/ b a)) (/ c b))","(/ (* a c) b)","(* a (+ (* -1 (/ b a)) (/ c b)))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (* 2 (/ b (pow a 2)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ c b)) (/ b a))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(* -16 b)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(* -1 (/ c b))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(/ (+ (* -1 (pow b 2)) (* a c)) b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(* -17/2 (/ b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -17 b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (/ (* a c) (pow b 2)) 1))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -15 b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ 1 (* -1 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 2)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(* c (+ (* -1 (/ b c)) (/ a b)))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (* 2 (/ b (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(* -1 (* c (+ (* -1 (/ a b)) (/ b c))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))"]],"memory":[[3548976,55001184]],"method":["egg-herbie"],"outputs":[["(* 1/2 (/ (- (* -16 b) b) a))","(*.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/.f64 (fma.f64 (*.f64 #s(literal -17 binary64) b) #s(literal 1/2 binary64) (/.f64 (*.f64 c a) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) a (*.f64 (*.f64 #s(literal -17 binary64) b) #s(literal 1/2 binary64))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (*.f64 (*.f64 #s(literal -17 binary64) b) #s(literal 1/2 binary64))) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(- (* -16 b) b)","(*.f64 #s(literal -17 binary64) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(fma.f64 (/.f64 (*.f64 c a) b) #s(literal 2 binary64) (*.f64 #s(literal -17 binary64) b))","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b))) a (*.f64 #s(literal -17 binary64) b))","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -17 binary64) b))","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (-.f64 (/.f64 (*.f64 c a) b) b) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(* -1 b)","(neg.f64 b)","(- (/ (* a c) b) b)","(-.f64 (/.f64 (*.f64 c a) b) b)","(/ b a)","(/.f64 b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/2 binary64) b) a)","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(+ (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","(fma.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c (*.f64 #s(literal 2 binary64) b))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(-.f64 b (*.f64 (*.f64 (*.f64 c c) a) a))","(* -1 (* a c))","(*.f64 (neg.f64 c) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (-.f64 (/.f64 (*.f64 c a) b) b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(* -1 a)","(neg.f64 a)","(* 2 a)","(*.f64 #s(literal 2 binary64) a)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -8 binary64) (/.f64 b a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))))","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 b (/.f64 b a) (*.f64 #s(literal -4 binary64) c)) a)","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -16 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 b a) #s(literal -16 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 b a) #s(literal -16 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(/ c b)","(/.f64 c b)","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(/ (* a c) b)","(/.f64 (*.f64 c a) b)","(* a (+ (* -1 (/ b a)) (/ c b)))","(*.f64 (-.f64 (/.f64 c b) (/.f64 b a)) a)","(* -1/2 (* a (pow c 2)))","(*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","(* -1 (* (pow a 2) (pow c 2)))","(*.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c)","(* (pow a 2) (+ (* -1 (pow c 2)) (* 2 (/ b (pow a 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) a) (/.f64 b a) (*.f64 (neg.f64 c) c)) (*.f64 a a))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(*.f64 (fma.f64 (neg.f64 c) c (/.f64 (/.f64 b a) a)) (*.f64 a a))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (/ b a)))","(*.f64 (fma.f64 #s(literal -2 binary64) (/.f64 c b) (/.f64 b a)) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 8 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 8 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (neg.f64 (fma.f64 b (/.f64 b a) (*.f64 #s(literal -4 binary64) c))) (neg.f64 a))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 #s(literal 16 binary64) (/.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (neg.f64 a))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal -16 binary64) b)) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (neg.f64 a))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (fma.f64 #s(literal -16 binary64) b (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 a))) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (neg.f64 a))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -1 (* a (+ (* -1 (/ c b)) (/ b a))))","(*.f64 (-.f64 (/.f64 b a) (/.f64 c b)) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) c (/.f64 (neg.f64 b) (*.f64 a a))) (neg.f64 a))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (-.f64 (/.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (neg.f64 a))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (neg.f64 a))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 a)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (neg.f64 a))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 a))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 a))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(*.f64 (fma.f64 (/.f64 c b) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) (neg.f64 a))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -8 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -8 binary64) a)) b))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (*.f64 #s(literal -16 binary64) b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -16 binary64)) b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -16 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(* -16 b)","(*.f64 #s(literal -16 binary64) b)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(/.f64 (-.f64 c (*.f64 b (/.f64 b a))) b)","(/ (+ (* -1 (pow b 2)) (* a c)) b)","(/.f64 (fma.f64 (neg.f64 b) b (*.f64 c a)) b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 #s(literal -1/4 binary64) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 c a) (*.f64 b b)) b)","(* -17/2 (/ b a))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a))) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a)))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -17 b)","(*.f64 #s(literal -17 binary64) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -17 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -17 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -17 binary64))) b)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(fma.f64 b (/.f64 (/.f64 c b) b) (/.f64 (neg.f64 b) a))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 (neg.f64 b) a))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) (/.f64 (neg.f64 b) a))","(* b (- (/ (* a c) (pow b 2)) 1))","(*.f64 (fma.f64 a (/.f64 (/.f64 c b) b) #s(literal -1 binary64)) b)","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)) b)","(* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(*.f64 (-.f64 #s(literal 2 binary64) (*.f64 a (/.f64 (*.f64 (*.f64 c c) a) b))) b)","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 a (/.f64 (*.f64 (*.f64 c c) a) b))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -2 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (*.f64 c (/.f64 c (pow.f64 b #s(literal 4 binary64)))) (*.f64 a (/.f64 (/.f64 c b) b))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (*.f64 c (/.f64 c (pow.f64 b #s(literal 4 binary64)))) (*.f64 a (/.f64 (/.f64 c b) b))) #s(literal 1 binary64))) b)","(* -15/2 (/ b a))","(*.f64 #s(literal -15/2 binary64) (/.f64 b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(*.f64 (neg.f64 b) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)))))","(* -15 b)","(*.f64 #s(literal -15 binary64) b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64)))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (-.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 15 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (*.f64 c (/.f64 c (pow.f64 b #s(literal 4 binary64)))) (*.f64 a (/.f64 (/.f64 c b) b))))))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c))) (neg.f64 b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ 1 (* -1 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (neg.f64 a) (/.f64 (/.f64 c b) b) #s(literal 1 binary64)))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 c (/.f64 c b)) (/.f64 #s(literal -1 binary64) a)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 2)))","(*.f64 (neg.f64 b) (fma.f64 a (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal -2 binary64)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(*.f64 (neg.f64 b) (fma.f64 a (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal -1 binary64)))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b) (*.f64 c a))) (neg.f64 b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 c a (*.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64)) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b) (*.f64 c a))))) (neg.f64 b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (*.f64 c (/.f64 c (pow.f64 b #s(literal 4 binary64)))) (*.f64 a (/.f64 (/.f64 c b) b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (*.f64 c (/.f64 c (pow.f64 b #s(literal 4 binary64)))) (*.f64 a (/.f64 (/.f64 c b) b))) #s(literal 1 binary64))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -1 binary64)))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(fma.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64) (/.f64 c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64)))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64)))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -17 binary64) b))","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -17 binary64) b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal -2 binary64))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -8 binary64))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -8 binary64)))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (/.f64 #s(literal -8 binary64) c) (/.f64 b a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 b (/.f64 b c) (*.f64 #s(literal -4 binary64) a)) c)","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (/.f64 b c) #s(literal -16 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 b c) #s(literal -16 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b c) #s(literal -16 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))))) c)","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 (/.f64 b a) c)) c)","(* c (+ (* -1 (/ b c)) (/ a b)))","(*.f64 (-.f64 (/.f64 a b) (/.f64 b c)) c)","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 (/.f64 (/.f64 b a) c) c)) c) c)","(* (pow c 2) (+ (* -1 (pow a 2)) (* 2 (/ b (pow c 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 b c) c) #s(literal 2 binary64) (*.f64 (neg.f64 a) a)) c) c)","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(*.f64 (*.f64 (fma.f64 (neg.f64 a) a (/.f64 (/.f64 b c) c)) c) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) #s(literal -4 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -2 (/ a b)) (/ b c)))","(*.f64 (fma.f64 (/.f64 a b) #s(literal -2 binary64) (/.f64 b c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 8 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -8 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -8 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 b (/.f64 b c) (*.f64 #s(literal -4 binary64) a))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 b c) #s(literal 16 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal -16 binary64) b)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 (*.f64 #s(literal -16 binary64) b) (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64))) c)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (/.f64 b a) c) (/.f64 #s(literal 1 binary64) b)))","(* -1 (* c (+ (* -1 (/ a b)) (/ b c))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 b c) (/.f64 a b)))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 b c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (neg.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64))) c) b)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 a b) #s(literal 2 binary64) (/.f64 (neg.f64 b) c)))"]],"stop":[["iter limit",1],["node limit",1]],"time":262.72216796875,"type":"simplify"},{"count":[[22,260]],"inputs":[["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","(neg.f64 b)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","(fma.f64 (/.f64 c b) a (neg.f64 b))","(/.f64 c b)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(neg.f64 a)","(*.f64 #s(literal 2 binary64) a)","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)"]],"memory":[[1009152,20639600]],"outputs":[["#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","(/.f64 (-.f64 #s(literal -16 binary64) #s(approx 1/4 #s(literal -16 binary64))) #s(literal -16 binary64))","(-.f64 #s(literal -16 binary64) #s(approx 1/4 #s(literal -16 binary64)))","#s(approx 1/4 #s(literal -16 binary64))","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal 9 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)"]],"time":272.81591796875,"type":"rewrite"},{"compiler":[[8500,1144]],"memory":[[4531760,19837248]],"time":26.949951171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",57.4867028149283,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",44.12429476370122,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","next",39.7505486651865,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64))))) (*.f64 #s(literal 2 binary64) a))","fresh",57.41262319042413,"binary64"],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64)))) (*.f64 #s(literal 2 binary64) a))","fresh",55.236115915967424,"binary64"],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","next",54.98194289604985,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",47.3031404524971,"binary64"],["(/.f64 #s(approx (+ (+ (* (* (neg a) c) (* a c)) b) b) (*.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c)) (*.f64 #s(literal 2 binary64) a))","fresh",59.242160854163124,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (neg.f64 b) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b))))","fresh",55.19775242609989,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","fresh",54.96333314418193,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","fresh",54.98194289604985,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","done",45.81781571583095,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c) (neg.f64 b)))","fresh",44.70064988315518,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",45.80218568349853,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",42.62715031085084,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.786821110226846,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","fresh",57.97574269773444,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a)))","fresh",62.08209410839671,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","next",62.211561648578865,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","next",61.70624564155321,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a)))","fresh",56.70370385451556,"binary64"],["#s(approx 1/4 #s(literal -16 binary64))","fresh",61.501926081432266,"binary64"],["#s(literal 65536 binary64)","fresh",61.8138247956013,"binary64"],["#s(literal 9/2 binary64)","fresh",61.797123451424554,"binary64"],["#s(literal 1/8 binary64)","fresh",61.81110439853122,"binary64"],["#s(literal -1/2 binary64)","fresh",61.486388322634994,"binary64"],["#s(literal -4096 binary64)","next",61.52089381606562,"binary64"]],"compiler":[[15,11],[32,23],[23,18],[31,22],[32,23],[22,18],[25,19],[25,17],[31,23],[24,19],[24,19],[27,19],[31,21],[22,17],[22,17],[25,18],[32,21],[27,18],[20,14],[29,19],[24,17],[3,6],[1,4],[1,4],[1,4],[1,4],[1,4],[15,11],[32,23],[23,18],[31,22],[32,23],[22,18],[25,19],[25,17],[31,23],[24,19],[24,19],[31,21],[22,17],[25,18],[32,21],[27,18],[20,14],[29,19],[24,17],[3,6],[1,4],[1,4],[1,4],[1,4],[1,4]],"count":[[233,27]],"kept":[{"done":[0,0],"fresh":[9,6],"new":[219,19],"picked":[5,2]}],"memory":[[-5986496,19488304]],"min-error":[[7.039306677025872,"binary64"]],"time":23.17919921875,"type":"prune"},{"egraph":[[0,8054,210,0.074163124],[7,7108,220,0.021237678],[6,3350,220,0.030981313],[5,1256,220,0.01652601],[4,731,224,0.00547546],[3,461,230,0.004209905],[2,218,231,0.001792323],[1,110,233,0.00092283],[0,57,233,0.00059331],[0,42,233,0.000307454]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(literal -4096 binary64)","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","b","a","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b))","(*.f64 #s(literal -17 binary64) b)","#s(literal -17 binary64)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","(fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a))","#s(literal -1/2 binary64)","(*.f64 c c)","c","(/.f64 (/.f64 b a) a)","(/.f64 b a)","b","a"]],"locations":[["(*.f64 c c)","cost-diff",0],["(fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a))","cost-diff",0],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","cost-diff",0],["(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","cost-diff",2],["(*.f64 #s(literal 2 binary64) a)","cost-diff",0],["(*.f64 #s(literal -17 binary64) b)","cost-diff",0],["#s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b))","cost-diff",0],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[-273072,33495072]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) b))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(literal -4096 binary64)","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","b","a","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b))","(*.f64 #s(literal -17 binary64) b)","#s(literal -17 binary64)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) c (/.f64 b a)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) c (/.f64 b a))","(fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a))","(fma.f64 (*.f64 c c) #s(literal -1/2 binary64) (/.f64 (/.f64 b a) a))","#s(literal -1/2 binary64)","(*.f64 c c)","c","(/.f64 (/.f64 b a) a)","(/.f64 b a)","b","a"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":280.782958984375,"type":"simplify"},{"compiler":[[188,39]],"locations":[["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","accuracy",0.0],["(/.f64 (/.f64 b a) a)","accuracy",0.06640625],["(fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a))","accuracy",1.9999917433208234],["(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","accuracy",13.721192865890096],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(*.f64 #s(literal -17 binary64) b)","accuracy",0.0],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","accuracy",0.18359375],["#s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b))","accuracy",41.90430627800764],["(/.f64 b a)","accuracy",0.0],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","accuracy",28.656368993267726],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.1231409090810107],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","accuracy",13.112651304621604],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","accuracy",25.411130893416303],["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","accuracy",34.60888424352628]],"memory":[[3481488,37795648]],"mixsample":[[0.159423828125,"ival-sub",1200],[0.006103515625,"ival-sub",4800],[13.29248046875,"ival-div",0],[4.6591796875,"adjust",800],[0.128173828125,"ival-mult",1200],[0.041015625,"ival-sub",1600],[0.0849609375,"adjust",4000],[0.10302734375,"ival-assert",0],[5.417724609375,"ival-sub",0],[0.32080078125,"ival-sqrt",1200],[0.013916015625,"ival-sqrt",4800],[1.89697265625,"ival-sqrt",0],[0.14453125,"ival-sub",400],[0.025390625,"ival-sub",4400],[4.047119140625,"ival-add",0],[0.174560546875,"ival-mult",800],[0.2177734375,"ival-sub",800],[0.01513671875,"ival-mult",1600],[0.391845703125,"adjust",2800],[0.016845703125,"ival-sub",4000],[0.19091796875,"ival-sqrt",400],[0.172119140625,"ival-sqrt",2000],[0.1201171875,"ival-sub",2000],[0.361572265625,"ival-sqrt",800],[0.012939453125,"ival-sqrt",4000],[0.041748046875,"ival-sqrt",4400],[1.659912109375,"adjust",2000],[0.072265625,"ival-sub",2400],[20.937255859375,"ival-mult",0],[0.161376953125,"ival-mult",400],[0.075927734375,"ival-sqrt",1600],[0.215087890625,"ival-true",0],[0.134033203125,"ival-sqrt",2400],[0.856689453125,"exact",0],[2.502197265625,"ival-neg",0]],"outcomes":[[19.222900390625,1,"valid",45],[17.0615234375,2,"valid",30],[2.95703125,3,"valid",4],[2.048095703125,4,"valid",2],[43.916748046875,0,"valid",175]],"time":108.805908203125,"type":"localize"},{"count":[[16,175]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(neg.f64 b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b))","(*.f64 #s(literal -17 binary64) b)","(*.f64 #s(literal 2 binary64) a)","(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","(fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a))","(*.f64 c c)","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(/.f64 (/.f64 b a) a)"]],"memory":[[-3908560,13432720]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(- (* -16 b) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(* 2 a)","(/ b (pow a 2))","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) (pow a 2))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* -1/2 (pow c 2))","(+ (* -1/2 (pow c 2)) (/ b (pow a 2)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(* -17 b)","(- (pow b 2) (* 4 (* a c)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* -17/2 (/ b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (pow c 2) b)) (/ 1 (pow a 2))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -15 b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (- (* 1/2 (/ (pow c 2) b)) (/ 1 (pow a 2)))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(pow c 2)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* (pow c 2) (- (/ b (* (pow a 2) (pow c 2))) 1/2))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"series":[[2.10302734375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","c","-inf"],[3.448974609375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","c","inf"],[2.0849609375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","c","0"],[3.537109375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","b","-inf"],[3.2861328125,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","b","inf"],[2.5771484375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","b","0"],[3.1220703125,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","a","-inf"],[4.010009765625,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","a","inf"],[2.505859375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/ b a) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* -17 b) (* 2 a) (* (+ (* -1/2 (* c c)) (/ (/ b a) a)) a) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (* -1/2 (* c c)) (/ (/ b a) a)) (* c c) (- (* b b) (* 4 (* a c))) (/ (/ b a) a))","a","0"]],"time":30.2919921875,"type":"series"},{"count":[[175,174]],"egraph":[[0,8835,4240,0.108185036],[2,7698,4473,0.029892434],[1,2377,4510,0.025874548],[0,764,4585,0.008478977]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(- (* -16 b) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(* 2 a)","(/ b (pow a 2))","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) (pow a 2))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* -1/2 (pow c 2))","(+ (* -1/2 (pow c 2)) (/ b (pow a 2)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(* -17 b)","(- (pow b 2) (* 4 (* a c)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* -17/2 (/ b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (pow c 2) b)) (/ 1 (pow a 2))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -15 b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (- (* 1/2 (/ (pow c 2) b)) (/ 1 (pow a 2)))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(pow c 2)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* (pow c 2) (- (/ b (* (pow a 2) (pow c 2))) 1/2))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"memory":[[9802592,60129888]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 c b) a (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(/ b a)","(/.f64 b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/2 binary64) b) a)","(* 1/2 (/ (- (* -16 b) b) a))","(*.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/.f64 (fma.f64 (*.f64 #s(literal -17 binary64) b) #s(literal 1/2 binary64) (/.f64 (*.f64 c a) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) a (*.f64 (*.f64 #s(literal -17 binary64) b) #s(literal 1/2 binary64))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (*.f64 (*.f64 #s(literal -17 binary64) b) #s(literal 1/2 binary64))) a)","(- (* -16 b) b)","(*.f64 #s(literal -17 binary64) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(fma.f64 (/.f64 (*.f64 c a) b) #s(literal 2 binary64) (*.f64 #s(literal -17 binary64) b))","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b))) a (*.f64 #s(literal -17 binary64) b))","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -17 binary64) b))","(* 2 a)","(*.f64 #s(literal 2 binary64) a)","(/ b (pow a 2))","(/.f64 (/.f64 b a) a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) (pow a 2))","(/.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/2 binary64) b) a) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -1/2 (* a (pow c 2)))","(*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 #s(literal -8 binary64) (/.f64 b a))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -8 binary64) (/.f64 b a) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))))))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -16 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 b a) #s(literal -16 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (-.f64 (*.f64 (/.f64 b a) #s(literal -16 binary64)) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -1/2 (pow c 2))","(*.f64 #s(literal -1/2 binary64) (*.f64 c c))","(+ (* -1/2 (pow c 2)) (/ b (pow a 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a))","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) (neg.f64 a)) b) (neg.f64 a))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/2 binary64) c) c (/.f64 (neg.f64 b) (*.f64 a a))))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 8 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 8 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal 16 binary64) (/.f64 b a))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal -16 binary64) b)) (neg.f64 a))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -16 binary64) b (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) (neg.f64 a))) (neg.f64 a))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -8 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -8 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (*.f64 #s(literal -16 binary64) b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -16 binary64)) b))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -16 binary64)) b))","(* -17 b)","(*.f64 #s(literal -17 binary64) b)","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 (neg.f64 b) a))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) (/.f64 (neg.f64 b) a))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 (/.f64 c b) #s(literal 2 binary64)) (/.f64 a b) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 c b) #s(literal 2 binary64)) (/.f64 a b) #s(literal -2 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) b)","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)) b)","(* -17/2 (/ b a))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a))) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a)))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal 2 binary64)) (/.f64 c b) #s(literal -17 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a b) #s(literal 2 binary64)) (/.f64 c b) #s(literal -17 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -17 binary64))) b)","(* b (+ (* -1/2 (/ (pow c 2) b)) (/ 1 (pow a 2))))","(*.f64 (fma.f64 (*.f64 c (/.f64 c b)) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1 binary64) a) a)) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c))) (neg.f64 b))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(*.f64 #s(literal -2 binary64) (/.f64 (fma.f64 c a (*.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 c a (*.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64)) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 c a (*.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b)))))) (neg.f64 b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 c (/.f64 c b)) (/.f64 #s(literal -1 binary64) a)))","(* -15/2 (/ b a))","(*.f64 #s(literal -15/2 binary64) (/.f64 b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(*.f64 (neg.f64 b) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)))))","(* -15 b)","(*.f64 #s(literal -15 binary64) b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64)))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 15 binary64))))","(* -1 (* b (- (* 1/2 (/ (pow c 2) b)) (/ 1 (pow a 2)))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 c (/.f64 c b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) (*.f64 a a))))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b)) b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal -2 binary64))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(fma.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64) (/.f64 c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64)))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 (*.f64 #s(literal -17 binary64) b) a) #s(literal 1/2 binary64)))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -17 binary64) b))","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -17 binary64) b))","(pow c 2)","(*.f64 c c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64)))) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 (/.f64 (/.f64 b a) c) c)) c) c)","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -8 binary64))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -8 binary64)))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (/.f64 #s(literal -8 binary64) c) (/.f64 b a) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))))) c)","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (/.f64 b c) #s(literal -16 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 b c) #s(literal -16 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (-.f64 (*.f64 (/.f64 b c) #s(literal -16 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* (pow c 2) (- (/ b (* (pow a 2) (pow c 2))) 1/2))","(*.f64 (*.f64 (-.f64 (/.f64 b (*.f64 (*.f64 (*.f64 c c) a) a)) #s(literal 1/2 binary64)) c) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) (neg.f64 c))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) (neg.f64 c)) b) (neg.f64 c))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 8 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -8 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -8 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 b c) #s(literal 16 binary64))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal -16 binary64) b)) (neg.f64 c))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -16 binary64) b (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) (neg.f64 c))) (neg.f64 c))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":307.244140625,"type":"simplify"},{"count":[[16,112]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(neg.f64 b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b))","(*.f64 #s(literal -17 binary64) b)","(*.f64 #s(literal 2 binary64) a)","(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","(fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a))","(*.f64 c c)","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(/.f64 (/.f64 b a) a)"]],"memory":[[-8755968,18359248]],"outputs":[["(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) #s(literal -4 binary64))","(-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c))))","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1/16 binary64)","#s(literal 1/64 binary64)","#s(literal -1/4 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal -1/8 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/2 binary64)","(sqrt.f64 #s(approx (neg c) (neg.f64 c)))","#s(approx (neg c) #s(literal -4 binary64))","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1/16 binary64)","#s(literal 1/64 binary64)","#s(literal -1/4 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal -1/8 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/2 binary64)","(/.f64 #s(approx (neg c) (*.f64 #s(literal -17 binary64) #s(literal -4 binary64))) #s(literal -4 binary64))","#s(approx (neg c) (*.f64 #s(literal -17 binary64) #s(literal -4 binary64)))","(*.f64 #s(literal -17 binary64) #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) #s(literal -17 binary64))","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1/16 binary64)","#s(literal 1/64 binary64)","#s(literal -1/4 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal -1/8 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/2 binary64)","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal -4 binary64))","(+.f64 #s(literal -4 binary64) (neg.f64 c))","(+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c)))","(-.f64 #s(literal -4 binary64) c)","(-.f64 (neg.f64 c) #s(literal -4 binary64))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 #s(literal -4 binary64) (neg.f64 c))","(*.f64 c #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) c)","(*.f64 (neg.f64 c) #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) (neg.f64 c))","#s(approx (neg c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal -4 binary64))","(+.f64 #s(literal -4 binary64) (neg.f64 c))","(+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c)))","(-.f64 #s(literal -4 binary64) c)","(-.f64 (neg.f64 c) #s(literal -4 binary64))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 #s(literal -4 binary64) (neg.f64 c))","(*.f64 c #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) c)","(*.f64 (neg.f64 c) #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) (neg.f64 c))","(*.f64 c c)","(*.f64 (*.f64 c c) (*.f64 c c))","(*.f64 (*.f64 c c) c)","(*.f64 c (*.f64 c c))","(*.f64 (exp.f64 (log.f64 c)) (exp.f64 (log.f64 c)))","(exp.f64 (*.f64 (log.f64 c) #s(literal -4 binary64)))","(exp.f64 (fma.f64 #s(literal -4 binary64) (log.f64 c) (*.f64 (log.f64 c) #s(literal -4 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 c) #s(literal -4 binary64)) #s(literal -4 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 c c)) #s(literal -4 binary64)))","(pow.f64 c #s(literal -4 binary64))","(pow.f64 (*.f64 c c) #s(literal -4 binary64))","(pow.f64 (exp.f64 (log.f64 c)) #s(literal -4 binary64))","#s(approx (neg c) (neg.f64 c))","#s(literal -4 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/4 binary64)","#s(literal 1/16 binary64)","#s(literal 1/64 binary64)","#s(literal -1/4 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal -1/8 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/2 binary64)"]],"time":407.2109375,"type":"rewrite"},{"compiler":[[8672,1119]],"memory":[[-4308768,19881424]],"time":37.48486328125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","next",44.12429476370122,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","done",39.7505486651865,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",59.527661555030924,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64))))) (*.f64 #s(literal 2 binary64) a))","fresh",57.41262319042413,"binary64"],["(/.f64 (-.f64 #s(literal 1/64 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",50.08841752087769,"binary64"],["(/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.22633506040167,"binary64"],["(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.16584106651611,"binary64"],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64)))) (*.f64 #s(literal 2 binary64) a))","fresh",55.236115915967424,"binary64"],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","done",54.98194289604985,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","next",47.3031404524971,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (fma.f64 c a (*.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b))) b))) (*.f64 #s(literal 2 binary64) a))","fresh",49.236467415670674,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (neg.f64 b) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b))))","fresh",55.19775242609989,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","fresh",54.96333314418193,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","next",54.98194289604985,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","done",45.81781571583095,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c) (neg.f64 b)))","fresh",44.70064988315518,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",45.80218568349853,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",42.62715031085084,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.786821110226846,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","fresh",57.97574269773444,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","done",62.211561648578865,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","fresh",57.761462612400834,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","fresh",62.40687342829453,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c))))","fresh",60.30711751106743,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","fresh",57.60190277671884,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","fresh",60.581892038848615,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(approx (+ (* -1/2 (* c c)) (/ (/ b a) a)) (/.f64 (/.f64 b a) a)) a))","fresh",61.81173453763635,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","fresh",62.57307799443775,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","next",60.57454981330815,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","fresh",62.57124175435912,"binary64"],["#s(approx (neg c) #s(literal -4 binary64))","fresh",61.493144279545604,"binary64"],["#s(literal 65536 binary64)","fresh",61.8138247956013,"binary64"],["#s(literal 9/2 binary64)","fresh",61.797123451424554,"binary64"],["#s(literal 1/8 binary64)","fresh",61.81110439853122,"binary64"],["#s(literal -1/2 binary64)","next",61.486388322634994,"binary64"],["#s(literal -4096 binary64)","done",61.52089381606562,"binary64"]],"compiler":[[32,23],[23,18],[13,12],[31,22],[22,18],[22,18],[12,12],[32,23],[22,18],[25,19],[36,24],[31,23],[24,19],[24,19],[27,19],[31,21],[22,17],[22,17],[25,18],[32,21],[20,14],[22,15],[20,15],[26,19],[22,15],[21,16],[36,23],[20,15],[20,15],[19,14],[4,6],[1,4],[1,4],[1,4],[1,4],[1,4],[32,23],[13,12],[31,22],[22,18],[22,18],[12,12],[32,23],[25,19],[36,24],[31,23],[24,19],[24,19],[31,21],[22,17],[25,18],[32,21],[22,15],[20,15],[26,19],[22,15],[21,16],[36,23],[20,15],[20,15],[19,14],[4,6],[1,4],[1,4],[1,4],[1,4]],"count":[[252,36]],"kept":[{"done":[2,2],"fresh":[20,15],"new":[225,15],"picked":[5,4]}],"memory":[[6658704,23210448]],"min-error":[[7.033563009085063,"binary64"]],"time":30.6640625,"type":"prune"},{"egraph":[[0,8040,262,0.044226604],[6,7068,276,0.019816647],[5,5243,278,0.023958531],[4,3076,278,0.022809809],[3,1231,296,0.014394109],[2,372,297,0.005518167],[1,145,298,0.001541251],[0,72,298,0.000826851],[0,51,302,0.000643284]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64))","(*.f64 (/.f64 (/.f64 c b) b) a)","(/.f64 (/.f64 c b) b)","(/.f64 c b)","c","a","#s(literal -4 binary64)","#s(literal 1 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","(neg.f64 (neg.f64 c))","(neg.f64 c)","c","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","#s(literal -17/2 binary64)","(/.f64 b a)","b","a","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(*.f64 (/.f64 a b) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","cost-diff",0],["#s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","cost-diff",0],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","cost-diff",0],["(neg.f64 c)","cost-diff",0],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","cost-diff",0],["(neg.f64 (neg.f64 c))","cost-diff",2],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b)","cost-diff",4]],"memory":[[-3013856,20609328]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 c a) b) b))) b))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 c a) b) b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 c a) b) b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 c a) b) b))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 (fma.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 c a) b) b)","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(fma.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 c a) b)","(fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -4 binary64) (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 1 binary64))","(*.f64 (/.f64 (/.f64 c b) b) a)","(/.f64 (/.f64 c b) b)","(/.f64 c b)","c","a","#s(literal -4 binary64)","#s(literal 1 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) c)","(neg.f64 (neg.f64 c))","c","(neg.f64 c)","c","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 b a) #s(literal -17/2 binary64)))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","(*.f64 (/.f64 b a) #s(literal -17/2 binary64))","#s(literal -17/2 binary64)","(/.f64 b a)","b","a","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","#s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 a b))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":201.0419921875,"type":"simplify"},{"compiler":[[221,45]],"locations":[["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","accuracy",3.1231409090810107],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","accuracy",5.5427136274834625],["#s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","accuracy",42.53672756542951],["(/.f64 b a)","accuracy",0.0],["(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","accuracy",0.16796875],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","accuracy",38.40800526119043],["(neg.f64 (neg.f64 c))","accuracy",0.0],["(neg.f64 c)","accuracy",0.0],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","accuracy",61.21873046199711],["(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","accuracy",5.708748538441119],["(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b)","accuracy",6.58204362622244],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","accuracy",13.112651304621604],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","accuracy",25.411130893416303]],"memory":[[622192,42026960]],"mixsample":[[0.7216796875,"ival-sub",1200],[13.671875,"ival-div",0],[4.3056640625,"adjust",800],[0.00390625,"ival-sub",4800],[0.109130859375,"ival-mult",1200],[0.0400390625,"ival-sub",1600],[0.096923828125,"ival-assert",0],[4.88671875,"ival-sub",0],[0.31103515625,"ival-sqrt",1200],[0.012939453125,"ival-sqrt",4800],[1.883544921875,"ival-sqrt",0],[0.094970703125,"ival-sub",400],[0.016357421875,"ival-sub",4400],[4.0849609375,"ival-add",0],[0.153076171875,"ival-mult",800],[0.181640625,"ival-sub",800],[0.01513671875,"ival-mult",1600],[0.199951171875,"adjust",2800],[0.006103515625,"ival-sub",4000],[0.166748046875,"ival-sqrt",400],[0.149658203125,"ival-sqrt",2000],[0.34326171875,"ival-sqrt",800],[0.080810546875,"ival-sub",2000],[0.012939453125,"ival-sqrt",4000],[0.035888671875,"ival-sqrt",4400],[1.55712890625,"adjust",2000],[0.067626953125,"ival-sub",2400],[24.387939453125,"ival-mult",0],[0.202880859375,"ival-mult",400],[0.075927734375,"ival-sqrt",1600],[0.17333984375,"ival-sqrt",2400],[0.234375,"ival-true",0],[0.97216796875,"exact",0],[4.19287109375,"ival-neg",0]],"outcomes":[[19.55712890625,1,"valid",43],[17.84814453125,2,"valid",30],[3.434326171875,3,"valid",5],[50.11181640625,0,"valid",178]],"time":117.442138671875,"type":"localize"},{"count":[[17,149]],"inputs":[["(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(neg.f64 b)","(neg.f64 (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","(neg.f64 c)","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","(/.f64 b a)","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 #s(literal 2 binary64) a)"]],"memory":[[-3172064,16295664]],"outputs":[["b","(+ b (* -4 (/ (* a c) b)))","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -17/2 (/ b a))","(* -2 (/ (* a c) b))","(* -2 (/ a b))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 2 a)","(* -4 (/ (* a c) b))","(* a (+ (* -4 (/ c b)) (/ b a)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -1 (* a (+ (* -1 (/ b a)) (* 4 (/ c b)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(/ (+ (* -4 (* a c)) (pow b 2)) b)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 1)))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","c","(* -1 c)","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -4 (/ a b)) (/ b c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* -1 (/ b c)) (* 4 (/ a b)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"series":[[24.988037109375,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","c","-inf"],[4.26806640625,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","c","inf"],[3.248046875,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","c","0"],[6.1708984375,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","b","-inf"],[4.518798828125,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","b","inf"],[5.791015625,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","b","0"],[3.906005859375,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","a","-inf"],[3.492919921875,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","a","inf"],[3.56396484375,"((* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (neg (neg c)) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg c) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* -17/2 (/ b a)) (/ b a) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (sqrt (- (* b b) (* 4 (* a c)))) (* (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) b) (* 2 a))","a","0"]],"time":63.31787109375,"type":"series"},{"count":[[149,147]],"egraph":[[0,8217,3509,0.103020758],[2,7099,3697,0.028187435],[1,2170,3728,0.02110833],[0,681,3785,0.007066996]],"inputs":[["b","(+ b (* -4 (/ (* a c) b)))","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -17/2 (/ b a))","(* -2 (/ (* a c) b))","(* -2 (/ a b))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 2 a)","(* -4 (/ (* a c) b))","(* a (+ (* -4 (/ c b)) (/ b a)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -1 (* a (+ (* -1 (/ b a)) (* 4 (/ c b)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(/ (+ (* -4 (* a c)) (pow b 2)) b)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 1)))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","c","(* -1 c)","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -4 (/ a b)) (/ b c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* -1 (/ b c)) (* 4 (/ a b)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"memory":[[9670800,55333872]],"method":["egg-herbie"],"outputs":[["b","(+ b (* -4 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 c b) b)","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 c b) a (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","(/ b a)","(/.f64 b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/2 binary64) b) a)","(* 1/2 (/ (- (* -16 b) b) a))","(*.f64 (/.f64 (*.f64 b #s(literal -17 binary64)) a) #s(literal 1/2 binary64))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/.f64 (fma.f64 (*.f64 b #s(literal -17 binary64)) #s(literal 1/2 binary64) (/.f64 (*.f64 a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) a (*.f64 (*.f64 b #s(literal -17 binary64)) #s(literal 1/2 binary64))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (*.f64 (*.f64 b #s(literal -17 binary64)) #s(literal 1/2 binary64))) a)","(* -17/2 (/ b a))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* -2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(* 2 a)","(*.f64 #s(literal 2 binary64) a)","(* -4 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -4 binary64)) c)","(* a (+ (* -4 (/ c b)) (/ b a)))","(*.f64 (fma.f64 (/.f64 c b) #s(literal -4 binary64) (/.f64 b a)) a)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))) a)","(* -1/2 (* a (pow c 2)))","(*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a)","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 #s(literal -8 binary64) (/.f64 b a))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -8 binary64) (/.f64 b a) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* a (+ (* -1 (/ b a)) (* 4 (/ c b)))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 c b) #s(literal 4 binary64) (/.f64 (neg.f64 b) a)))","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) (neg.f64 a)) b) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/2 binary64) c) c (/.f64 (neg.f64 b) (*.f64 a a))))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -8 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 8 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 8 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 (neg.f64 b) b) a)))","(/ (+ (* -4 (* a c)) (pow b 2)) b)","(/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b)) b)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) #s(literal -1 binary64)) b))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b))","(* -1 b)","(neg.f64 b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -8 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -8 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(* b (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 a c) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 (neg.f64 b) a))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) (/.f64 (neg.f64 b) a))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 a c) b) b) #s(literal 2 binary64) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b) b) #s(literal -2 binary64) #s(literal 2 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64))) b)","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a))) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 17/2 binary64) a)))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 a c) b) b) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 a c) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 1)))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 a c) b) b) #s(literal 4 binary64) #s(literal -1 binary64)) (neg.f64 b))","(* -1 (/ c b))","(/.f64 c (neg.f64 b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c))) (neg.f64 b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(*.f64 #s(literal -2 binary64) (/.f64 (fma.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b) (*.f64 a c)) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b) (*.f64 a c)))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64)) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b) (*.f64 a c))))) (neg.f64 b))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 c (/.f64 c b)) (/.f64 #s(literal -1 binary64) a)) (neg.f64 b))","(* -15/2 (/ b a))","(*.f64 #s(literal -15/2 binary64) (/.f64 b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(*.f64 (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)) (neg.f64 b))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b))) (neg.f64 b))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)))) (neg.f64 b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 a c) b) b) #s(literal -2 binary64) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) (neg.f64 b))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","c","(* -1 c)","(neg.f64 c)","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(fma.f64 (/.f64 (*.f64 b #s(literal -17 binary64)) a) #s(literal 1/2 binary64) (/.f64 c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 (*.f64 b #s(literal -17 binary64)) a) #s(literal 1/2 binary64)))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 (*.f64 b #s(literal -17 binary64)) a) #s(literal 1/2 binary64)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 a (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) (/.f64 a b)) b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal -2 binary64))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -4 (/ a b)) (/ b c)))","(*.f64 (fma.f64 (/.f64 a b) #s(literal -4 binary64) (/.f64 b c)) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b c) a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b c) a)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b c) a)) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64)))) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))))) c)","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 (/.f64 (/.f64 b c) a) c)) c) c)","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -8 binary64))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -8 binary64)))) c)","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (/.f64 #s(literal -8 binary64) c) (/.f64 b a) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (+ (* -1 (/ b c)) (* 4 (/ a b)))))","(*.f64 (fma.f64 (/.f64 a b) #s(literal 4 binary64) (/.f64 (neg.f64 b) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (-.f64 (*.f64 (/.f64 (/.f64 b c) a) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(neg.f64 (*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))) (neg.f64 c))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) (neg.f64 c)) b) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(*.f64 (-.f64 (*.f64 (/.f64 (/.f64 b c) a) #s(literal 8 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(neg.f64 (*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -8 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -8 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 (neg.f64 b) b) c)) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":278.322021484375,"type":"simplify"},{"count":[[17,157]],"inputs":[["(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(neg.f64 b)","(neg.f64 (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","(neg.f64 c)","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","(*.f64 #s(literal -17/2 binary64) (/.f64 b a))","(/.f64 b a)","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 #s(literal 2 binary64) a)"]],"memory":[[-8569888,18516880]],"outputs":[["#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx 5 #s(literal -4 binary64)))) #s(literal -4 binary64))","(-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx 5 #s(literal -4 binary64))))","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(approx 5 #s(literal -4 binary64))","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(approx 5 #s(literal -4 binary64))","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","(/.f64 #s(approx 5 #s(literal -4 binary64)) #s(literal -4 binary64))","#s(approx 5 #s(literal -4 binary64))","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","(sqrt.f64 #s(approx 5 #s(literal -4 binary64)))","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal -4 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -17/2 binary64)","#s(literal -2 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 17/2 binary64)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)"]],"time":282.277099609375,"type":"rewrite"},{"compiler":[[6881,1018]],"memory":[[7328000,15031008]],"time":21.223876953125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","done",44.12429476370122,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(approx (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -4 binary64)) c)) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",45.99968612233442,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal 65536 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",55.86147627684358,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",62.70788576522925,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","done",39.7505486651865,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4096 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","fresh",62.72480096234714,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",59.527661555030924,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64))))) (*.f64 #s(literal 2 binary64) a))","fresh",57.41262319042413,"binary64"],["(/.f64 (-.f64 #s(literal 1/64 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",50.08841752087769,"binary64"],["(/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.22633506040167,"binary64"],["(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",61.16584106651611,"binary64"],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64)))) (*.f64 #s(literal 2 binary64) a))","fresh",55.236115915967424,"binary64"],["(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","done",54.98194289604985,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","done",47.3031404524971,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (fma.f64 c a (*.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b))) b))) (*.f64 #s(literal 2 binary64) a))","fresh",49.236467415670674,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)) (neg.f64 b)))","fresh",55.19775242609989,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","fresh",54.96333314418193,"binary64"],["#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","done",54.98194289604985,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","done",45.81781571583095,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c) (neg.f64 b)))","fresh",44.70064988315518,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",45.80218568349853,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",42.62715031085084,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.786821110226846,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","fresh",57.97574269773444,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","done",62.211561648578865,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","fresh",57.761462612400834,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","fresh",62.40687342829453,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c))))","fresh",60.30711751106743,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","fresh",57.60190277671884,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","fresh",60.581892038848615,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(approx (+ (* -1/2 (* c c)) (/ (/ b a) a)) (/.f64 (/.f64 b a) a)) a))","fresh",61.81173453763635,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","fresh",62.57307799443775,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","done",60.57454981330815,"binary64"],["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","fresh",62.57124175435912,"binary64"],["#s(approx (neg c) #s(literal -4 binary64))","fresh",61.493144279545604,"binary64"],["#s(literal 65536 binary64)","fresh",61.8138247956013,"binary64"],["#s(literal 9/2 binary64)","fresh",61.797123451424554,"binary64"],["#s(literal 1/8 binary64)","fresh",61.81110439853122,"binary64"],["#s(literal -1/2 binary64)","done",61.486388322634994,"binary64"],["#s(literal -4096 binary64)","done",61.52089381606562,"binary64"]],"compiler":[[1147,237],[32,23],[41,29],[21,17],[21,17],[23,18],[21,17],[13,12],[31,22],[22,18],[22,18],[12,12],[32,23],[22,18],[25,19],[36,24],[31,23],[24,19],[24,19],[27,19],[31,21],[22,17],[22,17],[25,18],[32,21],[20,14],[22,15],[20,15],[26,19],[22,15],[21,16],[36,23],[20,15],[20,15],[19,14],[4,6],[1,4],[1,4],[1,4],[1,4],[1,4]],"count":[[204,40]],"kept":[{"done":[6,6],"fresh":[25,24],"new":[168,5],"picked":[5,5]}],"memory":[[-3478304,22618080]],"min-error":[[7.029656759085063,"binary64"]],"time":30.532958984375,"type":"prune"},{"accuracy":[10.821237353423134],"baseline":[29.95382500309717],"branch":[["a",27.091300197172504,3,"binary64"],["b",10.821237353423134,3,"binary64"],["c",29.95382500309716,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",15.933533750716988,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[54,3]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c))))","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(approx (+ (* -1/2 (* c c)) (/ (/ b a) a)) (/.f64 (/.f64 b a) a)) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (+ (* (* (neg a) c) (* a c)) b) b) (*.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4096 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal 65536 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","(/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal 1/64 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (neg.f64 b) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b))))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c) (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal 15 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(approx (* (+ (* (* (/ (/ c b) b) a) -4) 1) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -4 binary64)) c)) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (fma.f64 c a (*.f64 a (/.f64 (/.f64 (*.f64 (*.f64 c c) a) b) b))) b))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[1871824,28065184]],"oracle":[64.0],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":101.010009765625,"times":[[57.324951171875,"a"],[12.6669921875,"b"],[12.744873046875,"c"],[14.59912109375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[11.91429386754651],"baseline":[39.7505486651865],"branch":[["b",11.91429386754651,3,"binary64"]],"compiler":[[1,3]],"count":[[46,3]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c))))","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(approx (+ (* -1/2 (* c c)) (/ (/ b a) a)) (/.f64 (/.f64 b a) a)) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (+ (* (* (neg a) c) (* a c)) b) b) (*.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4096 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal 65536 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","(/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal 1/64 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (neg.f64 b) (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b))))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (+.f64 (/.f64 #s(literal 15/2 binary64) a) (/.f64 (/.f64 c b) b)) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (*.f64 c (/.f64 c b)) (/.f64 a b) c) (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))"]],"memory":[[200096,8277664]],"oracle":[64.0],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":13.85595703125,"times":[[10.925048828125,"b"]],"type":"regimes"},{"accuracy":[17.997683736252],"baseline":[42.62715031085084],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",28.05998576858232,5,"binary64"],["b",17.997683736252,3,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[40,3]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c))))","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(approx (+ (* -1/2 (* c c)) (/ (/ b a) a)) (/.f64 (/.f64 b a) a)) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (+ (* (* (neg a) c) (* a c)) b) b) (*.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4096 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal 65536 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))","(/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal 1/64 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-3910672,12235792]],"oracle":[64.0],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":21.60400390625,"times":[[9.298828125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[9.6708984375,"b"]],"type":"regimes"},{"accuracy":[25.7431902690802],"baseline":[42.62715031085084],"branch":[["b",25.7431902690802,2,"binary64"]],"compiler":[[1,3]],"count":[[38,2]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c))))","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(approx (+ (* -1/2 (* c c)) (/ (/ b a) a)) (/.f64 (/.f64 b a) a)) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 c c)) a (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","(/.f64 (-.f64 #s(literal -4 binary64) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (+ (* (* (neg a) c) (* a c)) b) b) (*.f64 (*.f64 (*.f64 (neg.f64 a) a) c) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (neg c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4096 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal 65536 binary64) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c c) (/.f64 (/.f64 b a) a)) a))"]],"memory":[[-2311232,7161680]],"oracle":[64.0],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":13.693115234375,"times":[[9.615966796875,"b"]],"type":"regimes"},{"accuracy":[25.96282434496851],"baseline":[42.62715031085084],"branch":[["b",25.96282434496851,2,"binary64"]],"compiler":[[1,3]],"count":[[23,2]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 c c) a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -17/2 binary64) (/.f64 b a)))","#s(approx (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 #s(literal -15/2 binary64) (/.f64 b a)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+.f64 #s(literal -4 binary64) (*.f64 (neg.f64 (*.f64 c c)) (neg.f64 c))))","(/.f64 #s(approx (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -17 binary64) b)) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[4978112,4978112]],"oracle":[63.3451946724382],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":9.613037109375,"times":[[7.76806640625,"b"]],"type":"regimes"},{"accuracy":[41.284301601120575],"baseline":[42.62715031085084],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",42.6271503108509,1,"binary64"],["c",42.627150310850894,1,"binary64"],["a",42.62715031085085,1,"binary64"],["b",41.284301601120575,2,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[17,2]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]],"memory":[[-3489632,12754080]],"oracle":[63.31989776622188],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))"]],"repr":["binary64"],"time":20.717041015625,"times":[[4.580078125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[4.716796875,"c"],[4.7119140625,"a"],[4.761962890625,"b"]],"type":"regimes"},{"accuracy":[56.58593407390575],"baseline":[57.60190277671884],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",57.601902776718816,1,"binary64"],["c",57.60190277671884,1,"binary64"],["a",57.60190277671882,1,"binary64"],["b",56.58593407390575,2,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[16,2]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) #s(approx (/ (+ (* (/ c b) a) (neg b)) a) (/.f64 c b)))"]],"memory":[[4319312,12594352]],"oracle":[63.28625169623152],"outputs":[["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))"]],"repr":["binary64"],"time":21.894775390625,"times":[[4.60302734375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[5.659912109375,"c"],[4.697998046875,"a"],[4.739013671875,"b"]],"type":"regimes"},{"accuracy":[60.57454981330814],"baseline":[60.57454981330815],"branch":[["c",60.57454981330815,1,"binary64"],["a",60.57454981330814,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",60.57454981330818,1,"binary64"],["b",60.57454981330814,1,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[12,1]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c #s(literal -4 binary64)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) #s(literal -4 binary64)))"]],"memory":[[-6652000,10687568]],"oracle":[63.10612346718039],"outputs":[["#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))"]],"repr":["binary64"],"time":15.7412109375,"times":[[3.546875,"c"],[3.427978515625,"a"],[3.379150390625,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[3.718994140625,"b"]],"type":"regimes"},{"accuracy":[61.48638832263493],"baseline":[61.486388322634994],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",61.48638832263493,1,"binary64"],["c",61.48638832263497,1,"binary64"],["a",61.486388322635015,1,"binary64"],["b",61.486388322634994,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[9,1]],"inputs":[["#s(literal -4096 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(approx 1/4 #s(literal -16 binary64))","#s(approx (neg c) #s(literal -4 binary64))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 #s(literal -4 binary64) c))"]],"memory":[[1337520,9548528]],"oracle":[63.098078971201836],"outputs":[["#s(literal -1/2 binary64)"]],"repr":["binary64"],"time":13.135986328125,"times":[[3.166015625,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.85107421875,"c"],[2.8740234375,"a"],[2.962890625,"b"]],"type":"regimes"},{"accuracy":[61.52089381606561],"baseline":[61.52089381606562],"branch":[["a",61.52089381606563,1,"binary64"],["b",61.52089381606561,1,"binary64"],["c",61.520893816065644,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",61.52089381606563,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[1,1]],"inputs":[["#s(literal -4096 binary64)"]],"link":["."],"memory":[[6232496,6232496]],"name":["quadm (p42, negative)"],"oracle":[61.52089381606562],"outputs":[["#s(literal -4096 binary64)"]],"repr":["binary64"],"time":5.75,"times":[[1.1650390625,"a"],[1.366943359375,"b"],[1.180908203125,"c"],[1.2939453125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"bstep":[[17.05810546875,322905284.0413716,1276101411583.84],[30.839111328125,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[25,19],[17,15],[25,19],[17,15],[25,19],[17,15],[25,19],[17,15],[25,19],[17,15],[25,19],[17,15],[25,19],[17,15],[25,19],[17,15],[17,15],[22,18],[17,15],[22,18],[17,15],[22,18],[17,15],[22,18],[17,15],[22,18],[17,15],[22,18],[17,15],[22,18],[17,15],[22,18],[17,15],[22,18],[19,17],[1,3]],"memory":[[-1793936,14766272]],"method":["binary-search","binary-search"],"mixsample":[[1.34765625,"adjust",800],[3.023193359375,"ival-div",0],[0.006103515625,"ival-mult",800],[0.383544921875,"ival-mult",400],[8.686279296875,"ival-mult",0],[0.2421875,"ival-sqrt",1600],[0.13134765625,"ival-sub",1600],[0.11865234375,"ival-assert",0],[3.7421875,"ival-sub",0],[0.27001953125,"ival-true",0],[0.274169921875,"ival-sub",400],[3.2177734375,"ival-sqrt",0],[0.345703125,"exact",0],[0.44775390625,"ival-sqrt",400],[0.595458984375,"adjust",2000],[1.657958984375,"ival-neg",0]],"outcomes":[[4.841552734375,1,"valid",24],[5.723876953125,2,"valid",23],[2.973388671875,0,"invalid",30],[21.537109375,0,"valid",225]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":54.142822265625,"type":"bsearch"},{"bstep":[[19.546875,1.4097194582387623e-45,4.821222550120029e-38],[1.304931640625,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[19,17],[1,3]],"memory":[[155104,8016272]],"method":["binary-search","binary-search"],"mixsample":[[1.54296875,"ival-sub",0],[1.132568359375,"ival-div",0],[0.1181640625,"ival-true",0],[3.925048828125,"ival-mult",0],[1.102783203125,"ival-sqrt",0],[0.15625,"exact",0],[0.055419921875,"ival-assert",0],[0.7431640625,"ival-neg",0]],"outcomes":[[1.411376953125,0,"invalid",18],[11.55126953125,0,"valid",144]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":24.18212890625,"type":"bsearch"},{"bstep":[[12.9951171875,1.4097194582387623e-45,4.821222550120029e-38],[12.43994140625,-2.3324893849347804e-64,-9.062295966676938e-72]],"compiler":[[25,19],[22,19],[25,19],[22,19],[25,19],[22,19],[25,19],[22,19],[25,19],[22,19],[25,19],[22,19],[25,19],[22,19],[25,19],[22,19],[25,19],[22,19],[22,19],[22,18],[22,19],[22,18],[22,19],[22,18],[22,19],[22,18],[22,19],[22,18],[22,19],[22,18],[22,19],[22,18],[22,19],[22,18],[22,19],[22,18],[19,17],[1,3]],"memory":[[1790736,9819456]],"method":["binary-search","binary-search"],"mixsample":[[0.475830078125,"adjust",800],[1.5087890625,"ival-div",0],[0.011962890625,"ival-mult",800],[0.175048828125,"ival-mult",400],[4.4599609375,"ival-mult",0],[0.1064453125,"ival-sqrt",1600],[0.079833984375,"ival-sub",1600],[0.103515625,"ival-assert",0],[2.68896484375,"ival-sub",0],[0.1572265625,"ival-true",0],[0.097900390625,"ival-sub",400],[1.398681640625,"ival-sqrt",0],[0.1748046875,"exact",0],[0.173828125,"ival-sqrt",400],[0.189208984375,"adjust",2000],[0.880615234375,"ival-neg",0]],"outcomes":[[1.43896484375,1,"valid",10],[2.5361328125,2,"valid",13],[2.32080078125,0,"invalid",29],[11.66796875,0,"valid",137]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":29.43994140625,"type":"bsearch"},{"bstep":[[22.93603515625,-6.355589725081623e-307,3.4134071165552678e-304]],"compiler":[[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[19,17],[1,3]],"memory":[[539200,8578928]],"method":["binary-search"],"mixsample":[[2.736328125,"ival-sub",0],[1.449462890625,"ival-div",0],[0.151611328125,"ival-true",0],[4.547607421875,"ival-mult",0],[1.316650390625,"ival-sqrt",0],[0.203125,"exact",0],[0.1044921875,"ival-assert",0],[1.055419921875,"ival-neg",0]],"outcomes":[[4.229248046875,0,"invalid",51],[12.698974609375,0,"valid",144]],"stop":[["narrow-enough",1]],"time":26.6650390625,"type":"bsearch"},{"bstep":[[21.294921875,-1.5506338439877602e-249,-2.028382894342277e-252]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[-2657088,7837728]],"method":["binary-search"],"mixsample":[[0.15771484375,"adjust",800],[1.207275390625,"ival-div",0],[0.021728515625,"ival-mult",400],[4.090576171875,"ival-mult",0],[0.0634765625,"ival-assert",0],[1.740234375,"ival-sub",0],[0.115966796875,"ival-true",0],[0.01025390625,"ival-sub",400],[2.40283203125,"ival-sqrt",0],[0.1708984375,"exact",0],[0.841064453125,"ival-neg",0],[0.01904296875,"ival-sqrt",400]],"outcomes":[[0.87109375,1,"valid",6],[3.7099609375,0,"invalid",47],[11.0966796875,0,"valid",122]],"stop":[["narrow-enough",1]],"time":25.27197265625,"type":"bsearch"},{"bstep":[[1.126953125,-1.5506338439877602e-249,-2.028382894342277e-252]],"compiler":[[22,16],[22,18],[22,16],[22,18],[22,16],[22,18],[22,16],[22,18],[22,16],[22,18],[22,16],[22,18],[22,16],[22,18],[22,16],[22,18],[19,17],[1,3]],"memory":[[667632,667632]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.844970703125,"type":"bsearch"},{"bstep":[[20.239990234375,-5.868098138394245e+97,-1.036917355256712e+97]],"compiler":[[20,16],[22,16],[20,16],[22,16],[20,16],[22,16],[20,16],[22,16],[20,16],[22,16],[20,16],[22,16],[19,17],[1,3]],"memory":[[-1365920,6754912]],"method":["binary-search"],"mixsample":[[1.5009765625,"adjust",800],[0.318115234375,"ival-sqrt",2000],[1.731689453125,"ival-div",0],[0.625,"ival-sqrt",800],[0.17333984375,"ival-sub",2000],[0.04541015625,"ival-assert",0],[0.08544921875,"ival-sqrt",4000],[1.5478515625,"ival-sub",0],[0.8173828125,"ival-sqrt",0],[0.649658203125,"adjust",2000],[1.00537109375,"ival-mult",800],[0.009033203125,"ival-sqrt",1600],[0.09765625,"ival-mult",400],[2.583251953125,"ival-mult",0],[0.457763671875,"ival-sub",800],[0.04443359375,"ival-mult",1600],[0.006103515625,"ival-div",800],[0.145751953125,"adjust",2800],[0.07470703125,"ival-true",0],[0.031494140625,"ival-sub",4000],[0.107666015625,"exact",0],[0.479248046875,"ival-neg",0]],"outcomes":[[5.79345703125,1,"valid",40],[0.5439453125,0,"invalid",6],[6.413818359375,2,"valid",30],[2.082275390625,3,"valid",8],[1.596435546875,0,"valid",18]],"stop":[["narrow-enough",1]],"time":23.53515625,"type":"bsearch"},{"egraph":[[6,4772,412,0.038346622],[5,2080,428,0.030459079],[4,933,428,0.011263951],[3,570,428,0.006379778],[2,282,428,0.004218592],[1,146,432,0.002533583],[0,82,432,0.0021576]],"inputs":[["(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1250000000000 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 8285774290710419/6277101735386680763835789423207666416102355444464034512896 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -3509704541618749/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3515176971816541/25108406941546723055343157692830665664409421777856138051584 binary64)) (/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))","(if (<=.f64 b #s(literal -8460967100219639/4127301024497384737127654569660285988428494734657199391624693039270889863724412964643884811622321780427143710884821317803768340308614730759769835769241715444596770968742227220068214981847081570726751819595399909407406471037121576084674975771617472472574520163263578112 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))","(if (<=.f64 b #s(literal -8460967100219639/4127301024497384737127654569660285988428494734657199391624693039270889863724412964643884811622321780427143710884821317803768340308614730759769835769241715444596770968742227220068214981847081570726751819595399909407406471037121576084674975771617472472574520163263578112 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c))))","(if (<=.f64 b #s(literal -10500000000000000582832916394549268735476163421552061412410607920233846978744994073588342036889600 binary64)) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c))) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c))))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(literal -1/2 binary64)","#s(literal -4096 binary64)"]],"memory":[[-2289408,13622576]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1250000000000 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1250000000000 binary64)) (/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 8285774290710419/6277101735386680763835789423207666416102355444464034512896 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -533569947205553/59285549689505892056868344324448208820874232148807968788202283012051522375647232 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 8285774290710419/6277101735386680763835789423207666416102355444464034512896 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -3509704541618749/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3515176971816541/25108406941546723055343157692830665664409421777856138051584 binary64)) (/.f64 (-.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))","(if (<=.f64 b #s(literal -8460967100219639/4127301024497384737127654569660285988428494734657199391624693039270889863724412964643884811622321780427143710884821317803768340308614730759769835769241715444596770968742227220068214981847081570726751819595399909407406471037121576084674975771617472472574520163263578112 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))","(if (<=.f64 b #s(literal -8460967100219639/4127301024497384737127654569660285988428494734657199391624693039270889863724412964643884811622321780427143710884821317803768340308614730759769835769241715444596770968742227220068214981847081570726751819595399909407406471037121576084674975771617472472574520163263578112 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 (neg.f64 c) (neg.f64 c))))","(if (<=.f64 b #s(literal -8460967100219639/4127301024497384737127654569660285988428494734657199391624693039270889863724412964643884811622321780427143710884821317803768340308614730759769835769241715444596770968742227220068214981847081570726751819595399909407406471037121576084674975771617472472574520163263578112 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (*.f64 c c)))","(if (<=.f64 b #s(literal -10500000000000000582832916394549268735476163421552061412410607920233846978744994073588342036889600 binary64)) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (-.f64 (neg.f64 c) (neg.f64 c))) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c))))","(if (<=.f64 b #s(literal -10500000000000000582832916394549268735476163421552061412410607920233846978744994073588342036889600 binary64)) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) #s(literal 0 binary64)) #s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) c))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (neg.f64 (neg.f64 c)))","#s(approx (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) c)","#s(literal -1/2 binary64)","#s(literal -4096 binary64)"]],"stop":[["node limit",1]],"time":121.283935546875,"type":"simplify"},{"compiler":[[432,84]],"memory":[[2288800,2288800]],"stop":[["fuel",1]],"time":3.448974609375,"type":"soundness"},{"compiler":[[432,84],[432,84],[105,28],[105,28],[17,14],[17,14]],"memory":[[946576,49982032]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[]],"time":81.492919921875,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.01513671875,"type":"end"}]