[{"memory":[[27264,27264]],"time":0.0400390625,"type":"start"},{"compiler":[[27,19]],"memory":[[4618192,12692576]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":140.93701171875,"type":"analyze"},{"bogosity":[{"invalid":0.49935711501970126,"precondition":0.4942799140699208,"valid":0.006362970910377951}],"memory":[[-297079048,1664416080]],"mixsample":[[87.234619140625,"adjust",800],[227.578857421875,"ival-add",0],[0.526123046875,"ival-sin",400],[252.134521484375,"ival-mult",0],[220.779296875,"ival-fabs",0],[626.794677734375,"ival-sin",0],[14.9443359375,"ival-assert",0],[195.43359375,"ival-sub",0],[116.185791015625,"ival-and",0],[0.038330078125,"ival-sub",400],[611.455322265625,"const",0],[50.072265625,"exact",0],[215.49951171875,"ival-<=",0],[173.8310546875,"ival-<",0]],"outcomes":[[675.2451171875,1,"valid",2758],[2819.405029296875,0,"invalid",26347],[571.21142578125,0,"valid",5498]],"time":5533.51806640625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[223,2,1,30]],"explanations":[["sin.f64","(sin.f64 (+.f64 x eps))","sensitivity",1,1,[],[[1]]],["-.f64","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cancellation",223,11,[],[[]]]],"fperrors":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",224,1,[3.9520303407702214e-273,1.9843651093236284e-275],2,[-1.0317723897299045e-157,1.2692472193346718e-159]],["(sin.f64 (+.f64 x eps))",1,0,false,0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,224],[0,32]],"maybe-confusion":[[223,1,1,1,9,21]],"memory":[[5246256,39177136]],"mixsample":[[4.002197265625,"adjust",800],[3.253662109375,"ival-add",0],[0.011962890625,"ival-sin",400],[10.719482421875,"ival-sin",0],[0.219970703125,"ival-assert",0],[3.28271484375,"ival-sub",0],[0.403564453125,"ival-true",0],[0.894775390625,"ival-sin",2000],[0.0322265625,"adjust",2800],[0.01220703125,"ival-sin",800],[0.03271484375,"adjust",2000]],"outcomes":[[20.060546875,1,"valid",188],[1.2626953125,3,"valid",2],[17.411865234375,0,"valid",322]],"time":82.46484375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.000648595],[10,183,7,0.000803769],[9,175,7,0.000879552],[8,159,7,0.000975422],[7,110,7,0.000832454],[6,80,7,0.000837763],[5,47,7,0.000438717],[4,32,7,0.000223212],[3,24,7,0.000177391],[2,18,7,0.00012851],[1,13,7,0.000121993],[0,10,7,0.000130348],[0,6,7,9.8385e-5]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"memory":[[-402656,15910544]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":150.459228515625,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.087890625,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","next",24.812160495108284,"binary64"]],"compiler":[[7,6]],"memory":[[314112,314112]],"time":0.527099609375,"type":"prune"},{"egraph":[[0,183,18,0.000671596],[10,183,18,0.000745082],[9,175,18,0.000870662],[8,159,18,0.000936407],[7,110,18,0.000797268],[6,80,18,0.000770475],[5,47,18,0.000449654],[4,32,18,0.000229966],[3,24,18,0.000211222],[2,18,18,0.000169101],[1,13,18,0.000123345],[0,10,18,0.000133596],[0,6,18,8.9022e-5]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(sin.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cost-diff",0]],"memory":[[818528,818528]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(sin.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(sin.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.56982421875,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(sin.f64 x)","accuracy",0.0],["(sin.f64 (+.f64 x eps))","accuracy",0.09029226578562573],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","accuracy",24.723682568666625]],"memory":[[-8804272,8549264]],"mixsample":[[1.87109375,"adjust",800],[1.598388671875,"ival-add",0],[0.005859375,"ival-sin",400],[5.45458984375,"ival-sin",0],[0.09423828125,"ival-assert",0],[5.015625,"ival-sub",0],[0.156982421875,"ival-true",0],[0.450927734375,"ival-sin",2000],[0.01904296875,"adjust",2800],[0.0048828125,"ival-sin",800],[0.01708984375,"adjust",2000]],"outcomes":[[9.82373046875,1,"valid",94],[0.629150390625,3,"valid",1],[12.030517578125,0,"valid",161]],"time":30.119140625,"type":"localize"},{"count":[[4,31]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[1875408,1875408]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.572998046875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","-inf"],[0.7099609375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","inf"],[0.610107421875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","0"],[0.321044921875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","-inf"],[0.47802734375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","inf"],[0.77685546875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","0"]],"time":3.864013671875,"type":"series"},{"count":[[31,29]],"egraph":[[0,8157,253,0.085467032],[4,6191,283,0.024456984],[3,2853,284,0.023973056],[2,781,284,0.009385573],[1,314,291,0.00237184],[0,107,291,0.001013262]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[54208,40374848]],"method":["egg-herbie"],"outputs":[["(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (cos eps)))","(fma.f64 (cos.f64 eps) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (cos.f64 eps)) x (sin.f64 eps))","eps","(+ eps x)","(+.f64 eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (+ eps x))","(sin.f64 (+.f64 eps x))","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(sin x)","(sin.f64 x)","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (- eps (* -1 x)))","(sin.f64 (+.f64 eps x))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(+ (sin x) (* eps (cos x)))","(fma.f64 (cos.f64 x) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps (sin.f64 x))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(sin (- x (* -1 eps)))","(sin.f64 (+.f64 eps x))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":273.296875,"type":"simplify"},{"count":[[4,46]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[774480,16864192]],"outputs":[["(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))) (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64))))))","(+.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 x eps)))","(+.f64 (sin.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x)))","(+.f64 (+.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))))) (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))) (neg.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 x eps)) #s(literal 3 binary64)) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64))))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (+.f64 (sin.f64 (+.f64 x eps)) #s(literal 0 binary64)) (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 eps)))","(-.f64 (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))) (/.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))))","(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","(*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (sin.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))) (neg.f64 (sin.f64 (-.f64 x eps))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64)))))","(sin.f64 (+.f64 x eps))","(neg.f64 (/.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps)) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps)))","(+.f64 x eps)","(+.f64 eps x)","(+.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (neg.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(*.f64 #s(literal 1 binary64) (+.f64 x eps))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (/.f64 #s(literal 1 binary64) (-.f64 x eps)))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 x eps) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x eps))))","(sin.f64 x)"]],"time":387.572998046875,"type":"rewrite"},{"compiler":[[1388,276]],"memory":[[6535152,6535152]],"time":9.05712890625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))","next",24.711057728487656,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",24.812160495108284,"binary64"],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","fresh",0.34173416312645977,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","fresh",1.6196000172257277,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","next",0.27444039638328654,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","next",0.20333578118088041,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","next",0.39500719885375973,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","fresh",0.7929221173177239,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","next",1.7343705526741306,"binary64"]],"compiler":[[14,10],[7,6],[14,10],[22,15],[24,16],[29,19],[18,13],[12,9],[10,8],[14,10],[14,10],[22,15],[24,16],[29,19],[18,13],[12,9],[10,8]],"count":[[68,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[67,8],"picked":[1,1]}],"memory":[[-4791504,5758352]],"min-error":[[0.026173592648988643,"binary64"]],"time":7.287841796875,"type":"prune"},{"egraph":[[0,8469,294,0.155760276],[22,7047,296,0.029783106],[21,7047,296,0.040960604],[20,7045,296,0.039672727],[19,7036,296,0.041162518],[18,7027,296,0.040678275],[17,7005,296,0.0409147],[16,6899,296,0.046810524],[15,6458,296,0.039665559],[14,6435,296,0.023737615],[13,6430,296,0.016845917],[12,6401,296,0.016416011],[11,6002,296,0.01951974],[10,5047,296,0.020736159],[9,3047,296,0.023125634],[8,2106,296,0.014698178],[7,1464,296,0.010802182],[6,1148,296,0.006882035],[5,922,296,0.004659584],[4,617,296,0.003702784],[3,346,296,0.002146702],[2,186,296,0.00131402],[1,104,297,0.000914279],[0,63,297,0.000631937],[0,35,297,0.000421804]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(cos.f64 x)","#s(literal -1/6 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(sin.f64 x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(literal -1/6 binary64)","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(sin.f64 x)","#s(literal -1/2 binary64)","(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","x","(sin.f64 eps)","eps","(*.f64 (cos.f64 eps) (sin.f64 x))","(cos.f64 eps)","(sin.f64 x)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(*.f64 (cos.f64 x) (sin.f64 eps))","cost-diff",0],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","cost-diff",1],["(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))","cost-diff",1],["(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","cost-diff",0],["(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","cost-diff",0],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","cost-diff",0],["(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","cost-diff",0]],"memory":[[4469232,69690448]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(*.f64 (*.f64 #s(literal -1/6 binary64) (cos.f64 x)) eps)","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(*.f64 #s(literal -1/6 binary64) (cos.f64 x))","(cos.f64 x)","#s(literal -1/6 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(sin.f64 x)","x","#s(literal -1/2 binary64)","eps","(cos.f64 x)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","x","eps","#s(literal -1/6 binary64)","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(sin.f64 x)","#s(literal -1/2 binary64)","(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(fma.f64 (cos.f64 eps) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (sin.f64 eps) (cos.f64 x))","(cos.f64 x)","x","(sin.f64 eps)","eps","(*.f64 (cos.f64 eps) (sin.f64 x))","(cos.f64 eps)","(sin.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":898.442138671875,"type":"simplify"},{"compiler":[[262,38]],"locations":[["(cos.f64 x)","accuracy",0.0078125],["(*.f64 (cos.f64 x) (sin.f64 eps))","accuracy",0.015625],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","accuracy",0.02734375],["(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))","accuracy",24.723682568666625],["(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","accuracy",0.0078125],["(*.f64 (cos.f64 x) eps)","accuracy",0.0078125],["(cos.f64 x)","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","accuracy",0.2627216463832889],["(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","accuracy",0.00390625],["(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","accuracy",0.0078125],["(cos.f64 x)","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","accuracy",0.3871946988537599],["(sin.f64 eps)","accuracy",0.0],["#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","accuracy",1.7343705526741306],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","accuracy",0.01171875],["(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","accuracy",0.01953125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","accuracy",0.19161703118076698],["(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","accuracy",0.3359375]],"memory":[[2007504,50109296]],"mixsample":[[0.02294921875,"const",800],[8.044921875,"adjust",800],[0.1005859375,"ival-mult",2000],[0.01611328125,"const",400],[0.112060546875,"ival-assert",0],[3.04052734375,"ival-sub",0],[5.697021484375,"ival-cos",0],[0.049072265625,"ival-sub",400],[6.974365234375,"const",0],[0.111328125,"ival-cos",400],[0.218017578125,"adjust",2000],[0.0615234375,"ival-mult",800],[14.09228515625,"ival-add",0],[0.02880859375,"ival-cos",800],[0.2412109375,"ival-sin",400],[31.567626953125,"ival-mult",0],[0.1455078125,"ival-mult",400],[8.296630859375,"ival-sin",0],[1.281005859375,"ival-cos",2000],[0.02392578125,"ival-add",2000],[0.028076171875,"const",2000],[0.042724609375,"ival-add",400],[0.322021484375,"adjust",2800],[4.44482421875,"ival-sin",2000],[0.2392578125,"ival-true",0],[0.032470703125,"ival-sin",800],[0.02099609375,"ival-add",800],[0.1689453125,"exact",0]],"outcomes":[[57.0927734375,1,"valid",95],[9.4501953125,3,"valid",3],[49.078857421875,0,"valid",158]],"time":145.847900390625,"type":"localize"},{"count":[[21,120]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(*.f64 (cos.f64 x) eps)"]],"memory":[[-3353456,13385936]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (* -1/6 (pow eps 2)))","(+ 1 (+ (* -1/6 (pow eps 2)) (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/6 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/12 (pow eps 2))) 1/2))))))","(* -1/6 eps)","(+ (* -1/6 eps) (* x (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* 1/12 (* eps x))) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/12 eps)))) 1/2)))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (* -1/2 (* (pow eps 2) x)) (* eps (+ 1 (* -1/6 (pow eps 2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* 1/12 (* (pow eps 2) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2)))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/6 (pow eps 2))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* -1/2 eps) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* -1/2 eps) (* x (- (+ (* 1/12 (* eps x)) (* 1/12 (pow eps 2))) 1/2))))))","(+ (* -1/2 x) (* -1/6 eps))","(+ (* -1/6 eps) (* x (- (* 1/12 (* eps x)) 1/2)))","(+ (* -1/6 eps) (* x (- (* x (+ (* 1/12 eps) (* 1/12 x))) 1/2)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ (* -1/6 eps) (* 1/12 (* eps (pow x 2))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* -1/144 (* eps (pow x 2))) (* 1/12 eps))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* 1/12 eps) (* (pow x 2) (+ (* -1/144 eps) (* 1/4320 (* eps (pow x 2))))))))","-1/6","(- (* 1/12 (pow x 2)) 1/6)","(- (* (pow x 2) (+ 1/12 (* -1/144 (pow x 2)))) 1/6)","(- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/4320 (pow x 2)) 1/144)))) 1/6)","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))","(+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))","(- (+ (* (cos eps) (sin x)) (* (cos x) (sin eps))) (sin x))","(+ (* (cos eps) (sin x)) (* (cos x) (sin eps)))","(* (cos x) (sin eps))","(cos x)","(* -1/6 (* eps (cos x)))","(* -1/6 (cos x))","(* eps (cos x))","(- (sin (- eps (* -1 x))) (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))))","(+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(sin x)","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/6 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) eps)) (+ (* -1/6 (cos x)) (/ (cos x) (pow eps 2)))))","(* -1/6 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) eps)) (+ (* -1/6 (cos x)) (/ (cos x) (pow eps 2)))))","(* eps (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(- (sin (- x (* -1 eps))) (sin x))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(* -1 (* (pow eps 3) (+ (* -1/24 (sin x)) (* 1/6 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* (pow eps 3) (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))))","(* -1 (* eps (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps)))))"]],"series":[[4.22705078125,"((- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) eps) (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (* (cos x) (sin eps)) (cos x) (* (* (cos x) -1/6) eps) (* (cos x) -1/6) (* (cos x) eps))","eps","-inf"],[5.43603515625,"((- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) eps) (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (* (cos x) (sin eps)) (cos x) (* (* (cos x) -1/6) eps) (* (cos x) -1/6) (* (cos x) eps))","eps","inf"],[5.950927734375,"((- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) eps) (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (* (cos x) (sin eps)) (cos x) (* (* (cos x) -1/6) eps) (* (cos x) -1/6) (* (cos x) eps))","eps","0"],[5.284912109375,"((- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) eps) (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (* (cos x) (sin eps)) (cos x) (* (* (cos x) -1/6) eps) (* (cos x) -1/6) (* (cos x) eps))","x","-inf"],[8.43310546875,"((- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) eps) (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (* (cos x) (sin eps)) (cos x) (* (* (cos x) -1/6) eps) (* (cos x) -1/6) (* (cos x) eps))","x","inf"],[3.925048828125,"((- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (- (sin (+ x eps)) (sin x)) (sin eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) eps) (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (* (cos x) (sin eps)) (cos x) (* (* (cos x) -1/6) eps) (* (cos x) -1/6) (* (cos x) eps))","x","0"]],"time":35.510009765625,"type":"series"},{"count":[[120,119]],"egraph":[[0,8065,1622,0.099735279],[2,3932,1815,0.02297707],[1,1289,1863,0.011799615],[0,407,1912,0.00390545]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (* -1/6 (pow eps 2)))","(+ 1 (+ (* -1/6 (pow eps 2)) (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/6 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/12 (pow eps 2))) 1/2))))))","(* -1/6 eps)","(+ (* -1/6 eps) (* x (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* 1/12 (* eps x))) 1/2)))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/12 eps)))) 1/2)))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (* -1/2 (* (pow eps 2) x)) (* eps (+ 1 (* -1/6 (pow eps 2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* 1/12 (* (pow eps 2) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2)))))))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/6 (pow eps 2))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* -1/2 eps) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* -1/2 eps) (* x (- (+ (* 1/12 (* eps x)) (* 1/12 (pow eps 2))) 1/2))))))","(+ (* -1/2 x) (* -1/6 eps))","(+ (* -1/6 eps) (* x (- (* 1/12 (* eps x)) 1/2)))","(+ (* -1/6 eps) (* x (- (* x (+ (* 1/12 eps) (* 1/12 x))) 1/2)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ (* -1/6 eps) (* 1/12 (* eps (pow x 2))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* -1/144 (* eps (pow x 2))) (* 1/12 eps))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* 1/12 eps) (* (pow x 2) (+ (* -1/144 eps) (* 1/4320 (* eps (pow x 2))))))))","-1/6","(- (* 1/12 (pow x 2)) 1/6)","(- (* (pow x 2) (+ 1/12 (* -1/144 (pow x 2)))) 1/6)","(- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/4320 (pow x 2)) 1/144)))) 1/6)","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))","(+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))","(- (+ (* (cos eps) (sin x)) (* (cos x) (sin eps))) (sin x))","(+ (* (cos eps) (sin x)) (* (cos x) (sin eps)))","(* (cos x) (sin eps))","(cos x)","(* -1/6 (* eps (cos x)))","(* -1/6 (cos x))","(* eps (cos x))","(- (sin (- eps (* -1 x))) (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))))","(+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(sin x)","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* 1/24 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/6 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) eps)) (+ (* -1/6 (cos x)) (/ (cos x) (pow eps 2)))))","(* -1/6 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) eps)) (+ (* -1/6 (cos x)) (/ (cos x) (pow eps 2)))))","(* eps (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(- (sin (- x (* -1 eps))) (sin x))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(* -1 (* (pow eps 3) (+ (* -1/24 (sin x)) (* 1/6 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* (pow eps 3) (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))))","(* -1 (* eps (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps)))))"]],"memory":[[10596368,54270320]],"method":["egg-herbie"],"outputs":[["(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))","(+ 1 (* -1/6 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))","(+ 1 (+ (* -1/6 (pow eps 2)) (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* -1/6 (* eps (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* 1/12 (pow eps 2))) 1/2))))))","(fma.f64 (fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/12 binary64) eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64))) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(* -1/6 eps)","(*.f64 #s(literal -1/6 binary64) eps)","(+ (* -1/6 eps) (* x (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* 1/12 (* eps x))) 1/2)))","(fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/12 binary64) x (*.f64 #s(literal 1/24 binary64) eps)) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(+ (* -1/6 eps) (* x (- (+ (* 1/24 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/24 (pow eps 2)) 1/2))) (* 1/12 eps)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) eps (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x) #s(literal -1/6 binary64))) x (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) x (*.f64 #s(literal -1/6 binary64) eps))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/12 binary64)) x)) x eps)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(+ (* -1/2 (* (pow eps 2) x)) (* eps (+ 1 (* -1/6 (pow eps 2)))))","(+.f64 eps (*.f64 (*.f64 eps eps) (fma.f64 #s(literal -1/6 binary64) eps (*.f64 #s(literal -1/2 binary64) x))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* 1/12 (* (pow eps 2) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 eps x) eps) #s(literal 1/12 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/6 (pow eps 2))))","(fma.f64 eps (fma.f64 #s(literal -1/6 binary64) eps (*.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* -1/2 eps) (* x (- (* 1/12 (pow eps 2)) 1/2))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* -1/6 (pow eps 2)) (* x (+ (* -1/2 eps) (* x (- (+ (* 1/12 (* eps x)) (* 1/12 (pow eps 2))) 1/2))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(+ (* -1/2 x) (* -1/6 eps))","(fma.f64 #s(literal -1/6 binary64) eps (*.f64 #s(literal -1/2 binary64) x))","(+ (* -1/6 eps) (* x (- (* 1/12 (* eps x)) 1/2)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(+ (* -1/6 eps) (* x (- (* x (+ (* 1/12 eps) (* 1/12 x))) 1/2)))","(fma.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(+ (sin eps) (* x (cos eps)))","(fma.f64 (cos.f64 eps) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (cos.f64 eps)) x (sin.f64 eps))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 eps))) x (cos.f64 eps)) x (sin.f64 eps))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (sin.f64 eps))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(fma.f64 (*.f64 (sin.f64 eps) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) (sin.f64 eps))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (sin.f64 eps) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (sin.f64 eps) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)))))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ (* -1/6 eps) (* 1/12 (* eps (pow x 2))))","(*.f64 eps (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64)))","(+ (* -1/6 eps) (* (pow x 2) (+ (* -1/144 (* eps (pow x 2))) (* 1/12 eps))))","(fma.f64 (*.f64 #s(literal -1/144 binary64) eps) (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64))))","(+ (* -1/6 eps) (* (pow x 2) (+ (* 1/12 eps) (* (pow x 2) (+ (* -1/144 eps) (* 1/4320 (* eps (pow x 2))))))))","(fma.f64 eps (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/4320 binary64) (*.f64 x x) #s(literal -1/144 binary64)))))","-1/6","#s(literal -1/6 binary64)","(- (* 1/12 (pow x 2)) 1/6)","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64))","(- (* (pow x 2) (+ 1/12 (* -1/144 (pow x 2)))) 1/6)","(fma.f64 (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/6 binary64))","(- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/4320 (pow x 2)) 1/144)))) 1/6)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4320 binary64) (*.f64 x x) #s(literal -1/144 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/6 binary64))","(+ eps (* -1/2 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 eps (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))) x) x (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 x x) eps)","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x))","(+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x))","(+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x)))","(- (+ (* (cos eps) (sin x)) (* (cos x) (sin eps))) (sin x))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (sin.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64))))","(+ (* (cos eps) (sin x)) (* (cos x) (sin eps)))","(fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (cos.f64 eps) (sin.f64 x)))","(* (cos x) (sin eps))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos x)","(cos.f64 x)","(* -1/6 (* eps (cos x)))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(* -1/6 (cos x))","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x))","(+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x))))))","(fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (sin.f64 x)))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(sin x)","(sin.f64 x)","(+ (sin x) (* eps (cos x)))","(fma.f64 (cos.f64 x) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps (sin.f64 x))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(*.f64 (cos.f64 x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (cos.f64 x) (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64))) (*.f64 (cos.f64 x) eps))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) (cos.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (cos.f64 x) (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64))))) eps)","(* 1/24 (* (pow eps 4) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (sin.f64 x))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (/.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/24 binary64)) (sin.f64 x))","(* (pow eps 3) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (/.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 eps #s(literal 3 binary64)))","(* 1/24 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal 1/24 binary64))","(* (pow eps 2) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (*.f64 eps eps))","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal -1/2 binary64))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps) eps)","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1/6 (* (pow eps 3) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64)) (cos.f64 x))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1/2 (/ (sin x) eps)) (+ (* -1/6 (cos x)) (/ (cos x) (pow eps 2)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (fma.f64 (cos.f64 x) #s(literal -1/6 binary64) (/.f64 (/.f64 (cos.f64 x) eps) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* -1/6 (* (pow eps 2) (cos x)))","(*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) #s(literal -1/6 binary64))","(* (pow eps 2) (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (sin x) eps)) (+ (* -1/6 (cos x)) (/ (cos x) (pow eps 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (fma.f64 (cos.f64 x) #s(literal -1/6 binary64) (/.f64 (/.f64 (cos.f64 x) eps) eps))) eps) eps)","(* eps (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) eps)","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (cos.f64 x) #s(literal 1/6 binary64))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (cos.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* (pow eps 3) (+ (* -1/24 (sin x)) (* 1/6 (/ (cos x) eps)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (sin x) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))) eps)) (* -1/24 (sin x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (cos.f64 x) #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) (neg.f64 eps))) (neg.f64 eps))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (cos.f64 x) #s(literal 1/6 binary64))) (neg.f64 eps))) eps) eps)","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1 (* (pow eps 3) (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x)))))","(*.f64 (neg.f64 (fma.f64 (cos.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x))) eps)) (* -1/6 (cos x))))","(*.f64 (*.f64 (fma.f64 (cos.f64 x) #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) (neg.f64 eps))) (neg.f64 eps))) eps) eps)","(* -1 (* eps (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (cos.f64 x) #s(literal -1/6 binary64))) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":253.010986328125,"type":"simplify"},{"count":[[21,174]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps)","(fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(*.f64 (cos.f64 x) eps)"]],"memory":[[-7360336,85452288]],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) (*.f64 eps eps)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) (*.f64 eps eps)))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (cos.f64 x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 eps (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (cos.f64 x)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (cos.f64 x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))) eps))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 eps (fma.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps)) (cos.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps)) (cos.f64 x)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64))) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps)) (cos.f64 x))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) eps) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) eps) (fma.f64 (*.f64 (sin.f64 x) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x)))","(+.f64 (*.f64 (*.f64 (sin.f64 x) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 eps (*.f64 eps #s(literal -1/6 binary64))) (cos.f64 x) (cos.f64 x)))","(+.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) (cos.f64 x))","(+.f64 (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) eps))","(+.f64 (+.f64 (cos.f64 x) (*.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) eps)) (*.f64 (*.f64 (sin.f64 x) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))))","(+.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))) (neg.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))))","(-.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps))) (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (cos.f64 x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))) eps (neg.f64 (cos.f64 x)))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 eps eps)) #s(literal -1/36 binary64) (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/216 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 eps eps)) #s(literal -1/36 binary64) (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))))) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/216 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))))","(+.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)))","(+.f64 (*.f64 (*.f64 (*.f64 eps #s(literal 1/24 binary64)) (sin.f64 x)) eps) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 eps (fma.f64 (cos.f64 x) #s(literal -1/6 binary64) (*.f64 (*.f64 eps #s(literal 1/24 binary64)) (sin.f64 x)))) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(+.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 (*.f64 (*.f64 eps #s(literal 1/24 binary64)) (sin.f64 x)) eps))","(+.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 eps (fma.f64 (cos.f64 x) #s(literal -1/6 binary64) (*.f64 (*.f64 eps #s(literal 1/24 binary64)) (sin.f64 x)))))","(+.f64 (/.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)))) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))))))","(-.f64 (fma.f64 (*.f64 (*.f64 eps eps) (sin.f64 x)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))))) (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)))) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))))) (/.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (neg.f64 (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))))))","(*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) eps) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) eps))","(*.f64 (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)) eps)","(*.f64 eps (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","(*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (/.f64 eps (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))))","(*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) eps) (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (*.f64 (cos.f64 x) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) eps) (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))) eps))","(*.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 eps (fma.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)) (cos.f64 x)) (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/4 binary64)) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (pow.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (-.f64 (pow.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)) (cos.f64 x)) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 eps eps) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))) #s(literal 1/4 binary64) (*.f64 (neg.f64 (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) eps))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/2 binary64) (neg.f64 (neg.f64 (cos.f64 x))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/4 binary64)) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))) (neg.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/4 binary64)) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))))","(-.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps))) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/4 binary64)) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))) (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","(*.f64 (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))))","(*.f64 (+.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal -1/4 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))) (fma.f64 (*.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) eps) eps (neg.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(*.f64 (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)) (/.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (fma.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (sin.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 eps eps)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (*.f64 eps eps)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(*.f64 eps (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 eps (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x)))))","(*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x)))) eps))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 6 binary64)))) (fma.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps)) (cos.f64 x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64))) (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps)) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps)) (cos.f64 x))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) eps))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(+.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) (cos.f64 x))","(+.f64 (*.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) eps) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","(+.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps))","(+.f64 (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)) (fma.f64 (*.f64 eps (*.f64 eps #s(literal -1/6 binary64))) (cos.f64 x) (cos.f64 x)))","(+.f64 (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)) (*.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) eps))","(+.f64 (+.f64 (cos.f64 x) (*.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) eps)) (*.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x)))) (neg.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x)))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x)))))","(-.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps))) (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (-.f64 (cos.f64 x) (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps))))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps) #s(literal 2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (neg.f64 (cos.f64 x))))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) #s(literal 1/36 binary64)) eps) eps (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/216 binary64) (pow.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/36 binary64)) (*.f64 #s(literal 1/12 binary64) (sin.f64 x))) (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/216 binary64) (pow.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (cos.f64 x) eps) (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/36 binary64)) (*.f64 #s(literal 1/12 binary64) (sin.f64 x))) (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) #s(literal 1/36 binary64)) eps) eps (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal -1/4 binary64)))) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)) (*.f64 (sin.f64 x) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) (*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64)) (fma.f64 (sin.f64 x) #s(literal -1/2 binary64) (*.f64 (*.f64 (cos.f64 x) #s(literal 1/6 binary64)) eps))) (/.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal 1/36 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (sin.f64 x) #s(literal -1/2 binary64) (*.f64 (*.f64 (cos.f64 x) #s(literal 1/6 binary64)) eps))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) #s(literal 1/36 binary64)) eps) eps (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))))","(*.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 eps eps)) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) #s(literal -1/2 binary64) (*.f64 (*.f64 (cos.f64 x) #s(literal 1/6 binary64)) eps))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))) (fma.f64 (*.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) #s(literal 1/36 binary64)) eps) eps (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal -1/4 binary64))))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) (/.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) #s(literal 1/36 binary64)) eps) eps (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) #s(literal -1/4 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))))))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal 1/2 binary64))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))) (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))))","(+.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 eps x)))","(+.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64))))) (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))) (neg.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)))))","(+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 eps x)) #s(literal 3 binary64)) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal 1/2 binary64))))))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(-.f64 (+.f64 (sin.f64 (+.f64 eps x)) #s(literal 0 binary64)) (sin.f64 x))","(-.f64 #s(literal 0 binary64) (-.f64 (sin.f64 x) (sin.f64 (+.f64 eps x))))","(neg.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 eps x))) (neg.f64 (sin.f64 (-.f64 eps x)))))","(neg.f64 (/.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (sin.f64 (-.f64 eps x))) (sin.f64 (-.f64 eps x))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (cos.f64 eps) (*.f64 (sin.f64 x) (sin.f64 (-.f64 x eps))) (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps)))))))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (fma.f64 (cos.f64 eps) (*.f64 (sin.f64 x) (sin.f64 (-.f64 x eps))) (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps))))))))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps)))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (sin.f64 (-.f64 eps x)))) (neg.f64 (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps)))) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))) (sin.f64 (-.f64 eps x)))))","(-.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps)))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (sin.f64 (-.f64 eps x)))) (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps)))) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))) (sin.f64 (-.f64 eps x))))","(-.f64 (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(-.f64 (/.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps)))) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))) (sin.f64 (-.f64 x eps))) (/.f64 (*.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) eps))))) (sin.f64 (-.f64 x eps))))","(*.f64 #s(literal 1 binary64) (sin.f64 (+.f64 eps x)))","(*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","(*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 eps x))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 eps x))))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 eps x))) (*.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 eps x))))","(*.f64 (sin.f64 (+.f64 eps x)) (/.f64 (sin.f64 (-.f64 eps x)) (sin.f64 (-.f64 eps x))))","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (sin.f64 eps) (cos.f64 x))","(*.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 eps x))) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)))","(/.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 eps x))) #s(literal 2 binary64))","(/.f64 (neg.f64 (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 eps x)))) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (+.f64 (sin.f64 (+.f64 eps x)) (sin.f64 (-.f64 eps x)))))","(cos.f64 x)","(*.f64 (*.f64 eps #s(literal -1/6 binary64)) (cos.f64 x))","(*.f64 (cos.f64 x) (*.f64 eps #s(literal -1/6 binary64)))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))","(*.f64 #s(literal -1/6 binary64) (*.f64 (cos.f64 x) eps))","(*.f64 eps (*.f64 (cos.f64 x) #s(literal -1/6 binary64)))","(*.f64 (cos.f64 x) #s(literal -1/6 binary64))","(*.f64 #s(literal -1/6 binary64) (cos.f64 x))","(*.f64 (cos.f64 x) eps)","(*.f64 eps (cos.f64 x))"]],"time":5125.955078125,"type":"rewrite"},{"compiler":[[12793,1523]],"memory":[[1538800,33205232]],"time":45.9189453125,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",24.812160495108284,"binary64"],["(-.f64 #s(approx (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (cos.f64 eps) (sin.f64 x)))) (sin.f64 x))","fresh",24.711057728487656,"binary64"],["(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","next",0.34173416312645977,"binary64"],["#s(approx (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (sin.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))","fresh",0.34299169474711355,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","fresh",0.3950071988537599,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","done",0.27444039638328654,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","done",0.20333578118088041,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","done",0.39500719885375973,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","fresh",0.7932273109572219,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","next",0.9796979585227031,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","fresh",0.9520844910726226,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","fresh",0.7929221173177239,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","fresh",1.6239418447937743,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","fresh",1.62351544235321,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","fresh",1.7343705165754868,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","fresh",1.6239418805108774,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","next",1.623515461197612,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)) eps))","fresh",0.5395384488537598,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","next",1.7343953390805575,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","next",1.6200353763142648,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","fresh",1.619609211197612,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","fresh",1.7384703105651549,"binary64"]],"compiler":[[7,6],[25,17],[13,11],[27,19],[20,15],[24,16],[29,19],[18,13],[35,24],[27,18],[22,15],[12,9],[48,30],[46,28],[39,26],[34,22],[28,19],[30,20],[21,15],[75,40],[30,19],[28,18],[25,17],[13,11],[27,19],[20,15],[35,24],[27,18],[22,15],[12,9],[48,30],[46,28],[39,26],[34,22],[28,19],[30,20],[21,15],[75,40],[30,19],[28,18]],"count":[[328,22]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[319,17],"picked":[5,3]}],"memory":[[-3020928,20753776]],"min-error":[[0.018361092648988643,"binary64"]],"time":20.84912109375,"type":"prune"},{"egraph":[[0,8021,529,0.095715082],[9,6123,554,0.025619737],[8,5343,557,0.016296581],[7,5185,557,0.013657996],[6,5081,557,0.012920559],[5,4738,557,0.011236271],[4,4312,557,0.012069324],[3,1815,561,0.012759912],[2,514,561,0.005589184],[1,213,565,0.001863675],[0,106,565,0.001017902],[0,64,567,0.000621384]],"inputs":[["(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64)))","(sin.f64 x)","x","(+.f64 (cos.f64 eps) #s(literal -1 binary64))","(cos.f64 eps)","eps","#s(literal -1 binary64)","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(+.f64 eps x)","eps","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))","(*.f64 x x)","x","(fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x)","(*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))","(*.f64 eps eps)","eps","#s(literal -1/6 binary64)","(fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)","(fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))","(fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(*.f64 #s(literal -1/6 binary64) eps)","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64))","(*.f64 x x)","x","#s(literal 1/12 binary64)","#s(literal -1/2 binary64)","eps","(cos.f64 x)"]],"locations":[["#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","cost-diff",0],["(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","cost-diff",0],["#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","cost-diff",0],["(fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))","cost-diff",3],["(fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","cost-diff",4],["(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","cost-diff",0],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","cost-diff",0],["(+.f64 (cos.f64 eps) #s(literal -1 binary64))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64)))","cost-diff",0],["(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","cost-diff",1]],"memory":[[-1980080,50039728]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(fma.f64 (sin.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (sin.f64 eps) (cos.f64 x)))","(*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64)))","(*.f64 (sin.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(sin.f64 x)","x","(+.f64 (cos.f64 eps) #s(literal -1 binary64))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","eps","#s(literal -1 binary64)","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (sin.f64 eps) (cos.f64 x))","(cos.f64 x)","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64))","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(*.f64 (+.f64 eps x) #s(literal -1/2 binary64))","(+.f64 eps x)","eps","x","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 x (fma.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x) eps (*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 x (fma.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x) eps (*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))","(fma.f64 x (fma.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x) eps (*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(*.f64 x x)","x","(fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(*.f64 eps (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (fma.f64 #s(literal -1/2 binary64) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x)","(*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))","(*.f64 eps eps)","eps","#s(literal -1/6 binary64)","(fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)","(fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) eps #s(literal 1 binary64)) eps)","(fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) eps #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps))","(*.f64 #s(literal -1/6 binary64) eps)","#s(literal 1 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(*.f64 x x)","x","#s(literal 1/12 binary64)","#s(literal -1/2 binary64)","eps","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":361.85498046875,"type":"simplify"},{"compiler":[[380,60]],"locations":[["(fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64))","accuracy",0.01171875],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","accuracy",0.3871946988537599],["#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","accuracy",1.544259570930877],["(*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))","accuracy",0.17578125],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","accuracy",0.19161703118076698],["(*.f64 #s(literal -1/6 binary64) eps)","accuracy",0.33984375],["#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))))","accuracy",1.6200355999380895],["(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.00390625],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","accuracy",0.3871946988537599],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","accuracy",1.6227921505771412],["(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps)","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","accuracy",0.3871946988537599],["#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64))","accuracy",1.747313896263956],["(cos.f64 x)","accuracy",0.0078125],["(*.f64 (cos.f64 x) (sin.f64 eps))","accuracy",0.015625],["(*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64)))","accuracy",0.078125],["(+.f64 (cos.f64 eps) #s(literal -1 binary64))","accuracy",28.825664683588585]],"memory":[[2752560,93040768]],"mixsample":[[0.02099609375,"const",800],[30.91162109375,"adjust",800],[26.42431640625,"ival-cos",1600],[0.011962890625,"ival-mult",2000],[0.015869140625,"const",400],[0.123291015625,"ival-assert",0],[2.27197265625,"ival-sub",0],[5.55517578125,"ival-cos",0],[0.026611328125,"ival-sub",400],[10.474609375,"const",0],[3.582275390625,"ival-cos",400],[19.849365234375,"adjust",2000],[0.02392578125,"ival-mult",800],[33.62744140625,"ival-add",0],[0.37646484375,"ival-cos",800],[0.4013671875,"ival-sin",400],[65.636474609375,"ival-mult",0],[0.133056640625,"ival-mult",400],[12.44580078125,"ival-sin",0],[0.0087890625,"ival-add",2000],[0.10888671875,"ival-cos",3600],[0.02294921875,"const",2000],[0.282958984375,"ival-add",400],[0.114990234375,"adjust",2800],[0.29296875,"ival-true",0],[0.1494140625,"ival-sin",800],[0.02099609375,"ival-add",800],[0.447998046875,"exact",0]],"outcomes":[[70.719970703125,1,"valid",82],[202.502197265625,2,"valid",170],[1.5830078125,3,"valid",1],[1.723876953125,0,"valid",3]],"time":332.216796875,"type":"localize"},{"count":[[25,122]],"inputs":[["(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64)))","(sin.f64 x)","(+.f64 (cos.f64 eps) #s(literal -1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(*.f64 #s(literal -1/6 binary64) eps)","(*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64))"]],"memory":[[-1040336,14660032]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (- (cos eps) 1)))))) 1)))","(* x (- (cos eps) 1))","(* x (- (+ (cos eps) (* -1/6 (* (pow x 2) (- (cos eps) 1)))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* 1/120 (* (pow x 2) (- (cos eps) 1)))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (cos eps) 1))) (* 1/120 (- (cos eps) 1))))))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* eps (- (* 1/12 (pow eps 2)) 1/2))","(+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","-1/2","(- (* 1/12 (pow x 2)) 1/2)","(+ (* (cos x) (sin eps)) (* (sin x) (- (cos eps) 1)))","(* (sin x) (- (cos eps) 1))","(sin x)","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(* x (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(* -1/6 (* (pow eps 2) (* (pow x 3) (- (* 1/24 (pow eps 2)) 1/2))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) (pow x 3)) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2))))))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1/2 (sin x))","(* (cos x) (sin eps))","(cos x)","(* 1/12 (pow x 3))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(* 1/12 (pow x 2))","(* (pow x 2) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(* -1 (* x (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* eps (- (* 1/12 (pow eps 2)) 1/2)) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* -1 (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) x))) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2))) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(* eps (cos x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(* -1/2 eps)","(* eps (- (* 1/12 (* eps x)) 1/2))","(* eps (- (* eps (+ (* 1/12 eps) (* 1/12 x))) 1/2))","(* eps (- (* eps (+ (* 1/12 x) (* eps (+ 1/12 (* -1/144 (* eps x)))))) 1/2))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* 1/12 (pow x 3)))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (* 1/12 (pow x 2)) 1/6))))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (+ (* 1/12 (pow x 2)) (* eps (+ (* -1/144 (pow x 3)) (* 1/24 x)))) 1/6))))))))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(* -1/6 eps)","(* -1/6 (pow eps 2))","(- (cos eps) 1)","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* -1/144 (* (pow eps 4) x))","(* (pow eps 4) (+ (* -1/144 x) (* 1/12 (/ 1 eps))))","(* (pow eps 4) (+ (* -1/144 x) (+ (* 1/12 (/ x (pow eps 2))) (* 1/12 (/ 1 eps)))))","(* (pow eps 4) (- (+ (* -1/144 x) (+ (* 1/12 (/ x (pow eps 2))) (* 1/12 (/ 1 eps)))) (* 1/2 (/ 1 (pow eps 3)))))","(* (pow eps 4) (+ (* -1/144 (pow x 3)) (* 1/24 x)))","(* (pow eps 4) (- (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (* 1/12 (/ (pow x 2) eps)))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (* 1/12 (/ (pow x 3) (pow eps 2))))))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/2 (/ (pow x 2) (pow eps 3))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (+ (* 1/12 (/ (pow x 3) (pow eps 2))) (/ 1 (pow eps 3)))))))) (* 1/6 (/ 1 eps))))","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/12 (/ x eps)) 1/12) eps)) (* -1/144 x)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/12 x) (* 1/2 (/ 1 eps))) eps)) 1/12) eps)) (* -1/144 x)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (* -1/12 (pow x 2))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1/2 x) (* 1/12 (pow x 3))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (+ (* -1/2 x) (* 1/12 (pow x 3)))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))"]],"series":[[5.473876953125,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps)) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (* (cos x) (sin eps)) (cos x) (* -1/6 eps) (* (* eps eps) -1/6) (* (+ (* (* x x) 1/12) -1/2) x) (+ (* (* x x) 1/12) -1/2))","eps","-inf"],[9.308837890625,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps)) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (* (cos x) (sin eps)) (cos x) (* -1/6 eps) (* (* eps eps) -1/6) (* (+ (* (* x x) 1/12) -1/2) x) (+ (* (* x x) 1/12) -1/2))","eps","inf"],[3.389892578125,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps)) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (* (cos x) (sin eps)) (cos x) (* -1/6 eps) (* (* eps eps) -1/6) (* (+ (* (* x x) 1/12) -1/2) x) (+ (* (* x x) 1/12) -1/2))","eps","0"],[7.114990234375,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps)) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (* (cos x) (sin eps)) (cos x) (* -1/6 eps) (* (* eps eps) -1/6) (* (+ (* (* x x) 1/12) -1/2) x) (+ (* (* x x) 1/12) -1/2))","x","-inf"],[5.6162109375,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps)) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (* (cos x) (sin eps)) (cos x) (* -1/6 eps) (* (* eps eps) -1/6) (* (+ (* (* x x) 1/12) -1/2) x) (+ (* (* x x) 1/12) -1/2))","x","inf"],[3.241943359375,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (+ (* (* (+ eps x) -1/2) x) 1) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps)) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (* (sin x) -1/2) (* (cos x) (sin eps)) (cos x) (* -1/6 eps) (* (* eps eps) -1/6) (* (+ (* (* x x) 1/12) -1/2) x) (+ (* (* x x) 1/12) -1/2))","x","0"]],"time":36.72705078125,"type":"series"},{"count":[[122,120]],"egraph":[[0,8240,1789,0.091832414],[2,5298,1984,0.025670553],[1,1654,2042,0.016431198],[0,514,2123,0.004954485]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (- (cos eps) 1)))))) 1)))","(* x (- (cos eps) 1))","(* x (- (+ (cos eps) (* -1/6 (* (pow x 2) (- (cos eps) 1)))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* 1/120 (* (pow x 2) (- (cos eps) 1)))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (cos eps) 1))) (* 1/120 (- (cos eps) 1))))))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(* eps (- (* 1/12 (pow eps 2)) 1/2))","(+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","-1/2","(- (* 1/12 (pow x 2)) 1/2)","(+ (* (cos x) (sin eps)) (* (sin x) (- (cos eps) 1)))","(* (sin x) (- (cos eps) 1))","(sin x)","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(* -1/2 (pow x 2))","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(* x (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(* -1/6 (* (pow eps 2) (* (pow x 3) (- (* 1/24 (pow eps 2)) 1/2))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) (pow x 3)) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2))))))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1/2 (sin x))","(* (cos x) (sin eps))","(cos x)","(* 1/12 (pow x 3))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(* 1/12 (pow x 2))","(* (pow x 2) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(- (sin (- eps (* -1 x))) (sin x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(* -1 (* x (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* eps (- (* 1/12 (pow eps 2)) 1/2)) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* -1 (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) x))) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2))) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(* eps (cos x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(* -1/2 eps)","(* eps (- (* 1/12 (* eps x)) 1/2))","(* eps (- (* eps (+ (* 1/12 eps) (* 1/12 x))) 1/2))","(* eps (- (* eps (+ (* 1/12 x) (* eps (+ 1/12 (* -1/144 (* eps x)))))) 1/2))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* 1/12 (pow x 3)))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (* 1/12 (pow x 2)) 1/6))))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (+ (* 1/12 (pow x 2)) (* eps (+ (* -1/144 (pow x 3)) (* 1/24 x)))) 1/6))))))))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(* -1/6 eps)","(* -1/6 (pow eps 2))","(- (cos eps) 1)","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps x))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(* -1/144 (* (pow eps 4) x))","(* (pow eps 4) (+ (* -1/144 x) (* 1/12 (/ 1 eps))))","(* (pow eps 4) (+ (* -1/144 x) (+ (* 1/12 (/ x (pow eps 2))) (* 1/12 (/ 1 eps)))))","(* (pow eps 4) (- (+ (* -1/144 x) (+ (* 1/12 (/ x (pow eps 2))) (* 1/12 (/ 1 eps)))) (* 1/2 (/ 1 (pow eps 3)))))","(* (pow eps 4) (+ (* -1/144 (pow x 3)) (* 1/24 x)))","(* (pow eps 4) (- (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (* 1/12 (/ (pow x 2) eps)))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (* 1/12 (/ (pow x 3) (pow eps 2))))))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/2 (/ (pow x 2) (pow eps 3))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (+ (* 1/12 (/ (pow x 3) (pow eps 2))) (/ 1 (pow eps 3)))))))) (* 1/6 (/ 1 eps))))","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(- (sin (- x (* -1 eps))) (sin x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/12 (/ x eps)) 1/12) eps)) (* -1/144 x)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/12 x) (* 1/2 (/ 1 eps))) eps)) 1/12) eps)) (* -1/144 x)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (* -1/12 (pow x 2))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1/2 x) (* 1/12 (pow x 3))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (+ (* -1/2 x) (* 1/12 (pow x 3)))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))"]],"memory":[[2722608,51332704]],"method":["egg-herbie"],"outputs":[["(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (- (cos eps) 1)))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (cos.f64 eps) #s(literal -1/6 binary64) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(* x (- (cos eps) 1))","(*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x)","(* x (- (+ (cos eps) (* -1/6 (* (pow x 2) (- (cos eps) 1)))) 1))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* 1/120 (* (pow x 2) (- (cos eps) 1)))))) 1))","(fma.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (cos.f64 eps)) x (neg.f64 x))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (cos eps) 1))) (* 1/120 (- (cos eps) 1))))))) 1))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (fma.f64 (cos.f64 eps) #s(literal -1/6 binary64) #s(literal 1/6 binary64))) (*.f64 x x) (cos.f64 eps)) x (neg.f64 x))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (cos.f64 eps) #s(literal -1/6 binary64) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","eps","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 eps eps) x)) x)) x eps)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 x (+.f64 eps x)) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps x) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(* eps (- (* 1/12 (pow eps 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)","(+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 x (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+.f64 eps (*.f64 (*.f64 eps eps) (fma.f64 #s(literal -1/6 binary64) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (fma.f64 (*.f64 x (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) (*.f64 eps (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) (sin.f64 eps))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(fma.f64 (*.f64 (sin.f64 eps) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) (sin.f64 eps))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) (sin.f64 eps) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (sin.f64 eps) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)))))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* 1/12 (pow x 2)) 1/2)","(fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64))","(+ (* (cos x) (sin eps)) (* (sin x) (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x)))","(* (sin x) (- (cos eps) 1))","(*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x))","(sin x)","(sin.f64 x)","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(* -1/2 (pow x 2))","(*.f64 (*.f64 #s(literal -1/2 binary64) x) x)","(* (pow x 2) (- (* -1/2 (/ eps x)) 1/2))","(*.f64 (*.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (+ (* -1/2 (/ eps x)) (/ 1 (pow x 2))) 1/2))","(*.f64 (*.f64 (-.f64 (fma.f64 (/.f64 eps x) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1/2 binary64)) x) x)","(* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(*.f64 (*.f64 x (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(* x (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) x)) x)","(* -1/6 (* (pow eps 2) (* (pow x 3) (- (* 1/24 (pow eps 2)) 1/2))))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) #s(literal -1/6 binary64)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) x)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) eps (*.f64 (/.f64 eps x) (/.f64 eps x))) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) (pow x 3)) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) eps (*.f64 (/.f64 eps x) (/.f64 eps x))) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) x))) (pow.f64 x #s(literal 3 binary64)))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (cos.f64 x) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(* (cos x) (sin eps))","(*.f64 (sin.f64 eps) (cos.f64 x))","(cos x)","(cos.f64 x)","(* 1/12 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))","(* (pow x 3) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* 1/12 (pow x 2))","(*.f64 #s(literal 1/12 binary64) (*.f64 x x))","(* (pow x 2) (- 1/12 (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) x) x)","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* (pow x 2) (- (* -1 (/ (- (* 1/2 eps) (/ 1 x)) x)) 1/2))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) eps (/.f64 #s(literal -1 binary64) x)) x)) (*.f64 x x))","(* -1 (* x (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) x)) x)","(* -1 (* (pow x 3) (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) x)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* eps (- (* 1/12 (pow eps 2)) 1/2)) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 eps (fma.f64 eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))) (neg.f64 x))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* -1 (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) x))) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2))) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps (/.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) x))) x)) (neg.f64 x))))","(* -1 (* (pow x 3) (- (* 1/2 (/ 1 (pow x 2))) 1/12)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 x x)) #s(literal 1/12 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (cos.f64 x) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(*.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/720 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 eps eps))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64))))) (*.f64 eps eps))","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64)) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(+ 1 (+ (* -1/2 (* eps x)) (* -1/2 (pow x 2))))","(fma.f64 (*.f64 x (+.f64 eps x)) #s(literal -1/2 binary64) #s(literal 1 binary64))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(* eps (- (* 1/12 (* eps x)) 1/2))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps x) #s(literal -1/2 binary64)) eps)","(* eps (- (* eps (+ (* 1/12 eps) (* 1/12 x))) 1/2))","(*.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal 1/12 binary64)) eps #s(literal -1/2 binary64)) eps)","(* eps (- (* eps (+ (* 1/12 x) (* eps (+ 1/12 (* -1/144 (* eps x)))))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/144 binary64) (*.f64 eps x) #s(literal 1/12 binary64)) eps (*.f64 #s(literal 1/12 binary64) x)) eps #s(literal -1/2 binary64)) eps)","(* eps (+ 1 (* -1/2 (pow x 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* 1/12 (pow x 3)))))))","(fma.f64 (fma.f64 (*.f64 x (+.f64 eps x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) eps)) eps eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (* 1/12 (pow x 2)) 1/6))))))))","(fma.f64 (fma.f64 (*.f64 x (+.f64 eps x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64)) eps (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))) eps)) eps eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (+ (* 1/12 (pow x 2)) (* eps (+ (* -1/144 (pow x 3)) (* 1/24 x)))) 1/6))))))))","(fma.f64 (fma.f64 (*.f64 x (+.f64 eps x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/144 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) x)) eps (fma.f64 (*.f64 #s(literal 1/12 binary64) x) x #s(literal -1/6 binary64))) eps (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))) eps)) eps eps)","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(*.f64 (cos.f64 x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/120 binary64) #s(literal -1/6 binary64))) (*.f64 (cos.f64 x) eps))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) (cos.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal -1/5040 binary64) #s(literal 1/120 binary64))))) eps)","(* -1/6 eps)","(*.f64 #s(literal -1/6 binary64) eps)","(* -1/6 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps) eps)","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1/2 (* eps x))","(*.f64 (*.f64 eps x) #s(literal -1/2 binary64))","(* eps (+ (* -1/2 x) (+ (* -1/2 (/ (pow x 2) eps)) (/ 1 eps))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 x (/.f64 x eps) x)) eps #s(literal 1 binary64))","(* -1/144 (* (pow eps 4) x))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) x) #s(literal -1/144 binary64))","(* (pow eps 4) (+ (* -1/144 x) (* 1/12 (/ 1 eps))))","(*.f64 (fma.f64 #s(literal -1/144 binary64) x (/.f64 #s(literal 1/12 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/144 x) (+ (* 1/12 (/ x (pow eps 2))) (* 1/12 (/ 1 eps)))))","(*.f64 (fma.f64 (+.f64 (/.f64 x eps) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) eps) (*.f64 #s(literal -1/144 binary64) x)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ (* -1/144 x) (+ (* 1/12 (/ x (pow eps 2))) (* 1/12 (/ 1 eps)))) (* 1/2 (/ 1 (pow eps 3)))))","(*.f64 (fma.f64 (+.f64 (/.f64 x eps) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) eps) (fma.f64 #s(literal -1/144 binary64) x (/.f64 #s(literal -1/2 binary64) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/144 (pow x 3)) (* 1/24 x)))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal -1/144 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) x)))","(* (pow eps 4) (- (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (* 1/12 (/ (pow x 2) eps)))) (* 1/6 (/ 1 eps))))","(*.f64 (-.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal -1/144 binary64) x (/.f64 #s(literal 1/12 binary64) eps)) (*.f64 #s(literal 1/24 binary64) x)) (/.f64 #s(literal 1/6 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (* 1/12 (/ (pow x 3) (pow eps 2))))))) (* 1/6 (/ 1 eps))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 x eps) (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (fma.f64 (*.f64 (/.f64 x eps) (fma.f64 x (/.f64 x eps) x)) #s(literal 1/12 binary64) (/.f64 #s(literal -1/6 binary64) eps)))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/2 (/ (pow x 2) (pow eps 3))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (+ (* 1/12 (/ (pow x 3) (pow eps 2))) (/ 1 (pow eps 3)))))))) (* 1/6 (/ 1 eps))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) (fma.f64 x (/.f64 x eps) x) (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (fma.f64 (/.f64 #s(literal 1/12 binary64) eps) (fma.f64 x x (/.f64 (pow.f64 x #s(literal 3 binary64)) eps)) (/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))))) (/.f64 #s(literal 1/6 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 4) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (sin.f64 x))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (/.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1 (* eps (+ (* -1 (/ (+ 1 (* -1/2 (pow x 2))) eps)) (* 1/2 x))))","(fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps) eps (*.f64 (*.f64 eps x) #s(literal -1/2 binary64)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/12 (/ x eps)) 1/12) eps)) (* -1/144 x)))","(*.f64 (fma.f64 (/.f64 (+.f64 (/.f64 x eps) #s(literal 1 binary64)) eps) #s(literal 1/12 binary64) (*.f64 #s(literal -1/144 binary64) x)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/12 x) (* 1/2 (/ 1 eps))) eps)) 1/12) eps)) (* -1/144 x)))","(*.f64 (fma.f64 #s(literal -1/144 binary64) x (/.f64 (-.f64 #s(literal -1/12 binary64) (/.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1/2 binary64) eps)) eps)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (* -1/12 (pow x 2))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (fma.f64 #s(literal -1/12 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1/2 x) (* 1/12 (pow x 3))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/12 binary64) x) x (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (+ (* -1/2 x) (* 1/12 (pow x 3)))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (-.f64 (fma.f64 #s(literal -1/12 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal -1 binary64)) (neg.f64 eps))) eps)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (cos.f64 x))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal 1/6 binary64) (cos.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":246.839111328125,"type":"simplify"},{"count":[[25,189]],"inputs":[["(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64)))","(sin.f64 x)","(+.f64 (cos.f64 eps) #s(literal -1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64)))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(*.f64 #s(literal -1/6 binary64) eps)","(*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64))"]],"memory":[[4326640,28669072]],"outputs":[["(neg.f64 (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64))) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(neg.f64 (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64))) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(neg.f64 (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64))) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(neg.f64 (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64))) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","#s(approx (cos 3) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(approx (cos 3) #s(literal -1 binary64)) #s(literal -1 binary64))","#s(approx (cos 3) #s(literal -1 binary64))","#s(approx (cos 3) (*.f64 #s(approx (cos 3) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(approx (cos 3) #s(literal -1/2 binary64)) #s(literal -1 binary64))","#s(approx (cos 3) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1/32 binary64)","#s(literal -1/32 binary64)","#s(literal 1/2 binary64)","#s(literal 1/8 binary64)","#s(literal -1/8 binary64)","#s(literal -3/2 binary64)","#s(literal 3/2 binary64)","#s(literal 1/16 binary64)","#s(literal -1/16 binary64)","#s(literal 1/64 binary64)","#s(literal -1/64 binary64)","#s(literal 1/512 binary64)","(neg.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","(+.f64 #s(literal 1/12 binary64) #s(literal 1/20736 binary64))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/20736 binary64))","(+.f64 (+.f64 #s(literal -1/6 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1 binary64) #s(literal -1/6 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) #s(literal 1/1296 binary64))","(+.f64 (+.f64 #s(literal -1 binary64) #s(literal -1/6 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) #s(literal -1 binary64))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) #s(literal -1/6 binary64))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal -1 binary64) #s(literal -1/6 binary64)))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(neg.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","(+.f64 #s(literal 1/12 binary64) #s(literal 1/20736 binary64))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/20736 binary64))","(+.f64 (+.f64 #s(literal -1/6 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1 binary64) #s(literal -1/6 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) #s(literal 1/1296 binary64))","(+.f64 (+.f64 #s(literal -1 binary64) #s(literal -1/6 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) #s(literal -1 binary64))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) #s(literal -1/6 binary64))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal -1 binary64) #s(literal -1/6 binary64)))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","#s(approx (cos 3) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","#s(approx (cos 3) (*.f64 (fma.f64 #s(approx (cos 3) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))) #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(approx (cos 3) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))) #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 #s(approx (cos 3) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))) #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","#s(approx (cos 3) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))","(neg.f64 (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64))) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(neg.f64 (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(+.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(+.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (cos.f64 #s(literal -1 binary64)))","(-.f64 (-.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (cos.f64 #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal -1 binary64))) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) (cos.f64 #s(literal -1 binary64)))","(*.f64 (cos.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64))","#s(literal -1/6 binary64)","#s(literal 1/6 binary64)","(neg.f64 #s(literal -1/6 binary64))","(-.f64 #s(literal -1 binary64) #s(literal -1/6 binary64))","(*.f64 #s(literal -1 binary64) #s(literal -1/6 binary64))","(*.f64 #s(literal -1/6 binary64) #s(literal -1 binary64))","#s(literal -1/6 binary64)","#s(literal 1/6 binary64)","(neg.f64 #s(literal -1/6 binary64))","(-.f64 #s(literal -1 binary64) #s(literal -1/6 binary64))","(*.f64 #s(literal -1 binary64) #s(literal -1/6 binary64))","(*.f64 #s(literal -1/6 binary64) #s(literal -1 binary64))","(neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))","(+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))","(+.f64 #s(literal -1/2 binary64) #s(literal 1/20736 binary64))","(+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))","(+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)) #s(literal 1/12 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (*.f64 #s(literal 1/20736 binary64) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (*.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal 1/12 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 1/12 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))) (*.f64 #s(literal 1/12 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))))","(-.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))","(neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))","(+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))","(+.f64 #s(literal -1/2 binary64) #s(literal 1/20736 binary64))","(+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))","(+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))","(+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)))","(+.f64 (*.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)) #s(literal 1/12 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (*.f64 #s(literal 1/20736 binary64) (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))","(+.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)) (*.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal 1/12 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64)) #s(literal 1/12 binary64)))","(+.f64 (*.f64 #s(literal 1/12 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))) (*.f64 #s(literal 1/12 binary64) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) #s(literal -1/2 binary64))))","(-.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64))"]],"time":1440.64697265625,"type":"rewrite"},{"compiler":[[8711,1072]],"memory":[[-3795376,20158208]],"time":29.889892578125,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",24.812160495108284,"binary64"],["(-.f64 #s(approx (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (cos.f64 eps) (sin.f64 x)))) (sin.f64 x))","fresh",24.711057728487656,"binary64"],["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","next",0.09463533213905531,"binary64"],["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.14507599020379397,"binary64"],["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.2736364979115759,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","next",0.3950071988537599,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","done",0.39500719885375973,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","fresh",0.7932273109572219,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))) eps (cos.f64 x)) eps))","fresh",1.087998334750779,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","next",1.087999963505867,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","fresh",1.072635755694273,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","done",0.9796979585227031,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","fresh",1.4899470002641306,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","fresh",1.469856177095685,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(approx (+ (* (* x x) 1/12) -1/2) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","fresh",0.9520844910726226,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))) eps (cos.f64 x)) eps))","fresh",1.0661053452679206,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","fresh",0.7929221173177239,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)) eps))","fresh",0.5395384488537598,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","done",1.7343953390805575,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","fresh",53.63897442726945,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","fresh",54.048472406648315,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","fresh",61.41430375442673,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","fresh",61.4061756762754,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","next",60.65450681709325,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","next",1.623506229443087,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","fresh",1.619609211197612,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","fresh",1.7384703105651549,"binary64"],["#s(approx (+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x))))","fresh",0.34173416312645977,"binary64"]],"compiler":[[7,6],[25,17],[29,20],[24,18],[19,15],[20,15],[18,13],[35,24],[26,19],[22,16],[22,16],[27,18],[44,25],[39,23],[30,20],[23,17],[12,9],[30,20],[21,15],[21,15],[21,15],[21,15],[14,12],[26,21],[91,48],[30,19],[28,18],[26,20],[25,17],[29,20],[24,18],[19,15],[20,15],[35,24],[26,19],[22,16],[22,16],[44,25],[39,23],[30,20],[23,17],[12,9],[30,20],[21,15],[21,15],[21,15],[14,12],[26,21],[91,48],[30,19],[28,18],[26,20]],"count":[[219,28]],"kept":[{"done":[4,2],"fresh":[13,7],"new":[197,17],"picked":[5,2]}],"memory":[[-3723552,18655168]],"min-error":[[0.00390625,"binary64"]],"time":66.10009765625,"type":"prune"},{"egraph":[[0,8358,475,0.111668182],[9,5995,500,0.023060626],[8,5217,506,0.017267567],[7,5194,506,0.01321288],[6,5178,506,0.0144866],[5,4945,506,0.015533396],[4,4378,506,0.017114153],[3,2022,518,0.016433674],[2,550,518,0.006519858],[1,237,524,0.002002442],[0,120,538,0.001205557],[0,87,544,0.000675338]],"inputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","(sin.f64 x)","x","#s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","#s(literal 1/20736 binary64)","#s(literal 1/12 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)))","#s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64)))","(+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","#s(literal -1/2 binary64)","eps","(cos.f64 x)","x","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))))","eps","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","#s(literal 1 binary64)","(fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))","(*.f64 eps #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(sin.f64 x)","x","(cos.f64 x)"]],"locations":[["(fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","cost-diff",0],["(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))))","cost-diff",2],["(fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","cost-diff",0],["(+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))","cost-diff",2],["(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","cost-diff",0],["#s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))","cost-diff",0],["#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","cost-diff",0],["#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","cost-diff",0],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","cost-diff",0],["(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","cost-diff",2],["#s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","cost-diff",0],["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","cost-diff",1]],"memory":[[11115968,54445472]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(fma.f64 (sin.f64 eps) (cos.f64 x) (*.f64 #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) eps #s(literal 1/24 binary64)) #s(literal -1/2 binary64)))) (sin.f64 x)))","(*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","(*.f64 #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) eps #s(literal 1/24 binary64)) #s(literal -1/2 binary64)))) (sin.f64 x))","(sin.f64 x)","x","#s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","#s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) eps #s(literal 1/24 binary64)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) eps #s(literal 1/24 binary64)) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) eps #s(literal 1/24 binary64)) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) eps #s(literal 1/24 binary64)) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64))","(fma.f64 (*.f64 #s(literal -1/720 binary64) eps) eps #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 eps eps)","eps","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (cos.f64 x) (sin.f64 eps))","(*.f64 (sin.f64 eps) (cos.f64 x))","(cos.f64 x)","(sin.f64 eps)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1729/20736 binary64)))","#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1729/20736 binary64))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","#s(literal 1729/20736 binary64)","#s(literal 1/20736 binary64)","#s(literal 1/12 binary64)","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)))","#s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(*.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","#s(literal 1 binary64)","eps","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) #s(literal -5/12 binary64)) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) #s(literal -5/12 binary64)) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x))","(fma.f64 #s(approx (* (sin x) -1/2) #s(literal -5/12 binary64)) eps (cos.f64 x))","#s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64)))","#s(approx (* (sin x) -1/2) #s(literal -5/12 binary64))","(+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","#s(literal 1/12 binary64)","#s(literal -1/2 binary64)","eps","(cos.f64 x)","x","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","eps","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))","#s(literal 1 binary64)","(fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(*.f64 eps #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) eps)","#s(literal -1/2 binary64)","(sin.f64 x)","x","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":355.330078125,"type":"simplify"},{"compiler":[[317,81]],"locations":[["(fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))","accuracy",0.00390625],["(cos.f64 x)","accuracy",0.0078125],["(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))))","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","accuracy",0.3871946988537599],["(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","accuracy",0.0078125],["(cos.f64 x)","accuracy",0.0078125],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","accuracy",0.3871946988537599],["#s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64)))","accuracy",61.55404444280654],["(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","accuracy",0.01171875],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","accuracy",0.19161703118076698],["#s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))","accuracy",0.8631889909663755],["#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)))","accuracy",1.6200355999380895],["(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","accuracy",1.0],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","accuracy",62.48407523605154],["#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","accuracy",62.99605438731668],["(cos.f64 x)","accuracy",0.0078125],["(*.f64 (cos.f64 x) (sin.f64 eps))","accuracy",0.015625],["(*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","accuracy",0.078125],["#s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","accuracy",0.09092727474514084]],"memory":[[-5200080,121147312]],"mixsample":[[6.578857421875,"ival-div",0],[41.101806640625,"adjust",800],[26.880859375,"ival-cos",1600],[0.1318359375,"ival-assert",0],[3.067626953125,"ival-sub",0],[23.03759765625,"ival-cos",0],[0.096435546875,"ival-sub",400],[25.665771484375,"const",0],[3.42919921875,"ival-cos",400],[26.571533203125,"adjust",2000],[0.013916015625,"ival-mult",800],[50.840576171875,"ival-add",0],[0.401123046875,"ival-cos",800],[0.11474609375,"ival-mult",400],[0.405029296875,"ival-sin",400],[92.128662109375,"ival-mult",0],[16.756591796875,"ival-sin",0],[0.098876953125,"ival-add",400],[0.31201171875,"ival-true",0],[0.149169921875,"ival-sin",800],[0.011962890625,"ival-add",800],[0.7392578125,"exact",0]],"outcomes":[[105.038330078125,1,"valid",82],[331.9140625,2,"valid",171],[2.236083984375,0,"valid",3]],"time":508.347900390625,"type":"localize"},{"count":[[22,108]],"inputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","(sin.f64 x)","#s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)))","#s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","(+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","(fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","#s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64)))"]],"memory":[[3721008,11902224]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (- (cos eps) 1)))))) 1)))","(* x (- (cos eps) 1))","(* x (- (+ (cos eps) (* -1/6 (* (pow x 2) (- (cos eps) 1)))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* 1/120 (* (pow x 2) (- (cos eps) 1)))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (cos eps) 1))) (* 1/120 (- (cos eps) 1))))))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(+ 1 (* 1/2 (* eps x)))","(+ 1 (* x (- (* x (- 1/2 (* -1/4 (pow eps 2)))) (* -1/2 eps))))","(+ 1 (* x (- (* x (- (+ 1/2 (* -1 (* x (+ (* -1/2 (* eps (- 1/2 (* -1/4 (pow eps 2))))) (+ (* -1/4 eps) (* 1/12 eps)))))) (* -1/4 (pow eps 2)))) (* -1/2 eps))))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (* (cos x) (sin eps)) (* (sin x) (- (cos eps) 1)))","(* (sin x) (- (cos eps) 1))","(sin x)","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1/6 (* (pow eps 2) (* (pow x 3) (- (* 1/24 (pow eps 2)) 1/2))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) (pow x 3)) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2))))))","(* -1/2 (* eps (pow x 2)))","(* (pow x 2) (+ (* -1/2 eps) (/ eps (pow x 2))))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(/ 1 (+ (cos x) (* -1/2 (* eps (sin x)))))","(* (cos x) (sin eps))","(cos x)","(* -1/2 (sin x))","(- (sin (- eps (* -1 x))) (sin x))","(* -1 (* (pow x 3) (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* eps (- (* 1/12 (pow eps 2)) 1/2)) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* -1 (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) x))) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2))) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* eps (cos x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* 1/12 (pow x 3)))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (* 1/12 (pow x 2)) 1/6))))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (+ (* 1/12 (pow x 2)) (* eps (+ (* -1/144 (pow x 3)) (* 1/24 x)))) 1/6))))))))","(/ 1 (cos x))","(+ (* 1/2 (/ (* eps (sin x)) (pow (cos x) 2))) (/ 1 (cos x)))","(+ (* eps (- (* 1/4 (/ (* eps (pow (sin x) 2)) (pow (cos x) 3))) (* -1/2 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(+ (* eps (- (* eps (- (* 1/8 (/ (* eps (pow (sin x) 3)) (pow (cos x) 4))) (* -1/4 (/ (pow (sin x) 2) (pow (cos x) 3))))) (* -1/2 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(- (cos eps) 1)","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* (pow eps 4) (+ (* -1/144 (pow x 3)) (* 1/24 x)))","(* (pow eps 4) (- (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (* 1/12 (/ (pow x 2) eps)))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (* 1/12 (/ (pow x 3) (pow eps 2))))))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/2 (/ (pow x 2) (pow eps 3))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (+ (* 1/12 (/ (pow x 3) (pow eps 2))) (/ 1 (pow eps 3)))))))) (* 1/6 (/ 1 eps))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(/ -2 (* eps (sin x)))","(/ (- (* -4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x)))) eps)","(/ (- (* -8 (/ (pow (cos x) 2) (* (pow eps 2) (pow (sin x) 3)))) (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x))))) eps)","(/ (- (* -16 (/ (pow (cos x) 3) (* (pow eps 3) (pow (sin x) 4)))) (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (+ (* 8 (/ (pow (cos x) 2) (* (pow eps 2) (pow (sin x) 3)))) (* 2 (/ 1 (sin x)))))) eps)","(- (sin (- x (* -1 eps))) (sin x))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (* -1/12 (pow x 2))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1/2 x) (* 1/12 (pow x 3))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (+ (* -1/2 x) (* 1/12 (pow x 3)))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (/ (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x)))) eps))","(* -1 (/ (+ (* -1 (/ (- (* -8 (/ (pow (cos x) 2) (* eps (pow (sin x) 3)))) (* 4 (/ (cos x) (pow (sin x) 2)))) eps)) (* 2 (/ 1 (sin x)))) eps))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 16 (/ (pow (cos x) 3) (* eps (pow (sin x) 4)))) (* -8 (/ (pow (cos x) 2) (pow (sin x) 3)))) eps)) (* 4 (/ (cos x) (pow (sin x) 2)))) eps)) (* 2 (/ 1 (sin x)))) eps))"]],"series":[[3.18408203125,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (+ 1/20736 1/12) (- (sin (+ x eps)) (sin x)) (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (* (+ (* (* -1/2 x) x) 1) eps) (+ 1/12 -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (/ eps (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x)))) (- (sin (+ x eps)) (sin x)) (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x))) (+ (* (* eps -1/2) (sin x)) (cos x)) (* (cos x) (sin eps)) (cos x) (* (sin x) -1/2))","eps","-inf"],[3.2041015625,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (+ 1/20736 1/12) (- (sin (+ x eps)) (sin x)) (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (* (+ (* (* -1/2 x) x) 1) eps) (+ 1/12 -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (/ eps (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x)))) (- (sin (+ x eps)) (sin x)) (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x))) (+ (* (* eps -1/2) (sin x)) (cos x)) (* (cos x) (sin eps)) (cos x) (* (sin x) -1/2))","eps","inf"],[3.806884765625,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (+ 1/20736 1/12) (- (sin (+ x eps)) (sin x)) (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (* (+ (* (* -1/2 x) x) 1) eps) (+ 1/12 -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (/ eps (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x)))) (- (sin (+ x eps)) (sin x)) (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x))) (+ (* (* eps -1/2) (sin x)) (cos x)) (* (cos x) (sin eps)) (cos x) (* (sin x) -1/2))","eps","0"],[4.35888671875,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (+ 1/20736 1/12) (- (sin (+ x eps)) (sin x)) (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (* (+ (* (* -1/2 x) x) 1) eps) (+ 1/12 -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (/ eps (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x)))) (- (sin (+ x eps)) (sin x)) (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x))) (+ (* (* eps -1/2) (sin x)) (cos x)) (* (cos x) (sin eps)) (cos x) (* (sin x) -1/2))","x","-inf"],[4.2109375,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (+ 1/20736 1/12) (- (sin (+ x eps)) (sin x)) (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (* (+ (* (* -1/2 x) x) 1) eps) (+ 1/12 -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (/ eps (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x)))) (- (sin (+ x eps)) (sin x)) (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x))) (+ (* (* eps -1/2) (sin x)) (cos x)) (* (cos x) (sin eps)) (cos x) (* (sin x) -1/2))","x","inf"],[1.97705078125,"((+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (* (sin x) (+ (cos eps) -1)) (sin x) (+ (cos eps) -1) (+ 1/20736 1/12) (- (sin (+ x eps)) (sin x)) (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (- (sin (+ x eps)) (sin x)) (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (* (+ (* (* -1/2 x) x) 1) eps) (+ 1/12 -1/2) (- (sin (+ x eps)) (sin x)) (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (+ (* (* (sin x) -1/2) eps) (cos x)) (/ eps (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x)))) (- (sin (+ x eps)) (sin x)) (/ 1 (+ (* (* eps -1/2) (sin x)) (cos x))) (+ (* (* eps -1/2) (sin x)) (cos x)) (* (cos x) (sin eps)) (cos x) (* (sin x) -1/2))","x","0"]],"time":23.281005859375,"type":"series"},{"count":[[108,106]],"egraph":[[0,8609,1795,0.094506662],[2,5552,1985,0.026073083],[1,1703,2040,0.017338536],[0,547,2121,0.005110142]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (- (cos eps) 1)))))) 1)))","(* x (- (cos eps) 1))","(* x (- (+ (cos eps) (* -1/6 (* (pow x 2) (- (cos eps) 1)))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* 1/120 (* (pow x 2) (- (cos eps) 1)))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (cos eps) 1))) (* 1/120 (- (cos eps) 1))))))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* -1/2 (* (pow eps 2) x)))","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","1","(+ 1 (* -1/2 (* eps x)))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(+ 1 (* 1/2 (* eps x)))","(+ 1 (* x (- (* x (- 1/2 (* -1/4 (pow eps 2)))) (* -1/2 eps))))","(+ 1 (* x (- (* x (- (+ 1/2 (* -1 (* x (+ (* -1/2 (* eps (- 1/2 (* -1/4 (pow eps 2))))) (+ (* -1/4 eps) (* 1/12 eps)))))) (* -1/4 (pow eps 2)))) (* -1/2 eps))))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1/2 x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(+ (* (cos x) (sin eps)) (* (sin x) (- (cos eps) 1)))","(* (sin x) (- (cos eps) 1))","(sin x)","(- (sin (+ eps x)) (sin x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1/6 (* (pow eps 2) (* (pow x 3) (- (* 1/24 (pow eps 2)) 1/2))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) (pow x 3)) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2))))))","(* -1/2 (* eps (pow x 2)))","(* (pow x 2) (+ (* -1/2 eps) (/ eps (pow x 2))))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(+ (cos x) (* -1/2 (* eps (sin x))))","(/ 1 (+ (cos x) (* -1/2 (* eps (sin x)))))","(* (cos x) (sin eps))","(cos x)","(* -1/2 (sin x))","(- (sin (- eps (* -1 x))) (sin x))","(* -1 (* (pow x 3) (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* eps (- (* 1/12 (pow eps 2)) 1/2)) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* -1 (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) x))) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2))) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(* eps (cos x))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(* eps (+ 1 (* -1/2 (pow x 2))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* 1/12 (pow x 3)))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (* 1/12 (pow x 2)) 1/6))))))))","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (+ (* 1/12 (pow x 2)) (* eps (+ (* -1/144 (pow x 3)) (* 1/24 x)))) 1/6))))))))","(/ 1 (cos x))","(+ (* 1/2 (/ (* eps (sin x)) (pow (cos x) 2))) (/ 1 (cos x)))","(+ (* eps (- (* 1/4 (/ (* eps (pow (sin x) 2)) (pow (cos x) 3))) (* -1/2 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(+ (* eps (- (* eps (- (* 1/8 (/ (* eps (pow (sin x) 3)) (pow (cos x) 4))) (* -1/4 (/ (pow (sin x) 2) (pow (cos x) 3))))) (* -1/2 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(- (cos eps) 1)","(* 1/24 (* (pow eps 4) (sin x)))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(* (pow eps 4) (+ (* -1/144 (pow x 3)) (* 1/24 x)))","(* (pow eps 4) (- (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (* 1/12 (/ (pow x 2) eps)))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (* 1/12 (/ (pow x 3) (pow eps 2))))))) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/2 (/ (pow x 2) (pow eps 3))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (+ (* 1/12 (/ (pow x 3) (pow eps 2))) (/ 1 (pow eps 3)))))))) (* 1/6 (/ 1 eps))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(* -1/2 (* eps (sin x)))","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(/ -2 (* eps (sin x)))","(/ (- (* -4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x)))) eps)","(/ (- (* -8 (/ (pow (cos x) 2) (* (pow eps 2) (pow (sin x) 3)))) (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x))))) eps)","(/ (- (* -16 (/ (pow (cos x) 3) (* (pow eps 3) (pow (sin x) 4)))) (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (+ (* 8 (/ (pow (cos x) 2) (* (pow eps 2) (pow (sin x) 3)))) (* 2 (/ 1 (sin x)))))) eps)","(- (sin (- x (* -1 eps))) (sin x))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (* -1/12 (pow x 2))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1/2 x) (* 1/12 (pow x 3))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (+ (* -1/2 x) (* 1/12 (pow x 3)))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(* -1 (/ (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x)))) eps))","(* -1 (/ (+ (* -1 (/ (- (* -8 (/ (pow (cos x) 2) (* eps (pow (sin x) 3)))) (* 4 (/ (cos x) (pow (sin x) 2)))) eps)) (* 2 (/ 1 (sin x)))) eps))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 16 (/ (pow (cos x) 3) (* eps (pow (sin x) 4)))) (* -8 (/ (pow (cos x) 2) (pow (sin x) 3)))) eps)) (* 4 (/ (cos x) (pow (sin x) 2)))) eps)) (* 2 (/ 1 (sin x)))) eps))"]],"memory":[[588400,47904608]],"method":["egg-herbie"],"outputs":[["(sin eps)","(sin.f64 eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (- (cos eps) 1)))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(* x (- (cos eps) 1))","(*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) x)","(* x (- (+ (cos eps) (* -1/6 (* (pow x 2) (- (cos eps) 1)))) 1))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x)","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* 1/120 (* (pow x 2) (- (cos eps) 1)))))) 1))","(fma.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (cos.f64 eps)) x (neg.f64 x))","(* x (- (+ (cos eps) (* (pow x 2) (+ (* -1/6 (- (cos eps) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (cos eps) 1))) (* 1/120 (- (cos eps) 1))))))) 1))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64))) (*.f64 x x) (cos.f64 eps)) x (neg.f64 x))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (cos.f64 eps) #s(literal 1/6 binary64)) x (*.f64 (sin.f64 eps) #s(literal -1/2 binary64))) x (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2))))","(+.f64 eps (*.f64 (*.f64 eps eps) (fma.f64 #s(literal -1/6 binary64) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x))))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* eps (* x (- (* 1/12 (pow eps 2)) 1/2))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(+ (* eps (+ 1 (* -1/6 (pow eps 2)))) (* x (+ (* x (+ (* -1/6 (* (pow eps 2) (* x (- (* 1/24 (pow eps 2)) 1/2)))) (* eps (- (* 1/12 (pow eps 2)) 1/2)))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))))","(fma.f64 (fma.f64 (*.f64 x (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) (*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","(+ eps (* -1/2 (* (pow eps 2) x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)","(+ eps (* x (+ (* -1/2 (* eps x)) (* -1/2 (pow eps 2)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)","(+ eps (* x (+ (* -1/2 (pow eps 2)) (* x (+ (* -1/2 eps) (* 1/12 (* (pow eps 2) x)))))))","(fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/12 binary64)) x)) x eps)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (* eps x)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* -1/2 x))))","(fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1/2 eps) (* x (- (* 1/12 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))","(+ 1 (* 1/2 (* eps x)))","(fma.f64 (*.f64 eps x) #s(literal 1/2 binary64) #s(literal 1 binary64))","(+ 1 (* x (- (* x (- 1/2 (* -1/4 (pow eps 2)))) (* -1/2 eps))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/4 binary64) #s(literal 1/2 binary64)) x)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (- (+ 1/2 (* -1 (* x (+ (* -1/2 (* eps (- 1/2 (* -1/4 (pow eps 2))))) (+ (* -1/4 eps) (* 1/12 eps)))))) (* -1/4 (pow eps 2)))) (* -1/2 eps))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) eps (fma.f64 (neg.f64 x) (*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/4 binary64) #s(literal 1/2 binary64)) #s(literal -1/2 binary64) #s(literal -1/6 binary64))) #s(literal 1/2 binary64))) x (*.f64 #s(literal 1/2 binary64) eps)) x #s(literal 1 binary64))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) (sin.f64 eps))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(fma.f64 (*.f64 (sin.f64 eps) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) (sin.f64 eps))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) (sin.f64 eps) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (sin.f64 eps) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)))))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/12 (pow x 2)) 1/2))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* -1/240 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/240 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/12 (* (pow x 2) (- (* 1/10080 (pow x 2)) 1/240)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/10080 binary64) (*.f64 x x) #s(literal -1/240 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(+ (* (cos x) (sin eps)) (* (sin x) (- (cos eps) 1)))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x)))","(* (sin x) (- (cos eps) 1))","(*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x))","(sin x)","(sin.f64 x)","(- (sin (+ eps x)) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* eps (+ (cos x) (* eps (+ (* -1/6 (* eps (cos x))) (* (sin x) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(* -1/6 (* (pow eps 2) (* (pow x 3) (- (* 1/24 (pow eps 2)) 1/2))))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) #s(literal -1/6 binary64)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) eps) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) eps (/.f64 (*.f64 eps eps) (*.f64 x x))) (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) eps) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* -1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (+ (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) (pow x 3)) (+ (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) eps) eps (/.f64 (*.f64 eps eps) (*.f64 x x))) (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) eps) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1/2 (* eps (pow x 2)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) x) x) eps)","(* (pow x 2) (+ (* -1/2 eps) (/ eps (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (*.f64 x x))) x) x)","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)) eps)","(+ (cos x) (* -1/2 (* eps (sin x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x))","(/ 1 (+ (cos x) (* -1/2 (* eps (sin x)))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps (cos.f64 x)))","(* (cos x) (sin eps))","(*.f64 (sin.f64 eps) (cos.f64 x))","(cos x)","(cos.f64 x)","(* -1/2 (sin x))","(*.f64 #s(literal -1/2 binary64) (sin.f64 x))","(- (sin (- eps (* -1 x))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* -1 (* (pow x 3) (+ (* -1 (/ (* eps (- (* 1/12 (pow eps 2)) 1/2)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) eps) x)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* eps (- (* 1/12 (pow eps 2)) 1/2)) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x)) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (*.f64 eps (fma.f64 eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)))) (neg.f64 x))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))) (* -1 (/ (* eps (+ 1 (* -1/6 (pow eps 2)))) x))) x)) (* eps (- (* 1/12 (pow eps 2)) 1/2))) x)) (* 1/6 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 eps eps) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) eps (/.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) x))) x)) (neg.f64 x))))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal -1/2 binary64) (sin.f64 x))) eps (cos.f64 x)) eps)","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x))) eps (cos.f64 x)) eps)","(* -1/2 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps) eps)","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(*.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/720 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 eps eps))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (sin.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64))))) (*.f64 eps eps))","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64)) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* eps (+ 1 (* -1/2 (pow x 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (* 1/12 (pow x 3)))))))","(fma.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64)) eps)) eps eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (* 1/12 (pow x 2)) 1/6))))))))","(fma.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/6 binary64)) eps (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))) eps)) eps eps)","(* eps (+ 1 (+ (* -1/2 (pow x 2)) (* eps (+ (* -1/2 x) (+ (* 1/12 (pow x 3)) (* eps (- (+ (* 1/12 (pow x 2)) (* eps (+ (* -1/144 (pow x 3)) (* 1/24 x)))) 1/6))))))))","(fma.f64 (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/144 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) x)) eps (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/6 binary64))) eps (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/12 binary64))) eps)) eps eps)","(/ 1 (cos x))","(/.f64 #s(literal 1 binary64) (cos.f64 x))","(+ (* 1/2 (/ (* eps (sin x)) (pow (cos x) 2))) (/ 1 (cos x)))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(+ (* eps (- (* 1/4 (/ (* eps (pow (sin x) 2)) (pow (cos x) 3))) (* -1/2 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(+ (* eps (- (* eps (- (* 1/8 (/ (* eps (pow (sin x) 3)) (pow (cos x) 4))) (* -1/4 (/ (pow (sin x) 2) (pow (cos x) 3))))) (* -1/2 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) eps) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(*.f64 (cos.f64 x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/120 binary64) #s(literal -1/6 binary64))) (*.f64 (cos.f64 x) eps))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) (cos.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal -1/5040 binary64) #s(literal 1/120 binary64))))) eps)","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(* 1/24 (* (pow eps 4) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (sin.f64 x))","(* (pow eps 4) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (* 1/24 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (sin x) (pow eps 2))) (+ (* -1/6 (/ (cos x) eps)) (+ (* 1/24 (sin x)) (/ (cos x) (pow eps 3))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/6 binary64))) (/.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/144 (pow x 3)) (* 1/24 x)))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal -1/144 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) x)))","(* (pow eps 4) (- (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (* 1/12 (/ (pow x 2) eps)))) (* 1/6 (/ 1 eps))))","(*.f64 (-.f64 (fma.f64 (*.f64 x x) (fma.f64 x #s(literal -1/144 binary64) (/.f64 #s(literal 1/12 binary64) eps)) (*.f64 #s(literal 1/24 binary64) x)) (/.f64 #s(literal 1/6 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (* 1/12 (/ (pow x 3) (pow eps 2))))))) (* 1/6 (/ 1 eps))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 x eps) (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (fma.f64 (/.f64 #s(literal 1/12 binary64) eps) (fma.f64 x x (/.f64 (pow.f64 x #s(literal 3 binary64)) eps)) (/.f64 #s(literal -1/6 binary64) eps)))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ (* -1/2 (/ x (pow eps 2))) (+ (* -1/2 (/ (pow x 2) (pow eps 3))) (+ (* -1/144 (pow x 3)) (+ (* 1/24 x) (+ (* 1/12 (/ (pow x 2) eps)) (+ (* 1/12 (/ (pow x 3) (pow eps 2))) (/ 1 (pow eps 3)))))))) (* 1/6 (/ 1 eps))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) (fma.f64 x (/.f64 x eps) x) (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (fma.f64 (/.f64 #s(literal 1/12 binary64) eps) (fma.f64 x x (/.f64 (pow.f64 x #s(literal 3 binary64)) eps)) (/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal 3 binary64)))))) (/.f64 #s(literal 1/6 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps) eps)","(* -1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* -1/2 (sin x)) (/ (cos x) eps)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(/ -2 (* eps (sin x)))","(/.f64 #s(literal -2 binary64) (*.f64 (sin.f64 x) eps))","(/ (- (* -4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x)))) eps)","(/.f64 (fma.f64 (/.f64 #s(literal -4 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (cos.f64 x) eps) (/.f64 #s(literal -2 binary64) (sin.f64 x))) eps)","(/ (- (* -8 (/ (pow (cos x) 2) (* (pow eps 2) (pow (sin x) 3)))) (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x))))) eps)","(/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 #s(literal -8 binary64) eps) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -4 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) eps) (/.f64 #s(literal 2 binary64) (sin.f64 x))) eps)","(/ (- (* -16 (/ (pow (cos x) 3) (* (pow eps 3) (pow (sin x) 4)))) (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (+ (* 8 (/ (pow (cos x) 2) (* (pow eps 2) (pow (sin x) 3)))) (* 2 (/ 1 (sin x)))))) eps)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -16 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (/.f64 (cos.f64 x) eps) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (cos.f64 x) eps) (fma.f64 (/.f64 #s(literal 8 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) eps) (/.f64 #s(literal 2 binary64) (sin.f64 x))))) eps)","(- (sin (- x (* -1 eps))) (sin x))","(-.f64 (sin.f64 (+.f64 eps x)) (sin.f64 x))","(* (pow eps 4) (+ (* -1 (/ (+ (* 1/6 (cos x)) (* 1/2 (/ (sin x) eps))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (cos.f64 x))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (sin x)) (/ (cos x) eps)) eps)) (* 1/6 (cos x))) eps)) (* 1/24 (sin x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal 1/6 binary64) (cos.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (* -1/12 (pow x 2))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (fma.f64 #s(literal -1/12 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1/2 x) (* 1/12 (pow x 3))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/12 binary64) x) x (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x) eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ 1/6 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/2 (pow x 2)) 1) eps)) (+ (* -1/2 x) (* 1/12 (pow x 3)))) eps)) (* -1/12 (pow x 2)))) eps)) (+ (* -1/144 (pow x 3)) (* 1/24 x))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (-.f64 (fma.f64 #s(literal -1/12 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (/.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x x) #s(literal -1 binary64)) (neg.f64 eps))) eps)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* eps (+ (* -1 (/ (cos x) eps)) (* 1/2 (sin x)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)","(* -1 (/ (+ (* 4 (/ (cos x) (* eps (pow (sin x) 2)))) (* 2 (/ 1 (sin x)))) eps))","(/.f64 (fma.f64 (/.f64 #s(literal -4 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (cos.f64 x) eps) (/.f64 #s(literal -2 binary64) (sin.f64 x))) eps)","(* -1 (/ (+ (* -1 (/ (- (* -8 (/ (pow (cos x) 2) (* eps (pow (sin x) 3)))) (* 4 (/ (cos x) (pow (sin x) 2)))) eps)) (* 2 (/ 1 (sin x)))) eps))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (sin.f64 x)) (/.f64 (fma.f64 (/.f64 #s(literal -8 binary64) eps) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -4 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) eps)) (neg.f64 eps))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 16 (/ (pow (cos x) 3) (* eps (pow (sin x) 4)))) (* -8 (/ (pow (cos x) 2) (pow (sin x) 3)))) eps)) (* 4 (/ (cos x) (pow (sin x) 2)))) eps)) (* 2 (/ 1 (sin x)))) eps))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (sin.f64 x)) (/.f64 (fma.f64 (/.f64 (cos.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -4 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 16 binary64) (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) eps) (/.f64 (*.f64 #s(literal 8 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (neg.f64 eps))) eps)) (neg.f64 eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":250.73193359375,"type":"simplify"},{"count":[[22,148]],"inputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","(sin.f64 x)","#s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","(+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)))","#s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps)","(+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps)","(fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x))","(/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))","(fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","#s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64)))"]],"memory":[[-911248,23309088]],"outputs":[["(+.f64 (*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(approx (cos -1/720) #s(literal -1/720 binary64))) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(approx (cos -1/720) #s(literal -1/720 binary64)))","(neg.f64 (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(+.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(-.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(*.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(cos.f64 #s(literal -1/720 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal -1/720 binary64))))","#s(approx (cos -1/720) #s(literal -1/720 binary64))","#s(literal -1/720 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1/20736 binary64)","#s(literal 1/12 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal 1/18437563379178327736384102280592359424 binary64)","#s(literal 1/8916100448256 binary64)","#s(literal 1/2641807540224 binary64)","#s(literal -1/2641807540224 binary64)","#s(literal -1/20736 binary64)","#s(literal 1/6979147079584381377970176 binary64)","#s(literal 1/429981696 binary64)","#s(literal -1/17280 binary64)","#s(approx (cos -1/720) #s(approx (cos -1/720) #s(literal -1/720 binary64)))","#s(approx (cos -1/720) #s(literal -1/720 binary64))","#s(approx (cos -1/720) #s(approx (cos -1/720) #s(approx -1/720 #s(literal -1/720 binary64))))","#s(approx (cos -1/720) #s(approx -1/720 #s(literal -1/720 binary64)))","#s(approx -1/720 #s(literal -1/720 binary64))","#s(literal -1/720 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1/20736 binary64)","#s(literal 1/12 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal 1/18437563379178327736384102280592359424 binary64)","#s(literal 1/8916100448256 binary64)","#s(literal 1/2641807540224 binary64)","#s(literal -1/2641807540224 binary64)","#s(literal -1/20736 binary64)","#s(literal 1/6979147079584381377970176 binary64)","#s(literal 1/429981696 binary64)","#s(literal -1/17280 binary64)","#s(literal -1/720 binary64)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1/20736 binary64)","#s(literal 1/12 binary64)","#s(literal 1 binary64)","#s(literal 1/720 binary64)","#s(literal 1/18437563379178327736384102280592359424 binary64)","#s(literal 1/8916100448256 binary64)","#s(literal 1/2641807540224 binary64)","#s(literal -1/2641807540224 binary64)","#s(literal -1/20736 binary64)","#s(literal 1/6979147079584381377970176 binary64)","#s(literal 1/429981696 binary64)","#s(literal -1/17280 binary64)","#s(approx (cos -1/720) (*.f64 (fma.f64 #s(approx (cos -1/720) #s(literal -1/720 binary64)) #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64))) #s(literal -1/720 binary64)))","(*.f64 (fma.f64 #s(approx (cos -1/720) #s(literal -1/720 binary64)) #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64))) #s(literal -1/720 binary64))","(fma.f64 #s(approx (cos -1/720) #s(literal -1/720 binary64)) #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(neg.f64 (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(+.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(-.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(*.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(cos.f64 #s(literal -1/720 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal -1/720 binary64))))","#s(approx (cos -1/720) (cos.f64 #s(literal -1/720 binary64)))","(neg.f64 (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(+.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(-.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(*.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(cos.f64 #s(literal -1/720 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal -1/720 binary64))))","(neg.f64 (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(+.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(-.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(*.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(cos.f64 #s(literal -1/720 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal -1/720 binary64))))","(neg.f64 (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(+.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(-.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(*.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(cos.f64 #s(literal -1/720 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal -1/720 binary64))))","(neg.f64 (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(+.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(+.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(-.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(-.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(*.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(*.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 #s(literal -1/720 binary64) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) (cos.f64 #s(literal -1/720 binary64)))","(/.f64 (cos.f64 #s(literal -1/720 binary64)) #s(literal -1/720 binary64))","(cos.f64 #s(literal -1/720 binary64))","(exp.f64 (log.f64 (cos.f64 #s(literal -1/720 binary64))))","#s(approx (cos -1/720) #s(literal -1/720 binary64))"]],"time":1715.009033203125,"type":"rewrite"},{"compiler":[[6874,913]],"memory":[[-10451968,17341424]],"time":69.5390625,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",24.812160495108284,"binary64"],["(-.f64 #s(approx (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (cos.f64 eps) (sin.f64 x)))) (sin.f64 x))","fresh",24.711057728487656,"binary64"],["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","done",0.09463533213905531,"binary64"],["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.14507599020379397,"binary64"],["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","fresh",0.2736364979115759,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","done",0.3950071988537599,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","done",0.39500719885375973,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","fresh",0.7932273109572219,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))) eps (cos.f64 x)) eps))","fresh",1.087998334750779,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","done",1.087999963505867,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","fresh",1.807890206312728,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","fresh",1.7731774459617764,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","fresh",1.072635755694273,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","done",0.9796979585227031,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","fresh",1.4899470002641306,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","fresh",1.469856177095685,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(approx (+ (* (* x x) 1/12) -1/2) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","fresh",0.9520844910726226,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))) eps (cos.f64 x)) eps))","fresh",1.0661053452679206,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","fresh",0.7929221173177239,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)) eps))","fresh",0.5395384488537598,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","done",1.7343953390805575,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","fresh",53.63897442726945,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","fresh",54.048472406648315,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","fresh",61.41430375442673,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","fresh",61.4061756762754,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","fresh",60.6544931084829,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","fresh",60.48188017679045,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","fresh",60.37537665596307,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","fresh",60.38084994687108,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","fresh",60.26266188479796,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","fresh",60.15919368602068,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","fresh",62.454657637991126,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","fresh",62.460119520711345,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","done",1.623506229443087,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","fresh",1.619609211197612,"binary64"],["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","fresh",1.7384703105651549,"binary64"],["#s(approx (+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x))))","fresh",0.34173416312645977,"binary64"]],"compiler":[[1461,315],[7,6],[25,17],[29,20],[24,18],[19,15],[20,15],[18,13],[35,24],[26,19],[22,16],[39,24],[34,22],[22,16],[27,18],[44,25],[39,23],[30,20],[23,17],[12,9],[30,20],[21,15],[21,15],[21,15],[21,15],[14,12],[24,19],[24,19],[24,19],[24,19],[24,19],[24,19],[24,19],[24,19],[91,48],[30,19],[28,18],[26,20]],"count":[[197,37]],"kept":[{"done":[4,4],"fresh":[19,19],"new":[169,10],"picked":[5,4]}],"memory":[[5430960,22032128]],"min-error":[[0.00390625,"binary64"]],"time":27.43896484375,"type":"prune"},{"accuracy":[0.09463533213905531],"baseline":[0.09463533213905531],"branch":[["x",0.09463533213905531,1,"binary64"],["eps",0.09463533213905531,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.09463533213905531,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[53,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(approx (+ (* (* x x) 1/12) -1/2) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (+ (* (sin x) (+ (cos eps) -1)) (* (cos x) (sin eps))) (fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (sin.f64 eps) (cos.f64 x))))","#s(approx (- (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (sin x)) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (sin.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))))","(+.f64 (*.f64 (sin.f64 x) (+.f64 (cos.f64 eps) #s(literal -1 binary64))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(-.f64 #s(approx (+ (* (cos x) (sin eps)) (* (cos eps) (sin x))) (fma.f64 (cos.f64 x) (sin.f64 eps) (*.f64 (cos.f64 eps) (sin.f64 x)))) (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(-.f64 (+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (sin.f64 x))"]],"memory":[[-5135008,19799296]],"oracle":[62.53327296576192],"outputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))"]],"repr":["binary64"],"time":39.093994140625,"times":[[11.037109375,"x"],[12.009033203125,"eps"],[12.97412109375,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.14507599020379397],"baseline":[0.14507599020379397],"branch":[["x",0.14507599020379397,1,"binary64"],["eps",0.14507599020379397,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.14507599020379397,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[46,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(approx (+ (* (* x x) 1/12) -1/2) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/6 binary64)) eps)) eps (cos.f64 x)) eps))"]],"memory":[[142192,17672240]],"oracle":[62.53327296576192],"outputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))"]],"repr":["binary64"],"time":33.048095703125,"times":[[10.677978515625,"x"],[10.115966796875,"eps"],[9.79296875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.2736364979115759],"baseline":[0.2736364979115759],"branch":[["x",0.27363649791157596,1,"binary64"],["eps",0.2736364979115759,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.2736364979115759,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[44,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(approx (+ (* (* x x) 1/12) -1/2) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/6 binary64) (*.f64 (sin.f64 x) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))"]],"memory":[[1005824,17166384]],"oracle":[62.53327296576192],"outputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))"]],"repr":["binary64"],"time":31.00390625,"times":[[9.596923828125,"x"],[9.614990234375,"eps"],[9.469970703125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.39500719885375973],"baseline":[0.39500719885375973],"branch":[["x",0.39500719885375973,1,"binary64"],["eps",0.39500719885375973,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.39500719885375973,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[42,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(approx (+ (* (* x x) 1/12) -1/2) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (sin.f64 x) (/.f64 (cos.f64 x) eps)) eps)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (/.f64 eps (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps #s(literal -1/2 binary64)) (sin.f64 x) (cos.f64 x)))))","#s(approx (- (sin (+ x eps)) (sin x)) (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal -1/2 binary64) (-.f64 (cos.f64 eps) #s(literal 1 binary64))) x (sin.f64 eps)))"]],"memory":[[-423200,16646656]],"oracle":[62.53327296576192],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))"]],"repr":["binary64"],"time":30.154052734375,"times":[[9.455078125,"x"],[9.076904296875,"eps"],[9.2900390625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[0.7929221173177239],"baseline":[0.7929221173177239],"branch":[["x",0.7929221173177239,1,"binary64"],["eps",0.7929221173177239,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.7929221173177239,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[38,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/20736 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (neg.f64 (+.f64 #s(literal -1/2 binary64) #s(literal 1/12 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(literal -1/2 binary64) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 #s(approx (+ (* (* x x) 1/12) -1/2) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) (*.f64 #s(literal -1/6 binary64) eps)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 (+.f64 #s(literal 1/20736 binary64) #s(literal 1/24 binary64)) (+.f64 #s(literal -1/2 binary64) #s(literal 1/24 binary64)))) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps (cos.f64 x)) eps))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"memory":[[-763728,15617872]],"oracle":[62.53327296576192],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))"]],"repr":["binary64"],"time":27.81103515625,"times":[[8.4150390625,"x"],[8.76318359375,"eps"],[8.218017578125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.469856177095685],"baseline":[1.469856177095685],"branch":[["x",1.469856177095685,1,"binary64"],["eps",1.469856177095685,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.469856177095685,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[28,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) x) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)) (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/6 binary64) eps)) #s(literal 1 binary64))))))","#s(approx (- (sin (+ x eps)) (sin x)) (sin.f64 eps))"]],"memory":[[4841424,12823648]],"oracle":[62.53327296576192],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))"]],"repr":["binary64"],"time":22.23193359375,"times":[[6.35498046875,"x"],[7.589111328125,"eps"],[6.467041015625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.619609211197612],"baseline":[1.619609211197612],"branch":[["x",1.619609211197612,1,"binary64"],["eps",1.6196092111976121,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.619609211197612,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[24,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (*.f64 (+.f64 eps x) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) eps) x #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x #s(literal 1 binary64))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (* (cos x) eps) -1/6) (* (sin x) -1/2)) eps) (cos x)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps (+.f64 eps x)) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (+.f64 #s(literal 1/12 binary64) #s(literal -1/2 binary64))) eps #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))"]],"memory":[[-6272208,11729200]],"oracle":[62.533272965752985],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))"]],"repr":["binary64"],"time":20.1298828125,"times":[[5.6640625,"x"],[5.64599609375,"eps"],[7.031982421875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.623506229443087],"baseline":[1.623506229443087],"branch":[["x",1.623506229443087,1,"binary64"],["eps",1.623506229443087,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.623506229443087,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[17,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64))) eps))"]],"memory":[[1579936,9751008]],"oracle":[62.53311406595274],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))"]],"repr":["binary64"],"time":14.919189453125,"times":[[4.59912109375,"x"],[4.451171875,"eps"],[4.490966796875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[1.7343953390805578],"baseline":[1.7343953390805575],"branch":[["x",1.7343953390805575,1,"binary64"],["eps",1.7343953390805578,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",1.7343953390805578,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[15,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps eps) eps)))"]],"memory":[[1096304,9231904]],"oracle":[62.53309760370645],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))"]],"repr":["binary64"],"time":14.011962890625,"times":[[4.40087890625,"x"],[4.093017578125,"eps"],[4.343994140625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[53.638974427269446],"baseline":[53.63897442726945],"branch":[["x",53.63897442726946,1,"binary64"],["eps",53.638974427269446,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",53.63897442726945,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[13,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))"]],"memory":[[-357760,8682624]],"oracle":[62.53309760370645],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))"]],"repr":["binary64"],"time":12.58984375,"times":[[4.10205078125,"x"],[3.64892578125,"eps"],[3.68408203125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[54.048472406648315],"baseline":[54.048472406648315],"branch":[["x",54.048472406648315,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",54.048472406648315,1,"binary64"],["eps",54.048472406648315,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[12,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))"]],"memory":[[63376,8365168]],"oracle":[62.53309760370645],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))"]],"repr":["binary64"],"time":11.87109375,"times":[[3.5390625,"x"],[3.51806640625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"],[3.491943359375,"eps"]],"type":"regimes"},{"accuracy":[60.15919368602062],"baseline":[60.15919368602068],"branch":[["x",60.15919368602063,1,"binary64"],["eps",60.15919368602063,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",60.15919368602062,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[11,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/6979147079584381377970176 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/8916100448256 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/2641807540224 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/429981696 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/12 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) (+.f64 #s(literal 1/20736 binary64) #s(literal 1/12 binary64))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos 3) #s(literal -1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal -1/2 binary64)) eps))"]],"memory":[[-114240,8122128]],"oracle":[62.53309760370645],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))"]],"repr":["binary64"],"time":11.239013671875,"times":[[3.337890625,"x"],[3.266845703125,"eps"],[3.359130859375,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[62.45465763799114],"baseline":[62.454657637991126],"branch":[["x",62.45465763799114,1,"binary64"],["eps",62.454657637991154,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",62.454657637991154,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[2,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))"]],"memory":[[5121280,5121280]],"oracle":[62.4680062718433],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))"]],"repr":["binary64"],"time":4.672119140625,"times":[[1.35400390625,"x"],[1.267822265625,"eps"],[1.376953125,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[62.460119520711345],"baseline":[62.460119520711345],"branch":[["eps",62.460119520711366,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",62.460119520711345,1,"binary64"],["x",62.460119520711345,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[1,1]],"inputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))"]],"link":["."],"memory":[[-3523552,4823136]],"name":["2sin (example 3.3)"],"oracle":[62.460119520711345],"outputs":[["#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))"]],"repr":["binary64"],"time":3.950927734375,"times":[[1.14794921875,"eps"],[1.0888671875,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"],[1.14892578125,"x"]],"type":"regimes"},{"egraph":[[8,6536,373,0.026529519],[7,5439,373,0.015447059],[6,5323,373,0.013189029],[5,5103,373,0.013151228],[4,4245,373,0.013759929],[3,1807,377,0.013808595],[2,501,377,0.006160787],[1,218,379,0.002735412],[0,126,388,0.001806088]],"inputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))"]],"memory":[[-2384448,13893232]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) #s(approx (+ (cos eps) -1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))) (*.f64 (cos.f64 x) (sin.f64 eps)))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal -1/2 binary64)) eps (cos.f64 x)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (fma.f64 #s(approx (* (sin x) -1/2) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x)) eps #s(approx (cos x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 eps x)) eps)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (+ (* (sin x) (+ (* (* eps eps) 1/24) -1/2)) (* (* (cos x) -1/6) eps)) eps) (cos x)) eps) #s(approx (+ (* (* x x) (+ (* (* (* (* eps eps) -1/6) x) (+ (* 1/24 (* eps eps)) -1/2)) (* (+ (* 1/12 (* eps eps)) -1/2) eps))) (* eps (+ (* eps (+ (* (+ (* 1/24 (* eps eps)) -1/2) x) (* -1/6 eps))) 1))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64)) eps))))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/8 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (+ (* (* (sin x) -1/2) eps) (cos x)) #s(literal 1/16 binary64)) eps))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal 1/18437563379178327736384102280592359424 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/20736 binary64)))","#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (+ (* (cos 3) (+ 1/2641807540224 1/4)) (+ (* -1/6 (cos 3)) (cos 3))) #s(literal -1/720 binary64)))"]],"stop":[["node limit",1]],"time":136.77001953125,"type":"simplify"},{"compiler":[[397,129]],"memory":[[3024432,3024432]],"stop":[["fuel",1]],"time":3.8779296875,"type":"soundness"},{"compiler":[[397,129],[397,129],[15,13],[15,13],[7,6],[7,6]],"memory":[[3048416,51163184]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":70.176025390625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02099609375,"type":"end"}]