[{"memory":[[19296,19296]],"time":0.033935546875,"type":"start"},{"compiler":[[20,13]],"memory":[[1153072,1153072]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.5,"unknown":0.00024414062500000005,"valid":0.499755859375}],[11,{"invalid":0.0,"precondition":0.5,"unknown":0.00048828125,"valid":0.49951171875}],[10,{"invalid":0.0,"precondition":0.5,"unknown":0.0009765625,"valid":0.4990234375}],[9,{"invalid":0.0,"precondition":0.5,"unknown":0.001953125,"valid":0.498046875}],[8,{"invalid":0.0,"precondition":0.5,"unknown":0.00390625,"valid":0.49609375}],[7,{"invalid":0.0,"precondition":0.5,"unknown":0.0078125,"valid":0.4921875}],[6,{"invalid":0.0,"precondition":0.5,"unknown":0.015625,"valid":0.484375}],[5,{"invalid":0.0,"precondition":0.5,"unknown":0.03125,"valid":0.46875}],[4,{"invalid":0.0,"precondition":0.5,"unknown":0.0625,"valid":0.4375}],[3,{"invalid":0.0,"precondition":0.5,"unknown":0.125,"valid":0.375}],[2,{"invalid":0.0,"precondition":0.5,"unknown":0.25,"valid":0.25}],[1,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}]],"time":3.661865234375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.5,"valid":0.5}],"memory":[[-2628464,468436304]],"mixsample":[[264.465087890625,"adjust",800],[208.266845703125,"ival-div",0],[143.760009765625,"ival-add",0],[65.272216796875,"ival-fabs",0],[1.62548828125,"ival-sub",1600],[210.708740234375,"ival-div",400],[8.87548828125,"ival-div",1600],[4.232421875,"ival-assert",0],[50.091796875,"ival-add",400],[101.942138671875,"ival-sub",0],[78.64306640625,"ival-sub",400],[24.0556640625,"ival->",0],[0.0078125,"ival-add",800],[11.427490234375,"exact",0],[15.7978515625,"adjust",2000]],"outcomes":[[1281.37744140625,1,"valid",7234],[140.725341796875,2,"valid",539],[39.03564453125,0,"valid",483]],"time":1886.666015625,"type":"sample"},{"compiler":[[15,10],[48,12],[48,12]],"confusion":[[90,0,0,166]],"explanations":[["+.f64","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cancellation",90,0,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",90,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(/.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["(-.f64 x #s(literal 1 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,90],[0,166]],"maybe-confusion":[[90,0,0,0,0,166]],"memory":[[4402352,79617376]],"mixsample":[[14.601318359375,"adjust",800],[11.129638671875,"ival-div",0],[7.740478515625,"ival-add",0],[0.066650390625,"ival-sub",1600],[11.410888671875,"ival-div",400],[0.37353515625,"ival-div",1600],[0.215576171875,"ival-assert",0],[3.0234375,"ival-add",400],[5.189453125,"ival-sub",0],[0.537353515625,"ival-true",0],[4.50537109375,"ival-sub",400],[0.554931640625,"exact",0],[0.910400390625,"adjust",2000]],"outcomes":[[74.96337890625,1,"valid",442],[8.528564453125,2,"valid",36],[2.66455078125,0,"valid",34]],"time":169.10400390625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,10]],"egraph":[[0,592,15,0.002806284],[8,592,15,0.003652796],[7,521,15,0.004352403],[6,399,15,0.003893404],[5,248,15,0.002464423],[4,134,15,0.001457429],[3,74,15,0.001251561],[2,46,15,0.000360861],[1,28,15,0.000230724],[0,17,15,0.000248644],[0,10,15,0.00012942]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[1277776,16980176]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(negabs x)"]],"time":178.780029296875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43648,43648]],"time":0.13916015625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",19.208265184017158,"binary64"]],"compiler":[[15,10]],"memory":[[317888,317888]],"time":0.56396484375,"type":"prune"},{"egraph":[[0,592,46,0.00237526],[8,592,46,0.004149494],[7,521,46,0.005089726],[6,399,46,0.004917691],[5,248,46,0.003133169],[4,134,46,0.001233975],[3,74,46,0.0006004],[2,46,46,0.000481093],[1,28,46,0.000398356],[0,17,46,0.000238993],[0,10,46,0.000138299]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","cost-diff",0],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0]],"memory":[[-7752128,2085280]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":37.71484375,"type":"simplify"},{"compiler":[[48,12]],"locations":[["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","accuracy",0.00390625],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.00390625],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","accuracy",0.02734375],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.202549121711744]],"memory":[[1096032,16856400]],"mixsample":[[6.4638671875,"adjust",800],[5.1630859375,"ival-div",0],[3.60986328125,"ival-add",0],[0.031982421875,"ival-sub",1600],[5.139404296875,"ival-div",400],[0.1728515625,"ival-div",1600],[0.131591796875,"ival-assert",0],[1.185302734375,"ival-add",400],[3.071533203125,"ival-sub",0],[0.160888671875,"ival-true",0],[2.048828125,"ival-sub",400],[0.2392578125,"exact",0],[0.417724609375,"adjust",2000]],"outcomes":[[34.567626953125,1,"valid",222],[3.970703125,2,"valid",18],[1.0302734375,0,"valid",16]],"time":50.153076171875,"type":"localize"},{"count":[[5,42]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))"]],"memory":[[1296736,1296736]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))"]],"series":[[0.9150390625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 (- x 1)))","x","-inf"],[0.924072265625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 (- x 1)))","x","inf"],[0.656982421875,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 (- x 1)))","x","0"]],"time":2.97705078125,"type":"series"},{"count":[[42,41]],"egraph":[[0,8376,382,0.070423966],[4,7414,390,0.018774943],[3,2575,390,0.030888696],[2,802,414,0.00758872],[1,310,439,0.002828017],[0,118,459,0.001155174]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))"]],"memory":[[3508112,34220928]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (/.f64 (-.f64 x #s(literal 2 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (/.f64 (-.f64 x #s(literal 2 binary64)) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1 x) 1)) 1)","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -2 binary64) x) x)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (/ 1 x)))","(-.f64 x #s(literal -1 binary64))","(/ (+ 1 (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":218.0029296875,"type":"simplify"},{"count":[[5,75]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))"]],"memory":[[-5391632,13791936]],"outputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)"]],"time":244.825927734375,"type":"rewrite"},{"compiler":[[867,173]],"memory":[[4562560,4562560]],"time":5.64306640625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",19.208265184017158,"binary64"],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",20.12407201181765,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",19.592083382706125,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",20.212789658057797,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",20.231034160678558,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","fresh",1.0168169315950375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","next",0.8249440684800454,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","next",1.5608440437026634,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","fresh",0.867016928866048,"binary64"],["#s(literal 1 binary64)","fresh",61.50230357614216,"binary64"],["#s(literal 0 binary64)","next",20.584722654177078,"binary64"]],"compiler":[[15,10],[23,15],[31,19],[23,16],[19,14],[27,19],[35,26],[21,15],[33,23],[1,2],[1,2],[23,15],[31,19],[23,16],[19,14],[27,19],[35,26],[21,15],[33,23],[1,2],[1,2]],"count":[[50,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[49,10],"picked":[1,1]}],"memory":[[-2430704,5892144]],"min-error":[[0.62735447869961,"binary64"]],"time":7.531005859375,"type":"prune"},{"egraph":[[0,8166,270,0.072009181],[6,6179,270,0.022281372],[5,2400,270,0.027062994],[4,760,270,0.008631881],[3,303,270,0.002796256],[2,153,270,0.001301986],[1,86,270,0.000735459],[0,59,270,0.000674148],[0,39,270,0.000365883]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","#s(literal -1 binary64)","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal -2 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(literal 0 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x))","#s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) x)","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)"]],"locations":[["(pow.f64 x #s(literal 3 binary64))","cost-diff",0],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","cost-diff",0],["#s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x))","cost-diff",0],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","cost-diff",0],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))","cost-diff",0],["(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)))","cost-diff",0],["(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0]],"memory":[[999616,33065024]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","#s(literal -1 binary64)","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal -2 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(literal 0 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x))","#s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) x)","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":220.6220703125,"type":"simplify"},{"compiler":[[214,31]],"locations":[["(pow.f64 x #s(literal 3 binary64))","accuracy",0.0],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.63516697869961],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",0.9334895650150942],["(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","accuracy",0.01171875],["(-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x))","accuracy",0.02734375],["#s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","accuracy",0.9297693647545128],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.202549121711744],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","accuracy",0.00390625],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","accuracy",1.7989473872614121],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.202549121711744],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","accuracy",0.18587083978043534],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","accuracy",0.4734020888158972],["(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.64297947869961],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",1.042078342991351]],"memory":[[5807184,39365568]],"mixsample":[[14.820556640625,"adjust",800],[17.289306640625,"ival-div",0],[4.13134765625,"ival-add",0],[3.26220703125,"ival-mult",0],[0.033203125,"ival-sub",1600],[5.2451171875,"ival-div",400],[0.189453125,"ival-div",1600],[0.138916015625,"ival-assert",0],[1.728515625,"ival-add",400],[5.741943359375,"ival-sub",0],[0.221923828125,"ival-true",0],[2.06201171875,"ival-sub",400],[0.9140625,"exact",0],[0.942626953125,"adjust",2000],[9.7744140625,"ival-pow",0]],"outcomes":[[87.451171875,1,"valid",222],[10.118896484375,2,"valid",18],[3.81689453125,0,"valid",16]],"time":126.367919921875,"type":"localize"},{"count":[[18,62]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x))","#s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[-2726144,4878496]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 9))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","(/ 2 (pow x 6))","(/ (+ 2 (* 2 (pow x 2))) (pow x 6))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 6))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 6))","(/ 1 (pow x 2))","(/ (+ 1 (pow x 2)) (pow x 2))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ -1 (pow x 2))","(/ (- x 1) (pow x 2))","(/ 2 (pow x 3))","(pow x 3)","(/ 2 (pow x 4))","(- x 1)","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","2","(+ 2 (* 2 (/ 1 (pow x 2))))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4))))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4)))))","(+ 1 (/ 1 (pow x 2)))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[2.35498046875,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (- (/ 1 (* x x)) -1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (/ (- 1 (/ 1 x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ 1 (* x x)) (/ 2 (pow x 4)) (- x 1))","x","-inf"],[2.10595703125,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (- (/ 1 (* x x)) -1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (/ (- 1 (/ 1 x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ 1 (* x x)) (/ 2 (pow x 4)) (- x 1))","x","inf"],[5.327880859375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (- (/ 1 (* x x)) -1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (/ (- 1 (/ 1 x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ 1 (* x x)) (/ 2 (pow x 4)) (- x 1))","x","0"]],"time":10.864990234375,"type":"series"},{"count":[[62,61]],"egraph":[[0,8147,551,0.083014831],[4,7676,570,0.022449434],[3,2939,570,0.035708703],[2,918,594,0.011400559],[1,348,635,0.004369184],[0,139,655,0.001283166]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 9))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","(/ 2 (pow x 6))","(/ (+ 2 (* 2 (pow x 2))) (pow x 6))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 6))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 6))","(/ 1 (pow x 2))","(/ (+ 1 (pow x 2)) (pow x 2))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ -1 (pow x 2))","(/ (- x 1) (pow x 2))","(/ 2 (pow x 3))","(pow x 3)","(/ 2 (pow x 4))","(- x 1)","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","2","(+ 2 (* 2 (/ 1 (pow x 2))))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4))))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4)))))","(+ 1 (/ 1 (pow x 2)))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[2263504,35273216]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ 2 (pow x 9))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 9 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 9 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 9 binary64)))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","(/ 2 (pow x 6))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 6))","(*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 6))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 6))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 6 binary64)))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/ (+ 1 (pow x 2)) (pow x 2))","(/.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) x) x)","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (/.f64 (-.f64 x #s(literal 2 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (/.f64 (-.f64 x #s(literal 2 binary64)) x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1 x) 1)) 1)","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/ (- x 1) (pow x 2))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(/ 2 (pow x 4))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","(- x 1)","(-.f64 x #s(literal 1 binary64))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))","2","#s(literal 2 binary64)","(+ 2 (* 2 (/ 1 (pow x 2))))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4))))","(+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4)))))","(+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))))","(+ 1 (/ 1 (pow x 2)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/.f64 (+.f64 (-.f64 (/.f64 x (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","x","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) x)) x)","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":314.047119140625,"type":"simplify"},{"count":[[18,172]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x))","#s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[-1726416,17688336]],"outputs":[["#s(approx 4 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","(+.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx 4 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx 4 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(approx 4 #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 12 binary64)","#s(literal 9 binary64)","#s(literal -8 binary64)"]],"time":332.7529296875,"type":"rewrite"},{"compiler":[[2348,300]],"memory":[[-484256,7261328]],"time":9.80712890625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",19.208265184017158,"binary64"],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",20.12407201181765,"binary64"],["(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",59.989865561785386,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",19.592083382706125,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",20.212789658057797,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",20.231034160678558,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","next",20.252651848167826,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","fresh",1.0168169315950375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","next",0.867016928866048,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","done",0.8249440684800454,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","done",1.5608440437026634,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","next",57.13256968690789,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","next",61.50230357614216,"binary64"],["#s(literal 0 binary64)","done",20.584722654177078,"binary64"]],"compiler":[[15,10],[23,15],[11,8],[31,18],[23,16],[19,14],[27,18],[27,19],[33,23],[35,26],[21,15],[51,35],[17,12],[1,2],[11,8],[31,18],[23,16],[27,18],[27,19],[33,23],[51,35],[17,12]],"count":[[94,14]],"kept":[{"done":[1,1],"fresh":[5,2],"new":[83,6],"picked":[5,5]}],"memory":[[-584656,7707744]],"min-error":[[0.62344822869961,"binary64"]],"time":9.5927734375,"type":"prune"},{"egraph":[[0,8402,445,0.063726911],[5,4833,445,0.027696157],[4,1582,445,0.022043214],[3,625,445,0.006362518],[2,272,445,0.002193588],[1,139,445,0.00118028],[0,87,445,0.000787083],[0,58,445,0.000476757]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal -2 binary64)","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","#s(literal 1 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(fma.f64 x x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 2 binary64)","(pow.f64 x #s(literal 9 binary64))","#s(literal 9 binary64)"]],"locations":[["(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","cost-diff",0],["(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","cost-diff",0],["#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","cost-diff",0],["(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x))","cost-diff",0],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","cost-diff",0],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","cost-diff",0],["(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","cost-diff",0],["(+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","cost-diff",0],["(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0]],"memory":[[2338000,32553216]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(-.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","#s(literal -2 binary64)","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(*.f64 x x)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","#s(literal 1 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 x x #s(literal 1 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 x x #s(literal 1 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 x x #s(literal 1 binary64))) (pow.f64 x #s(literal 9 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 x x #s(literal 1 binary64)))","(fma.f64 x x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))","(pow.f64 x #s(literal 4 binary64))","#s(literal 4 binary64)","#s(literal 2 binary64)","(pow.f64 x #s(literal 9 binary64))","#s(literal 9 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":202.862060546875,"type":"simplify"},{"compiler":[[325,45]],"locations":[["(pow.f64 x #s(literal 9 binary64))","accuracy",0.00390625],["(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","accuracy",0.0546875],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","accuracy",0.18587083978043534],["(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","accuracy",56.05490185004524],["(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","accuracy",0.01171875],["(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","accuracy",0.015625],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x))","accuracy",0.37724389505931394],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.202549121711744],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","accuracy",0.0234375],["#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","accuracy",0.9321933939367675],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","accuracy",1.7989473872614121],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","accuracy",19.202549121711744],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","accuracy",61.50230357614216],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","accuracy",0.23022870993487987],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","accuracy",0.4734020888158972],["(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.64297947869961],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",1.0733269461931747]],"memory":[[1197920,63021728]],"mixsample":[[38.826171875,"ival-div",0],[22.8974609375,"adjust",800],[9.57470703125,"ival-add",0],[11.0654296875,"ival-mult",0],[0.03662109375,"ival-sub",1600],[5.353759765625,"ival-div",400],[0.198974609375,"ival-div",1600],[0.11376953125,"ival-assert",0],[79.2197265625,"ival-sub",0],[1.7998046875,"ival-add",400],[0.295166015625,"ival-true",0],[2.47412109375,"ival-sub",400],[0.8427734375,"exact",0],[1.651123046875,"adjust",2000],[18.474853515625,"ival-pow",0]],"outcomes":[[209.65966796875,1,"valid",222],[17.430419921875,2,"valid",18],[5.354248046875,0,"valid",16]],"time":268.968994140625,"type":"localize"},{"count":[[22,72]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(pow.f64 x #s(literal 9 binary64))"]],"memory":[[-708048,6660944]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ 2 (pow x 4))","(/ (+ 2 (* 2 (pow x 2))) (pow x 4))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 4))","(/ (+ 2 (* 2 (pow x 4))) (pow x 4))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ -1 (pow x 4))","(/ (- x 1) (pow x 4))","(/ (- (* x (+ 1 (* -1 x))) 1) (pow x 4))","(/ (- (* x (+ 1 (* x (- (* -1 x) 1)))) 1) (pow x 4))","(/ -1 (pow x 3))","(/ (- x 1) (pow x 3))","(/ (- (* x (+ 1 (* -1 x))) 1) (pow x 3))","(/ (- (* x (+ 1 (* x (- (* -1 x) 1)))) 1) (pow x 3))","(/ 2 (pow x 9))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","2","(+ 2 (* 2 (pow x 2)))","(+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))))","(/ 2 (pow x 2))","(/ 1 (pow x 2))","(/ (+ 1 x) (pow x 2))","(/ -1 (pow x 2))","(/ (- x 1) (pow x 2))","(pow x 9)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(+ 2 (* 2 (/ 1 (pow x 2))))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4))))","(+ 2 (* 2 (/ 1 (pow x 4))))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (+ 1 (/ 1 x)))","(- (/ 1 (pow x 2)) (+ 1 (/ 1 x)))","(- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3)))))","(* 2 (pow x 6))","(* (pow x 6) (+ 2 (* 2 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))))","(/ (- 1 (/ 1 x)) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(- (* -1 (/ (- 1 (/ 1 x)) x)) 1)","(- (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x)) 1)","(* -1 (/ (- (/ 1 x) 1) x))"]],"series":[[2.906005859375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (pow x 3)) (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (- (/ 2 (pow x 4)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- (/ (- (/ (/ (- x 1) x) x) 1) x) 1) x) (- (/ (- (/ (/ (- x 1) x) x) 1) x) 1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/ (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (pow x 9)) (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (/ 2 (* x x)) (/ 2 (pow x 4)) (/ (- (/ 1 x) -1) x) (/ (/ (- x 1) x) x) (pow x 9))","x","-inf"],[2.87109375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (pow x 3)) (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (- (/ 2 (pow x 4)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- (/ (- (/ (/ (- x 1) x) x) 1) x) 1) x) (- (/ (- (/ (/ (- x 1) x) x) 1) x) 1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/ (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (pow x 9)) (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (/ 2 (* x x)) (/ 2 (pow x 4)) (/ (- (/ 1 x) -1) x) (/ (/ (- x 1) x) x) (pow x 9))","x","inf"],[5.25390625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (pow x 3)) (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (- (/ 2 (pow x 4)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- (/ (- (/ (/ (- x 1) x) x) 1) x) 1) x) (- (/ (- (/ (/ (- x 1) x) x) 1) x) 1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/ (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (pow x 9)) (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (/ 2 (* x x)) (/ 2 (pow x 4)) (/ (- (/ 1 x) -1) x) (/ (/ (- x 1) x) x) (pow x 9))","x","0"]],"time":12.699951171875,"type":"series"},{"count":[[72,72]],"egraph":[[0,8051,670,0.080526712],[4,7570,704,0.018235008],[3,3242,704,0.03120306],[2,1048,726,0.011708021],[1,400,773,0.003503603],[0,158,794,0.001267018]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ 2 (pow x 4))","(/ (+ 2 (* 2 (pow x 2))) (pow x 4))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 4))","(/ (+ 2 (* 2 (pow x 4))) (pow x 4))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ -1 (pow x 4))","(/ (- x 1) (pow x 4))","(/ (- (* x (+ 1 (* -1 x))) 1) (pow x 4))","(/ (- (* x (+ 1 (* x (- (* -1 x) 1)))) 1) (pow x 4))","(/ -1 (pow x 3))","(/ (- x 1) (pow x 3))","(/ (- (* x (+ 1 (* -1 x))) 1) (pow x 3))","(/ (- (* x (+ 1 (* x (- (* -1 x) 1)))) 1) (pow x 3))","(/ 2 (pow x 9))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","2","(+ 2 (* 2 (pow x 2)))","(+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))))","(/ 2 (pow x 2))","(/ 1 (pow x 2))","(/ (+ 1 x) (pow x 2))","(/ -1 (pow x 2))","(/ (- x 1) (pow x 2))","(pow x 9)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(+ 2 (* 2 (/ 1 (pow x 2))))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4))))","(+ 2 (* 2 (/ 1 (pow x 4))))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (+ 1 (/ 1 x)))","(- (/ 1 (pow x 2)) (+ 1 (/ 1 x)))","(- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3)))))","(* 2 (pow x 6))","(* (pow x 6) (+ 2 (* 2 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))))","(/ (- 1 (/ 1 x)) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(- (* -1 (/ (- 1 (/ 1 x)) x)) 1)","(- (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x)) 1)","(* -1 (/ (- (/ 1 x) 1) x))"]],"memory":[[-606432,37798480]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ 2 (pow x 7))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))","(/ 2 (pow x 4))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 4))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 4))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ (+ 2 (* 2 (pow x 4))) (pow x 4))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (/.f64 (-.f64 x #s(literal 2 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (/.f64 (-.f64 x #s(literal 2 binary64)) x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1 x) 1)) 1)","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/ -1 (pow x 4))","(/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))","(/ (- x 1) (pow x 4))","(/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ (- (* x (+ 1 (* -1 x))) 1) (pow x 4))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ (- (* x (+ 1 (* x (- (* -1 x) 1)))) 1) (pow x 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 1 binary64)) x #s(literal -1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(/ -1 (pow x 3))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))","(/ (- x 1) (pow x 3))","(/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (- (* x (+ 1 (* -1 x))) 1) (pow x 3))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (- (* x (+ 1 (* x (- (* -1 x) 1)))) 1) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 1 binary64)) x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ 2 (pow x 9))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 9 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 9 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 9 binary64)))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","2","#s(literal 2 binary64)","(+ 2 (* 2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))","(fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/ 1 (pow x 2))","(/.f64 x (pow.f64 x #s(literal 3 binary64)))","(/ (+ 1 x) (pow x 2))","(/.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) x) x)","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/ (- x 1) (pow x 2))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(pow x 9)","(pow.f64 x #s(literal 9 binary64))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))","(+ 2 (* 2 (/ 1 (pow x 2))))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4))))","(+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(+ 2 (* 2 (/ 1 (pow x 4))))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/.f64 (fma.f64 (/.f64 x (pow.f64 x #s(literal 4 binary64))) (-.f64 x #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) x)","(* -1 (+ 1 (/ 1 x)))","(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(- (/ 1 (pow x 2)) (+ 1 (/ 1 x)))","(-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64))","(- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3)))))","(-.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))","(* 2 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))","(* (pow x 6) (+ 2 (* 2 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 6 binary64)))","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (-.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(- (* -1 (/ (- 1 (/ 1 x)) x)) 1)","(-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64))","(- (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x)) 1)","(-.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":237.614013671875,"type":"simplify"},{"count":[[22,204]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(pow.f64 x #s(literal 9 binary64))"]],"memory":[[-1815360,17896864]],"outputs":[["#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(approx 4 #s(literal 2 binary64))","(+.f64 #s(approx 4 #s(literal 2 binary64)) #s(approx 4 #s(literal 2 binary64)))","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(approx 4 #s(literal 2 binary64))","(+.f64 #s(approx 4 #s(literal 2 binary64)) #s(literal 2 binary64))","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(approx 4 #s(approx 4 #s(literal 2 binary64)))","#s(approx 4 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)","#s(literal 2 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 9 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 8 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal -9 binary64)"]],"time":501.3720703125,"type":"rewrite"},{"compiler":[[2860,359]],"memory":[[-815728,6967904]],"time":9.236083984375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",19.208265184017158,"binary64"],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",20.12407201181765,"binary64"],["(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",59.989865561785386,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",19.592083382706125,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","next",61.50065850871613,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",20.212789658057797,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",20.231034160678558,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","done",20.252651848167826,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","next",1.0168169315950375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","done",0.867016928866048,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","done",0.8249440684800454,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","done",1.5608440437026634,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (pow x 3)) (/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))))","fresh",56.21021485769366,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","done",57.13256968690789,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","next",57.86227842051262,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","done",61.50230357614216,"binary64"],["#s(literal 0 binary64)","done",20.584722654177078,"binary64"]],"compiler":[[15,10],[23,15],[11,8],[31,18],[29,20],[23,16],[19,14],[27,18],[27,19],[33,23],[35,26],[21,15],[47,31],[51,35],[59,37],[17,12],[1,2],[11,8],[29,20],[23,16],[27,19],[47,31],[59,37]],"count":[[98,17]],"kept":[{"done":[6,6],"fresh":[3,3],"new":[84,3],"picked":[5,5]}],"memory":[[-641536,7684288]],"min-error":[[0.61563572869961,"binary64"]],"time":8.449951171875,"type":"prune"},{"egraph":[[0,8433,390,0.059874425],[5,5142,398,0.025900881],[4,1446,398,0.023561074],[3,593,398,0.005574019],[2,266,398,0.002138286],[1,138,398,0.001113736],[0,82,398,0.00093627],[0,59,398,0.000445207]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx 4 #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","x","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x))","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(-.f64 x #s(literal 2 binary64))","x","#s(literal 2 binary64)","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","#s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 2 binary64)","(pow.f64 x #s(literal 9 binary64))","#s(literal 9 binary64)"]],"locations":[["#s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64)))","cost-diff",0],["(/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","cost-diff",0],["#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","cost-diff",0],["(-.f64 x #s(literal 2 binary64))","cost-diff",0],["(/.f64 (-.f64 x #s(literal 2 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x))","cost-diff",0],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","cost-diff",0],["(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","cost-diff",0],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","cost-diff",0],["#s(approx 4 #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",0],["(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0]],"memory":[[8921296,30857904]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))","(-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx 4 #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","x","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x))","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(-.f64 x #s(literal 2 binary64))","x","#s(literal 2 binary64)","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","#s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal 6 binary64))","x","#s(literal 6 binary64)","#s(literal 2 binary64)","(pow.f64 x #s(literal 9 binary64))","#s(literal 9 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":194.905029296875,"type":"simplify"},{"compiler":[[258,47]],"locations":[["(pow.f64 x #s(literal 9 binary64))","accuracy",0.00390625],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","accuracy",0.18587083978043534],["#s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64)))","accuracy",0.9307220531129109],["(/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","accuracy",56.05490185004524],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","accuracy",0.0234375],["#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","accuracy",0.9321933939367675],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","accuracy",19.202549121711744],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x))","accuracy",62.52398525659046],["(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.00390625],["(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","accuracy",0.0234375],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","accuracy",0.9283357519226708],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.202549121711744],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","accuracy",0.00390625],["#s(approx 4 #s(literal 1 binary64))","accuracy",53.0],["(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","accuracy",0.00390625],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","accuracy",0.37978258120806835],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.6530769884680521],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",1.0733269461931747]],"memory":[[-11109632,60658784]],"mixsample":[[26.825927734375,"ival-div",0],[25.68505859375,"adjust",800],[76.824462890625,"ival-add",0],[12.186767578125,"ival-mult",0],[0.03515625,"ival-sub",1600],[5.15380859375,"ival-div",400],[0.308837890625,"ival-div",1600],[0.10302734375,"ival-assert",0],[12.582763671875,"ival-sub",0],[1.577880859375,"ival-add",400],[0.273193359375,"ival-true",0],[2.502685546875,"ival-sub",400],[0.977294921875,"exact",0],[1.924072265625,"adjust",2000],[21.997314453125,"ival-pow",0]],"outcomes":[[210.24755859375,1,"valid",222],[14.635498046875,2,"valid",18],[5.50537109375,0,"valid",16]],"time":270.723876953125,"type":"localize"},{"count":[[24,71]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx 4 #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x))","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(-.f64 x #s(literal 2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","#s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64)))","(-.f64 x #s(literal 1 binary64))","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(pow.f64 x #s(literal 9 binary64))"]],"memory":[[5651520,5651520]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (pow x 2))) (pow x 5))","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","2","(+ 2 (* -1 x))","(+ 2 (* x (- (* -1 x) 1)))","(+ 2 (* x (- (* x (- (* -1 x) 1)) 1)))","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 (pow x 2))","(/ (- (* -1 x) 1) (pow x 2))","(/ -1 x)","(/ (- (* -1 x) 1) x)","-2","(- x 2)","(/ 2 (pow x 9))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","(+ 2 (* 2 (pow x 2)))","(+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))))","(- x 1)","(/ 1 (pow x 2))","(/ (+ 1 x) (pow x 2))","(pow x 9)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(+ 2 (* 2 (/ 1 (pow x 2))))","3","(+ 3 (/ 1 x))","(+ 3 (+ (/ 1 x) (/ 1 (pow x 2))))","(+ 3 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3)))))","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(* -1 (+ 1 (/ 1 x)))","1","(- 1 (* 2 (/ 1 x)))","x","(* x (- 1 (* 2 (/ 1 x))))","(* 2 (pow x 6))","(* (pow x 6) (+ 2 (* 2 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(+ 3 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x)))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (* x (- (* 2 (/ 1 x)) 1)))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[2.4990234375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 3)) (- (/ 2 (* x x)) -2) (/ 2 (* x x)) (+ (- 4 1) (/ 1 (- x 1))) (- 4 1) 4 (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- -1 (/ 1 x)) x) (- -1 (/ 1 x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- x 2) x) (- x 2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/ (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (pow x 9)) (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (- x 1) (/ 1 (- x 1)) (/ (- (/ 1 x) -1) x) (pow x 9))","x","-inf"],[2.3818359375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 3)) (- (/ 2 (* x x)) -2) (/ 2 (* x x)) (+ (- 4 1) (/ 1 (- x 1))) (- 4 1) 4 (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- -1 (/ 1 x)) x) (- -1 (/ 1 x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- x 2) x) (- x 2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/ (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (pow x 9)) (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (- x 1) (/ 1 (- x 1)) (/ (- (/ 1 x) -1) x) (pow x 9))","x","inf"],[3.4619140625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 3)) (- (/ 2 (* x x)) -2) (/ 2 (* x x)) (+ (- 4 1) (/ 1 (- x 1))) (- 4 1) 4 (/ 1 (- x 1)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- -1 (/ 1 x)) x) (- -1 (/ 1 x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- x 2) x) (- x 2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/ (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (pow x 9)) (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (- x 1) (/ 1 (- x 1)) (/ (- (/ 1 x) -1) x) (pow x 9))","x","0"]],"time":9.6201171875,"type":"series"},{"count":[[71,70]],"egraph":[[0,8191,578,0.080168117],[3,3360,599,0.031699853],[2,1004,623,0.011223925],[1,384,664,0.003088028],[0,148,680,0.001135701]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (pow x 2))) (pow x 5))","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","2","(+ 2 (* -1 x))","(+ 2 (* x (- (* -1 x) 1)))","(+ 2 (* x (- (* x (- (* -1 x) 1)) 1)))","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 (pow x 2))","(/ (- (* -1 x) 1) (pow x 2))","(/ -1 x)","(/ (- (* -1 x) 1) x)","-2","(- x 2)","(/ 2 (pow x 9))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","(+ 2 (* 2 (pow x 2)))","(+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))))","(- x 1)","(/ 1 (pow x 2))","(/ (+ 1 x) (pow x 2))","(pow x 9)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(+ 2 (* 2 (/ 1 (pow x 2))))","3","(+ 3 (/ 1 x))","(+ 3 (+ (/ 1 x) (/ 1 (pow x 2))))","(+ 3 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3)))))","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(* -1 (+ 1 (/ 1 x)))","1","(- 1 (* 2 (/ 1 x)))","x","(* x (- 1 (* 2 (/ 1 x))))","(* 2 (pow x 6))","(* (pow x 6) (+ 2 (* 2 (/ 1 (pow x 2)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(+ 3 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x)))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (* x (- (* 2 (/ 1 x)) 1)))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[434432,38677952]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ 2 (pow x 5))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 5))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) x))","2","#s(literal 2 binary64)","(+ 2 (* -1 x))","(-.f64 #s(literal 2 binary64) x)","(+ 2 (* x (- (* -1 x) 1)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","(+ 2 (* x (- (* x (- (* -1 x) 1)) 1)))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal -1 binary64)) x #s(literal 2 binary64))","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1 x) 1)) 1)","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (/.f64 (-.f64 x #s(literal 2 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (/.f64 (-.f64 x #s(literal 2 binary64)) x))","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/ (- (* -1 x) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) x) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* -1 x) 1) x)","(/.f64 (-.f64 #s(literal -1 binary64) x) x)","-2","#s(literal -2 binary64)","(- x 2)","(-.f64 x #s(literal 2 binary64))","(/ 2 (pow x 9))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 9 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 9))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 9 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 9))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 9 binary64)))","(/ (+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))))) (pow x 9))","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","(+ 2 (* 2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))","(fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2)))))))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(- x 1)","(-.f64 x #s(literal 1 binary64))","(/ 1 (pow x 2))","(/.f64 x (pow.f64 x #s(literal 3 binary64)))","(/ (+ 1 x) (pow x 2))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(pow x 9)","(pow.f64 x #s(literal 9 binary64))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 3 binary64)))","(+ 2 (* 2 (/ 1 (pow x 2))))","(+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64))","3","#s(literal 3 binary64)","(+ 3 (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))","(+ 3 (+ (/ 1 x) (/ 1 (pow x 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal 3 binary64))","(+ 3 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3)))))","(+.f64 (+.f64 (/.f64 x (pow.f64 x #s(literal 4 binary64))) #s(literal 3 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/.f64 (+.f64 (+.f64 (/.f64 x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) x) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal 1 binary64)) x)","(* -1 (+ 1 (/ 1 x)))","(/.f64 (-.f64 #s(literal -1 binary64) x) x)","1","#s(literal 1 binary64)","(- 1 (* 2 (/ 1 x)))","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","x","(* x (- 1 (* 2 (/ 1 x))))","(-.f64 x #s(literal 2 binary64))","(* 2 (pow x 6))","(*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))","(* (pow x 6) (+ 2 (* 2 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))))","(*.f64 (pow.f64 x #s(literal 6 binary64)) (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))))","(* (pow x 6) (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 6 binary64)))","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (-.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(+ 3 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x)))","(-.f64 #s(literal 3 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal 1 binary64)) x)","(* -1 (* x (- (* 2 (/ 1 x)) 1)))","(-.f64 x #s(literal 2 binary64))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":230.028076171875,"type":"simplify"},{"count":[[24,178]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx 4 #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x))","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(-.f64 x #s(literal 2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64))))","(/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))","#s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64)))","(-.f64 x #s(literal 1 binary64))","#s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(pow.f64 x #s(literal 9 binary64))"]],"memory":[[-1692144,18069600]],"outputs":[["#s(approx 3 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","(+.f64 (-.f64 #s(approx 3 #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64))","(-.f64 #s(approx 3 #s(literal 2 binary64)) #s(literal 2 binary64))","#s(approx 3 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","(+.f64 #s(approx 3 #s(literal 2 binary64)) #s(literal 2 binary64))","#s(approx 3 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","(+.f64 #s(approx 3 #s(literal 2 binary64)) #s(approx 3 #s(literal 2 binary64)))","#s(approx 3 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(approx 3 #s(approx 3 (/.f64 #s(approx 3 #s(literal 2 binary64)) #s(literal 2 binary64))))","#s(approx 3 (/.f64 #s(approx 3 #s(literal 2 binary64)) #s(literal 2 binary64)))","(/.f64 #s(approx 3 #s(literal 2 binary64)) #s(literal 2 binary64))","#s(approx 3 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(approx 3 #s(literal 2 binary64))","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 4 binary64)","#s(literal 0 binary64)","#s(literal 5 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)"]],"time":586.726806640625,"type":"rewrite"},{"compiler":[[2662,336]],"memory":[[432336,8188416]],"time":10.60107421875,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",19.208265184017158,"binary64"],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",20.12407201181765,"binary64"],["(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","fresh",59.98541593232244,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",19.592083382706125,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","done",61.50065850871613,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",20.212789658057797,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",20.231034160678558,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","done",20.252651848167826,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","done",1.0168169315950375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64))))","fresh",0.867016928866048,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","done",0.8249440684800454,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","done",1.5608440437026634,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 3)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","fresh",40.73602766326956,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (pow x 3)) (/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))))","fresh",56.21021485769366,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","done",57.13256968690789,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","done",57.86227842051262,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","done",61.50230357614216,"binary64"],["#s(literal 0 binary64)","done",20.584722654177078,"binary64"]],"compiler":[[620,144],[15,10],[23,15],[15,11],[31,18],[29,20],[23,16],[19,14],[27,18],[27,19],[33,22],[35,26],[21,15],[38,25],[47,31],[51,35],[59,37],[17,12],[1,2]],"count":[[112,18]],"kept":[{"done":[11,10],"fresh":[1,1],"new":[95,3],"picked":[5,4]}],"memory":[[1803520,10143488]],"min-error":[[0.60782322869961,"binary64"]],"time":11.7919921875,"type":"prune"},{"accuracy":[0.8249440684800453],"baseline":[0.8249440684800454],"branch":[["x",0.8249440684800454,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.8249440684800453,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[23,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 3)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (pow x 3)) (/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))"]],"memory":[[-5161152,7745968]],"oracle":[63.64757630697586],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))"]],"repr":["binary64"],"time":49.4990234375,"times":[[5.551025390625,"x"],[42.390869140625,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.8670169288660479],"baseline":[0.867016928866048],"branch":[["x",0.867016928866048,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.8670169288660479,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[22,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 3)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 #s(approx (* (+ (* x x) 1) (+ (* (pow x 4) 2) 2)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (+ (- (/ 2 (pow x 4)) -2) (/ 2 (* x x))) (pow x 3)) (/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (* (- (/ 1 (* x x)) -1) (- (/ 2 (pow x 4)) -2)) (pow x 3)) (/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 9 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (+.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64))))"]],"memory":[[-621616,7583616]],"oracle":[63.64757630697586],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64))))"]],"repr":["binary64"],"time":11.60888671875,"times":[[5.659912109375,"x"],[4.474853515625,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[1.0168169315950375],"baseline":[1.0168169315950375],"branch":[["x",1.0168169315950375,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",1.0168169315950375,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[16,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 3)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))"]],"memory":[[-2020960,6113088]],"oracle":[62.82933783285746],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))"]],"repr":["binary64"],"time":10.107177734375,"times":[[4.761962890625,"x"],[4.2158203125,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[1.5608440437026634],"baseline":[1.5608440437026634],"branch":[["x",1.5608440437026632,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",1.5608440437026634,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[15,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 3)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))))"]],"memory":[[5903056,5903056]],"oracle":[62.82933783285746],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))"]],"repr":["binary64"],"time":8.791015625,"times":[[4.083984375,"x"],[3.555908203125,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[19.208265184017154],"baseline":[19.208265184017158],"branch":[["x",19.208265184017154,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",19.208265184017158,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[13,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[-2646208,5519888]],"oracle":[61.867723078399024],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"repr":["binary64"],"time":7.48681640625,"times":[[3.320068359375,"x"],[3.132080078125,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[20.212789658057794],"baseline":[20.212789658057797],"branch":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",20.212789658057805,1,"binary64"],["x",20.212789658057794,1,"binary64"]],"compiler":[[15,10],[1,1]],"count":[[9,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 x #s(literal 2 binary64)) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))"]],"memory":[[-4504768,4551136]],"oracle":[61.867723078399024],"outputs":[["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"repr":["binary64"],"time":6.01318359375,"times":[[2.633056640625,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"],[2.6240234375,"x"]],"type":"regimes"},{"accuracy":[20.23103416067855],"baseline":[20.231034160678558],"branch":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",20.231034160678565,1,"binary64"],["x",20.23103416067855,1,"binary64"]],"compiler":[[15,10],[1,1]],"count":[[7,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(approx (/ 1 (- x 1)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)))"]],"memory":[[4107088,4107088]],"oracle":[61.86379615955148],"outputs":[["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"repr":["binary64"],"time":5.11083984375,"times":[[1.949951171875,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"],[2.465087890625,"x"]],"type":"regimes"},{"accuracy":[20.58472265417707],"baseline":[20.584722654177078],"branch":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",20.58472265417708,1,"binary64"],["x",20.58472265417707,1,"binary64"]],"compiler":[[15,10],[1,1]],"count":[[5,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) #s(literal 1 binary64))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) #s(approx (/ 1 (- x 1)) (/.f64 #s(literal 1 binary64) x)))","(+.f64 (-.f64 #s(approx 4 #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"link":["."],"memory":[[-4674384,3647344]],"name":["3frac (problem 3.3.3)"],"oracle":[61.86379615955148],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":4.129150390625,"times":[[1.56982421875,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"],[1.849853515625,"x"]],"type":"regimes"},{"egraph":[[14,1705,174,0.008822366],[13,1704,174,0.00770967],[12,1701,174,0.007354213],[11,1692,174,0.007552191],[10,1664,174,0.007550139],[9,1627,174,0.008275365],[8,1568,174,0.008321143],[7,1292,174,0.008610858],[6,791,174,0.008306385],[5,468,174,0.005381381],[4,268,174,0.002854173],[3,187,174,0.001752934],[2,125,174,0.001524234],[1,80,174,0.001197678],[0,52,174,0.001000228]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(literal 0 binary64)"]],"memory":[[6566736,6566736]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (/.f64 (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x))) x) x)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64))) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","#s(literal 0 binary64)"]],"stop":[["saturated",1]],"time":100.474853515625,"type":"simplify"},{"compiler":[[174,54]],"memory":[[1307280,1307280]],"stop":[["fuel",1]],"time":2.72802734375,"type":"soundness"},{"compiler":[[174,54],[174,54],[9,7],[9,7],[15,10],[15,10],[35,25],[35,25],[35,25],[35,25],[35,25],[35,25],[35,25],[35,25],[35,25],[35,25]],"memory":[[-3857648,36030912]],"remove-preprocessing":[["(negabs x)"],[],[],["(negabs x)"],[],[],["(negabs x)"],["(negabs x)"],["(negabs x)"]],"time":70.6220703125,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.01708984375,"type":"end"}]