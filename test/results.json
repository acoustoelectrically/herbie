{"branch":"zane-regimes-2","commit":"18bd0a90d243ae53202165cdbaa0c02b31179069","date":1705686967,"flags":["rules:arithmetic","rules:polynomials","rules:fractions","rules:exponents","rules:trigonometry","rules:hyperbolic","rules:numerics","rules:special","rules:bools","rules:branches","generate:rr","generate:taylor","generate:simplify","generate:proofs","reduce:regimes","reduce:avg-error","reduce:binary-search","reduce:branch-expressions","setup:simplify","setup:search"],"hostname":"zane","iterations":4,"merged-cost-accuracy":[[1.0,0.3861346595714875],[[0.28867521837664195,0.9896545364767781],[0.33489036934936317,0.9896232489494954],[0.3995006242197254,0.9895561370079649],[0.9624413145539906,0.7627659230743575],[1.895679815055628,0.6696200801089469],[22.77777777777778,0.2681451962070288],[41.0,0.2124392808964617]]],"note":false,"points":256,"seed":"0","tests":[{"bits":64,"conversions":[],"cost-accuracy":[[13120,39.2873817874248],[45449,0.6621096654861965],[[39177,0.6641120672322939,"(if (or (<=.f64 eps -3412647653636267/18446744073709551616) (not (<=.f64 eps 2184094498327211/1180591620717411303424))) (-.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 1/2 (fma.f64 2 x eps))) (*.f64 -2 (sin.f64 (*.f64 eps 1/2)))))"],[39113,0.6817302466683701,"(if (or (<=.f64 eps -3984496719921263/147573952589676412928) (not (<=.f64 eps 2582544170319337/9223372036854775808))) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 (*.f64 1/2 (fma.f64 2 x eps))) (*.f64 -2 (sin.f64 (*.f64 eps 1/2)))))"],[32841,0.6825517135594837,"(if (or (<=.f64 eps -5902958103587057/18446744073709551616) (not (<=.f64 eps 5534023222112865/36893488147419103232))) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps)))) (*.f64 (sin.f64 (*.f64 1/2 (fma.f64 2 x eps))) (*.f64 -2 (sin.f64 (*.f64 eps 1/2)))))"],[32841,0.6684072314902472,"(if (or (<=.f64 eps -5718490662849961/18446744073709551616) (not (<=.f64 eps 7673845534663173/147573952589676412928))) (-.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (sin.f64 x) (sin.f64 eps))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 1/2 (fma.f64 2 x eps))) (*.f64 -2 (sin.f64 (*.f64 eps 1/2)))))"],[26436,20.56329066146393,"(if (<=.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) -7737125245533627/77371252455336267181195264) (*.f64 (sin.f64 eps) (tan.f64 (/.f64 (neg.f64 eps) 2))) (*.f64 (sin.f64 x) (*.f64 -2 (sin.f64 (*.f64 eps 1/2)))))"],[19904,15.17860592324112,"(*.f64 (sin.f64 (*.f64 1/2 (fma.f64 2 x eps))) (*.f64 -2 (sin.f64 (*.f64 eps 1/2))))"],[13632,15.182980923241121,"(*.f64 -2 (*.f64 (sin.f64 (*.f64 eps 1/2)) (sin.f64 (*.f64 1/2 (-.f64 eps (*.f64 x -2))))))"],[13449,20.742059817124183,"(if (or (<=.f64 eps -6779062778503071/664613997892457936451903530140172288) (not (<=.f64 eps 3791191370311477/154742504910672534362390528))) (*.f64 -2 (pow.f64 (sin.f64 (*.f64 eps 1/2)) 2)) (neg.f64 (*.f64 eps (sin.f64 x))))"],[13449,20.73090047344884,"(if (or (<=.f64 eps -3530761863803683/41538374868278621028243970633760768) (not (<=.f64 eps 3264099712959499/2417851639229258349412352))) (*.f64 (sin.f64 eps) (tan.f64 (/.f64 (neg.f64 eps) 2))) (neg.f64 (*.f64 eps (sin.f64 x))))"],[13124,20.920039380434535,"(if (<=.f64 eps -3143773488566009/5070602400912917605986812821504) (-.f64 (cos.f64 eps) (cos.f64 x)) (if (<=.f64 eps 8264141345021879/295147905179352825856) (neg.f64 (*.f64 eps (sin.f64 x))) (+.f64 (cos.f64 eps) -1)))"],[6921,21.144314873027398,"(if (or (<=.f64 eps -3143773488566009/5070602400912917605986812821504) (not (<=.f64 eps 3412647653636267/9223372036854775808))) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 eps (sin.f64 x))))"],[6857,30.235709038770832,"(if (or (<=.f64 eps -8854437155380585/73786976294838206464) (not (<=.f64 eps 7932099951695107/36893488147419103232))) (+.f64 (cos.f64 eps) -1) (*.f64 -1/2 (+.f64 (*.f64 eps (+.f64 eps x)) (*.f64 eps x))))"],[576,46.838707442750156,"(*.f64 -1/2 (*.f64 eps (+.f64 eps (+.f64 x x))))"],[320,50.40388602262645,"(*.f64 -1/2 (*.f64 eps eps))"]]],"end":0.6621096654861965,"end-est":0.42882254063764236,"identifier":"#f","input":"(- (cos (+ x eps)) (cos x))","link":"0-2cosproblem335","name":"2cos (problem 3.3.5)","output":"(if (or (<=.f64 eps -48999163945791/288230376151711744) (not (<=.f64 eps 7378697629483821/295147905179352825856))) (fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))) (*.f64 (sin.f64 (*.f64 1/2 (fma.f64 2 x eps))) (*.f64 -2 (sin.f64 (*.f64 eps 1/2)))))","pre":"TRUE","prec":"binary64","preprocess":"()","spec":"(- (cos (+ x eps)) (cos x))","start":39.2873817874248,"start-est":39.744630232718805,"status":"imp-start","target":false,"target-prog":"#f","time":10709.689697265625,"vars":["x","eps"]}]}