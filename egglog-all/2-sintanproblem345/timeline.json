[{"memory":[[16720,16720]],"time":0.031005859375,"type":"start"},{"compiler":[[17,12]],"memory":[[3518208,104081552]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[11,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[10,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[9,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[8,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[7,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[6,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[5,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[4,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[3,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}]],"time":529.760986328125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.501171875,"valid":0.498828125}],"memory":[[29942368,550480800]],"mixsample":[[228.970703125,"adjust",800],[133.66162109375,"ival-div",0],[0.041259765625,"ival-div",400],[0.035888671875,"ival-sub",2000],[5.1201171875,"ival-assert",0],[343.771240234375,"ival-sub",0],[66.31689453125,"ival-tan",0],[21.206787109375,"ival-and",0],[0.057861328125,"ival-sub",400],[275.103759765625,"const",0],[201.253662109375,"ival-tan",400],[2441.0087890625,"ival-sin",1600],[123.248291015625,"adjust",2000],[4158.352294921875,"ival-tan",1600],[0.0693359375,"ival-sub",800],[250.05810546875,"ival-sin",400],[437.72119140625,"ival-tan",3600],[93.734375,"ival-sin",0],[0.052978515625,"ival-div",800],[24.099609375,"adjust",2800],[0.023193359375,"ival-div",2000],[626.671630859375,"ival-sin",3600],[62.173583984375,"ival-<=",0]],"outcomes":[[719.83740234375,1,"valid",2450],[7594.80029296875,2,"valid",4549],[1605.03515625,3,"valid",1120],[18.7109375,0,"valid",137]],"time":10478.385009765625,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[255,0,1,0]],"explanations":[["-.f64","(-.f64 eps (sin.f64 eps))","cancellation",92,0,[],[[1]]],["-.f64","(-.f64 eps (tan.f64 eps))","cancellation",92,0,[],[[2]]],["/.f64","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","u/u",164,0,[["(-.f64 eps (sin.f64 eps))","underflow",164],["(-.f64 eps (tan.f64 eps))","underflow",164]],[[]]]],"fperrors":[["(-.f64 eps (tan.f64 eps))",91,1,[-5.6788911782858206e-108],0,false],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",166,0,false,2,[4.682932248201937e-104]],["(-.f64 eps (sin.f64 eps))",91,1,[-5.6788911782858206e-108],0,false],["(tan.f64 eps)",0,0,false,0,false],["eps",0,0,false,0,false],["(sin.f64 eps)",0,0,false,0,false]],"freqs":[[2,92],[1,164]],"maybe-confusion":[[255,0,0,1,0,0]],"memory":[[-34226880,60026592]],"mixsample":[[7.57958984375,"ival-div",0],[279.08544921875,"ival-tan",1600],[11.68505859375,"adjust",800],[0.079833984375,"ival-sub",800],[20.797119140625,"ival-tan",3600],[13.097412109375,"ival-sin",400],[4.596923828125,"ival-sin",0],[0.263427734375,"ival-assert",0],[18.232421875,"ival-sub",0],[1.697509765625,"adjust",2800],[0.665771484375,"ival-true",0],[4.71533203125,"ival-tan",0],[39.40380859375,"ival-sin",3600],[139.5244140625,"ival-sin",1600],[12.21826171875,"ival-tan",400],[6.3349609375,"adjust",2000]],"outcomes":[[34.707275390625,1,"valid",150],[462.201904296875,2,"valid",274],[93.8740234375,3,"valid",80],[0.807861328125,0,"valid",8]],"time":667.5087890625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"memory":[[2561968,20571856]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"symmetry":[["(abs eps)"]],"time":268.425048828125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.0771484375,"type":"eval"},{"alts":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","next",63.0353062736438,"binary64"]],"compiler":[[9,6]],"memory":[[266592,266592]],"time":0.4609375,"type":"prune"},{"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"locations":[["(-.f64 eps (tan.f64 eps))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","cost-diff",0]],"memory":[[1865472,9992384]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"time":138.52685546875,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(tan.f64 eps)","accuracy",0.0078125],["(-.f64 eps (tan.f64 eps))","accuracy",20.566948648408474],["(-.f64 eps (sin.f64 eps))","accuracy",20.607540527265087],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","accuracy",40.80568966713487]],"memory":[[150512,16036208]],"mixsample":[[4.353271484375,"ival-div",0],[145.322265625,"ival-tan",1600],[6.9677734375,"adjust",800],[0.021728515625,"ival-sub",800],[10.961181640625,"ival-tan",3600],[8.138916015625,"ival-sin",400],[2.89404296875,"ival-sin",0],[0.1708984375,"ival-assert",0],[10.892578125,"ival-sub",0],[0.683837890625,"adjust",2800],[0.306884765625,"ival-true",0],[2.013916015625,"ival-tan",0],[21.041259765625,"ival-sin",3600],[74.515869140625,"ival-sin",1600],[6.751953125,"ival-tan",400],[3.928466796875,"adjust",2000]],"outcomes":[[20.132080078125,1,"valid",75],[247.112060546875,2,"valid",137],[49.846923828125,3,"valid",40],[0.400146484375,0,"valid",4]],"time":331.43212890625,"type":"localize"},{"count":[[5,32]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"memory":[[1728368,1728368]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ (sin eps) (cos eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"series":[[1.837158203125,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)) (tan eps))","eps","-inf"],[1.623046875,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)) (tan eps))","eps","inf"],[1.212158203125,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)) (tan eps))","eps","0"]],"time":5.19189453125,"type":"series"},{"count":[[32,0]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ (sin eps) (cos eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"memory":[[-7111072,10069952]],"method":["egg-herbie"],"outputs":[[]],"time":120.4931640625,"type":"simplify"},{"count":[[5,65]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"memory":[[302720,16396032]],"outputs":[["(neg.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps))))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 eps eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 eps eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)))","(+.f64 (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (sin.f64 eps) eps))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (sin.f64 eps)))","(+.f64 (neg.f64 (sin.f64 eps)) eps)","(+.f64 eps (neg.f64 (sin.f64 eps)))","(+.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))))","(+.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(-.f64 eps (sin.f64 eps))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (sin.f64 eps))","(-.f64 #s(literal 0 binary64) (-.f64 (sin.f64 eps) eps))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 eps (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps))","(*.f64 (+.f64 (-.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (+.f64 eps eps)) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (sin.f64 eps) eps)))","(neg.f64 (neg.f64 (sin.f64 eps)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal 1 binary64) (sin.f64 eps))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 eps)))","(sin.f64 eps)","(neg.f64 (-.f64 (tan.f64 eps) eps))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (tan.f64 eps)))","(+.f64 (neg.f64 (tan.f64 eps)) eps)","(+.f64 eps (neg.f64 (tan.f64 eps)))","(+.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(-.f64 eps (tan.f64 eps))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (tan.f64 eps))","(-.f64 #s(literal 0 binary64) (-.f64 (tan.f64 eps) eps))","(-.f64 (/.f64 eps #s(literal 1 binary64)) (/.f64 (tan.f64 eps) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(-.f64 (/.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)))","(*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(neg.f64 (neg.f64 (tan.f64 eps)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 eps)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 eps))) (neg.f64 (tan.f64 eps)))","(*.f64 #s(literal 1 binary64) (tan.f64 eps))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 eps)) (sin.f64 eps))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 eps)))","(*.f64 (sin.f64 eps) (/.f64 #s(literal 1 binary64) (cos.f64 eps)))","(*.f64 (neg.f64 (sin.f64 eps)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 eps))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (cos.f64 eps))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (tan.f64 eps)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (tan.f64 eps))))","(/.f64 (sin.f64 eps) (neg.f64 (neg.f64 (cos.f64 eps))))"]],"time":416.033935546875,"type":"rewrite"},{"compiler":[[1162,221]],"memory":[[3823824,3823824]],"time":4.469970703125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","next",62.88449214776239,"binary64"],["(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","next",63.38202862355588,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","fresh",63.053158433230045,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","fresh",63.02756670549904,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","fresh",62.543643313598054,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",63.0353062736438,"binary64"],["(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","next",62.47429761770882,"binary64"],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 eps eps)))","fresh",62.56562389618288,"binary64"],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","next",63.20931037012657,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","next",63.03530538451672,"binary64"]],"compiler":[[37,14],[27,16],[37,14],[23,12],[13,9],[9,6],[14,8],[43,15],[32,12],[12,9],[37,14],[27,16],[37,14],[23,12],[13,9],[14,8],[43,15],[32,12],[12,9]],"count":[[66,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[65,9],"picked":[1,1]}],"memory":[[-2882464,6603280]],"min-error":[[61.71787602472951,"binary64"]],"time":9.18994140625,"type":"prune"},{"inputs":[["(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))","(sin.f64 eps)","eps","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","(/.f64 eps (-.f64 eps (tan.f64 eps)))","(-.f64 eps (tan.f64 eps))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","#s(literal -1 binary64)","(/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","eps","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps))","(*.f64 eps eps)","eps","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps))))","#s(literal 1/2 binary64)","(*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))","#s(literal -1/2 binary64)","(cos.f64 (+.f64 eps eps))","(+.f64 eps eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","#s(literal 2 binary64)","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(*.f64 eps eps)","eps","(fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","#s(literal 3 binary64)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"locations":[["(*.f64 (*.f64 eps eps) eps)","cost-diff",0],["(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","cost-diff",0],["(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","cost-diff",0],["(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","cost-diff",0],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","cost-diff",14],["(/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps))","cost-diff",0],["(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps)))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps))))","cost-diff",1],["(-.f64 (tan.f64 eps) eps)","cost-diff",0],["(/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","cost-diff",1],["(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","cost-diff",2],["(-.f64 (tan.f64 eps) eps)","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))","cost-diff",0],["(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","cost-diff",0]],"memory":[[5592144,13851280]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))","(sin.f64 eps)","eps","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","(/.f64 eps (-.f64 eps (tan.f64 eps)))","(-.f64 eps (tan.f64 eps))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (tan.f64 eps) eps))","#s(literal -1 binary64)","(/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","eps","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","(/.f64 (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (neg.f64 (fma.f64 (cos.f64 (+.f64 eps eps)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps)))","(fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (neg.f64 (fma.f64 (cos.f64 (+.f64 eps eps)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps))","(*.f64 eps eps)","eps","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))","(/.f64 (fma.f64 (cos.f64 (+.f64 eps eps)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (sin.f64 eps) eps))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps))))","(fma.f64 (cos.f64 (+.f64 eps eps)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))","#s(literal -1/2 binary64)","(cos.f64 (+.f64 eps eps))","(+.f64 eps eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","#s(literal 2 binary64)","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps)","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(/.f64 (fma.f64 (/.f64 eps (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (*.f64 eps eps) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(fma.f64 (/.f64 eps (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (*.f64 eps eps) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(*.f64 eps eps)","eps","(fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))","(+.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(pow.f64 (sin.f64 eps) #s(literal 3 binary64))","#s(literal 3 binary64)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"time":500.30615234375,"type":"simplify"},{"compiler":[[441,44]],"locations":[["(-.f64 eps (tan.f64 eps))","accuracy",20.566948648408474],["(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","accuracy",40.26212282948337],["(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","accuracy",40.26602907948337],["(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","accuracy",40.80568966713487],["(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","accuracy",0.201503759768442],["(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","accuracy",14.571648284923418],["(-.f64 eps (sin.f64 eps))","accuracy",20.607540527265087],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","accuracy",47.294245136208595],["(/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps))","accuracy",27.964998234604344],["(/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))","accuracy",27.984529484604344],["(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps))))","accuracy",30.824487514195695],["(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","accuracy",40.80568966713487],["(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","accuracy",0.015625],["(-.f64 (tan.f64 eps) eps)","accuracy",20.566948648408474],["(-.f64 (sin.f64 eps) eps)","accuracy",20.607540527265087],["(/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))","accuracy",40.79067100109642],["(/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))","accuracy",9.503150427196536],["(-.f64 (tan.f64 eps) eps)","accuracy",20.566948648408474],["(-.f64 eps (tan.f64 eps))","accuracy",20.566948648408474],["(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","accuracy",61.694666904168166]],"memory":[[4434208,101027728]],"mixsample":[[28.430419921875,"adjust",800],[0.36474609375,"ival-mult",1200],[0.02001953125,"ival-pow2",400],[2.154541015625,"ival-tan",0],[0.5537109375,"ival-mult",4400],[0.08056640625,"ival-sub",400],[0.113037109375,"ival-cos",400],[0.286865234375,"ival-tan",400],[0.00390625,"ival-neg",400],[3.7421875,"ival-mult",800],[0.501708984375,"ival-mult",4800],[15.728515625,"ival-tan",4000],[1.9716796875,"ival-add",400],[55.463623046875,"ival-sin",2000],[9.373291015625,"ival-sin",3600],[0.599609375,"ival-mult",2400],[0.845458984375,"ival-add",2400],[4.37744140625,"ival-pow2",0],[2.43798828125,"ival-div",2400],[0.5634765625,"ival-add",1200],[3.18505859375,"ival-tan",2800],[16.787353515625,"ival-cos",4800],[0.4052734375,"ival-pow2",800],[1.40576171875,"ival-mult",2000],[1.03076171875,"ival-mult",2800],[8.88525390625,"ival-cos",4000],[15.72265625,"ival-cos",2400],[1.0771484375,"ival-pow",3600],[5.11474609375,"ival-tan",4400],[1.65185546875,"ival-div",2800],[81.903564453125,"ival-tan",4800],[2.402587890625,"ival-cos",3200],[0.830322265625,"ival-sub",2400],[0.439208984375,"ival-div",1200],[9.249267578125,"ival-tan",3600],[10.005126953125,"ival-mult",400],[1.742919921875,"ival-add",1600],[0.7119140625,"ival-add",2800],[5.454345703125,"ival-cos",2000],[0.47265625,"ival-true",0],[0.947021484375,"ival-div",3600],[0.231689453125,"ival-sub",2800],[0.160888671875,"ival-mult",3200],[28.266845703125,"ival-div",0],[6.71142578125,"ival-div",400],[4.96630859375,"ival-pow",1600],[3.962158203125,"ival-div",1600],[0.2158203125,"ival-assert",0],[19.422119140625,"ival-sub",0],[2.51171875,"ival-cos",0],[0.39990234375,"ival-cos",5200],[1.3115234375,"ival-cos",1200],[0.7177734375,"ival-pow2",1200],[4.447509765625,"ival-pow",0],[77.242919921875,"ival-sin",2400],[154.3017578125,"ival-tan",1600],[15.938720703125,"ival-add",0],[0.7080078125,"ival-mult",3600],[7.92626953125,"ival-sub",800],[3.23876953125,"ival-mult",1600],[5.43115234375,"adjust",2800],[6.198486328125,"ival-div",2000],[6.0693359375,"ival-pow",400],[3.860107421875,"ival-cos",1600],[2.1650390625,"ival-sub",2000],[62.017822265625,"ival-sin",1600],[0.599365234375,"ival-add",3600],[25.3955078125,"ival-sin",4000],[24.5380859375,"adjust",2000],[12.81005859375,"ival-mult",0],[0.374267578125,"ival-sin",400],[4.286865234375,"ival-pow2",1600],[0.83642578125,"ival-pow2",4800],[12.056640625,"ival-sin",2800],[10.05126953125,"ival-cos",4400],[3.569091796875,"ival-sin",0],[0.79248046875,"ival-add",2000],[7.859375,"ival-div",800],[6.48046875,"ival-cos",3600],[6.77001953125,"ival-tan",3200],[29.077880859375,"ival-cos",2800],[0.925048828125,"exact",0],[0.571044921875,"ival-add",800],[0.334228515625,"ival-mult",4000],[3.9130859375,"ival-neg",0]],"outcomes":[[62.253173828125,1,"valid",66],[593.71240234375,2,"valid",148],[296.006591796875,3,"valid",40],[0.85693359375,0,"valid",2]],"time":1023.58984375,"type":"localize"},{"count":[[24,168]],"inputs":[["(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))","(sin.f64 eps)","(-.f64 (tan.f64 eps) eps)","(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps))))","(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(-.f64 eps (tan.f64 eps))","(-.f64 (sin.f64 eps) eps)","(/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))"]],"memory":[[-3931568,11344144]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(/ 3 (pow eps 2))","(/ (+ 3 (* -17/10 (pow eps 2))) (pow eps 2))","(/ (+ 3 (* (pow eps 2) (- (* 307/1400 (pow eps 2)) 17/10))) (pow eps 2))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (+ 307/1400 (* -1247/126000 (pow eps 2)))) 17/10))) (pow eps 2))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","1/2","(+ 1/2 (* -9/40 (pow eps 2)))","(+ 1/2 (* (pow eps 2) (- (* 27/2800 (pow eps 2)) 9/40)))","(+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 27/2800 (* -27/112000 (pow eps 2)))) 9/40)))","-2","(- (* -9/10 (pow eps 2)) 2)","(- (* (pow eps 2) (- (* -513/1400 (pow eps 2)) 9/10)) 2)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -297/2000 (pow eps 2)) 513/1400)) 9/10)) 2)","(pow eps 2)","(* (pow eps 2) (+ 1 (* -1/3 (pow eps 2))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* 2/45 (pow eps 2)) 1/3))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 2/45 (* -1/315 (pow eps 2)))) 1/3))))","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* 1/2 eps)","(* eps (+ 1/2 (* 1/24 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (+ 1/24 (* 1/720 (pow eps 2))))))","(* eps (+ 1/2 (* (pow eps 2) (+ 1/24 (* (pow eps 2) (+ 1/720 (* -1/120960 (pow eps 2))))))))","-1/4","(- (* 17/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(/ -1/4 eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(* 1/3 eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(pow eps 3)","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* -1/6 (pow eps 3))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","(* eps (+ 1/2 (* -1/8 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 7/720 (pow eps 2)) 1/8))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 7/720 (* -5/24192 (pow eps 2)))) 1/8))))","(* -2/3 (pow eps 4))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps))) (pow eps 2))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (pow eps 3))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))))","(* -1 (/ (sin eps) eps))","(/ (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps)","(/ (- (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2))))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps)","(/ (- (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3))))) (+ (/ (pow (sin eps) 2) (* eps (cos eps))) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(sin eps)","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","-1","(- (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps)) 1)","(- (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps))) 1)","(- (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps)))) 1)","(- (+ 1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps)))","(- (+ 1 (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps))))","(- (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))) (* -1 (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (/ (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow eps 2)))) (* -1 (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow eps 3)))) (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow eps 2)))))","(+ 1/2 (* -1/2 (cos (* 2 eps))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps))))) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps))))) (pow eps 2))) (* -1 (/ (+ (* -1/2 (sin eps)) (+ (* 1/2 (* (cos (* 2 eps)) (sin eps))) (pow (sin eps) 3))) (pow eps 3)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps)))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(* eps (- (+ 1 (* -1 (/ (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps))))) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1/2 (sin eps)) (+ (* 1/2 (* (cos (* 2 eps)) (sin eps))) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (* -1/2 (/ (cos (* 2 eps)) (pow eps 2))) (+ (/ 1/2 (pow eps 2)) (/ (sin eps) eps))))))","(* eps (- (+ 1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (pow (sin eps) 3) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (sin eps) eps))))","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(/ (sin eps) (* eps (cos eps)))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ 1 eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* eps (- (/ (sin eps) eps) 1))","(/ (+ 1/2 (* -1/2 (cos (* 2 eps)))) eps)","(/ (+ 1/2 (+ (* -1 (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (* 2 eps))))) eps)) (* -1/2 (cos (* 2 eps))))) eps)","(/ (- (+ 1/2 (+ (* -1/2 (cos (* 2 eps))) (/ (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (* 2 eps))))) (pow eps 2)))) (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (* 2 eps))))) eps)) eps)","(/ (- (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 3) (+ 1/2 (* -1/2 (cos (* 2 eps))))) (pow eps 3))) (* -1/2 (cos (* 2 eps))))) (+ (* -1 (/ (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (* 2 eps))))) (pow eps 2))) (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (* 2 eps))))) eps))) eps)","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(/ (pow (sin eps) 3) (pow eps 2))","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps))))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ (sin eps) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (sin eps) (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (cos eps))) eps))) eps))","(* -1 (/ (+ (sin eps) (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (/ (pow (sin eps) 2) (cos eps))) eps))) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(- (/ (sin eps) eps) (+ 1 (/ (sin eps) (* eps (cos eps)))))","(- (* -1 (/ (+ (* -1 (- (sin eps) (/ (sin eps) (cos eps)))) (* -1 (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps))))) eps)) 1)","(- (* -1 (/ (+ (* -1 (- (sin eps) (/ (sin eps) (cos eps)))) (* -1 (/ (+ (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)) (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) eps))) eps)) 1)","(+ 1 (* -1 (/ (- (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps))) (* -1 (- (sin eps) (/ (sin eps) (cos eps))))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps)) (* -1 (- (sin eps) (/ (sin eps) (cos eps))))) eps)))","(+ 1 (* -1 (/ (- (/ (sin eps) (cos eps)) (sin eps)) eps)))","(+ 1 (* -1 (/ (- (+ (/ (sin eps) (cos eps)) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) eps)) (sin eps)) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) eps)) (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps)))) eps)) (/ (sin eps) (cos eps))) (sin eps)) eps)))","(+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))","(+ 1 (* -1 (/ (- (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* 1/2 (/ 1 eps))) (+ (* 1/2 (/ (cos (neg (* -2 eps))) eps)) (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))) (/ (pow (sin eps) 2) eps)))) eps)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (- (+ (* -1 (- 1/2 (+ (* 1/2 (cos (neg (* -2 eps)))) (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (pow (sin eps) 2))))) (* -1 (/ (+ (* -1/2 (sin eps)) (+ (* 1/2 (* (cos (neg (* -2 eps))) (sin eps))) (pow (sin eps) 3))) eps))) (/ (* (sin eps) (- 1/2 (+ (* 1/2 (cos (neg (* -2 eps)))) (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (pow (sin eps) 2))))) (* eps (cos eps)))) eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- 1/2 (+ (* 1/2 (cos (neg (* -2 eps)))) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ 1/2 (+ (* -1/2 (/ (sin eps) eps)) (+ (* 1/2 (/ (* (cos (neg (* -2 eps))) (sin eps)) eps)) (/ (pow (sin eps) 3) eps)))) (+ (* 1/2 (cos (neg (* -2 eps)))) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (/ (pow (sin eps) 2) eps) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) eps) (pow (sin eps) 2)) eps)) (sin eps)) eps)) 1)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))","(/ (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))) eps)","(* -1 (/ (+ (* -1 (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) eps)) eps))","(* -1 (/ (+ (* -1 (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) (* -1 (/ (- (/ (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) eps) (* (sin eps) (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))))) eps))) eps))","(* -1 (/ (+ (* -1 (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) (* -1 (/ (- (* -1 (/ (- (/ (* (pow (sin eps) 3) (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) eps) (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))))) eps)) (* (sin eps) (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))))) eps))) eps))","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))"]],"series":[[13.173095703125,"((+ (/ (sin eps) (- (tan eps) eps)) (/ eps (- eps (tan eps)))) (/ (sin eps) (- (tan eps) eps)) (sin eps) (- (tan eps) eps) (/ -1 (/ (- (tan eps) eps) (- (sin eps) eps))) (neg (/ -1 (/ (- (tan eps) eps) (- (sin eps) eps)))) (/ (- (tan eps) eps) (- (sin eps) eps)) (+ 1/2 (* -1/2 (cos (+ eps eps)))) (/ (- (/ (* eps eps) (+ (sin eps) eps)) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps))) (- eps (tan eps))) (- (/ (* eps eps) (+ (sin eps) eps)) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps))) (/ (* eps eps) (+ (sin eps) eps)) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- eps (sin eps)) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (* (* eps eps) eps) (- eps (tan eps)) (- (sin eps) eps) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps)) (- (* eps eps) (pow (tan eps) 2)) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))))","eps","-inf"],[14.239013671875,"((+ (/ (sin eps) (- (tan eps) eps)) (/ eps (- eps (tan eps)))) (/ (sin eps) (- (tan eps) eps)) (sin eps) (- (tan eps) eps) (/ -1 (/ (- (tan eps) eps) (- (sin eps) eps))) (neg (/ -1 (/ (- (tan eps) eps) (- (sin eps) eps)))) (/ (- (tan eps) eps) (- (sin eps) eps)) (+ 1/2 (* -1/2 (cos (+ eps eps)))) (/ (- (/ (* eps eps) (+ (sin eps) eps)) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps))) (- eps (tan eps))) (- (/ (* eps eps) (+ (sin eps) eps)) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps))) (/ (* eps eps) (+ (sin eps) eps)) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- eps (sin eps)) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (* (* eps eps) eps) (- eps (tan eps)) (- (sin eps) eps) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps)) (- (* eps eps) (pow (tan eps) 2)) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))))","eps","inf"],[6.361083984375,"((+ (/ (sin eps) (- (tan eps) eps)) (/ eps (- eps (tan eps)))) (/ (sin eps) (- (tan eps) eps)) (sin eps) (- (tan eps) eps) (/ -1 (/ (- (tan eps) eps) (- (sin eps) eps))) (neg (/ -1 (/ (- (tan eps) eps) (- (sin eps) eps)))) (/ (- (tan eps) eps) (- (sin eps) eps)) (+ 1/2 (* -1/2 (cos (+ eps eps)))) (/ (- (/ (* eps eps) (+ (sin eps) eps)) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps))) (- eps (tan eps))) (- (/ (* eps eps) (+ (sin eps) eps)) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps))) (/ (* eps eps) (+ (sin eps) eps)) (+ (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) eps)) (* (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (tan eps)) (/ (- eps (sin eps)) (- (* eps eps) (pow (tan eps) 2))) (- eps (sin eps)) (/ (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (- eps (tan eps))) (- (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps)))) (/ (* (* eps eps) eps) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))) (* (* eps eps) eps) (- eps (tan eps)) (- (sin eps) eps) (/ (+ 1/2 (* -1/2 (cos (+ eps eps)))) (+ (sin eps) eps)) (- (* eps eps) (pow (tan eps) 2)) (/ (pow (sin eps) 3) (+ (* (+ (sin eps) eps) (sin eps)) (* eps eps))))","eps","0"]],"time":39.218017578125,"type":"series"},{"count":[[168,0]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(/ 3 (pow eps 2))","(/ (+ 3 (* -17/10 (pow eps 2))) (pow eps 2))","(/ (+ 3 (* (pow eps 2) (- (* 307/1400 (pow eps 2)) 17/10))) (pow eps 2))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (+ 307/1400 (* -1247/126000 (pow eps 2)))) 17/10))) (pow eps 2))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","1/2","(+ 1/2 (* -9/40 (pow eps 2)))","(+ 1/2 (* (pow eps 2) (- (* 27/2800 (pow eps 2)) 9/40)))","(+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 27/2800 (* -27/112000 (pow eps 2)))) 9/40)))","-2","(- (* -9/10 (pow eps 2)) 2)","(- (* (pow eps 2) (- (* -513/1400 (pow eps 2)) 9/10)) 2)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -297/2000 (pow eps 2)) 513/1400)) 9/10)) 2)","(pow eps 2)","(* (pow eps 2) (+ 1 (* -1/3 (pow eps 2))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* 2/45 (pow eps 2)) 1/3))))","(* (pow eps 2) (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 2/45 (* -1/315 (pow eps 2)))) 1/3))))","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* 1/2 eps)","(* eps (+ 1/2 (* 1/24 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (+ 1/24 (* 1/720 (pow eps 2))))))","(* eps (+ 1/2 (* (pow eps 2) (+ 1/24 (* (pow eps 2) (+ 1/720 (* -1/120960 (pow eps 2))))))))","-1/4","(- (* 17/240 (pow eps 2)) 1/4)","(- (* (pow eps 2) (+ 17/240 (* 53/12600 (pow eps 2)))) 1/4)","(- (* (pow eps 2) (+ 17/240 (* (pow eps 2) (+ 53/12600 (* 8129/6048000 (pow eps 2)))))) 1/4)","(/ -1/4 eps)","(/ (- (* 37/240 (pow eps 2)) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* -349/25200 (pow eps 2)))) 1/4) eps)","(/ (- (* (pow eps 2) (+ 37/240 (* (pow eps 2) (- (* -953/864000 (pow eps 2)) 349/25200)))) 1/4) eps)","(* 1/3 eps)","(* eps (+ 1/3 (* 1/18 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* 11/3240 (pow eps 2))))))","(* eps (+ 1/3 (* (pow eps 2) (+ 1/18 (* (pow eps 2) (+ 11/3240 (* -1/27216 (pow eps 2))))))))","(pow eps 3)","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* -1/6 (pow eps 3))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","(* eps (+ 1/2 (* -1/8 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 7/720 (pow eps 2)) 1/8))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 7/720 (* -5/24192 (pow eps 2)))) 1/8))))","(* -2/3 (pow eps 4))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(* eps (+ 1/3 (* -1/9 (pow eps 2))))","(* eps (+ 1/3 (* (pow eps 2) (- (* 19/1620 (pow eps 2)) 1/9))))","(* eps (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 19/1620 (* -2/8505 (pow eps 2)))) 1/9))))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps))) (pow eps 2))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (pow eps 3))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))))","(* -1 (/ (sin eps) eps))","(/ (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps)","(/ (- (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2))))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps)","(/ (- (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3))))) (+ (/ (pow (sin eps) 2) (* eps (cos eps))) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(sin eps)","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","-1","(- (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps)) 1)","(- (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps))) 1)","(- (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps)))) 1)","(- (+ 1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps)))","(- (+ 1 (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps)))) eps))))","(- (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))) (* -1 (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (/ (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow eps 2)))) (* -1 (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow eps 3)))) (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow eps 2)))))","(+ 1/2 (* -1/2 (cos (* 2 eps))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps))))) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps))))) (pow eps 2))) (* -1 (/ (+ (* -1/2 (sin eps)) (+ (* 1/2 (* (cos (* 2 eps)) (sin eps))) (pow (sin eps) 3))) (pow eps 3)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps)))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(* eps (- (+ 1 (* -1 (/ (+ 1/2 (+ (* -1 (pow (sin eps) 2)) (* -1/2 (cos (* 2 eps))))) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1/2 (sin eps)) (+ (* 1/2 (* (cos (* 2 eps)) (sin eps))) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (* -1/2 (/ (cos (* 2 eps)) (pow eps 2))) (+ (/ 1/2 (pow eps 2)) (/ (sin eps) eps))))))","(* eps (- (+ 1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (pow (sin eps) 3) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (sin eps) eps))))","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps))))","(/ (sin eps) (* eps (cos eps)))","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)","(/ (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (/ (sin eps) (cos eps)) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 3))))) eps)","(/ 1 eps)","(/ (+ 1 (* -1 (/ (sin eps) eps))) eps)","(/ (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(/ (- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))) eps)","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3))) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps))))) (* (pow eps 3) (cos eps)))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) (pow eps 2)))) (/ (sin eps) eps)))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (+ (* -1 (pow (sin eps) 3)) (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(* eps (- (+ 1 (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (* -1 (pow (sin eps) 3))) (pow eps 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (/ (sin eps) eps) (/ (pow (sin eps) 2) (pow eps 2))))))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* eps (- (/ (sin eps) eps) 1))","(/ (+ 1/2 (* -1/2 (cos (* 2 eps)))) eps)","(/ (+ 1/2 (+ (* -1 (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (* 2 eps))))) eps)) (* -1/2 (cos (* 2 eps))))) eps)","(/ (- (+ 1/2 (+ (* -1/2 (cos (* 2 eps))) (/ (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (* 2 eps))))) (pow eps 2)))) (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (* 2 eps))))) eps)) eps)","(/ (- (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 3) (+ 1/2 (* -1/2 (cos (* 2 eps))))) (pow eps 3))) (* -1/2 (cos (* 2 eps))))) (+ (* -1 (/ (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (* 2 eps))))) (pow eps 2))) (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (* 2 eps))))) eps))) eps)","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(/ (pow (sin eps) 3) (pow eps 2))","(/ (+ (* -1 (/ (pow (sin eps) 4) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)) (pow eps 2))) (pow (sin eps) 3)) (/ (pow (sin eps) 4) eps)) (pow eps 2))","(/ (- (+ (* -1 (/ (+ (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5)))) (* -1 (pow (sin eps) 6))) (pow eps 3))) (pow (sin eps) 3)) (+ (* -1 (/ (pow (sin eps) 5) (pow eps 2))) (+ (/ (pow (sin eps) 4) eps) (/ (pow (sin eps) 5) (pow eps 2))))) (pow eps 2))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps))))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ (sin eps) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (sin eps) (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (cos eps))) eps))) eps))","(* -1 (/ (+ (sin eps) (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (/ (pow (sin eps) 2) (cos eps))) eps))) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(- (/ (sin eps) eps) (+ 1 (/ (sin eps) (* eps (cos eps)))))","(- (* -1 (/ (+ (* -1 (- (sin eps) (/ (sin eps) (cos eps)))) (* -1 (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps))))) eps)) 1)","(- (* -1 (/ (+ (* -1 (- (sin eps) (/ (sin eps) (cos eps)))) (* -1 (/ (+ (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)) (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) eps))) eps)) 1)","(+ 1 (* -1 (/ (- (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps))) (* -1 (- (sin eps) (/ (sin eps) (cos eps))))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps)) (* -1 (- (sin eps) (/ (sin eps) (cos eps))))) eps)))","(+ 1 (* -1 (/ (- (/ (sin eps) (cos eps)) (sin eps)) eps)))","(+ 1 (* -1 (/ (- (+ (/ (sin eps) (cos eps)) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) eps)) (sin eps)) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) eps)) (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps)))) eps)) (/ (sin eps) (cos eps))) (sin eps)) eps)))","(+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))","(+ 1 (* -1 (/ (- (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* 1/2 (/ 1 eps))) (+ (* 1/2 (/ (cos (neg (* -2 eps))) eps)) (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))) (/ (pow (sin eps) 2) eps)))) eps)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (- (+ (* -1 (- 1/2 (+ (* 1/2 (cos (neg (* -2 eps)))) (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (pow (sin eps) 2))))) (* -1 (/ (+ (* -1/2 (sin eps)) (+ (* 1/2 (* (cos (neg (* -2 eps))) (sin eps))) (pow (sin eps) 3))) eps))) (/ (* (sin eps) (- 1/2 (+ (* 1/2 (cos (neg (* -2 eps)))) (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (pow (sin eps) 2))))) (* eps (cos eps)))) eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- 1/2 (+ (* 1/2 (cos (neg (* -2 eps)))) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ 1/2 (+ (* -1/2 (/ (sin eps) eps)) (+ (* 1/2 (/ (* (cos (neg (* -2 eps))) (sin eps)) eps)) (/ (pow (sin eps) 3) eps)))) (+ (* 1/2 (cos (neg (* -2 eps)))) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (/ (pow (sin eps) 2) eps) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) eps) (pow (sin eps) 2)) eps)) (sin eps)) eps)) 1)))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(+ 1 (* -1 (/ (+ (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)))) eps)))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) eps))) eps))","(* -1 (/ (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3)))) eps)) (* -1 (/ (pow (sin eps) 2) (cos eps)))) eps))) eps))","(* -1 (/ (- (/ (sin eps) eps) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) eps)) 1) eps))","(* -1 (/ (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps)) 1) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (* -1 (/ (- (* -1 (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)))) (/ (* (sin eps) (- (* -1 (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps)))) (cos eps))) eps))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2)) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps))) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) eps)) (/ (pow (sin eps) 2) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) eps)) (/ (* (sin eps) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (+ (* -1 (pow (sin eps) 2)) (pow (sin eps) 2))) eps)) (sin eps)) eps)) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))","(/ (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))) eps)","(* -1 (/ (+ (* -1 (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) (/ (* (sin eps) (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) eps)) eps))","(* -1 (/ (+ (* -1 (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) (* -1 (/ (- (/ (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) eps) (* (sin eps) (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))))) eps))) eps))","(* -1 (/ (+ (* -1 (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) (* -1 (/ (- (* -1 (/ (- (/ (* (pow (sin eps) 3) (+ 1/2 (* -1/2 (cos (neg (* -2 eps)))))) eps) (* (pow (sin eps) 2) (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))))) eps)) (* (sin eps) (+ 1/2 (* -1/2 (cos (neg (* -2 eps))))))) eps))) eps))","(/ (+ (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 5) eps)) (/ (pow (sin eps) 5) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (+ (/ (* (sin eps) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps) (/ (pow (sin eps) 6) eps)) (+ (* -1 (pow (sin eps) 5)) (pow (sin eps) 5))) eps)) (* -1 (pow (sin eps) 4))) eps)) (pow (sin eps) 3)) (pow eps 2))"]],"memory":[[1257168,11225104]],"method":["egg-herbie"],"outputs":[[]],"time":126.862060546875,"type":"simplify"},{"count":[[24,360]],"inputs":[["(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))","(sin.f64 eps)","(-.f64 (tan.f64 eps) eps)","(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps))))","(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 eps (sin.f64 eps))","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) eps)","(-.f64 eps (tan.f64 eps))","(-.f64 (sin.f64 eps) eps)","(/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))"]],"memory":[[-3615360,20214448]],"outputs":[["#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 5/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)"]],"time":521.860107421875,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1405808,1405808]],"time":1.869873046875,"type":"eval"},{"alts":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","next",62.543643313598054,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",63.0353062736438,"binary64"],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","done",63.20931037012657,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","done",63.03530538451672,"binary64"],["#s(literal -1/2 binary64)","next",0.5195874211330497,"binary64"]],"compiler":[[13,9],[9,6],[32,12],[12,9],[1,2]],"count":[[25,5]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[15,1],"picked":[5,2]}],"memory":[[1455040,1455040]],"min-error":[[0.37395227516175805,"binary64"]],"time":1.875,"type":"prune"},{"inputs":[["#s(literal -1/2 binary64)","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 eps))","(tan.f64 eps)"]],"locations":[["(sin.f64 eps)","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","cost-diff",4]],"memory":[[-3192880,10149216]],"method":["egg-herbie"],"outputs":[["#s(literal -1/2 binary64)","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps))))","(-.f64 eps (tan.f64 eps))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","(tan.f64 eps)","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 eps))","(tan.f64 eps)"]],"time":158.580078125,"type":"simplify"},{"compiler":[[44,12]],"locations":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","accuracy",0.18359375],["(-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps))))","accuracy",20.566948648408474],["(-.f64 eps (sin.f64 eps))","accuracy",20.607540527265087],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","accuracy",40.80568966713487]],"memory":[[-1227616,22528576]],"mixsample":[[7.337890625,"ival-div",0],[7.534423828125,"adjust",800],[4.002197265625,"ival-div",400],[5.108154296875,"ival-div",1600],[0.17529296875,"ival-assert",0],[8.957275390625,"ival-sub",0],[1.98779296875,"ival-tan",0],[6.363525390625,"ival-tan",400],[71.59423828125,"ival-sin",1600],[3.9267578125,"adjust",2000],[144.833251953125,"ival-tan",1600],[0.01416015625,"ival-sub",800],[7.560791015625,"ival-sin",400],[10.5361328125,"ival-tan",3600],[3.19921875,"ival-sin",0],[0.953857421875,"adjust",2800],[0.287109375,"ival-true",0],[0.97607421875,"ival-div",3600],[20.6669921875,"ival-sin",3600],[0.484619140625,"exact",0]],"outcomes":[[24.0166015625,1,"valid",75],[250.462158203125,2,"valid",137],[54.18310546875,3,"valid",40],[0.696044921875,0,"valid",4]],"time":347.041015625,"type":"localize"},{"count":[[5,32]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps))))"]],"memory":[[990096,990096]],"outputs":[["eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(/ (sin eps) (cos eps))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"series":[[0.5048828125,"((/ 1 (/ 1 (tan eps))) (/ (- eps (sin eps)) (- eps (/ 1 (/ 1 (tan eps))))) (- eps (sin eps)) (sin eps) (- eps (/ 1 (/ 1 (tan eps)))))","eps","-inf"],[0.699951171875,"((/ 1 (/ 1 (tan eps))) (/ (- eps (sin eps)) (- eps (/ 1 (/ 1 (tan eps))))) (- eps (sin eps)) (sin eps) (- eps (/ 1 (/ 1 (tan eps)))))","eps","inf"],[0.52392578125,"((/ 1 (/ 1 (tan eps))) (/ (- eps (sin eps)) (- eps (/ 1 (/ 1 (tan eps))))) (- eps (sin eps)) (sin eps) (- eps (/ 1 (/ 1 (tan eps)))))","eps","0"]],"time":2.284912109375,"type":"series"},{"count":[[32,0]],"inputs":[["eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(/ (sin eps) (cos eps))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"memory":[[154112,9626272]],"method":["egg-herbie"],"outputs":[[]],"time":116.968994140625,"type":"simplify"},{"count":[[5,74]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps))))"]],"memory":[[1908576,17914336]],"outputs":[["(neg.f64 (tan.f64 eps))","(+.f64 #s(literal 8 binary64) (tan.f64 eps))","(-.f64 #s(literal 8 binary64) (tan.f64 eps))","(-.f64 (/.f64 #s(literal 8 binary64) (tan.f64 eps)) (tan.f64 eps))","(-.f64 (/.f64 #s(literal 8 binary64) (cos.f64 eps)) (tan.f64 eps))","(*.f64 (tan.f64 eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 eps))","(*.f64 (pow.f64 (tan.f64 eps) #s(literal 8 binary64)) (tan.f64 eps))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 eps)) (sin.f64 eps))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 eps)) (/.f64 #s(literal 1 binary64) (cos.f64 eps)))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 eps)) (cos.f64 eps))","(*.f64 (pow.f64 (tan.f64 eps) (/.f64 #s(literal 1 binary64) #s(literal 8 binary64))) (pow.f64 (tan.f64 eps) (/.f64 #s(literal 1 binary64) #s(literal 8 binary64))))","(*.f64 (cos.f64 eps) (/.f64 #s(literal 1 binary64) (sin.f64 eps)))","(*.f64 (sin.f64 eps) (/.f64 #s(literal 1 binary64) (cos.f64 eps)))","(*.f64 (tan.f64 eps) (pow.f64 (tan.f64 eps) #s(literal 8 binary64)))","(neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 eps (+.f64 (sin.f64 eps) eps)) (*.f64 (tan.f64 eps) (+.f64 (sin.f64 eps) eps)))","(+.f64 (*.f64 (+.f64 (sin.f64 eps) eps) eps) (*.f64 (+.f64 (sin.f64 eps) eps) (tan.f64 eps)))","(+.f64 (*.f64 (tan.f64 eps) (+.f64 (sin.f64 eps) eps)) (*.f64 eps (+.f64 (sin.f64 eps) eps)))","(+.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (tan.f64 eps)) (*.f64 (+.f64 (sin.f64 eps) eps) eps))","(+.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (sin.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) eps))","(+.f64 (*.f64 (+.f64 (tan.f64 eps) eps) eps) (*.f64 (+.f64 (tan.f64 eps) eps) (sin.f64 eps)))","(+.f64 (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 eps eps)))","(+.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) (tan.f64 eps)) (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) eps))","(+.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) eps) (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) (tan.f64 eps)))","(+.f64 (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 eps eps)) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(+.f64 (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))) (*.f64 (*.f64 (tan.f64 eps) eps) (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))))","(+.f64 (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))) (*.f64 (*.f64 eps eps) (/.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))))","(+.f64 (*.f64 (tan.f64 eps) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64)))) (*.f64 eps (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64)))))","(neg.f64 (+.f64 (sin.f64 eps) eps))","(+.f64 (-.f64 eps #s(literal 8 binary64)) (sin.f64 eps))","(+.f64 (sin.f64 eps) eps)","(+.f64 eps (sin.f64 eps))","(+.f64 #s(literal 8 binary64) (+.f64 (sin.f64 eps) eps))","(+.f64 (-.f64 #s(literal 8 binary64) (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps))) (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 8 binary64)))) (+.f64 (sin.f64 eps) eps)))","(+.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (neg.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 8 binary64)))) (+.f64 (sin.f64 eps) eps))))","(+.f64 (-.f64 #s(literal 8 binary64) (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (/.f64 (/.f64 #s(literal 1 binary64) (sin.f64 eps)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(+.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (/.f64 #s(literal 1 binary64) (sin.f64 eps)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(-.f64 eps (sin.f64 eps))","(-.f64 (+.f64 eps #s(literal 8 binary64)) (sin.f64 eps))","(-.f64 (sin.f64 eps) eps)","(-.f64 #s(literal 8 binary64) (+.f64 (sin.f64 eps) eps))","(-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 8 binary64)))) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (/.f64 #s(literal 1 binary64) (sin.f64 eps)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(neg.f64 (sin.f64 eps))","(+.f64 #s(literal 8 binary64) (sin.f64 eps))","(-.f64 #s(literal 8 binary64) (sin.f64 eps))","(*.f64 (sin.f64 eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 eps))","(/.f64 (sin.f64 eps) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 8 binary64)))) (sin.f64 eps))","(/.f64 (/.f64 #s(literal 1 binary64) (sin.f64 eps)) (+.f64 #s(literal 8 binary64) (+.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 #s(literal 8 binary64)))) (*.f64 #s(literal 8 binary64) (sin.f64 eps)))))","(sin.f64 eps)","(fma.f64 #s(literal 8 binary64) #s(literal 1 binary64) (sin.f64 eps))","(fma.f64 #s(literal 1 binary64) #s(literal 8 binary64) (sin.f64 eps))","(fma.f64 #s(literal 8 binary64) #s(literal 8 binary64) (sin.f64 eps))","(fma.f64 eps #s(literal 8 binary64) (sin.f64 eps))","(fma.f64 #s(literal 8 binary64) eps (sin.f64 eps))","(neg.f64 (+.f64 (tan.f64 eps) eps))","(+.f64 (-.f64 eps #s(literal 8 binary64)) (tan.f64 eps))","(+.f64 (tan.f64 eps) eps)","(+.f64 eps (tan.f64 eps))","(+.f64 #s(literal 8 binary64) (+.f64 (tan.f64 eps) eps))","(+.f64 (*.f64 eps (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) (*.f64 (tan.f64 eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))))","(+.f64 (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64)) (tan.f64 eps)) (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64)) eps))","(+.f64 (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64)) eps) (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64)) (tan.f64 eps)))","(+.f64 (*.f64 (tan.f64 eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) (*.f64 eps (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 8 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 eps eps)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 eps eps)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(+.f64 (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))) (*.f64 (*.f64 eps eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))))","(+.f64 (*.f64 (*.f64 eps eps) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) eps (tan.f64 eps)))))","(+.f64 (-.f64 #s(literal 8 binary64) (*.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) eps))) (*.f64 (pow.f64 (tan.f64 eps) #s(literal 8 binary64)) (+.f64 (tan.f64 eps) eps)))"]],"time":390.820068359375,"type":"rewrite"},{"compiler":[[1485,235]],"memory":[[-753696,7271360]],"time":10.972900390625,"type":"eval"},{"alts":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","done",62.543643313598054,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",63.0353062736438,"binary64"],["(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","done",63.20931037012657,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","done",63.03530538451672,"binary64"],["#s(literal -1/2 binary64)","done",0.5195874211330497,"binary64"]],"compiler":[[248,66],[13,9],[9,6],[32,12],[12,9],[1,2]],"count":[[79,5]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[74,0],"picked":[2,2]}],"memory":[[-4565120,5220608]],"min-error":[[0.37395227516175805,"binary64"]],"time":6.4951171875,"type":"prune"},{"accuracy":[0.5195874211330497],"baseline":[0.5195874211330497],"branch":[["eps",0.5195874211330497,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.5195874211330497,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[11,1]],"inputs":[["#s(literal -1/2 binary64)","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 eps)))))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 eps eps)))) (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))) (-.f64 eps (tan.f64 eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) eps (pow.f64 (neg.f64 (tan.f64 eps)) #s(literal 3 binary64)))) (*.f64 eps eps)))"]],"link":["."],"memory":[[5129632,5129632]],"name":["sintan (problem 3.4.5)"],"oracle":[63.683176221790546],"outputs":[["#s(literal -1/2 binary64)"]],"repr":["binary64"],"time":7.640869140625,"times":[[3.2490234375,"eps"],[3.33203125,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"inputs":[["#s(literal -1/2 binary64)"]],"memory":[[-2077040,14444048]],"method":["egg-herbie"],"outputs":[["#s(literal -1/2 binary64)"]],"time":145.407958984375,"type":"simplify"},{"compiler":[[1,2]],"memory":[[253344,253344]],"stop":[["done",1]],"time":0.635009765625,"type":"soundness"},{"compiler":[[1,2],[1,2],[7,6],[7,6],[9,6],[9,6],[1,2],[1,2]],"memory":[[-4401232,12087680]],"remove-preprocessing":[["(abs eps)"],[]],"time":21.675048828125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01513671875,"type":"end"}]