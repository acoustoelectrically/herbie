[{"memory":[[14512,14512]],"time":0.031982421875,"type":"start"},{"compiler":[[14,9]],"memory":[[482576,482576]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":2.510986328125,"type":"analyze"},{"bogosity":[{"exit":0.24810316384196868,"infinite":0.004550681655208523,"invalid":0.0,"precondition":0.00048828125,"valid":0.7468578732528228}],"memory":[[23796976,317366672]],"mixsample":[[139.948974609375,"ival-div",0],[11.61572265625,"ival-true",0],[126.322998046875,"ival-mult",0],[105.990966796875,"ival-sqrt",0],[9.70458984375,"exact",0],[246.33203125,"ival-expm1",0],[5.854736328125,"ival-assert",0]],"outcomes":[[264.032958984375,0,"exit",2726],[708.593505859375,0,"valid",8256]],"time":1452.298095703125,"type":"sample"},{"compiler":[[12,10],[47,12],[47,12]],"confusion":[[163,0,1,92]],"explanations":[["exp.f64","(exp.f64 (*.f64 #s(literal 2 binary64) x))","sensitivity",1,0,[],[[1,1,1]]],["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",163,1,[],[[1,2]]],["-.f64","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cancellation",163,0,[],[[1,1]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))",163,0,false,0,false],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",163,0,false,0,false],["(exp.f64 (*.f64 #s(literal 2 binary64) x))",0,1,[-226.77222874749822],0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,163],[1,1],[0,92]],"maybe-confusion":[[163,0,0,1,1,91]],"memory":[[-5329808,64254016]],"mixsample":[[3.567626953125,"ival-div",0],[0.480224609375,"ival-true",0],[8.996337890625,"ival-exp",0],[3.582275390625,"ival-mult",0],[3.57958984375,"ival-sqrt",0],[6.772705078125,"ival-expm1",0],[0.52783203125,"exact",0],[0.234619140625,"ival-assert",0]],"outcomes":[[44.33642578125,0,"valid",512]],"time":122.85595703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[12,10]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[-18568768,21018960]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))"]],"symmetry":[[]],"time":308.177978515625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.0810546875,"type":"eval"},{"alts":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","next",39.09037978534923,"binary64"]],"compiler":[[12,10]],"memory":[[302896,302896]],"time":0.6259765625,"type":"prune"},{"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"locations":[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[1902944,10032816]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(expm1.f64 (+.f64 x x))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(exp.f64 (+.f64 x x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)"]],"time":166.782958984375,"type":"simplify"},{"compiler":[[47,12]],"locations":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","accuracy",0.0078125],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.01171875],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","accuracy",37.063960220734465],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",37.159166058469275]],"memory":[[1853520,11124640]],"mixsample":[[1.929931640625,"ival-div",0],[0.192626953125,"ival-true",0],[4.566162109375,"ival-exp",0],[2.118896484375,"ival-mult",0],[1.765380859375,"ival-sqrt",0],[3.61865234375,"ival-expm1",0],[0.28564453125,"exact",0],[0.119140625,"ival-assert",0]],"outcomes":[[22.64453125,0,"valid",256]],"time":31.81201171875,"type":"localize"},{"count":[[4,20]],"inputs":[["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[1230880,1230880]],"outputs":[["(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))"]],"series":[[1.01708984375,"((- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","x","-inf"],[1.1162109375,"((- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","x","inf"],[1.2119140625,"((- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","x","0"]],"time":3.715087890625,"type":"series"},{"count":[[20,0]],"inputs":[["(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))"]],"memory":[[-6344032,9874800]],"method":["egg-herbie"],"outputs":[[]],"time":121.848876953125,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[8253968,16541568]],"outputs":[["(neg.f64 (neg.f64 (expm1.f64 (+.f64 x x))))","(+.f64 (exp.f64 (+.f64 x x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (+.f64 x x)))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)))","(+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (neg.f64 (neg.f64 (exp.f64 (+.f64 x x)))) #s(literal -1 binary64))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 6 binary64))) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))))))","(-.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (+.f64 x x))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 6 binary64))) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 x #s(literal 4 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(neg.f64 (neg.f64 (expm1.f64 x)))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal -1 binary64))","(+.f64 (-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (expm1.f64 (+.f64 x x))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(-.f64 (/.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (+.f64 x x)))) (sqrt.f64 (expm1.f64 x))))","(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))) (sqrt.f64 (expm1.f64 (+.f64 x x))))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (sqrt.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (sqrt.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 (neg.f64 (sqrt.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(*.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (sqrt.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (sqrt.f64 (expm1.f64 (+.f64 x x)))) (sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(neg.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(+.f64 (-.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64)) (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))))","(+.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 x) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (exp.f64 (+.f64 x x)) (expm1.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))"]],"time":424.8720703125,"type":"rewrite"},{"compiler":[[1085,233]],"memory":[[-4164384,5096352]],"time":7.10498046875,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","next",42.2890625,"binary64"],["(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","next",0.6171875,"binary64"],["(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","next",22.14453125,"binary64"],["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","next",0.015625,"binary64"],["(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","next",42.16244125976844,"binary64"]],"compiler":[[17,14],[17,9],[13,11],[5,5],[11,9],[17,14],[17,9],[13,11],[5,5],[11,9]],"count":[[61,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[60,5],"picked":[1,0]}],"memory":[[-4075056,4256080]],"min-error":[[0.0,"binary64"]],"time":4.02392578125,"type":"prune"},{"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(sqrt.f64 (expm1.f64 (+.f64 x x)))","(expm1.f64 (+.f64 x x))","(+.f64 x x)","x","(neg.f64 (sqrt.f64 (expm1.f64 x)))","(sqrt.f64 (expm1.f64 x))","(expm1.f64 x)","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))","(neg.f64 (expm1.f64 (+.f64 x x)))","(expm1.f64 (+.f64 x x))","(+.f64 x x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x))))","#s(literal 1 binary64)","(sqrt.f64 (neg.f64 (expm1.f64 x)))","(neg.f64 (expm1.f64 x))","(expm1.f64 x)","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))))","(expm1.f64 (*.f64 x #s(literal 4 binary64)))","(*.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","(*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))))","(sqrt.f64 (expm1.f64 x))","(expm1.f64 x)","(sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))","(+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))","(exp.f64 (+.f64 x x))","(+.f64 x x)","#s(literal 1 binary64)","(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)","(/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))","#s(literal 1/2 binary64)","#s(literal 2 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(+.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",0],["(pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))","cost-diff",0],["(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","cost-diff",9],["(*.f64 x #s(literal 4 binary64))","cost-diff",0],["(expm1.f64 (*.f64 x #s(literal 4 binary64)))","cost-diff",0],["(sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))))","cost-diff",0],["(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","cost-diff",0],["(expm1.f64 (+.f64 x x))","cost-diff",0],["(neg.f64 (expm1.f64 (+.f64 x x)))","cost-diff",0],["(sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))","cost-diff",0],["(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","cost-diff",2],["(expm1.f64 (+.f64 x x))","cost-diff",0],["(sqrt.f64 (expm1.f64 (+.f64 x x)))","cost-diff",0],["(/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","cost-diff",0],["(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","cost-diff",2],["(exp.f64 x)","cost-diff",0],["(+.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",0]],"memory":[[3960512,12131088]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (sqrt.f64 (expm1.f64 x)))","(/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(sqrt.f64 (expm1.f64 (+.f64 x x)))","(expm1.f64 (+.f64 x x))","(+.f64 x x)","x","(neg.f64 (sqrt.f64 (expm1.f64 x)))","(sqrt.f64 (expm1.f64 x))","(expm1.f64 x)","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (sqrt.f64 (neg.f64 (expm1.f64 x))))","(sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))","(neg.f64 (expm1.f64 (+.f64 x x)))","(expm1.f64 (+.f64 x x))","(+.f64 x x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x))))","#s(literal 1 binary64)","(sqrt.f64 (neg.f64 (expm1.f64 x)))","(neg.f64 (expm1.f64 x))","(expm1.f64 x)","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))))","(expm1.f64 (*.f64 x #s(literal 4 binary64)))","(*.f64 x #s(literal 4 binary64))","x","#s(literal 4 binary64)","(*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))))","(sqrt.f64 (expm1.f64 x))","(expm1.f64 x)","(sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))","(+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))","(exp.f64 (+.f64 x x))","(+.f64 x x)","#s(literal 1 binary64)","(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) #s(literal 2 binary64)))","(pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)","(/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))","#s(literal 1/2 binary64)","#s(literal 2 binary64)"]],"time":241.8291015625,"type":"simplify"},{"compiler":[[262,35]],"locations":[["(/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))","accuracy",0.0],["(+.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",0.0],["(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(sqrt.f64 (expm1.f64 x))","accuracy",0.0],["(expm1.f64 (*.f64 x #s(literal 4 binary64)))","accuracy",0.0],["(expm1.f64 x)","accuracy",0.0],["(exp.f64 (+.f64 x x))","accuracy",0.0],["(neg.f64 (expm1.f64 (+.f64 x x)))","accuracy",0.0],["(neg.f64 (expm1.f64 x))","accuracy",0.0],["(expm1.f64 (+.f64 x x))","accuracy",0.0],["(expm1.f64 x)","accuracy",0.0],["(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","accuracy",0.0],["(neg.f64 (sqrt.f64 (expm1.f64 x)))","accuracy",0.0],["(expm1.f64 (+.f64 x x))","accuracy",0.0],["(expm1.f64 x)","accuracy",0.0],["(+.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0]],"memory":[[1444480,33705488]],"mixsample":[[4.9326171875,"ival-div",0],[4.77734375,"ival-add",0],[5.72216796875,"ival-exp",0],[6.76953125,"ival-mult",0],[6.366455078125,"ival-expm1",0],[0.17041015625,"ival-assert",0],[0.30419921875,"ival-true",0],[12.91162109375,"ival-sqrt",0],[0.5751953125,"exact",0],[10.7802734375,"ival-pow",0],[4.369384765625,"ival-neg",0]],"outcomes":[[82.260986328125,0,"invalid",256]],"time":108.802001953125,"type":"localize"},{"count":[[22,94]],"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(sqrt.f64 (expm1.f64 (+.f64 x x)))","(expm1.f64 (+.f64 x x))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))","(neg.f64 (expm1.f64 (+.f64 x x)))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))))","(expm1.f64 (*.f64 x #s(literal 4 binary64)))","(*.f64 x #s(literal 4 binary64))","(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))","(expm1.f64 x)","(neg.f64 (sqrt.f64 (expm1.f64 x)))","(neg.f64 (expm1.f64 x))","(exp.f64 (+.f64 x x))","(sqrt.f64 (expm1.f64 x))","(/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))"]],"memory":[[-929504,22587264]],"outputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (* 1/2 (/ x (sqrt 2))) (* -1 (sqrt 2)))","(- (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))) (* -1 (sqrt 2)))","(- (* x (+ (* x (- (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* -1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))) (* -1 (sqrt 2)))","(* -1 (sqrt 2))","(+ (* -1 (sqrt 2)) (* -1/2 (/ x (sqrt 2))))","(+ (* -1 (sqrt 2)) (* x (- (* -1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (* -1 (sqrt 2)) (* x (- (* x (+ (* -1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* -1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(* (sqrt x) (sqrt 2))","(+ (* (sqrt x) (sqrt 2)) (* (sqrt (pow x 3)) (/ 1 (sqrt 2))))","(+ (* (sqrt x) (sqrt 2)) (* (pow x 2) (+ (* 2/3 (* (sqrt x) (/ 1 (sqrt 2)))) (* (sqrt (/ 1 x)) (/ 1 (sqrt 2))))))","(+ (* (sqrt x) (sqrt 2)) (* (pow x 2) (+ (* x (+ (* 1/2 (* (sqrt x) (/ (- 2/3 (/ 1 (* x (pow (sqrt 2) 2)))) (sqrt 2)))) (* 2/3 (* (sqrt (/ 1 x)) (/ 1 (sqrt 2)))))) (* (sqrt (/ 1 x)) (/ 1 (sqrt 2))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(* (sqrt x) (sqrt -2))","(+ (* -1 (* (sqrt (pow x 3)) (/ 1 (sqrt -2)))) (* (sqrt x) (sqrt -2)))","(+ (* (sqrt x) (sqrt -2)) (* (pow x 2) (+ (* -1 (* (sqrt (/ 1 x)) (/ 1 (sqrt -2)))) (* -2/3 (* (sqrt x) (/ 1 (sqrt -2)))))))","(+ (* (sqrt x) (sqrt -2)) (* (pow x 2) (+ (* -1 (* (sqrt (/ 1 x)) (/ 1 (sqrt -2)))) (* x (+ (* -2/3 (* (sqrt (/ 1 x)) (/ 1 (sqrt -2)))) (* -1/2 (* (sqrt x) (/ (+ 2/3 (/ 1 (* x (pow (sqrt -2) 2)))) (sqrt -2)))))))))","(* -2 x)","(* x (- (* -2 x) 2))","(* x (- (* x (- (* -4/3 x) 2)) 2))","(* x (- (* x (- (* x (- (* -2/3 x) 4/3)) 2)) 2))","(* 2 (sqrt x))","(+ (* 2 (sqrt x)) (* 2 (sqrt (pow x 3))))","(+ (* 2 (sqrt x)) (* (pow x 2) (+ (* 2 (sqrt (/ 1 x))) (* 8/3 (sqrt x)))))","(+ (* 2 (sqrt x)) (* (pow x 2) (+ (* 2 (sqrt (/ 1 x))) (* x (+ (* 1/4 (* (sqrt x) (- 32/3 (* 4 (/ 1 x))))) (* 8/3 (sqrt (/ 1 x))))))))","(* 4 x)","(* x (+ 4 (* 8 x)))","(* x (+ 4 (* x (+ 8 (* 32/3 x)))))","(* x (+ 4 (* x (+ 8 (* x (+ 32/3 (* 32/3 x)))))))","(pow 2 1/4)","(+ (* 1/8 (* (pow 2 1/4) x)) (pow 2 1/4))","(+ (* x (+ (* 5/128 (* (pow 2 1/4) x)) (* 1/8 (pow 2 1/4)))) (pow 2 1/4))","(+ (* x (+ (* 1/8 (pow 2 1/4)) (* x (+ (* 13/3072 (* (pow 2 1/4) x)) (* 5/128 (pow 2 1/4)))))) (pow 2 1/4))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* -1 (sqrt x))","(- (* -1/4 (sqrt (pow x 3))) (sqrt x))","(- (* (pow x 2) (- (* -1/12 (sqrt x)) (* 1/4 (sqrt (/ 1 x))))) (sqrt x))","(- (* (pow x 2) (- (* x (- (* -1/2 (* (sqrt x) (- 1/24 (* 1/16 (/ 1 x))))) (* 1/12 (sqrt (/ 1 x))))) (* 1/4 (sqrt (/ 1 x))))) (sqrt x))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/6 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/24 x) 1/6)) 1/2)) 1))","(+ 1 (* 2 x))","(+ 1 (* x (+ 2 (* 2 x))))","(+ 1 (* x (+ 2 (* x (+ 2 (* 4/3 x))))))","(sqrt x)","(+ (sqrt x) (* 1/4 (sqrt (pow x 3))))","(+ (sqrt x) (* (pow x 2) (+ (* 1/12 (sqrt x)) (* 1/4 (sqrt (/ 1 x))))))","(+ (sqrt x) (* (pow x 2) (+ (* 1/4 (sqrt (/ 1 x))) (* x (+ (* 1/12 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (- 1/24 (* 1/16 (/ 1 x))))))))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(* -1 (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","(sqrt (- (exp (* 2 x)) 1))","(- (exp (* 2 x)) 1)","(sqrt (/ (- 1 (exp (* 2 x))) (- 1 (exp x))))","(sqrt (- 1 (exp (* 2 x))))","(- 1 (exp (* 2 x)))","(sqrt (/ (- (exp (* 4 x)) 1) (* (+ 1 (exp (* 2 x))) (- (exp x) 1))))","(sqrt (- (exp (* 4 x)) 1))","(- (exp (* 4 x)) 1)","(pow (* 1 (+ 1 (exp x))) 1/4)","(- (exp x) 1)","(* -1 (sqrt (- (exp x) 1)))","(- 1 (exp x))","(exp (* 2 x))","(sqrt (- (exp x) 1))","(sqrt (/ (- (exp (neg (* -2 x))) 1) (- (exp x) 1)))","(* -1 (sqrt (/ (- (exp (neg (* -2 x))) 1) (- (exp x) 1))))","(sqrt (- (exp (neg (* -2 x))) 1))","(- (exp (neg (* -2 x))) 1)","(sqrt (/ (- 1 (exp (neg (* -2 x)))) (- 1 (exp x))))","(sqrt (- 1 (exp (neg (* -2 x)))))","(- 1 (exp (neg (* -2 x))))","(sqrt (/ (- (exp (* 4 x)) 1) (* (+ 1 (exp (neg (* -2 x)))) (- (exp x) 1))))","(exp (neg (* -2 x)))"]],"series":[[34.35400390625,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (neg (/ (sqrt (- (exp (+ x x)) 1)) (neg (sqrt (- (exp x) 1))))) (/ (sqrt (- (exp (+ x x)) 1)) (neg (sqrt (- (exp x) 1)))) (sqrt (- (exp (+ x x)) 1)) (- (exp (+ x x)) 1) (* (sqrt (neg (- (exp (+ x x)) 1))) (/ 1 (sqrt (neg (- (exp x) 1))))) (sqrt (neg (- (exp (+ x x)) 1))) (neg (- (exp (+ x x)) 1)) (/ (sqrt (- (exp (* x 4)) 1)) (* (sqrt (- (exp x) 1)) (sqrt (+ (exp (+ x x)) 1)))) (sqrt (- (exp (* x 4)) 1)) (- (exp (* x 4)) 1) (* x 4) (* (pow (+ (exp x) 1) (/ 1/2 2)) (pow (+ (exp x) 1) (/ 1/2 2))) (pow (+ (exp x) 1) (/ 1/2 2)) (- (exp x) 1) (neg (sqrt (- (exp x) 1))) (neg (- (exp x) 1)) (exp (+ x x)) (sqrt (- (exp x) 1)) (/ 1/2 2))","x","-inf"],[41.929931640625,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (neg (/ (sqrt (- (exp (+ x x)) 1)) (neg (sqrt (- (exp x) 1))))) (/ (sqrt (- (exp (+ x x)) 1)) (neg (sqrt (- (exp x) 1)))) (sqrt (- (exp (+ x x)) 1)) (- (exp (+ x x)) 1) (* (sqrt (neg (- (exp (+ x x)) 1))) (/ 1 (sqrt (neg (- (exp x) 1))))) (sqrt (neg (- (exp (+ x x)) 1))) (neg (- (exp (+ x x)) 1)) (/ (sqrt (- (exp (* x 4)) 1)) (* (sqrt (- (exp x) 1)) (sqrt (+ (exp (+ x x)) 1)))) (sqrt (- (exp (* x 4)) 1)) (- (exp (* x 4)) 1) (* x 4) (* (pow (+ (exp x) 1) (/ 1/2 2)) (pow (+ (exp x) 1) (/ 1/2 2))) (pow (+ (exp x) 1) (/ 1/2 2)) (- (exp x) 1) (neg (sqrt (- (exp x) 1))) (neg (- (exp x) 1)) (exp (+ x x)) (sqrt (- (exp x) 1)) (/ 1/2 2))","x","inf"],[5.02001953125,"((sqrt (+ (exp x) 1)) (+ (exp x) 1) (exp x) (neg (/ (sqrt (- (exp (+ x x)) 1)) (neg (sqrt (- (exp x) 1))))) (/ (sqrt (- (exp (+ x x)) 1)) (neg (sqrt (- (exp x) 1)))) (sqrt (- (exp (+ x x)) 1)) (- (exp (+ x x)) 1) (* (sqrt (neg (- (exp (+ x x)) 1))) (/ 1 (sqrt (neg (- (exp x) 1))))) (sqrt (neg (- (exp (+ x x)) 1))) (neg (- (exp (+ x x)) 1)) (/ (sqrt (- (exp (* x 4)) 1)) (* (sqrt (- (exp x) 1)) (sqrt (+ (exp (+ x x)) 1)))) (sqrt (- (exp (* x 4)) 1)) (- (exp (* x 4)) 1) (* x 4) (* (pow (+ (exp x) 1) (/ 1/2 2)) (pow (+ (exp x) 1) (/ 1/2 2))) (pow (+ (exp x) 1) (/ 1/2 2)) (- (exp x) 1) (neg (sqrt (- (exp x) 1))) (neg (- (exp x) 1)) (exp (+ x x)) (sqrt (- (exp x) 1)) (/ 1/2 2))","x","0"]],"time":82.765869140625,"type":"series"},{"count":[[94,0]],"inputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (* 1/2 (/ x (sqrt 2))) (* -1 (sqrt 2)))","(- (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))) (* -1 (sqrt 2)))","(- (* x (+ (* x (- (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* -1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))) (* -1 (sqrt 2)))","(* -1 (sqrt 2))","(+ (* -1 (sqrt 2)) (* -1/2 (/ x (sqrt 2))))","(+ (* -1 (sqrt 2)) (* x (- (* -1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (* -1 (sqrt 2)) (* x (- (* x (+ (* -1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* -1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(* (sqrt x) (sqrt 2))","(+ (* (sqrt x) (sqrt 2)) (* (sqrt (pow x 3)) (/ 1 (sqrt 2))))","(+ (* (sqrt x) (sqrt 2)) (* (pow x 2) (+ (* 2/3 (* (sqrt x) (/ 1 (sqrt 2)))) (* (sqrt (/ 1 x)) (/ 1 (sqrt 2))))))","(+ (* (sqrt x) (sqrt 2)) (* (pow x 2) (+ (* x (+ (* 1/2 (* (sqrt x) (/ (- 2/3 (/ 1 (* x (pow (sqrt 2) 2)))) (sqrt 2)))) (* 2/3 (* (sqrt (/ 1 x)) (/ 1 (sqrt 2)))))) (* (sqrt (/ 1 x)) (/ 1 (sqrt 2))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(* (sqrt x) (sqrt -2))","(+ (* -1 (* (sqrt (pow x 3)) (/ 1 (sqrt -2)))) (* (sqrt x) (sqrt -2)))","(+ (* (sqrt x) (sqrt -2)) (* (pow x 2) (+ (* -1 (* (sqrt (/ 1 x)) (/ 1 (sqrt -2)))) (* -2/3 (* (sqrt x) (/ 1 (sqrt -2)))))))","(+ (* (sqrt x) (sqrt -2)) (* (pow x 2) (+ (* -1 (* (sqrt (/ 1 x)) (/ 1 (sqrt -2)))) (* x (+ (* -2/3 (* (sqrt (/ 1 x)) (/ 1 (sqrt -2)))) (* -1/2 (* (sqrt x) (/ (+ 2/3 (/ 1 (* x (pow (sqrt -2) 2)))) (sqrt -2)))))))))","(* -2 x)","(* x (- (* -2 x) 2))","(* x (- (* x (- (* -4/3 x) 2)) 2))","(* x (- (* x (- (* x (- (* -2/3 x) 4/3)) 2)) 2))","(* 2 (sqrt x))","(+ (* 2 (sqrt x)) (* 2 (sqrt (pow x 3))))","(+ (* 2 (sqrt x)) (* (pow x 2) (+ (* 2 (sqrt (/ 1 x))) (* 8/3 (sqrt x)))))","(+ (* 2 (sqrt x)) (* (pow x 2) (+ (* 2 (sqrt (/ 1 x))) (* x (+ (* 1/4 (* (sqrt x) (- 32/3 (* 4 (/ 1 x))))) (* 8/3 (sqrt (/ 1 x))))))))","(* 4 x)","(* x (+ 4 (* 8 x)))","(* x (+ 4 (* x (+ 8 (* 32/3 x)))))","(* x (+ 4 (* x (+ 8 (* x (+ 32/3 (* 32/3 x)))))))","(pow 2 1/4)","(+ (* 1/8 (* (pow 2 1/4) x)) (pow 2 1/4))","(+ (* x (+ (* 5/128 (* (pow 2 1/4) x)) (* 1/8 (pow 2 1/4)))) (pow 2 1/4))","(+ (* x (+ (* 1/8 (pow 2 1/4)) (* x (+ (* 13/3072 (* (pow 2 1/4) x)) (* 5/128 (pow 2 1/4)))))) (pow 2 1/4))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* -1 (sqrt x))","(- (* -1/4 (sqrt (pow x 3))) (sqrt x))","(- (* (pow x 2) (- (* -1/12 (sqrt x)) (* 1/4 (sqrt (/ 1 x))))) (sqrt x))","(- (* (pow x 2) (- (* x (- (* -1/2 (* (sqrt x) (- 1/24 (* 1/16 (/ 1 x))))) (* 1/12 (sqrt (/ 1 x))))) (* 1/4 (sqrt (/ 1 x))))) (sqrt x))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/6 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/24 x) 1/6)) 1/2)) 1))","(+ 1 (* 2 x))","(+ 1 (* x (+ 2 (* 2 x))))","(+ 1 (* x (+ 2 (* x (+ 2 (* 4/3 x))))))","(sqrt x)","(+ (sqrt x) (* 1/4 (sqrt (pow x 3))))","(+ (sqrt x) (* (pow x 2) (+ (* 1/12 (sqrt x)) (* 1/4 (sqrt (/ 1 x))))))","(+ (sqrt x) (* (pow x 2) (+ (* 1/4 (sqrt (/ 1 x))) (* x (+ (* 1/12 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (- 1/24 (* 1/16 (/ 1 x))))))))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(* -1 (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","(sqrt (- (exp (* 2 x)) 1))","(- (exp (* 2 x)) 1)","(sqrt (/ (- 1 (exp (* 2 x))) (- 1 (exp x))))","(sqrt (- 1 (exp (* 2 x))))","(- 1 (exp (* 2 x)))","(sqrt (/ (- (exp (* 4 x)) 1) (* (+ 1 (exp (* 2 x))) (- (exp x) 1))))","(sqrt (- (exp (* 4 x)) 1))","(- (exp (* 4 x)) 1)","(pow (* 1 (+ 1 (exp x))) 1/4)","(- (exp x) 1)","(* -1 (sqrt (- (exp x) 1)))","(- 1 (exp x))","(exp (* 2 x))","(sqrt (- (exp x) 1))","(sqrt (/ (- (exp (neg (* -2 x))) 1) (- (exp x) 1)))","(* -1 (sqrt (/ (- (exp (neg (* -2 x))) 1) (- (exp x) 1))))","(sqrt (- (exp (neg (* -2 x))) 1))","(- (exp (neg (* -2 x))) 1)","(sqrt (/ (- 1 (exp (neg (* -2 x)))) (- 1 (exp x))))","(sqrt (- 1 (exp (neg (* -2 x)))))","(- 1 (exp (neg (* -2 x))))","(sqrt (/ (- (exp (* 4 x)) 1) (* (+ 1 (exp (neg (* -2 x)))) (- (exp x) 1))))","(exp (neg (* -2 x)))"]],"memory":[[2188144,10114880]],"method":["egg-herbie"],"outputs":[[]],"time":124.6611328125,"type":"simplify"},{"count":[[22,330]],"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(sqrt.f64 (expm1.f64 (+.f64 x x)))","(expm1.f64 (+.f64 x x))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))","(neg.f64 (expm1.f64 (+.f64 x x)))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))))","(expm1.f64 (*.f64 x #s(literal 4 binary64)))","(*.f64 x #s(literal 4 binary64))","(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))","(expm1.f64 x)","(neg.f64 (sqrt.f64 (expm1.f64 x)))","(neg.f64 (expm1.f64 x))","(exp.f64 (+.f64 x x))","(sqrt.f64 (expm1.f64 x))","(/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))"]],"memory":[[2497120,19008656]],"outputs":[["#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 64 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 8 binary64)","#s(literal 9/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)"]],"time":406.927001953125,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1233952,1233952]],"time":2.76904296875,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","done",42.2890625,"binary64"],["(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","done",0.6171875,"binary64"],["(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","done",22.14453125,"binary64"],["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","done",0.015625,"binary64"],["(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","done",42.16244125976844,"binary64"],["#s(literal 2 binary64)","next",51.49236919071093,"binary64"],["#s(literal 1 binary64)","next",32.70036581795753,"binary64"]],"compiler":[[17,14],[17,9],[13,11],[5,5],[11,9],[1,2],[1,2]],"count":[[20,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[15,2],"picked":[5,5]}],"memory":[[-6360208,1940528]],"min-error":[[0.0,"binary64"]],"time":3.324951171875,"type":"prune"},{"inputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)"]],"memory":[[1624016,9823808]],"method":["egg-herbie"],"outputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)"]],"time":124.099853515625,"type":"simplify"},{"compiler":[[4,5]],"memory":[[3610432,3610432]],"mixsample":[[0.129150390625,"ival-true",0],[0.255859375,"exact",0],[0.061767578125,"ival-assert",0]],"outcomes":[[3.14208984375,0,"valid",256]],"time":6.01513671875,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28976,28976]],"outputs":[[]],"series":[[0.001953125,"()","x","-inf"],[0.008056640625,"()","x","inf"],[0.02197265625,"()","x","0"]],"time":0.093994140625,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[1391120,9446816]],"method":["egg-herbie"],"outputs":[[]],"time":144.796875,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[-5694064,12114544]],"outputs":[[]],"time":162.782958984375,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[45552,45552]],"time":0.149169921875,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","done",42.2890625,"binary64"],["(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","done",0.6171875,"binary64"],["(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","done",22.14453125,"binary64"],["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","done",0.015625,"binary64"],["(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","done",42.16244125976844,"binary64"],["#s(literal 2 binary64)","done",51.49236919071093,"binary64"],["#s(literal 1 binary64)","done",32.70036581795753,"binary64"]],"compiler":[[77,39],[17,14],[17,9],[13,11],[5,5],[11,9],[1,2],[1,2]],"count":[[7,7]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[0,0],"picked":[2,2]}],"memory":[[2325792,2325792]],"min-error":[[0.0,"binary64"]],"time":5.23095703125,"type":"prune"},{"accuracy":[0.015625],"baseline":[0.015625],"branch":[["x",0.015625,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.015625,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.015625,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[8,1]],"inputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (*.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))"]],"memory":[[-1954160,5854384]],"oracle":[64.0],"outputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"repr":["binary64"],"time":9.343017578125,"times":[[3.087890625,"x"],[2.06591796875,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[3.35498046875,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[32.70036581795754],"baseline":[32.70036581795753],"branch":[["x",32.700365817957554,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",32.70036581795754,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",32.70036581795754,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[2,1]],"inputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)"]],"link":["."],"memory":[[4056768,4056768]],"name":["sqrtexp (problem 3.4.4)"],"oracle":[51.50526679769861],"outputs":[["#s(literal 1 binary64)"]],"repr":["binary64"],"time":3.81396484375,"times":[[1.221923828125,"x"],[1.075927734375,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[1.093994140625,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"inputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)"]],"memory":[[-3150400,14538992]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)"]],"time":143.47802734375,"type":"simplify"},{"compiler":[[6,5]],"memory":[[419152,419152]],"stop":[["done",1]],"time":1.001953125,"type":"soundness"},{"compiler":[[6,5],[6,5],[12,10],[12,10]],"memory":[[3476144,11329264]],"remove-preprocessing":[[],[],[]],"time":20.239013671875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.012939453125,"type":"end"}]