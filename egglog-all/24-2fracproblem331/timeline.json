[{"memory":[[11104,11104]],"time":0.028076171875,"type":"start"},{"compiler":[[11,8]],"memory":[[669504,669504]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":2.580810546875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[512816,247166256]],"mixsample":[[207.461181640625,"ival-div",0],[116.46044921875,"adjust",800],[85.919921875,"ival-add",0],[91.954833984375,"ival-div",400],[5.48828125,"ival-assert",0],[92.531494140625,"ival-sub",0],[47.509521484375,"ival-add",400],[10.16357421875,"ival-true",0],[0.0419921875,"ival-sub",400],[8.452392578125,"exact",0]],"outcomes":[[620.681396484375,1,"valid",3859],[322.97021484375,0,"valid",4397]],"time":1339.709228515625,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[69,0,1,186]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cancellation",70,1,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",69,1,[477.0683625006829],0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,70],[0,186]],"maybe-confusion":[[69,0,0,1,1,185]],"memory":[[-500656,44084960]],"mixsample":[[6.830078125,"adjust",800],[10.84765625,"ival-div",0],[4.006103515625,"ival-add",0],[5.66357421875,"ival-div",400],[0.320556640625,"ival-assert",0],[4.725341796875,"ival-sub",0],[1.749267578125,"ival-add",400],[0.732666015625,"ival-true",0],[0.5107421875,"exact",0]],"outcomes":[[38.517822265625,1,"valid",246],[19.306640625,0,"valid",266]],"time":133.497802734375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[4300576,20447952]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))"]],"symmetry":[[]],"time":417.18896484375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.110107421875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","next",15.093473413094994,"binary64"]],"compiler":[[9,6]],"memory":[[308256,308256]],"time":0.89501953125,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"locations":[["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cost-diff",0]],"memory":[[-10540064,10507120]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"time":193.64404296875,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.01953125],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","accuracy",15.093473413094994]],"memory":[[1128480,9051456]],"mixsample":[[2.791015625,"adjust",800],[4.601806640625,"ival-div",0],[1.882080078125,"ival-add",0],[2.338134765625,"ival-div",400],[0.11376953125,"ival-assert",0],[2.11669921875,"ival-sub",0],[1.0029296875,"ival-add",400],[0.2021484375,"ival-true",0],[0.179931640625,"exact",0]],"outcomes":[[16.358642578125,1,"valid",123],[7.822021484375,0,"valid",133]],"time":33.199951171875,"type":"localize"},{"count":[[4,24]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[873648,873648]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"series":[[0.922119140625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","-inf"],[0.5458984375,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","inf"],[1.359130859375,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","0"]],"time":3.277099609375,"type":"series"},{"count":[[24,0]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"memory":[[1688944,9739872]],"method":["egg-herbie"],"outputs":[[]],"time":163.98486328125,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[-3508752,14671280]],"outputs":[["(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) x)","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) x)","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) x)","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","x","(neg.f64 x)","(+.f64 #s(literal 6 binary64) x)","(-.f64 #s(literal 6 binary64) x)","(-.f64 (/.f64 #s(literal 6 binary64) x) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 (*.f64 x x) x)","(*.f64 x (*.f64 x x))","(*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(*.f64 (neg.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(*.f64 (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) x) (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) x))","(*.f64 (*.f64 x (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (*.f64 x (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(*.f64 (*.f64 (*.f64 x x) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))"]],"time":292.638916015625,"type":"rewrite"},{"compiler":[[279,58]],"memory":[[2887872,2887872]],"time":4.361083984375,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",15.093473413094994,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 6 binary64) x))","fresh",62.10129344202605,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","fresh",63.065563849995726,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","next",62.0702203933292,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","next",62.08703698684023,"binary64"],["(+.f64 x #s(literal 1 binary64))","next",62.14986907348152,"binary64"],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","next",62.14488551362919,"binary64"],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","next",62.10483638484376,"binary64"]],"compiler":[[9,6],[9,7],[17,9],[21,10],[7,5],[3,3],[5,5],[4,4],[9,7],[17,9],[21,10],[7,5],[3,3],[5,5],[4,4]],"count":[[31,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[30,7],"picked":[1,1]}],"memory":[[4126048,4126048]],"min-error":[[14.95158718744007,"binary64"]],"time":7.300048828125,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))","(/.f64 #s(literal 1 binary64) #s(literal 6 binary64))","#s(literal 6 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 6 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",2],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",1],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","cost-diff",2]],"memory":[[-4721376,11503936]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","(+.f64 (/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","(pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))","(/.f64 #s(literal 1 binary64) #s(literal 6 binary64))","#s(literal 6 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 7 binary64))","#s(literal 6 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x"]],"time":227.157958984375,"type":"simplify"},{"compiler":[[106,15]],"locations":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.01171875],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.00390625],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","accuracy",0.01171875],["(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))","accuracy",0.1796875],["(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","accuracy",0.324882519536884],["(pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))","accuracy",2.2144676392250267]],"memory":[[772384,33401216]],"mixsample":[[7.92236328125,"ival-div",0],[6.16015625,"adjust",800],[1.25634765625,"ival-div",400],[6.96044921875,"adjust",4000],[0.158203125,"ival-assert",0],[0.71044921875,"ival-div",1600],[8.22265625,"ival-sub",0],[0.02880859375,"ival-div",7200],[18.954833984375,"ival-pow",800],[22.030029296875,"ival-pow",0],[7.438720703125,"ival-add",0],[2.4541015625,"ival-mult",800],[0.810791015625,"ival-add",400],[5.64404296875,"adjust",2800],[2.026123046875,"ival-div",2000],[0.711181640625,"ival-div",4000],[0.236572265625,"ival-div",2400],[0.208251953125,"ival-add",1200],[0.464111328125,"ival-div",6400],[3.0439453125,"ival-mult",2000],[31.65087890625,"ival-pow",2000],[0.552978515625,"ival-div",6800],[0.443359375,"ival-div",3200],[0.042236328125,"ival-div",2800],[6.110107421875,"adjust",2000],[0.43994140625,"ival-div",1200],[3.950927734375,"ival-mult",0],[1.377197265625,"ival-div",800],[0.3671875,"ival-true",0],[0.4541015625,"ival-div",3600],[0.1982421875,"ival-div",6000],[76.250732421875,"ival-pow",4000],[0.337158203125,"ival-add",800],[0.428466796875,"exact",0],[2.632568359375,"ival-mult",4000],[2.850341796875,"ival-neg",0]],"outcomes":[[33.98974609375,0,"valid",139],[232.796875,4,"exit",117]],"time":290.787109375,"type":"localize"},{"count":[[9,47]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))"]],"memory":[[6804592,43977440]],"outputs":[["(cbrt (/ 1 x))","(* -1 (cbrt (/ 1 x)))","(/ (- x (cbrt (pow x 2))) x)","(/ (- (* x (+ 1 (* -1 x))) (cbrt (pow x 2))) x)","(/ (- (* x (+ 1 (* x (- x 1)))) (cbrt (pow x 2))) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- (* -1 x) 1)","7","(+ 7 x)","(+ 1 (* -2 x))","(+ 1 (* x (- x 2)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 2)))","(pow (* 1 x) 1/6)","(pow (/ 1 x) 1/6)","(- (/ 1 x) (cbrt (/ 1 x)))","(- (/ 1 x) (+ (cbrt (/ 1 x)) (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ (cbrt (/ 1 x)) (/ 1 (pow x 2))))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* -1 x)","(* -1 (* x (+ 1 (/ 1 x))))","(* x (+ 1 (* 7 (/ 1 x))))","(* x (- (/ 1 (pow x 2)) 1))","(* x (- (/ 1 (pow x 2)) (+ 1 (/ 1 (pow x 3)))))","(* x (- (+ (/ 1 (pow x 2)) (/ 1 (pow x 4))) (+ 1 (/ 1 (pow x 3)))))","(* (cbrt (/ 1 x)) (pow (cbrt -1) 2))","(* -1 (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(- (/ 1 x) (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(- (* -1 (/ (- (/ 1 x) 1) x)) (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 (pow x 2)))))","(* -1 (* x (- (+ 1 (/ 1 (pow x 3))) (/ 1 (pow x 2)))))","(* -1 (* x (- (+ 1 (* -1 (/ (- (/ 1 x) 1) (pow x 3)))) (/ 1 (pow x 2)))))","(exp (* 1/6 (+ (log -1) (* -1 (log (/ -1 x))))))","(exp (* 1/6 (+ (log -1) (log (/ -1 x)))))"]],"series":[[48.06005859375,"((* (/ 1 (pow x (/ 1 6))) (/ 1 (pow x (/ 1 6)))) (- (/ 1 (+ x 1)) (* (/ 1 (pow x (/ 1 6))) (/ 1 (pow x (/ 1 6))))) (/ 1 (+ x 1)) (+ x 1) (neg (+ x 1)) (+ 6 (+ x 1)) (- (/ 1 (+ x 1)) x) (pow x (/ 1 6)) (/ 1 (pow x (/ 1 6))))","x","-inf"],[22.892822265625,"((* (/ 1 (pow x (/ 1 6))) (/ 1 (pow x (/ 1 6)))) (- (/ 1 (+ x 1)) (* (/ 1 (pow x (/ 1 6))) (/ 1 (pow x (/ 1 6))))) (/ 1 (+ x 1)) (+ x 1) (neg (+ x 1)) (+ 6 (+ x 1)) (- (/ 1 (+ x 1)) x) (pow x (/ 1 6)) (/ 1 (pow x (/ 1 6))))","x","inf"],[61.0009765625,"((* (/ 1 (pow x (/ 1 6))) (/ 1 (pow x (/ 1 6)))) (- (/ 1 (+ x 1)) (* (/ 1 (pow x (/ 1 6))) (/ 1 (pow x (/ 1 6))))) (/ 1 (+ x 1)) (+ x 1) (neg (+ x 1)) (+ 6 (+ x 1)) (- (/ 1 (+ x 1)) x) (pow x (/ 1 6)) (/ 1 (pow x (/ 1 6))))","x","0"]],"time":132.93994140625,"type":"series"},{"count":[[47,0]],"inputs":[["(cbrt (/ 1 x))","(* -1 (cbrt (/ 1 x)))","(/ (- x (cbrt (pow x 2))) x)","(/ (- (* x (+ 1 (* -1 x))) (cbrt (pow x 2))) x)","(/ (- (* x (+ 1 (* x (- x 1)))) (cbrt (pow x 2))) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- (* -1 x) 1)","7","(+ 7 x)","(+ 1 (* -2 x))","(+ 1 (* x (- x 2)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 2)))","(pow (* 1 x) 1/6)","(pow (/ 1 x) 1/6)","(- (/ 1 x) (cbrt (/ 1 x)))","(- (/ 1 x) (+ (cbrt (/ 1 x)) (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ (cbrt (/ 1 x)) (/ 1 (pow x 2))))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* -1 x)","(* -1 (* x (+ 1 (/ 1 x))))","(* x (+ 1 (* 7 (/ 1 x))))","(* x (- (/ 1 (pow x 2)) 1))","(* x (- (/ 1 (pow x 2)) (+ 1 (/ 1 (pow x 3)))))","(* x (- (+ (/ 1 (pow x 2)) (/ 1 (pow x 4))) (+ 1 (/ 1 (pow x 3)))))","(* (cbrt (/ 1 x)) (pow (cbrt -1) 2))","(* -1 (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(- (/ 1 x) (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(- (* -1 (/ (- (/ 1 x) 1) x)) (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) (* (cbrt (/ 1 x)) (pow (cbrt -1) 2)))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 (pow x 2)))))","(* -1 (* x (- (+ 1 (/ 1 (pow x 3))) (/ 1 (pow x 2)))))","(* -1 (* x (- (+ 1 (* -1 (/ (- (/ 1 x) 1) (pow x 3)))) (/ 1 (pow x 2)))))","(exp (* 1/6 (+ (log -1) (* -1 (log (/ -1 x))))))","(exp (* 1/6 (+ (log -1) (log (/ -1 x)))))"]],"memory":[[-2280784,9183120]],"method":["egg-herbie"],"outputs":[[]],"time":280.098876953125,"type":"simplify"},{"count":[[9,135]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))"]],"memory":[[-1006320,15005728]],"outputs":[["#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)","#s(literal 1 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 216 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 7 binary64)","#s(literal -5 binary64)","#s(literal -3 binary64)","#s(literal 36 binary64)","#s(literal -6 binary64)","#s(literal 12 binary64)"]],"time":346.06103515625,"type":"rewrite"},{"compiler":[[105,33]],"memory":[[1496352,1496352]],"time":2.339111328125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",15.093473413094994,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","done",62.0702203933292,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","next",61.53803472948689,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","next",61.680591087830386,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","next",62.07141531693012,"binary64"],["(+.f64 x #s(literal 1 binary64))","done",62.14986907348152,"binary64"],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","done",62.14488551362919,"binary64"],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","done",62.10483638484376,"binary64"]],"compiler":[[9,6],[21,10],[7,6],[7,5],[7,6],[3,3],[5,5],[4,4]],"count":[[23,8]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[15,3],"picked":[5,4]}],"memory":[[2263776,2263776]],"min-error":[[14.936770383569202,"binary64"]],"time":3.77001953125,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal -6 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 216 binary64)"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","cost-diff",0]],"memory":[[-6554336,10569552]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 6 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal -6 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -216 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 216 binary64)"]],"time":300.870849609375,"type":"simplify"},{"compiler":[[55,11]],"locations":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.01953125],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.01953125],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",27.182808456417906],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.01953125]],"memory":[[6374416,14327904]],"mixsample":[[2.98046875,"ival-div",0],[4.352294921875,"adjust",800],[2.102783203125,"ival-add",0],[0.258544921875,"ival-add",1600],[1.552978515625,"ival-div",400],[0.575927734375,"ival-div",1600],[0.147216796875,"ival-assert",0],[7.665283203125,"ival-sub",0],[1.03076171875,"ival-add",400],[0.289306640625,"ival-true",0],[0.524169921875,"exact",0],[1.384765625,"adjust",2000]],"outcomes":[[14.337890625,1,"valid",69],[13.540771484375,2,"valid",44],[13.184326171875,0,"valid",143]],"time":54.66015625,"type":"localize"},{"count":[[5,44]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))"]],"memory":[[684704,684704]],"outputs":[["7","(+ 7 (* -1 x))","(+ 7 (* x (- x 1)))","(+ 7 (* x (- (* x (+ 1 (* -1 x))) 1)))","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(* -1 x)","(* x (- x 1))","(* x (- (* x (+ 1 (* -1 x))) 1))","(* x (- (* x (+ 1 (* x (- x 1)))) 1))","-215","(- (* -1 x) 215)","(- (* x (- x 1)) 215)","(- (* x (- (* x (+ 1 (* -1 x))) 1)) 215)","6","(+ 6 (/ 1 x))","(- (+ 6 (/ 1 x)) (/ 1 (pow x 2)))","(- (+ 6 (+ (/ 1 x) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","-1","(- (/ 1 x) 1)","(- (/ 1 x) (+ 1 (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2))))","-216","(- (/ 1 x) 216)","(- (/ 1 x) (+ 216 (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 216 (/ 1 (pow x 2))))","(+ 6 (* -1 (/ (- (/ 1 x) 1) x)))","(+ 6 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(- (* -1 (/ (- (/ 1 x) 1) x)) 1)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1)","(- (* -1 (/ (- (/ 1 x) 1) x)) 216)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 216)"]],"series":[[0.45703125,"((- (/ 1 (+ x 1)) -6) (/ 1 (+ x 1)) (+ x 1) (- (/ 1 (+ x 1)) 1) (- (/ 1 (+ x 1)) 216))","x","-inf"],[0.56884765625,"((- (/ 1 (+ x 1)) -6) (/ 1 (+ x 1)) (+ x 1) (- (/ 1 (+ x 1)) 1) (- (/ 1 (+ x 1)) 216))","x","inf"],[0.593017578125,"((- (/ 1 (+ x 1)) -6) (/ 1 (+ x 1)) (+ x 1) (- (/ 1 (+ x 1)) 1) (- (/ 1 (+ x 1)) 216))","x","0"]],"time":2.245849609375,"type":"series"},{"count":[[44,0]],"inputs":[["7","(+ 7 (* -1 x))","(+ 7 (* x (- x 1)))","(+ 7 (* x (- (* x (+ 1 (* -1 x))) 1)))","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(* -1 x)","(* x (- x 1))","(* x (- (* x (+ 1 (* -1 x))) 1))","(* x (- (* x (+ 1 (* x (- x 1)))) 1))","-215","(- (* -1 x) 215)","(- (* x (- x 1)) 215)","(- (* x (- (* x (+ 1 (* -1 x))) 1)) 215)","6","(+ 6 (/ 1 x))","(- (+ 6 (/ 1 x)) (/ 1 (pow x 2)))","(- (+ 6 (+ (/ 1 x) (/ 1 (pow x 3)))) (/ 1 (pow x 2)))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","-1","(- (/ 1 x) 1)","(- (/ 1 x) (+ 1 (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2))))","-216","(- (/ 1 x) 216)","(- (/ 1 x) (+ 216 (/ 1 (pow x 2))))","(- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 216 (/ 1 (pow x 2))))","(+ 6 (* -1 (/ (- (/ 1 x) 1) x)))","(+ 6 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(- (* -1 (/ (- (/ 1 x) 1) x)) 1)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1)","(- (* -1 (/ (- (/ 1 x) 1) x)) 216)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 216)"]],"memory":[[-6173264,9948368]],"method":["egg-herbie"],"outputs":[[]],"time":152.2431640625,"type":"simplify"},{"count":[[5,75]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))"]],"memory":[[5727248,15319040]],"outputs":[["(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 (*.f64 x x) x) #s(literal 1 binary64))","(+.f64 (fma.f64 x x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))","(+.f64 #s(literal -6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (neg.f64 (*.f64 x x)) #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 (*.f64 x x) x) #s(literal 1 binary64))","(+.f64 (fma.f64 x x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))","(+.f64 #s(literal -6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (neg.f64 (*.f64 x x)) #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 (*.f64 x x) x) #s(literal 1 binary64))","(+.f64 (fma.f64 x x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))","(+.f64 #s(literal -6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (neg.f64 (*.f64 x x)) #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 (*.f64 x x) x) #s(literal 1 binary64))","(+.f64 (fma.f64 x x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))","(+.f64 #s(literal -6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (neg.f64 (*.f64 x x)) #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(+.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 (*.f64 x x) x) #s(literal 1 binary64))","(+.f64 (fma.f64 x x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))","(+.f64 #s(literal -6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (neg.f64 (*.f64 x x)) #s(literal 1 binary64))"]],"time":328.955810546875,"type":"rewrite"},{"compiler":[[83,22]],"memory":[[-6428992,1463136]],"time":3.443115234375,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",15.093473413094994,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","done",62.0702203933292,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","done",61.53803472948689,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","done",61.680591087830386,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","done",62.07141531693012,"binary64"],["(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","next",62.128240096239495,"binary64"],["(+.f64 x #s(literal 1 binary64))","done",62.14986907348152,"binary64"],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","done",62.14488551362919,"binary64"],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","done",62.10483638484376,"binary64"]],"compiler":[[9,6],[21,10],[7,6],[7,5],[7,6],[5,5],[3,3],[5,5],[4,4]],"count":[[23,9]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[15,1],"picked":[3,3]}],"memory":[[2608880,2608880]],"min-error":[[14.936770383569202,"binary64"]],"time":4.72509765625,"type":"prune"},{"inputs":[["(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(literal -6 binary64)"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","cost-diff",2]],"memory":[[1686368,9884256]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(literal -6 binary64)"]],"time":181.39599609375,"type":"simplify"},{"compiler":[[13,7]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","accuracy",0.00390625]],"memory":[[-2209920,5646256]],"mixsample":[[0.264404296875,"ival-true",0],[5.00732421875,"ival-add",0],[0.4130859375,"exact",0],[0.163818359375,"ival-assert",0]],"outcomes":[[13.725341796875,0,"valid",256]],"time":20.0498046875,"type":"localize"},{"count":[[2,8]],"inputs":[["(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 x #s(literal 1 binary64))"]],"memory":[[320096,320096]],"outputs":[["-5","(- x 5)","1","(+ 1 x)","x","(* x (- 1 (* 5 (/ 1 x))))","(* x (+ 1 (/ 1 x)))","(* -1 (* x (- (* 5 (/ 1 x)) 1)))"]],"series":[[0.4560546875,"((+ (+ x 1) -6) (+ x 1))","x","-inf"],[0.259033203125,"((+ (+ x 1) -6) (+ x 1))","x","inf"],[0.22412109375,"((+ (+ x 1) -6) (+ x 1))","x","0"]],"time":1.18505859375,"type":"series"},{"count":[[8,0]],"inputs":[["-5","(- x 5)","1","(+ 1 x)","x","(* x (- 1 (* 5 (/ 1 x))))","(* x (+ 1 (/ 1 x)))","(* -1 (* x (- (* 5 (/ 1 x)) 1)))"]],"memory":[[-169264,9312160]],"method":["egg-herbie"],"outputs":[[]],"time":178.156005859375,"type":"simplify"},{"count":[[2,30]],"inputs":[["(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 x #s(literal 1 binary64))"]],"memory":[[-1695344,14317792]],"outputs":[["(neg.f64 (/.f64 (*.f64 (+.f64 x #s(literal 7 binary64)) (+.f64 x #s(literal -5 binary64))) (+.f64 (neg.f64 x) #s(literal -7 binary64))))","(neg.f64 (/.f64 (*.f64 (+.f64 x #s(literal -5 binary64)) (+.f64 (neg.f64 x) #s(literal -7 binary64))) (+.f64 x #s(literal 7 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) #s(literal -216 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 7 binary64)) #s(literal 36 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64)) #s(literal -216 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 7 binary64)) #s(literal 36 binary64))))","(+.f64 x #s(literal -5 binary64))","(+.f64 #s(literal -5 binary64) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(+.f64 (+.f64 x #s(literal -6 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal -6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x #s(literal -6 binary64)))","(+.f64 (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 7 binary64))) (neg.f64 (/.f64 #s(literal 36 binary64) (+.f64 x #s(literal 7 binary64)))))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 5 binary64))) (/.f64 #s(literal 25 binary64) (+.f64 x #s(literal 5 binary64))))","(-.f64 (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 7 binary64))) (/.f64 #s(literal 36 binary64) (+.f64 x #s(literal 7 binary64))))","(-.f64 (+.f64 #s(literal -6 binary64) (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 36 binary64) (-.f64 #s(literal -7 binary64) x)) (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (-.f64 #s(literal -7 binary64) x)))","(neg.f64 (+.f64 (neg.f64 x) #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (+.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal -1 binary64))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (+.f64 x #s(literal 1 binary64)))"]],"time":398.51904296875,"type":"rewrite"},{"compiler":[[351,95]],"memory":[[3182224,3182224]],"time":4.822998046875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","done",15.093473413094994,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))","done",62.0702203933292,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","done",61.53803472948689,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","done",61.680591087830386,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","done",62.07141531693012,"binary64"],["(+.f64 x #s(literal 1 binary64))","done",62.14986907348152,"binary64"],["(+.f64 x #s(literal -5 binary64))","fresh",62.128240096239495,"binary64"],["(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","done",62.14488551362919,"binary64"],["(neg.f64 (+.f64 x #s(literal 1 binary64)))","done",62.10483638484376,"binary64"]],"compiler":[[104,27],[9,6],[21,10],[7,6],[7,5],[7,6],[3,3],[3,3],[5,5],[4,4]],"count":[[39,9]],"kept":[{"done":[8,8],"fresh":[0,0],"new":[30,1],"picked":[1,0]}],"memory":[[-3643568,4558720]],"min-error":[[14.936770383569202,"binary64"]],"time":9.27197265625,"type":"prune"},{"accuracy":[15.093473413094992],"baseline":[15.093473413094994],"branch":[["x",15.093473413095001,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",15.093473413094992,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[13,1]],"inputs":[["(+.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 6 binary64) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 6 binary64))))))"]],"memory":[[5730784,5730784]],"oracle":[63.46783976003712],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":12.75,"times":[[5.169921875,"x"],[6.01904296875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[61.5380347294869],"baseline":[61.53803472948689],"branch":[["x",61.538034729486945,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",61.5380347294869,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[10,1]],"inputs":[["(+.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 6 binary64) x))"]],"memory":[[-12773856,5151072]],"oracle":[63.03505182829474],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))"]],"repr":["binary64"],"time":20.842041015625,"times":[[15.0458984375,"x"],[4.511962890625,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[61.680591087830344],"baseline":[61.680591087830386],"branch":[["x",61.680591087830344,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",61.68059108783038,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[7,1]],"inputs":[["(+.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[4513072,4513072]],"oracle":[63.034302895640145],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"repr":["binary64"],"time":7.176025390625,"times":[[2.997802734375,"x"],[2.97998046875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[62.07141531693004],"baseline":[62.07141531693012],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",62.07141531693009,1,"binary64"],["x",62.07141531693004,1,"binary64"]],"compiler":[[9,6],[1,1]],"count":[[6,1]],"inputs":[["(+.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))"]],"memory":[[-4078800,4164080]],"oracle":[63.034302895640145],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))"]],"repr":["binary64"],"time":6.863037109375,"times":[[2.618896484375,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"],[3.196044921875,"x"]],"type":"regimes"},{"accuracy":[62.10483638484374],"baseline":[62.10483638484376],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",62.10483638484375,1,"binary64"],["x",62.10483638484374,1,"binary64"]],"compiler":[[9,6],[1,1]],"count":[[5,1]],"inputs":[["(+.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal 1 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 6 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -6 binary64))"]],"memory":[[3939952,3939952]],"oracle":[63.034302895640145],"outputs":[["(neg.f64 (+.f64 x #s(literal 1 binary64)))"]],"repr":["binary64"],"time":6.4248046875,"times":[[2.656982421875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"],[2.625,"x"]],"type":"regimes"},{"accuracy":[62.12824009623947],"baseline":[62.128240096239495],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",62.128240096239516,1,"binary64"],["x",62.12824009623947,1,"binary64"]],"compiler":[[9,6],[1,1]],"count":[[2,1]],"inputs":[["(+.f64 x #s(literal -5 binary64))","(+.f64 x #s(literal 1 binary64))"]],"link":["."],"memory":[[-5127984,3189984]],"name":["2frac (problem 3.3.1)"],"oracle":[62.82958134125294],"outputs":[["(+.f64 x #s(literal -5 binary64))"]],"repr":["binary64"],"time":5.085205078125,"times":[[1.882080078125,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"],[2.468017578125,"x"]],"type":"regimes"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal -5 binary64))"]],"memory":[[-936752,15790576]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))","(neg.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 (neg.f64 x) #s(literal -1 binary64))","(+.f64 x #s(literal -5 binary64))"]],"time":205.18701171875,"type":"simplify"},{"compiler":[[37,16]],"memory":[[1352816,1352816]],"stop":[["fuel",1]],"time":3.415771484375,"type":"soundness"},{"compiler":[[37,16],[37,16],[7,6],[7,6],[9,6],[9,6]],"memory":[[4522592,27784480]],"remove-preprocessing":[[],[],[],[],[],[],[]],"time":53.162109375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01708984375,"type":"end"}]