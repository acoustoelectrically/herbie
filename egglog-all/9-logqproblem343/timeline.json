[{"memory":[[13008,13008]],"time":0.045166015625,"type":"start"},{"compiler":[[13,9]],"memory":[[847200,847200]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00048780441284179693,"valid":0.4990239143371582}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0009756088256835938,"valid":0.4985361099243164}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0019512176513671875,"valid":0.4975605010986328}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.003902435302734375,"valid":0.4956092834472656}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.00780487060546875,"valid":0.49170684814453125}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0156097412109375,"valid":0.4839019775390625}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.031219482421875,"valid":0.468292236328125}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.06243896484375,"valid":0.43707275390625}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.1248779296875,"valid":0.3746337890625}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.249755859375,"valid":0.249755859375}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":6.16796875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[18642784,376965008]],"mixsample":[[82.316650390625,"ival-div",0],[253.82861328125,"adjust",800],[100.943603515625,"ival-div",400],[28.454345703125,"ival-sub",1600],[5.72265625,"ival-assert",0],[47.9677734375,"ival-div",1600],[74.1337890625,"ival-sub",0],[76.74951171875,"ival-sub",400],[84.9931640625,"adjust",2000],[65.447265625,"ival-add",0],[86.431640625,"ival-fabs",0],[19.42919921875,"ival-add",1600],[0.582763671875,"ival-log",400],[53.742431640625,"ival-add",400],[1850.88720703125,"ival-log",0],[3.820556640625,"ival-log",800],[9.354248046875,"exact",0],[38.297607421875,"ival-<",0]],"outcomes":[[1305.026611328125,1,"valid",4742],[1956.248046875,2,"valid",3206],[60.441162109375,0,"valid",308]],"time":3860.220947265625,"type":"sample"},{"compiler":[[8,6],[25,8],[25,8]],"confusion":[[252,0,0,4]],"explanations":[["log.f64","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","sensitivity",252,0,[],[[]]]],"fperrors":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",252,0,false,0,false],["(+.f64 #s(literal 1 binary64) eps)",0,0,false,0,false],["eps",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) eps)",0,0,false,0,false]],"freqs":[[1,252],[0,4]],"maybe-confusion":[[252,0,0,0,0,4]],"memory":[[-877008,51157424]],"mixsample":[[12.03173828125,"adjust",800],[5.183349609375,"ival-div",0],[3.78759765625,"ival-add",0],[1.36083984375,"ival-add",1600],[1.29150390625,"ival-sub",1600],[4.6171875,"ival-div",400],[2.953369140625,"ival-div",1600],[0.277587890625,"ival-assert",0],[3.6279296875,"ival-add",400],[4.350830078125,"ival-sub",0],[0.71923828125,"ival-true",0],[109.20947265625,"ival-log",0],[0.376953125,"ival-log",800],[3.34619140625,"ival-sub",400],[0.704345703125,"exact",0],[5.0693359375,"adjust",2000]],"outcomes":[[66.405517578125,1,"valid",268],[123.76416015625,2,"valid",222],[2.258056640625,0,"valid",22]],"time":263.450927734375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"memory":[[-4272016,20036704]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"symmetry":[[]],"time":336.254150390625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.14404296875,"type":"eval"},{"alts":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","next",57.81638332132415,"binary64"]],"compiler":[[8,6]],"memory":[[311488,311488]],"time":1.044921875,"type":"prune"},{"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)"]],"locations":[["(+.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(-.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","cost-diff",0],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","cost-diff",0]],"memory":[[-3555408,9748384]],"method":["egg-herbie"],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(+.f64 #s(literal 1 binary64) eps)"]],"time":173.864990234375,"type":"simplify"},{"compiler":[[25,8]],"locations":[["(-.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(+.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","accuracy",0.01953125],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","accuracy",57.78431430926633]],"memory":[[-2778912,12957584]],"mixsample":[[5.1640625,"adjust",800],[2.163330078125,"ival-div",0],[1.6650390625,"ival-add",0],[0.53173828125,"ival-add",1600],[0.7099609375,"ival-sub",1600],[2.365478515625,"ival-div",400],[1.241943359375,"ival-div",1600],[0.146728515625,"ival-assert",0],[1.45947265625,"ival-add",400],[1.984130859375,"ival-sub",0],[0.2724609375,"ival-true",0],[49.81591796875,"ival-log",0],[0.18408203125,"ival-log",800],[1.821533203125,"ival-sub",400],[0.215087890625,"exact",0],[2.180419921875,"adjust",2000]],"outcomes":[[29.139404296875,1,"valid",134],[55.782958984375,2,"valid",111],[1.1533203125,0,"valid",11]],"time":97.89404296875,"type":"localize"},{"count":[[4,26]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[1193664,1193664]],"outputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"series":[[0.97802734375,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","-inf"],[0.9169921875,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","inf"],[1.30615234375,"((log (/ (- 1 eps) (+ 1 eps))) (/ (- 1 eps) (+ 1 eps)) (- 1 eps) (+ 1 eps))","eps","0"]],"time":3.62890625,"type":"series"},{"count":[[26,0]],"inputs":[["(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(+ 1 (* -1 eps))","(+ 1 eps)","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(* -1 eps)","(* eps (- (/ 1 eps) 1))","eps","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(* -1 (* eps (- 1 (/ 1 eps))))"]],"memory":[[1198000,9372080]],"method":["egg-herbie"],"outputs":[[]],"time":139.629150390625,"type":"simplify"},{"count":[[4,60]],"inputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))","(-.f64 #s(literal 1 binary64) eps)","(+.f64 #s(literal 1 binary64) eps)"]],"memory":[[1255072,18653136]],"outputs":[["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(+.f64 (log1p.f64 (neg.f64 eps)) (neg.f64 (log1p.f64 eps)))","(+.f64 (neg.f64 (log1p.f64 eps)) (log1p.f64 (neg.f64 eps)))","(+.f64 (-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 (*.f64 (*.f64 eps eps) eps))) (log1p.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (log.f64 (+.f64 eps #s(literal -1 binary64))) (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) eps))))","(+.f64 (log.f64 (+.f64 eps #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 #s(literal -1 binary64) eps))))","(+.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (log1p.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 (*.f64 (neg.f64 eps) eps))) (log1p.f64 (neg.f64 eps)))","(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(-.f64 (log.f64 (+.f64 eps #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) eps)))","(-.f64 (log.f64 (-.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 eps eps eps))) (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 eps) eps)) (log.f64 (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 eps) (*.f64 eps eps))) (log.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) eps))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 eps) (*.f64 eps eps))) (-.f64 (log1p.f64 (fma.f64 eps eps eps)) (neg.f64 (log1p.f64 eps))))","(neg.f64 (/.f64 (+.f64 eps #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (/.f64 eps (-.f64 #s(literal -1 binary64) eps)))","(+.f64 (/.f64 eps (-.f64 #s(literal -1 binary64) eps)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (neg.f64 eps)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))) (*.f64 (/.f64 eps (-.f64 #s(literal -1 binary64) eps)) (/.f64 eps (+.f64 #s(literal 1 binary64) eps))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 #s(literal -1 binary64) eps))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (neg.f64 eps)))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (*.f64 (/.f64 eps (-.f64 #s(literal -1 binary64) eps)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))) (neg.f64 (/.f64 (*.f64 eps eps) (*.f64 (+.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps)) (/.f64 (+.f64 eps #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) eps)))","(neg.f64 (+.f64 eps #s(literal -1 binary64)))","(+.f64 (neg.f64 eps) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 eps))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (neg.f64 (/.f64 (*.f64 eps eps) (+.f64 #s(literal 1 binary64) eps))))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (+.f64 eps #s(literal -1 binary64)) eps)) (*.f64 (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(+.f64 (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 eps) eps #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) (neg.f64 (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) eps)","(-.f64 #s(literal 0 binary64) (+.f64 eps #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) eps)) (/.f64 (*.f64 eps eps) (+.f64 #s(literal 1 binary64) eps)))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 eps eps) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) eps) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps))","(neg.f64 (-.f64 #s(literal -1 binary64) eps))","(+.f64 #s(literal 1 binary64) eps)","(+.f64 eps #s(literal 1 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps)) (neg.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal 1 binary64) eps))))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 eps eps eps)))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 eps eps #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) eps))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 eps eps eps)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 eps eps #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 eps (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 eps eps eps) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (fma.f64 (+.f64 #s(literal 1 binary64) eps) eps #s(literal 1 binary64))) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (neg.f64 eps))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) eps))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 eps #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 eps #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps)) (/.f64 (*.f64 eps eps) (-.f64 #s(literal 1 binary64) eps)))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (-.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64)))"]],"time":431.864990234375,"type":"rewrite"},{"compiler":[[1112,219]],"memory":[[-1976512,5946016]],"time":9.40185546875,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","next",0.0,"binary64"],["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","next",57.80214422487644,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","done",57.81638332132415,"binary64"],["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","next",57.80749077590194,"binary64"]],"compiler":[[6,5],[9,7],[8,6],[28,12]],"count":[[61,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[60,3],"picked":[1,1]}],"memory":[[3445520,3445520]],"min-error":[[0.0,"binary64"]],"time":5.262939453125,"type":"prune"},{"inputs":[["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))","(*.f64 eps eps)","(*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","(*.f64 (+.f64 eps #s(literal -1 binary64)) eps)","(+.f64 eps #s(literal -1 binary64))","#s(literal -1 binary64)","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))","(+.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(-.f64 #s(literal 1 binary64) eps)","(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(log1p.f64 (neg.f64 eps))","(neg.f64 eps)","eps","(log1p.f64 eps)"]],"locations":[["(log1p.f64 eps)","cost-diff",0],["(neg.f64 eps)","cost-diff",0],["(log1p.f64 (neg.f64 eps))","cost-diff",0],["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","cost-diff",0],["(+.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))","cost-diff",0],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","cost-diff",0],["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","cost-diff",0],["(-.f64 #s(literal 1 binary64) eps)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))","cost-diff",0],["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","cost-diff",0],["(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","cost-diff",10]],"memory":[[3108848,11200800]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","(log.f64 (/.f64 (*.f64 (fma.f64 (+.f64 eps #s(literal -1 binary64)) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 (+.f64 eps #s(literal -1 binary64)) eps #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) eps)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))","(*.f64 eps eps)","(*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (-.f64 #s(literal 1 binary64) eps)) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))","(*.f64 (+.f64 eps #s(literal -1 binary64)) eps)","(+.f64 eps #s(literal -1 binary64))","#s(literal -1 binary64)","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))","(+.f64 #s(literal 1 binary64) eps)","#s(literal 1 binary64)","eps","(-.f64 #s(literal 1 binary64) eps)","(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(log1p.f64 (neg.f64 eps))","(neg.f64 eps)","eps","(log1p.f64 eps)"]],"time":237.463134765625,"type":"simplify"},{"compiler":[[167,23]],"locations":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","accuracy",0.0],["(neg.f64 eps)","accuracy",0.0],["(log1p.f64 (neg.f64 eps))","accuracy",0.0],["(log1p.f64 eps)","accuracy",0.0],["(+.f64 #s(literal 1 binary64) eps)","accuracy",0.0],["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","accuracy",0.0],["(/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))","accuracy",0.02734375],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","accuracy",57.709074958269795],["(*.f64 (+.f64 eps #s(literal -1 binary64)) eps)","accuracy",0.015625],["(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","accuracy",0.01953125],["(*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","accuracy",0.01953125],["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","accuracy",57.78431430926633]],"memory":[[-3720512,37853360]],"mixsample":[[27.259033203125,"adjust",800],[6.923095703125,"ival-div",0],[70.12890625,"ival-sub",1600],[5.83642578125,"ival-div",400],[0.241943359375,"ival-assert",0],[7.77783203125,"ival-div",1600],[5.651123046875,"ival-sub",0],[3.164794921875,"ival-sub",400],[0.005859375,"ival-neg",400],[10.91455078125,"adjust",2000],[12.071533203125,"ival-add",0],[1.7470703125,"ival-mult",800],[1.225341796875,"ival-mult",400],[14.456298828125,"ival-mult",0],[3.55224609375,"ival-add",1600],[0.050048828125,"ival-log",400],[6.544677734375,"ival-add",400],[160.650390625,"ival-log",0],[0.612060546875,"ival-true",0],[0.31494140625,"ival-log",800],[6.393798828125,"ival-log1p",0],[0.634033203125,"ival-add",800],[0.843505859375,"exact",0],[7.887451171875,"ival-neg",0]],"outcomes":[[115.574462890625,1,"valid",134],[292.69384765625,2,"valid",111],[4.600341796875,0,"valid",11]],"time":459.56787109375,"type":"localize"},{"count":[[14,85]],"inputs":[["(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) eps)","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))","(+.f64 #s(literal 1 binary64) eps)","(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(log1p.f64 (neg.f64 eps))","(neg.f64 eps)","(log1p.f64 eps)","(*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","(*.f64 (+.f64 eps #s(literal -1 binary64)) eps)"]],"memory":[[3753984,3753984]],"outputs":[["1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(+ 1 (* -1 eps))","(+ 1 (* eps (- (* -1 (pow eps 2)) 1)))","(+ 1 (* eps (- (* (pow eps 2) (- eps 1)) 1)))","(* 2 eps)","(* eps (+ 2 (* 2/3 (pow eps 2))))","(* eps (+ 2 (* (pow eps 2) (+ 2/3 (* 2/5 (pow eps 2))))))","(* eps (+ 2 (* (pow eps 2) (+ 2/3 (* (pow eps 2) (+ 2/5 (* 2/7 (pow eps 2))))))))","(+ 1 (* 2 eps))","(+ 1 (* eps (+ 2 (* 2 eps))))","(+ 1 (* eps (+ 2 (* eps (+ 2 (* 2 eps))))))","(+ 1 eps)","(* -1 eps)","(* eps (- (* -1/2 eps) 1))","(* eps (- (* eps (- (* -1/3 eps) 1/2)) 1))","(* eps (- (* eps (- (* eps (- (* -1/4 eps) 1/3)) 1/2)) 1))","eps","(* eps (+ 1 (* -1/2 eps)))","(* eps (+ 1 (* eps (- (* 1/3 eps) 1/2))))","(* eps (+ 1 (* eps (- (* eps (+ 1/3 (* -1/4 eps))) 1/2))))","(* eps (- (* 2 eps) 1))","(* eps (- (* eps (+ 2 (* -1 eps))) 1))","(* eps (- (* eps (+ 2 (* eps (- eps 1)))) 1))","(* eps (- eps 1))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(/ -1 (pow eps 2))","(/ (- (/ 1 eps) 1) (pow eps 2))","(/ (- (+ (/ 1 eps) (/ 1 (pow eps 3))) 1) (pow eps 2))","(/ (- (+ (/ 1 eps) (/ 1 (pow eps 3))) (+ 1 (/ 1 (pow eps 4)))) (pow eps 2))","(* eps (- (/ 1 eps) 1))","(* -1 (log -1))","(* -1 (+ (log -1) (* 2 (/ 1 eps))))","(- (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)) (log -1))","(- (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3))) (+ (log -1) (* 2 (/ 1 eps))))","(+ (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (+ (/ 2/3 (pow eps 3)) (* 2 (/ 1 eps))))","(+ (log -1) (+ (/ 2/3 (pow eps 3)) (+ (* 2 (/ 1 eps)) (* 2/5 (/ 1 (pow eps 5))))))","(* -1 (+ 1 (* 2 (/ 1 eps))))","(- (* -1 (/ (+ 2 (* 2 (/ 1 eps))) eps)) 1)","(- (* -1 (/ (+ 2 (* 2 (/ 1 eps))) (pow eps 2))) (+ 1 (* 2 (/ 1 eps))))","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (log (/ 1 eps))))","(- (+ (log -1) (* -1 (log (/ 1 eps)))) (/ 1 eps))","(+ (log -1) (+ (* -1 (log (/ 1 eps))) (* -1 (/ (+ 1 (* 1/2 (/ 1 eps))) eps))))","(- (+ (log -1) (+ (* -1 (log (/ 1 eps))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 eps))) (pow eps 2))))) (/ 1 eps))","(* -1 (log (/ 1 eps)))","(+ (* -1 (log (/ 1 eps))) (/ 1 eps))","(- (+ (* -1 (log (/ 1 eps))) (/ 1 eps)) (/ 1/2 (pow eps 2)))","(- (+ (* -1 (log (/ 1 eps))) (+ (/ 1 eps) (* 1/3 (/ 1 (pow eps 3))))) (/ 1/2 (pow eps 2)))","(- (* 2 (/ 1 eps)) (+ 1 (/ 1 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (/ 1 (pow eps 3))) (+ 1 (/ 1 (pow eps 2))))","(pow eps 2)","(* (pow eps 2) (- 1 (/ 1 eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(/ (- (* -1 (/ (- (/ 1 (pow eps 3)) (+ 1 (/ 1 (pow eps 2)))) eps)) 1) (pow eps 2))","(* -1 (* eps (- 1 (/ 1 eps))))","(- (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)) (log -1))","(+ (log -1) (* -1 (/ (- (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 2))) 2) eps)))","(- (* -1 (/ (+ 2 (+ (* 2 (/ 1 eps)) (/ 2 (pow eps 2)))) eps)) 1)","(* -1 (log (/ -1 eps)))","(- (* -1 (log (/ -1 eps))) (/ 1 eps))","(+ (* -1 (log (/ -1 eps))) (* -1 (/ (+ 1 (* 1/2 (/ 1 eps))) eps)))","(+ (* -1 (log (/ -1 eps))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow eps 2)) (* 1/2 (/ 1 eps)))) eps)))","(+ (log -1) (* -1 (log (/ -1 eps))))","(+ (log -1) (+ (* -1 (log (/ -1 eps))) (/ 1 eps)))","(+ (log -1) (+ (* -1 (log (/ -1 eps))) (* -1 (/ (- (* 1/2 (/ 1 eps)) 1) eps))))","(+ (log -1) (+ (* -1 (log (/ -1 eps))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 eps)) 1/2) eps)) 1) eps))))","(- (* -1 (/ (- (/ 1 eps) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 eps) 1) eps)) 2) eps)) 1)"]],"series":[[3.885986328125,"((+ (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1)))) (log (+ (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1))))) (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (- 1 eps) (neg (log (/ (+ 1 eps) (- 1 eps)))) (log (/ (+ 1 eps) (- 1 eps))) (/ (+ 1 eps) (- 1 eps)) (+ 1 eps) (- (log (+ 1 (neg eps))) (log (+ 1 eps))) (log (+ 1 (neg eps))) (neg eps) (log (+ 1 eps)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1))) (* (+ eps -1) eps))","eps","-inf"],[4.951904296875,"((+ (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1)))) (log (+ (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1))))) (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (- 1 eps) (neg (log (/ (+ 1 eps) (- 1 eps)))) (log (/ (+ 1 eps) (- 1 eps))) (/ (+ 1 eps) (- 1 eps)) (+ 1 eps) (- (log (+ 1 (neg eps))) (log (+ 1 eps))) (log (+ 1 (neg eps))) (neg eps) (log (+ 1 eps)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1))) (* (+ eps -1) eps))","eps","inf"],[6.998046875,"((+ (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1)))) (log (+ (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1))))) (/ (- 1 eps) (+ (* (* eps eps) eps) 1)) (- 1 eps) (neg (log (/ (+ 1 eps) (- 1 eps)))) (log (/ (+ 1 eps) (- 1 eps))) (/ (+ 1 eps) (- 1 eps)) (+ 1 eps) (- (log (+ 1 (neg eps))) (log (+ 1 eps))) (log (+ 1 (neg eps))) (neg eps) (log (+ 1 eps)) (* (* (+ eps -1) eps) (/ (- 1 eps) (+ (* (* eps eps) eps) 1))) (* (+ eps -1) eps))","eps","0"]],"time":18.205078125,"type":"series"},{"count":[[85,0]],"inputs":[["1","(+ 1 (* -2 eps))","(+ 1 (* eps (- (* 2 eps) 2)))","(+ 1 (* eps (- (* eps (+ 2 (* -2 eps))) 2)))","(* -2 eps)","(* eps (- (* -2/3 (pow eps 2)) 2))","(* eps (- (* (pow eps 2) (- (* -2/5 (pow eps 2)) 2/3)) 2))","(* eps (- (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7 (pow eps 2)) 2/5)) 2/3)) 2))","(+ 1 (* -1 eps))","(+ 1 (* eps (- (* -1 (pow eps 2)) 1)))","(+ 1 (* eps (- (* (pow eps 2) (- eps 1)) 1)))","(* 2 eps)","(* eps (+ 2 (* 2/3 (pow eps 2))))","(* eps (+ 2 (* (pow eps 2) (+ 2/3 (* 2/5 (pow eps 2))))))","(* eps (+ 2 (* (pow eps 2) (+ 2/3 (* (pow eps 2) (+ 2/5 (* 2/7 (pow eps 2))))))))","(+ 1 (* 2 eps))","(+ 1 (* eps (+ 2 (* 2 eps))))","(+ 1 (* eps (+ 2 (* eps (+ 2 (* 2 eps))))))","(+ 1 eps)","(* -1 eps)","(* eps (- (* -1/2 eps) 1))","(* eps (- (* eps (- (* -1/3 eps) 1/2)) 1))","(* eps (- (* eps (- (* eps (- (* -1/4 eps) 1/3)) 1/2)) 1))","eps","(* eps (+ 1 (* -1/2 eps)))","(* eps (+ 1 (* eps (- (* 1/3 eps) 1/2))))","(* eps (+ 1 (* eps (- (* eps (+ 1/3 (* -1/4 eps))) 1/2))))","(* eps (- (* 2 eps) 1))","(* eps (- (* eps (+ 2 (* -1 eps))) 1))","(* eps (- (* eps (+ 2 (* eps (- eps 1)))) 1))","(* eps (- eps 1))","-1","(- (* 2 (/ 1 eps)) 1)","(- (* 2 (/ 1 eps)) (+ 1 (/ 2 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (* 2 (/ 1 (pow eps 3)))) (+ 1 (/ 2 (pow eps 2))))","(log -1)","(- (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)))","(- (+ (log -1) (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3)))) (* 2 (/ 1 eps)))","(/ -1 (pow eps 2))","(/ (- (/ 1 eps) 1) (pow eps 2))","(/ (- (+ (/ 1 eps) (/ 1 (pow eps 3))) 1) (pow eps 2))","(/ (- (+ (/ 1 eps) (/ 1 (pow eps 3))) (+ 1 (/ 1 (pow eps 4)))) (pow eps 2))","(* eps (- (/ 1 eps) 1))","(* -1 (log -1))","(* -1 (+ (log -1) (* 2 (/ 1 eps))))","(- (* -1 (/ (+ 2 (* 2/3 (/ 1 (pow eps 2)))) eps)) (log -1))","(- (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 3))) (+ (log -1) (* 2 (/ 1 eps))))","(+ (log -1) (* 2 (/ 1 eps)))","(+ (log -1) (+ (/ 2/3 (pow eps 3)) (* 2 (/ 1 eps))))","(+ (log -1) (+ (/ 2/3 (pow eps 3)) (+ (* 2 (/ 1 eps)) (* 2/5 (/ 1 (pow eps 5))))))","(* -1 (+ 1 (* 2 (/ 1 eps))))","(- (* -1 (/ (+ 2 (* 2 (/ 1 eps))) eps)) 1)","(- (* -1 (/ (+ 2 (* 2 (/ 1 eps))) (pow eps 2))) (+ 1 (* 2 (/ 1 eps))))","(* eps (+ 1 (/ 1 eps)))","(+ (log -1) (* -1 (log (/ 1 eps))))","(- (+ (log -1) (* -1 (log (/ 1 eps)))) (/ 1 eps))","(+ (log -1) (+ (* -1 (log (/ 1 eps))) (* -1 (/ (+ 1 (* 1/2 (/ 1 eps))) eps))))","(- (+ (log -1) (+ (* -1 (log (/ 1 eps))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 eps))) (pow eps 2))))) (/ 1 eps))","(* -1 (log (/ 1 eps)))","(+ (* -1 (log (/ 1 eps))) (/ 1 eps))","(- (+ (* -1 (log (/ 1 eps))) (/ 1 eps)) (/ 1/2 (pow eps 2)))","(- (+ (* -1 (log (/ 1 eps))) (+ (/ 1 eps) (* 1/3 (/ 1 (pow eps 3))))) (/ 1/2 (pow eps 2)))","(- (* 2 (/ 1 eps)) (+ 1 (/ 1 (pow eps 2))))","(- (+ (* 2 (/ 1 eps)) (/ 1 (pow eps 3))) (+ 1 (/ 1 (pow eps 2))))","(pow eps 2)","(* (pow eps 2) (- 1 (/ 1 eps)))","(- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (* 2 (/ 1 eps)) 2) eps)) 2) eps)) 1)","(+ (log -1) (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)))","(/ (- (* -1 (/ (- (/ 1 (pow eps 3)) (+ 1 (/ 1 (pow eps 2)))) eps)) 1) (pow eps 2))","(* -1 (* eps (- 1 (/ 1 eps))))","(- (* -1 (/ (+ 2 (+ (/ 2/5 (pow eps 4)) (* 2/3 (/ 1 (pow eps 2))))) eps)) (log -1))","(+ (log -1) (* -1 (/ (- (* -1 (/ (+ 2/3 (* 2/5 (/ 1 (pow eps 2)))) (pow eps 2))) 2) eps)))","(- (* -1 (/ (+ 2 (+ (* 2 (/ 1 eps)) (/ 2 (pow eps 2)))) eps)) 1)","(* -1 (log (/ -1 eps)))","(- (* -1 (log (/ -1 eps))) (/ 1 eps))","(+ (* -1 (log (/ -1 eps))) (* -1 (/ (+ 1 (* 1/2 (/ 1 eps))) eps)))","(+ (* -1 (log (/ -1 eps))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow eps 2)) (* 1/2 (/ 1 eps)))) eps)))","(+ (log -1) (* -1 (log (/ -1 eps))))","(+ (log -1) (+ (* -1 (log (/ -1 eps))) (/ 1 eps)))","(+ (log -1) (+ (* -1 (log (/ -1 eps))) (* -1 (/ (- (* 1/2 (/ 1 eps)) 1) eps))))","(+ (log -1) (+ (* -1 (log (/ -1 eps))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 eps)) 1/2) eps)) 1) eps))))","(- (* -1 (/ (- (/ 1 eps) 2) eps)) 1)","(- (* -1 (/ (- (* -1 (/ (- (/ 1 eps) 1) eps)) 2) eps)) 1)"]],"memory":[[-5598640,10093232]],"method":["egg-herbie"],"outputs":[[]],"time":151.81298828125,"type":"simplify"},{"count":[[14,210]],"inputs":[["(+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))))","(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) eps)","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps)))","(/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))","(+.f64 #s(literal 1 binary64) eps)","(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(log1p.f64 (neg.f64 eps))","(neg.f64 eps)","(log1p.f64 eps)","(*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))","(*.f64 (+.f64 eps #s(literal -1 binary64)) eps)"]],"memory":[[-18468768,16026656]],"outputs":[["#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)"]],"time":320.18310546875,"type":"rewrite"},{"compiler":[[30,31]],"memory":[[1258256,1258256]],"time":1.89990234375,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","done",0.0,"binary64"],["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","done",57.80214422487644,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","done",57.81638332132415,"binary64"],["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","done",57.80749077590194,"binary64"],["(log.f64 #s(literal 27 binary64))","next",61.50502528796309,"binary64"],["(log.f64 #s(literal 8 binary64))","next",61.484095187947354,"binary64"],["(log.f64 #s(literal 2 binary64))","next",61.50864807979353,"binary64"],["(log.f64 #s(literal 1 binary64))","next",60.285129231031725,"binary64"],["(log.f64 #s(literal 0 binary64))","next",62.93177317856244,"binary64"]],"compiler":[[6,5],[9,7],[8,6],[28,12],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3]],"count":[[19,9]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,5],"picked":[3,3]}],"memory":[[3132144,3132144]],"min-error":[[0.0,"binary64"]],"time":5.294921875,"type":"prune"},{"inputs":[["(log.f64 #s(literal 1 binary64))","#s(literal 1 binary64)","(log.f64 #s(literal 0 binary64))","#s(literal 0 binary64)","(log.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(log.f64 #s(literal 8 binary64))","#s(literal 8 binary64)","(log.f64 #s(literal 27 binary64))","#s(literal 27 binary64)"]],"locations":[["(log.f64 #s(literal 27 binary64))","cost-diff",0],["(log.f64 #s(literal 8 binary64))","cost-diff",0],["(log.f64 #s(literal 2 binary64))","cost-diff",0],["(log.f64 #s(literal 0 binary64))","cost-diff",0],["(log.f64 #s(literal 1 binary64))","cost-diff",1]],"memory":[[1335008,9583792]],"method":["egg-herbie"],"outputs":[["(log.f64 #s(literal 1 binary64))","#s(literal 0 binary64)","#s(literal 1 binary64)","(log.f64 #s(literal 0 binary64))","#s(literal 0 binary64)","(log.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(log.f64 #s(literal 8 binary64))","#s(literal 8 binary64)","(log.f64 #s(literal 27 binary64))","#s(literal 27 binary64)"]],"time":163.882080078125,"type":"simplify"},{"compiler":[[17,13]],"locations":[["(log.f64 #s(literal 27 binary64))","accuracy",0.0],["(log.f64 #s(literal 8 binary64))","accuracy",0.0],["(log.f64 #s(literal 2 binary64))","accuracy",0.0],["(log.f64 #s(literal 0 binary64))","accuracy",0.0],["(log.f64 #s(literal 1 binary64))","accuracy",0.0]],"memory":[[2147312,10045776]],"mixsample":[[0.2470703125,"ival-true",0],[12.955322265625,"ival-log",0],[0.7451171875,"exact",0],[0.1298828125,"ival-assert",0]],"outcomes":[[24.66943359375,0,"invalid",256]],"time":33.201904296875,"type":"localize"},{"count":[[5,0]],"inputs":[["(log.f64 #s(literal 1 binary64))","(log.f64 #s(literal 0 binary64))","(log.f64 #s(literal 2 binary64))","(log.f64 #s(literal 8 binary64))","(log.f64 #s(literal 27 binary64))"]],"memory":[[106256,106256]],"outputs":[[]],"series":[[0.02490234375,"((log 1) (log 0) (log 2) (log 8) (log 27))","eps","-inf"],[0.02294921875,"((log 1) (log 0) (log 2) (log 8) (log 27))","eps","inf"],[0.0859375,"((log 1) (log 0) (log 2) (log 8) (log 27))","eps","0"]],"time":0.30419921875,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-7503440,9315120]],"method":["egg-herbie"],"outputs":[[]],"time":130.954833984375,"type":"simplify"},{"count":[[5,6]],"inputs":[["(log.f64 #s(literal 1 binary64))","(log.f64 #s(literal 0 binary64))","(log.f64 #s(literal 2 binary64))","(log.f64 #s(literal 8 binary64))","(log.f64 #s(literal 27 binary64))"]],"memory":[[4434800,12649632]],"outputs":[["#s(literal 0 binary64)","(log.f64 #s(literal 1 binary64))","(log.f64 #s(literal 0 binary64))","(log.f64 #s(literal 2 binary64))","(log.f64 #s(literal 8 binary64))","(log.f64 #s(literal 27 binary64))"]],"time":190.9990234375,"type":"rewrite"},{"compiler":[[11,11]],"memory":[[577488,577488]],"time":1.4140625,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","done",0.0,"binary64"],["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","done",57.80214422487644,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","done",57.81638332132415,"binary64"],["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","done",57.80749077590194,"binary64"],["(log.f64 #s(literal 27 binary64))","done",61.50502528796309,"binary64"],["(log.f64 #s(literal 8 binary64))","done",61.484095187947354,"binary64"],["(log.f64 #s(literal 2 binary64))","done",61.50864807979353,"binary64"],["(log.f64 #s(literal 0 binary64))","done",62.93177317856244,"binary64"],["#s(literal 0 binary64)","next",60.285129231031725,"binary64"]],"compiler":[[6,5],[9,7],[8,6],[28,12],[2,3],[2,3],[2,3],[2,3],[1,2]],"count":[[15,9]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[6,1],"picked":[5,4]}],"memory":[[2001008,2001008]],"min-error":[[0.0,"binary64"]],"time":4.571044921875,"type":"prune"},{"inputs":[["#s(literal 0 binary64)"]],"memory":[[995600,8813184]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)"]],"time":188.283935546875,"type":"simplify"},{"compiler":[[3,4]],"memory":[[-5094672,3163920]],"mixsample":[[0.492919921875,"ival-true",0],[0.379150390625,"exact",0],[0.36669921875,"ival-assert",0]],"outcomes":[[16.681884765625,0,"valid",256]],"time":24.5869140625,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28768,28768]],"outputs":[[]],"series":[[0.00390625,"()","eps","-inf"],[0.008056640625,"()","eps","inf"],[0.049072265625,"()","eps","0"]],"time":0.210205078125,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-537760,9077216]],"method":["egg-herbie"],"outputs":[[]],"time":155.343994140625,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[3987472,12115392]],"outputs":[[]],"time":167.576904296875,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[47072,47072]],"time":0.178955078125,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","done",0.0,"binary64"],["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","done",57.80214422487644,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","done",57.81638332132415,"binary64"],["(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","done",57.80749077590194,"binary64"],["(log.f64 #s(literal 27 binary64))","done",61.50502528796309,"binary64"],["(log.f64 #s(literal 8 binary64))","done",61.484095187947354,"binary64"],["(log.f64 #s(literal 2 binary64))","done",61.50864807979353,"binary64"],["(log.f64 #s(literal 0 binary64))","done",62.93177317856244,"binary64"],["#s(literal 0 binary64)","done",60.285129231031725,"binary64"]],"compiler":[[62,31],[6,5],[9,7],[8,6],[28,12],[2,3],[2,3],[2,3],[2,3],[1,2]],"count":[[9,9]],"kept":[{"done":[8,8],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"memory":[[-4989376,2948640]],"min-error":[[0.0,"binary64"]],"time":7.380126953125,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["eps",0.0,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",0.0,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",0.0,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[10,1]],"inputs":[["#s(literal 0 binary64)","(log.f64 #s(literal 0 binary64))","(log.f64 #s(literal 1 binary64))","(log.f64 #s(literal 2 binary64))","(log.f64 #s(literal 8 binary64))","(log.f64 #s(literal 27 binary64))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))","(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))"]],"memory":[[6571280,6571280]],"oracle":[63.04715443023442],"outputs":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))"]],"repr":["binary64"],"time":10.36083984375,"times":[[3.246826171875,"eps"],[2.882080078125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[2.931884765625,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[57.80214422487645],"baseline":[57.80214422487644],"branch":[["eps",57.80214422487648,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",57.80214422487645,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",57.80214422487645,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[9,1]],"inputs":[["#s(literal 0 binary64)","(log.f64 #s(literal 0 binary64))","(log.f64 #s(literal 1 binary64))","(log.f64 #s(literal 2 binary64))","(log.f64 #s(literal 8 binary64))","(log.f64 #s(literal 27 binary64))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 eps #s(literal -1 binary64)) eps) (/.f64 (-.f64 #s(literal 1 binary64) eps) (fma.f64 (*.f64 eps eps) eps #s(literal 1 binary64))))))"]],"memory":[[-1770416,6377392]],"oracle":[63.04715443023442],"outputs":[["(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))"]],"repr":["binary64"],"time":9.753173828125,"times":[[2.838134765625,"eps"],[2.6689453125,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[3.01806640625,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[57.81638332132415],"baseline":[57.81638332132415],"branch":[["eps",57.81638332132418,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",57.81638332132415,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",57.81638332132415,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[7,1]],"inputs":[["#s(literal 0 binary64)","(log.f64 #s(literal 0 binary64))","(log.f64 #s(literal 1 binary64))","(log.f64 #s(literal 2 binary64))","(log.f64 #s(literal 8 binary64))","(log.f64 #s(literal 27 binary64))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"memory":[[-3505920,5764112]],"oracle":[63.04715443023442],"outputs":[["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"]],"repr":["binary64"],"time":8.072021484375,"times":[[2.427001953125,"eps"],[2.51806640625,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[2.2021484375,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"accuracy":[60.28512923103172],"baseline":[60.285129231031725],"branch":[["eps",60.28512923103177,1,"binary64"],["(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))",60.28512923103172,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))",60.28512923103172,1,"binary64"]],"compiler":[[1,1],[8,6],[7,5]],"count":[[6,1]],"inputs":[["#s(literal 0 binary64)","(log.f64 #s(literal 0 binary64))","(log.f64 #s(literal 1 binary64))","(log.f64 #s(literal 2 binary64))","(log.f64 #s(literal 8 binary64))","(log.f64 #s(literal 27 binary64))"]],"link":["."],"memory":[[5353280,5353280]],"name":["logq (problem 3.4.3)"],"oracle":[63.04715443023442],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":7.492919921875,"times":[[2.33203125,"eps"],[2.2060546875,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[2.027099609375,"(/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps))"]],"type":"regimes"},{"inputs":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","#s(literal 0 binary64)"]],"memory":[[-1438960,15169344]],"method":["egg-herbie"],"outputs":[["(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))","(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))","#s(literal 0 binary64)"]],"time":197.85595703125,"type":"simplify"},{"compiler":[[24,14]],"memory":[[865408,865408]],"stop":[["done",1]],"time":1.610107421875,"type":"soundness"},{"compiler":[[24,14],[24,14],[6,5],[6,5],[8,6],[8,6]],"memory":[[-2804544,21602752]],"remove-preprocessing":[[],[],[],[],[]],"time":39.434814453125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02001953125,"type":"end"}]