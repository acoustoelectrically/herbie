[{"memory":[[20384,20384]],"time":0.078857421875,"type":"start"},{"compiler":[[19,16]],"memory":[[3403120,44559104]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":173.3271484375,"type":"analyze"},{"bogosity":[{"infinite":0.06487786835350522,"invalid":0.2504469312684573,"precondition":0.0014641286106780171,"valid":0.6832110717673595}],"memory":[[-32786400,446825808]],"mixsample":[[8.00390625,"ival-sub",1200],[128.464111328125,"ival-div",0],[80.385498046875,"adjust",800],[0.166748046875,"ival-sub",4800],[6.65185546875,"ival-mult",1200],[0.033203125,"ival-div",400],[2.869384765625,"ival-sub",1600],[4.7587890625,"ival-assert",0],[0.04345703125,"ival-sub",3600],[15.361328125,"ival-sqrt",1200],[149.33056640625,"ival-sub",0],[0.358154296875,"ival-sqrt",4800],[98.101318359375,"ival-sqrt",0],[5.9287109375,"ival-sub",400],[0.02001953125,"ival-sqrt",2800],[6.85546875,"ival-mult",800],[0.68798828125,"ival-sub",4400],[5.935791015625,"ival-sub",800],[0.937744140625,"ival-mult",1600],[4.605224609375,"adjust",2800],[0.01611328125,"ival-div",2000],[0.091796875,"ival-sqrt",3600],[0.3681640625,"ival-sub",4000],[8.19189453125,"ival-sqrt",400],[5.86962890625,"ival-sqrt",2000],[0.172607421875,"ival-mult",2000],[10.314208984375,"ival-sqrt",800],[3.088134765625,"ival-sub",2000],[1.21337890625,"ival-sqrt",4000],[0.00390625,"ival-sub",6800],[0.0380859375,"ival-sqrt",6800],[1.557373046875,"ival-sqrt",4400],[31.10693359375,"adjust",2000],[3.64599609375,"ival-sub",2400],[304.215087890625,"ival-mult",0],[5.2744140625,"ival-sqrt",1600],[7.0546875,"ival-mult",400],[0.007080078125,"ival-div",800],[12.985107421875,"ival-true",0],[7.0546875,"ival-sqrt",2400],[0.010009765625,"ival-sub",2800],[13.90234375,"exact",0],[0.009765625,"ival-mult",4000],[70.619384765625,"ival-neg",0]],"outcomes":[[288.3662109375,1,"valid",1396],[112.92333984375,0,"invalid",956],[337.439697265625,2,"valid",1208],[66.453369140625,3,"valid",204],[598.657958984375,0,"valid",5448]],"time":2062.2568359375,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[124,1,15,116]],"explanations":[["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",1,0,[["(*.f64 b b)","overflow",69],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",16],["(*.f64 a c)","overflow",16]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",4,0,[["(*.f64 b b)","underflow",35],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",34],["(*.f64 a c)","underflow",34],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[1,2]]],["/.f64","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",16,0,[["(*.f64 b b)","underflow",35],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",27],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",34],["(*.f64 a c)","underflow",34],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[]]],["-.f64","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",68,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",82,0,[["(*.f64 b b)","overflow",69],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",16],["(*.f64 a c)","overflow",16],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",82]],[[1,2]]]],"fperrors":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",17,0,false,1,[1.7329974910683375e-135,-4.6626993449367194e+63,6.712934176470513e-123]],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",1,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",87,0,false,1,[3.710755293359357e-301,5.712188010268238e-294,-3.0773772969896027e-15]],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",68,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[3,1],[2,30],[1,108],[0,117]],"maybe-confusion":[[124,0,1,15,0,116]],"memory":[[-4504512,88696080]],"mixsample":[[0.390625,"ival-sub",1200],[0.009765625,"ival-sub",4800],[4.7392578125,"adjust",800],[6.290283203125,"ival-div",0],[0.131591796875,"ival-mult",1200],[0.261962890625,"ival-sub",1600],[0.01318359375,"ival-div",400],[0.222900390625,"ival-assert",0],[0.037109375,"ival-sqrt",4800],[7.195068359375,"ival-sub",0],[0.63330078125,"ival-sqrt",1200],[0.358154296875,"ival-sub",400],[4.280517578125,"ival-sqrt",0],[0.3525390625,"ival-mult",800],[0.0361328125,"ival-sub",4400],[0.336181640625,"ival-sub",800],[0.0712890625,"ival-mult",1600],[0.24951171875,"adjust",2800],[0.050537109375,"ival-sub",4000],[0.502685546875,"ival-sqrt",400],[0.275634765625,"ival-sqrt",2000],[0.577392578125,"ival-sqrt",800],[0.12939453125,"ival-sub",2000],[0.011962890625,"ival-mult",2000],[0.05029296875,"ival-sqrt",4000],[0.10400390625,"ival-sqrt",4400],[1.67138671875,"adjust",2000],[0.22900390625,"ival-sub",2400],[13.9091796875,"ival-mult",0],[0.38916015625,"ival-sqrt",1600],[0.4208984375,"ival-mult",400],[0.6142578125,"ival-sqrt",2400],[0.625732421875,"ival-true",0],[0.6591796875,"exact",0],[2.397705078125,"ival-neg",0]],"outcomes":[[16.613037109375,1,"valid",86],[23.340087890625,2,"valid",92],[3.8251953125,3,"valid",10],[35.331298828125,0,"valid",324]],"time":190.4931640625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[6270528,22677040]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))"]],"symmetry":[[]],"time":347.286865234375,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.110107421875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",29.652450954656487,"binary64"]],"compiler":[[17,14]],"memory":[[355680,355680]],"time":0.671875,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1]],"memory":[[-7041520,10648864]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"time":182.8310546875,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.20312500000000003],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.972943981921959],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",15.75252060519146],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.050340608307902]],"memory":[[1183728,17026864]],"mixsample":[[0.247314453125,"ival-sub",1200],[0.0078125,"ival-sub",4800],[2.31005859375,"adjust",800],[3.37158203125,"ival-div",0],[0.082763671875,"ival-mult",1200],[0.1513671875,"ival-sub",1600],[0.0068359375,"ival-div",400],[0.096923828125,"ival-assert",0],[0.01611328125,"ival-sqrt",4800],[3.7939453125,"ival-sub",0],[0.337890625,"ival-sqrt",1200],[0.176025390625,"ival-sub",400],[2.104736328125,"ival-sqrt",0],[0.1796875,"ival-mult",800],[0.00927734375,"ival-sub",4400],[0.252685546875,"ival-sub",800],[0.0361328125,"ival-mult",1600],[0.074462890625,"adjust",2800],[0.0107421875,"ival-sub",4000],[0.2734375,"ival-sqrt",400],[0.133056640625,"ival-sqrt",2000],[0.258056640625,"ival-sqrt",800],[0.06298828125,"ival-sub",2000],[0.0068359375,"ival-mult",2000],[0.02490234375,"ival-sqrt",4000],[0.02587890625,"ival-sqrt",4400],[0.951416015625,"adjust",2000],[0.1318359375,"ival-sub",2400],[6.911865234375,"ival-mult",0],[0.24755859375,"ival-sqrt",1600],[0.191162109375,"ival-mult",400],[0.267333984375,"ival-sqrt",2400],[0.246337890625,"ival-true",0],[0.338134765625,"exact",0],[1.54296875,"ival-neg",0]],"outcomes":[[8.762939453125,1,"valid",43],[12.729248046875,2,"valid",46],[2.429931640625,3,"valid",5],[17.178466796875,0,"valid",162]],"time":55.22900390625,"type":"localize"},{"count":[[5,99]],"inputs":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[-1273232,8389312]],"outputs":[["(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(- (pow b 2) (* 4 (* a c)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[3.56396484375,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[2.429931640625,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[1.462890625,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[1.953125,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[4.248046875,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[2.906982421875,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[2.700927734375,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[3.034912109375,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[1.7578125,"((- (* b b) (* 4 (* a c))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":29.8349609375,"type":"series"},{"count":[[99,0]],"inputs":[["(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(- (pow b 2) (* 4 (* a c)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[2645888,10791328]],"method":["egg-herbie"],"outputs":[[]],"time":134.23095703125,"type":"simplify"},{"count":[[5,75]],"inputs":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[3195200,19177776]],"outputs":[["(neg.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(+.f64 (-.f64 (*.f64 b b) #s(literal 0 binary64)) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(+.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 a) (neg.f64 c)))","(+.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 a) c))","(+.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b b))","(+.f64 (*.f64 b b) (neg.f64 (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 (neg.f64 a)) c))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 (neg.f64 c)) a))","(+.f64 (*.f64 b b) (*.f64 (*.f64 (neg.f64 a) c) #s(literal -16 binary64)))","(+.f64 (*.f64 b b) (*.f64 #s(literal -16 binary64) (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b b) (neg.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 (*.f64 a a) (*.f64 c c)))))","(+.f64 (*.f64 b b) (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))))","(neg.f64 (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64))))","(+.f64 (/.f64 b (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))))","(+.f64 (*.f64 (/.f64 b (*.f64 a #s(literal -2 binary64))) #s(literal 4 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) #s(literal 4 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 b (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))) (/.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)) (*.f64 a #s(literal -2 binary64))))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a a) #s(literal 4 binary64))))","(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))) (/.f64 (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 a #s(literal -2 binary64))) (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(+.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) #s(literal 0 binary64)) b)","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (-.f64 b #s(literal 0 binary64)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b))))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))))","(+.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))) (neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))))","(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(-.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) #s(literal 0 binary64)) b)","(-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(-.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(-.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 a c) (*.f64 b b) b)))","b","(neg.f64 b)","(+.f64 b #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b)","(-.f64 #s(literal 0 binary64) b)","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(*.f64 b #s(literal 4 binary64))","(*.f64 b #s(literal -16 binary64))","(*.f64 #s(literal 4 binary64) b)","(*.f64 #s(literal -16 binary64) b)","(*.f64 (*.f64 b b) (/.f64 #s(literal 4 binary64) b))","(*.f64 (*.f64 b b) (*.f64 b b))","(*.f64 (*.f64 (*.f64 b b) b) b)","(*.f64 b (*.f64 (*.f64 b b) b))","(neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b)","(+.f64 (*.f64 (*.f64 a c) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)))","(+.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (*.f64 a c) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(+.f64 b (*.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) c)))","(-.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(-.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)))","(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))))"]],"time":508.428955078125,"type":"rewrite"},{"compiler":[[2042,289]],"memory":[[-1420656,7736656]],"time":13.397216796875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.232266373427194,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b b) b) b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.08532652866249,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",43.51160834764549,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",40.345697986901015,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (-.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",55.54569629723345,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","next",54.08433253274773,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",46.0641890694066,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",29.652450954656487,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",43.00354838618027,"binary64"],["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","fresh",57.020742607234496,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",43.269937441412374,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","next",62.02382312723264,"binary64"],["(/.f64 (+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",61.57304046851062,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","next",46.81399847701492,"binary64"],["(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))) (/.f64 (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))))","fresh",63.006728023151204,"binary64"],["(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","fresh",62.18742183741245,"binary64"]],"compiler":[[15,11],[22,15],[18,14],[18,15],[68,23],[28,16],[18,12],[17,14],[16,13],[15,11],[16,13],[15,11],[73,21],[16,12],[121,28],[75,19],[15,11],[22,15],[18,14],[18,15],[68,23],[28,16],[18,12],[16,13],[15,11],[16,13],[15,11],[73,21],[16,12],[121,28],[75,19]],"count":[[76,16]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,15],"picked":[1,1]}],"memory":[[3040416,11356112]],"min-error":[[23.430176511945838,"binary64"]],"time":15.9619140625,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))))","(neg.f64 b)","b","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(fma.f64 (*.f64 a c) (*.f64 b b) b)","(*.f64 a c)","a","c","(*.f64 b b)","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","(*.f64 (neg.f64 a) c)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))","cost-diff",1],["(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","cost-diff",3],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","cost-diff",0],["(-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","cost-diff",0],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","cost-diff",1],["(*.f64 (neg.f64 a) c)","cost-diff",0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","cost-diff",0],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(*.f64 b #s(literal -16 binary64))","cost-diff",0],["(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1]],"memory":[[-1785616,14444448]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) (+.f64 b b)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) (+.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (-.f64 (neg.f64 b) b)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(fma.f64 (*.f64 a a) (*.f64 c c) (-.f64 (neg.f64 b) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) (+.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 b (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))))","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (fma.f64 c (fma.f64 (fma.f64 c a (neg.f64 (*.f64 b b))) a (*.f64 (*.f64 b a) b)) b)) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))))","(-.f64 (neg.f64 b) (fma.f64 c (fma.f64 (fma.f64 c a (neg.f64 (*.f64 b b))) a (*.f64 (*.f64 b a) b)) b))","(neg.f64 b)","b","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(fma.f64 c (fma.f64 (fma.f64 c a (neg.f64 (*.f64 b b))) a (*.f64 (*.f64 b a) b)) b)","(fma.f64 (*.f64 a c) (*.f64 b b) b)","(*.f64 a c)","a","c","(*.f64 b b)","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))","(*.f64 (fma.f64 c a (neg.f64 (*.f64 b b))) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","(*.f64 (neg.f64 a) c)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"time":735.69287109375,"type":"simplify"},{"compiler":[[394,35]],"locations":[["(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.82902849460853],["(fma.f64 (*.f64 a c) (*.f64 b b) b)","accuracy",5.0717387053557665],["(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))","accuracy",5.66889059096941],["(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","accuracy",24.457373057607356],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.20312500000000003],["(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.0038745239653104],["(-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",11.836419689749135],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.050340608307902],["(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","accuracy",0.10546875],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","accuracy",3.83293474460853],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","accuracy",0.10546875],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","accuracy",3.83293474460853],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","accuracy",0.03029252930532605],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.1953125],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.20312500000000003],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.050340608307902]],"memory":[[2834000,52195008]],"mixsample":[[0.171142578125,"ival-sub",1200],[0.013916015625,"ival-sub",4800],[9.65576171875,"adjust",800],[12.961181640625,"ival-div",0],[0.11181640625,"ival-add",4800],[0.157470703125,"ival-sub",1600],[0.0830078125,"adjust",4000],[0.1650390625,"ival-assert",0],[0.01708984375,"ival-sqrt",4800],[9.805908203125,"ival-sub",0],[0.279052734375,"ival-sqrt",1200],[0.02734375,"ival-mult",5600],[0.05712890625,"ival-mult",4400],[0.33447265625,"ival-sub",400],[2.51953125,"ival-sqrt",0],[0.048828125,"ival-add",5200],[0.0283203125,"ival-mult",800],[0.104248046875,"ival-mult",3600],[7.680419921875,"ival-add",0],[0.272216796875,"ival-sub",800],[0.031982421875,"ival-mult",1600],[0.179443359375,"ival-mult",4800],[0.0654296875,"ival-mult",5200],[0.643798828125,"adjust",2800],[0.012939453125,"ival-sqrt",3600],[0.056884765625,"ival-mult",2400],[0.1767578125,"ival-add",2400],[0.064208984375,"ival-sub",4000],[0.03515625,"ival-add",6000],[0.4736328125,"ival-sqrt",400],[0.044921875,"ival-add",1200],[0.130615234375,"ival-sqrt",2000],[0.017578125,"ival-add",5600],[0.093994140625,"ival-mult",2000],[0.08251953125,"ival-sub",2000],[0.378173828125,"ival-sqrt",800],[0.072509765625,"ival-mult",2800],[0.06005859375,"ival-sqrt",4000],[0.02685546875,"ival-mult",7200],[0.075439453125,"ival-add",3600],[0.140380859375,"ival-add",3200],[0.08984375,"ival-add",4000],[3.263916015625,"adjust",2000],[0.15576171875,"ival-sub",2400],[0.14453125,"ival-add",1600],[0.225830078125,"ival-sqrt",1600],[16.896728515625,"ival-mult",0],[0.08447265625,"ival-mult",400],[0.07861328125,"ival-add",2800],[0.125732421875,"ival-add",2000],[0.013916015625,"ival-add",7200],[0.380615234375,"ival-true",0],[0.22021484375,"ival-sqrt",2400],[0.04296875,"ival-add",800],[0.239990234375,"ival-mult",3200],[0.53857421875,"exact",0],[1.2412109375,"ival-add",4400],[3.778076171875,"ival-neg",0],[0.05078125,"ival-mult",6000],[0.13720703125,"ival-mult",4000]],"outcomes":[[45.24853515625,1,"valid",84],[32.145751953125,2,"valid",39],[1.7861328125,4,"valid",1],[4.98779296875,3,"valid",5],[40.233642578125,0,"valid",127]],"time":165.30810546875,"type":"localize"},{"count":[[21,268]],"inputs":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))))","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(neg.f64 a)","(*.f64 #s(literal 2 binary64) a)","(fma.f64 (*.f64 a c) (*.f64 b b) b)"]],"memory":[[-8423024,21267648]],"outputs":[["(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(- (* -16 b) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 2 b)","(+ (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* a c))","(* -2 b)","(- (* (pow a 2) (pow c 2)) (* 2 b))","(* -1 (/ b a))","(/ (+ (* -1 b) (* 1/2 (* (pow a 2) (pow c 2)))) a)","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(+ b (* a (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c))))","(+ b (* a (+ (* -1 (* (pow b 2) c)) (+ (* a (pow c 2)) (* (pow b 2) c)))))","(* -1 (* a (* (pow b 2) c)))","(* a (+ (* -1 (* (pow b 2) c)) (* a (pow c 2))))","(/ (+ (* -1 b) (* -1/2 (* a (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c))))) a)","(/ (+ (* -1 b) (* a (+ (* -1/2 (* a (pow c 2))) (* -1/2 (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))))) a)","(- (* -1 (* a (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))) (* 2 b))","(- (* a (- (* -1 (* a (pow c 2))) (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))) (* 2 b))","(* 4 (* a c))","(* -1 a)","(* 2 a)","(+ b (* a (* (pow b 2) c)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (* 2 (/ b (pow a 2)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (* -1 (pow c 2))))","(* 1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (pow a 2) (+ (* -1 (/ (* (pow b 2) c) a)) (+ (/ (* (pow b 2) c) a) (pow c 2))))","(* (pow a 2) (+ (* -1 (/ (* (pow b 2) c) a)) (+ (/ b (pow a 2)) (+ (/ (* (pow b 2) c) a) (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (* (pow b 2) c) a)) (pow c 2)))","(* a (+ (* -1/2 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (* -1/2 (pow c 2))))","(* a (+ (* -1 (/ b (pow a 2))) (+ (* -1/2 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (* -1/2 (pow c 2)))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (pow c 2)))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (+ (* -1 (/ (* (pow b 2) c) a)) (+ (/ (* (pow b 2) c) a) (pow c 2)))))","(* a (* (pow b 2) c))","(* a (+ (* (pow b 2) c) (/ b a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(* -1 (* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2)))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (pow c 2)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b 2) c)) (+ (* -1 (/ b a)) (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1/2 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (* 1/2 (pow c 2)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (/ b a)) (* 1/2 (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))) a)) (* 1/2 (pow c 2)))))","(* (pow a 2) (- (+ (* -1 (/ (* (pow b 2) c) a)) (/ (* (pow b 2) c) a)) (pow c 2)))","(* (pow a 2) (- (* -1 (/ (- (* 2 (/ b a)) (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 (* (pow b 2) c)) (* -1 (/ b a)))))","(- (pow b 2) (* 4 (* a c)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(* -16 b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(- (* -2 b) (* -1 (* (pow a 2) (pow c 2))))","(+ (* -1 (/ b a)) (* 1/2 (* a (pow c 2))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ b (* (pow a 2) (pow c 2)))","(+ (* b (+ 1 (* b (+ (* -1 (* a c)) (* a c))))) (* (pow a 2) (pow c 2)))","(+ (* -1 (* a (* (pow b 2) c))) (* (pow a 2) (pow c 2)))","(+ (* -1 (/ b a)) (* -1/2 (* a (pow c 2))))","(+ (* -1/2 (* a (pow c 2))) (* b (- (* -1/2 (* b (+ c (* -1 c)))) (/ 1 a))))","(- (* -2 b) (* (pow a 2) (pow c 2)))","(- (* b (- (* -1 (* b (+ (* -1 (* a c)) (* a c)))) 2)) (* (pow a 2) (pow c 2)))","(* b (+ 1 (* a (* b c))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -17/2 (/ b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* -17 b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (- (/ (* (pow a 2) (pow c 2)) b) 2))","(* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ (* -1 (* a c)) (* a c)))","(* (pow b 2) (+ (* -1 (* a c)) (+ (* a c) (/ 1 b))))","(* (pow b 2) (+ (* -1 (* a c)) (+ (* a c) (+ (/ 1 b) (/ (* (pow a 2) (pow c 2)) (pow b 2))))))","(* (pow b 2) (+ (* -1 (* a c)) (/ (* (pow a 2) (pow c 2)) (pow b 2))))","(* -1/2 (/ (* (pow b 2) (+ (* -1 (* a c)) (* a c))) a))","(* (pow b 2) (- (* -1/2 (/ (+ (* -1 (* a c)) (* a c)) a)) (/ 1 (* a b))))","(* (pow b 2) (- (+ (* -1/2 (/ (* a (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* -1 (* a c)) (* a c)) a))) (/ 1 (* a b))))","(* -1 (* (pow b 2) (+ (* -1 (* a c)) (* a c))))","(* -1 (* (pow b 2) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b))))))","(* (pow b 2) (- (* -1 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b))))))","(* (pow b 2) (+ (* a c) (/ 1 b)))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -15 b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 2)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* -1 (* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b)))))","(* -1 (* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* (pow b 2) (+ (* -1 (* a c)) (+ (* -1 (/ (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1) b)) (* a c))))","(* (pow b 2) (+ (* -1 (/ (+ (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)) b)) (* -1/2 (/ (+ (* -1 (* a c)) (* a c)) a))))","(* (pow b 2) (- (* -1 (/ (+ 2 (/ (* (pow a 2) (pow c 2)) b)) b)) (+ (* -1 (* a c)) (* a c))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -1 (* a (pow b 2))) (* a (pow b 2)))))","(+ b (* c (+ (* -1 (* a (pow b 2))) (+ (* a (pow b 2)) (* (pow a 2) c)))))","(* c (+ (* -1 (* a (pow b 2))) (* (pow a 2) c)))","(+ (* -1 (/ b a)) (* -1/2 (* c (+ (* -1 (pow b 2)) (pow b 2)))))","(+ (* -1 (/ b a)) (* c (+ (* -1/2 (* a c)) (* -1/2 (+ (* -1 (pow b 2)) (pow b 2))))))","(- (* -1 (* c (+ (* -1 (* a (pow b 2))) (* a (pow b 2))))) (* 2 b))","(- (* c (- (* -1 (* (pow a 2) c)) (+ (* -1 (* a (pow b 2))) (* a (pow b 2))))) (* 2 b))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (* 2 (/ b (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (* 1/2 a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b 2)) c)) (+ (/ (* a (pow b 2)) c) (pow a 2))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b 2)) c)) (+ (/ b (pow c 2)) (+ (/ (* a (pow b 2)) c) (pow a 2)))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b 2)) c)) (pow a 2)))","(* (pow c 2) (+ (* -1/2 a) (* -1/2 (/ (+ (* -1 (pow b 2)) (pow b 2)) c))))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (+ (* -1/2 a) (* -1/2 (/ (+ (* -1 (pow b 2)) (pow b 2)) c)))))","(* (pow c 2) (- (* -1 (/ (+ (* -1 (* a (pow b 2))) (* a (pow b 2))) c)) (pow a 2)))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (+ (* -1 (/ (* a (pow b 2)) c)) (+ (/ (* a (pow b 2)) c) (pow a 2)))))","(* c (+ (* a (pow b 2)) (/ b c)))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b 2))) (* a (pow b 2))) c)) (pow a 2)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b 2))) (+ (* -1 (/ b c)) (* a (pow b 2)))) c)) (pow a 2)))","(* (pow c 2) (+ (* -1/2 a) (* 1/2 (/ (+ (* -1 (pow b 2)) (pow b 2)) c))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1/2 (+ (* -1 (pow b 2)) (pow b 2))) (/ b (* a c))) c)) (* -1/2 a)))","(* (pow c 2) (- (+ (* -1 (/ (* a (pow b 2)) c)) (/ (* a (pow b 2)) c)) (pow a 2)))","(* (pow c 2) (- (* -1 (/ (- (* 2 (/ b c)) (+ (* -1 (* a (pow b 2))) (* a (pow b 2)))) c)) (pow a 2)))","(* -1 (* c (+ (* -1 (* a (pow b 2))) (* -1 (/ b c)))))"]],"series":[[10.376953125,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","c","-inf"],[5.383056640625,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","c","inf"],[6.424072265625,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","c","0"],[9.141845703125,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","b","-inf"],[6.64501953125,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","b","inf"],[4.81689453125,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","b","0"],[5.115966796875,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","a","-inf"],[6.112060546875,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","a","inf"],[8.777099609375,"((- (* b b) (* 4 (* a c))) (/ (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* b -16) (/ (+ (+ (* (* (neg a) c) (* a c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (/ (- b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c))) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)) (/ (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 2 a)) (- (neg b) (+ (+ (* (* a c) (* b b)) b) (* (+ (* (neg a) c) (* b b)) (* (neg a) c)))) (* 4 (* a c)) (neg a) (* 2 a) (+ (* (* a c) (* b b)) b))","a","0"]],"time":67.833984375,"type":"series"},{"count":[[268,0]],"inputs":[["(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (- (* -16 b) b) a))","(/ (+ (* 1/2 (- (* -16 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* -16 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(- (* -16 b) b)","(- (+ (* -16 b) (* 2 (/ (* a c) b))) b)","(- (+ (* -16 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* -16 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(/ b a)","(/ (+ b (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* 2 b)","(+ (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* a c))","(* -2 b)","(- (* (pow a 2) (pow c 2)) (* 2 b))","(* -1 (/ b a))","(/ (+ (* -1 b) (* 1/2 (* (pow a 2) (pow c 2)))) a)","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(+ b (* a (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c))))","(+ b (* a (+ (* -1 (* (pow b 2) c)) (+ (* a (pow c 2)) (* (pow b 2) c)))))","(* -1 (* a (* (pow b 2) c)))","(* a (+ (* -1 (* (pow b 2) c)) (* a (pow c 2))))","(/ (+ (* -1 b) (* -1/2 (* a (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c))))) a)","(/ (+ (* -1 b) (* a (+ (* -1/2 (* a (pow c 2))) (* -1/2 (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))))) a)","(- (* -1 (* a (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))) (* 2 b))","(- (* a (- (* -1 (* a (pow c 2))) (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))) (* 2 b))","(* 4 (* a c))","(* -1 a)","(* 2 a)","(+ b (* a (* (pow b 2) c)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -8 (/ b a)) (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -16 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (* 2 (/ b (pow a 2)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (* -1 (pow c 2))))","(* 1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (pow a 2) (+ (* -1 (/ (* (pow b 2) c) a)) (+ (/ (* (pow b 2) c) a) (pow c 2))))","(* (pow a 2) (+ (* -1 (/ (* (pow b 2) c) a)) (+ (/ b (pow a 2)) (+ (/ (* (pow b 2) c) a) (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (* (pow b 2) c) a)) (pow c 2)))","(* a (+ (* -1/2 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (* -1/2 (pow c 2))))","(* a (+ (* -1 (/ b (pow a 2))) (+ (* -1/2 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (* -1/2 (pow c 2)))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (pow c 2)))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (+ (* -1 (/ (* (pow b 2) c) a)) (+ (/ (* (pow b 2) c) a) (pow c 2)))))","(* a (* (pow b 2) c))","(* a (+ (* (pow b 2) c) (/ b a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -8 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 8 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* 16 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2)))))","(* -1 (* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2)))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (pow c 2)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b 2) c)) (+ (* -1 (/ b a)) (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1/2 (/ (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)) a)) (* 1/2 (pow c 2)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (/ b a)) (* 1/2 (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c)))) a)) (* 1/2 (pow c 2)))))","(* (pow a 2) (- (+ (* -1 (/ (* (pow b 2) c) a)) (/ (* (pow b 2) c) a)) (pow c 2)))","(* (pow a 2) (- (* -1 (/ (- (* 2 (/ b a)) (+ (* -1 (* (pow b 2) c)) (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 (* (pow b 2) c)) (* -1 (/ b a)))))","(- (pow b 2) (* 4 (* a c)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 8 (/ 1 a)))))","(- (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(* -16 b)","(+ (* -1/2 (* a (pow c 2))) (/ b a))","(- (* -2 b) (* -1 (* (pow a 2) (pow c 2))))","(+ (* -1 (/ b a)) (* 1/2 (* a (pow c 2))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ b (* (pow a 2) (pow c 2)))","(+ (* b (+ 1 (* b (+ (* -1 (* a c)) (* a c))))) (* (pow a 2) (pow c 2)))","(+ (* -1 (* a (* (pow b 2) c))) (* (pow a 2) (pow c 2)))","(+ (* -1 (/ b a)) (* -1/2 (* a (pow c 2))))","(+ (* -1/2 (* a (pow c 2))) (* b (- (* -1/2 (* b (+ c (* -1 c)))) (/ 1 a))))","(- (* -2 b) (* (pow a 2) (pow c 2)))","(- (* b (- (* -1 (* b (+ (* -1 (* a c)) (* a c)))) 2)) (* (pow a 2) (pow c 2)))","(* b (+ 1 (* a (* b c))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -17/2 (/ b a))","(* b (- (/ c (pow b 2)) (* 17/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 17/2 (/ 1 a))))","(* -17 b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 17))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (- (/ (* (pow a 2) (pow c 2)) b) 2))","(* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ (* -1 (* a c)) (* a c)))","(* (pow b 2) (+ (* -1 (* a c)) (+ (* a c) (/ 1 b))))","(* (pow b 2) (+ (* -1 (* a c)) (+ (* a c) (+ (/ 1 b) (/ (* (pow a 2) (pow c 2)) (pow b 2))))))","(* (pow b 2) (+ (* -1 (* a c)) (/ (* (pow a 2) (pow c 2)) (pow b 2))))","(* -1/2 (/ (* (pow b 2) (+ (* -1 (* a c)) (* a c))) a))","(* (pow b 2) (- (* -1/2 (/ (+ (* -1 (* a c)) (* a c)) a)) (/ 1 (* a b))))","(* (pow b 2) (- (+ (* -1/2 (/ (* a (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* -1 (* a c)) (* a c)) a))) (/ 1 (* a b))))","(* -1 (* (pow b 2) (+ (* -1 (* a c)) (* a c))))","(* -1 (* (pow b 2) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b))))))","(* (pow b 2) (- (* -1 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b))))))","(* (pow b 2) (+ (* a c) (/ 1 b)))","(* -15/2 (/ b a))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (/ c (pow b 2)))))","(* -1 (* b (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* -1 (* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 15/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))))","(* -15 b)","(* -1 (* b (+ 15 (* 2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (- (+ 15 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 2)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* -1 (* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b)))))","(* -1 (* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* (pow b 2) (+ (* -1 (* a c)) (+ (* -1 (/ (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1) b)) (* a c))))","(* (pow b 2) (+ (* -1 (/ (+ (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)) b)) (* -1/2 (/ (+ (* -1 (* a c)) (* a c)) a))))","(* (pow b 2) (- (* -1 (/ (+ 2 (/ (* (pow a 2) (pow c 2)) b)) b)) (+ (* -1 (* a c)) (* a c))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* -16 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* -16 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* -16 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -1 (* a (pow b 2))) (* a (pow b 2)))))","(+ b (* c (+ (* -1 (* a (pow b 2))) (+ (* a (pow b 2)) (* (pow a 2) c)))))","(* c (+ (* -1 (* a (pow b 2))) (* (pow a 2) c)))","(+ (* -1 (/ b a)) (* -1/2 (* c (+ (* -1 (pow b 2)) (pow b 2)))))","(+ (* -1 (/ b a)) (* c (+ (* -1/2 (* a c)) (* -1/2 (+ (* -1 (pow b 2)) (pow b 2))))))","(- (* -1 (* c (+ (* -1 (* a (pow b 2))) (* a (pow b 2))))) (* 2 b))","(- (* c (- (* -1 (* (pow a 2) c)) (+ (* -1 (* a (pow b 2))) (* a (pow b 2))))) (* 2 b))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -8 (/ b (* a c))) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -16 (/ b c)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* (pow c 2) (+ (* -1/2 a) (/ b (* a (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (* 2 (/ b (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (* 1/2 a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b 2)) c)) (+ (/ (* a (pow b 2)) c) (pow a 2))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b 2)) c)) (+ (/ b (pow c 2)) (+ (/ (* a (pow b 2)) c) (pow a 2)))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b 2)) c)) (pow a 2)))","(* (pow c 2) (+ (* -1/2 a) (* -1/2 (/ (+ (* -1 (pow b 2)) (pow b 2)) c))))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (+ (* -1/2 a) (* -1/2 (/ (+ (* -1 (pow b 2)) (pow b 2)) c)))))","(* (pow c 2) (- (* -1 (/ (+ (* -1 (* a (pow b 2))) (* a (pow b 2))) c)) (pow a 2)))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (+ (* -1 (/ (* a (pow b 2)) c)) (+ (/ (* a (pow b 2)) c) (pow a 2)))))","(* c (+ (* a (pow b 2)) (/ b c)))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 8 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 16 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -16 b) (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b 2))) (* a (pow b 2))) c)) (pow a 2)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b 2))) (+ (* -1 (/ b c)) (* a (pow b 2)))) c)) (pow a 2)))","(* (pow c 2) (+ (* -1/2 a) (* 1/2 (/ (+ (* -1 (pow b 2)) (pow b 2)) c))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1/2 (+ (* -1 (pow b 2)) (pow b 2))) (/ b (* a c))) c)) (* -1/2 a)))","(* (pow c 2) (- (+ (* -1 (/ (* a (pow b 2)) c)) (/ (* a (pow b 2)) c)) (pow a 2)))","(* (pow c 2) (- (* -1 (/ (- (* 2 (/ b c)) (+ (* -1 (* a (pow b 2))) (* a (pow b 2)))) c)) (pow a 2)))","(* -1 (* c (+ (* -1 (* a (pow b 2))) (* -1 (/ b c)))))"]],"memory":[[3209008,11098112]],"method":["egg-herbie"],"outputs":[[]],"time":138.924072265625,"type":"simplify"},{"count":[[21,315]],"inputs":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c))))","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(neg.f64 a)","(*.f64 #s(literal 2 binary64) a)","(fma.f64 (*.f64 a c) (*.f64 b b) b)"]],"memory":[[2608336,18673376]],"outputs":[["#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal -16 binary64)","#s(literal 2 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal -4096 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)"]],"time":353.35205078125,"type":"rewrite"},{"compiler":[[270,95]],"memory":[[-6507024,2649520]],"time":6.260009765625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b b) b) b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.08532652866249,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",43.51160834764549,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",40.345697986901015,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","fresh",54.74165869201227,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","next",54.70161340925562,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (-.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",55.54569629723345,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","done",54.08433253274773,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",46.0641890694066,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",29.652450954656487,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","next",43.00354838618027,"binary64"],["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","next",57.020742607234496,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",43.269937441412374,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","fresh",61.55246626988727,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","next",61.51056069722519,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","done",62.02382312723264,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","done",46.81399847701492,"binary64"],["(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))) (/.f64 (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))))","fresh",63.006728023151204,"binary64"],["(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","fresh",62.18742183741245,"binary64"]],"compiler":[[22,15],[18,14],[18,15],[10,11],[10,11],[68,23],[28,16],[18,12],[17,14],[16,13],[15,11],[16,13],[8,9],[8,9],[15,11],[16,12],[121,28],[75,19],[22,15],[18,14],[10,11],[10,11],[68,23],[18,12],[16,13],[15,11],[8,9],[8,9],[121,28],[75,19]],"count":[[46,18]],"kept":[{"done":[1,1],"fresh":[10,8],"new":[30,4],"picked":[5,5]}],"memory":[[1881152,10184592]],"min-error":[[23.14571376120762,"binary64"]],"time":17.996826171875,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 1/8 binary64)))","b","(sqrt.f64 #s(literal 1/8 binary64))","#s(literal 1/8 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64)))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 #s(literal 1/8 binary64))","#s(literal 1/8 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","b","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal 4 binary64))","b","#s(literal 4 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(*.f64 b #s(literal 4 binary64))","cost-diff",0],["(-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(*.f64 (neg.f64 a) c)","cost-diff",0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","cost-diff",0],["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","cost-diff",4],["(sqrt.f64 #s(literal 1/8 binary64))","cost-diff",0],["(*.f64 b #s(literal -16 binary64))","cost-diff",0],["(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64)))","cost-diff",0],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(*.f64 #s(literal 2 binary64) a)","cost-diff",0],["(sqrt.f64 #s(literal 1/8 binary64))","cost-diff",0],["(-.f64 b (sqrt.f64 #s(literal 1/8 binary64)))","cost-diff",0],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","cost-diff",1]],"memory":[[-3263776,13141936]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 1/8 binary64)))","b","(sqrt.f64 #s(literal 1/8 binary64))","#s(literal 1/8 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64)))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 #s(literal 1/8 binary64))","#s(literal 1/8 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(*.f64 (*.f64 a a) (*.f64 c c))","b","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))))","(*.f64 b #s(literal 4 binary64))","b","#s(literal 4 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"time":370.10595703125,"type":"simplify"},{"compiler":[[242,35]],"locations":[["(-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",0.08984375],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.20312500000000003],["(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.21484375],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.050340608307902],["(neg.f64 a)","accuracy",0.0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","accuracy",0.10546875],["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","accuracy",8.067918851903178],["(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","accuracy",17.63972728205685],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(sqrt.f64 #s(literal 1/8 binary64))","accuracy",0.0],["(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64)))","accuracy",0.01171875],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.16015625],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(sqrt.f64 #s(literal 1/8 binary64))","accuracy",0.0],["(-.f64 b (sqrt.f64 #s(literal 1/8 binary64)))","accuracy",0.01171875],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.15234375],["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","accuracy",0.21093750000000003],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.9876593182587565],["(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","accuracy",15.759236474705713],["(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","accuracy",20.06139992528445]],"memory":[[4628080,53160896]],"mixsample":[[9.794677734375,"adjust",800],[14.218994140625,"ival-div",0],[0.01318359375,"ival-add",4800],[0.151123046875,"ival-mult",1200],[0.201904296875,"adjust",4000],[0.108154296875,"ival-assert",0],[0.01318359375,"ival-sqrt",4800],[0.39794921875,"ival-sqrt",1200],[11.177978515625,"ival-sub",0],[7.2744140625,"ival-sqrt",0],[0.361572265625,"ival-sub",400],[3.828369140625,"ival-add",0],[0.433837890625,"ival-mult",800],[0.18505859375,"ival-sub",800],[0.11474609375,"ival-mult",1600],[0.46240234375,"ival-add",400],[1.257080078125,"adjust",2800],[0.22900390625,"ival-add",2400],[0.035888671875,"ival-sub",4000],[0.608154296875,"ival-sqrt",400],[0.396484375,"ival-add",1200],[0.27197265625,"ival-sqrt",2000],[0.095947265625,"ival-sub",2000],[0.393798828125,"ival-sqrt",800],[0.014892578125,"ival-mult",2000],[0.10009765625,"ival-sqrt",4000],[0.027099609375,"ival-sqrt",4400],[0.0478515625,"ival-add",4000],[0.0322265625,"ival-add",3600],[6.004150390625,"adjust",2000],[0.441162109375,"ival-add",1600],[0.62451171875,"ival-mult",400],[13.2265625,"ival-mult",0],[0.20263671875,"ival-sqrt",1600],[0.150146484375,"ival-add",2000],[0.005859375,"ival-div",800],[0.22509765625,"ival-sqrt",2400],[0.237060546875,"ival-true",0],[0.33642578125,"ival-add",800],[0.481201171875,"exact",0],[2.228759765625,"ival-neg",0],[0.02783203125,"ival-add",4400]],"outcomes":[[27.38427734375,1,"valid",61],[53.246826171875,2,"valid",89],[3.842041015625,4,"valid",4],[16.39990234375,3,"valid",23],[19.606689453125,0,"valid",79]],"time":154.4501953125,"type":"localize"},{"count":[[22,224]],"inputs":[["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(neg.f64 b)","(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 1/8 binary64)))","(sqrt.f64 #s(literal 1/8 binary64))","(*.f64 #s(literal 2 binary64) a)","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64)))","(*.f64 b #s(literal -16 binary64))","(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal 4 binary64))","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(neg.f64 a)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[5693216,21148048]],"outputs":[["(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1 (/ b a))","(/ (+ (* -1 b) (* 1/4 (/ (* a c) b))) a)","(/ (+ (* -1 b) (* a (+ (* 1/16 (/ (* a (pow c 2)) (pow b 3))) (* 1/4 (/ c b))))) a)","(/ (+ (* -1 b) (* a (+ (* 1/4 (/ c b)) (* a (+ (* 1/32 (/ (* a (pow c 3)) (pow b 5))) (* 1/16 (/ (pow c 2) (pow b 3)))))))) a)","(* -2 b)","(- (* 1/2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b 3))) (* -1/2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b 5))) (* -1/8 (/ (pow c 2) (pow b 3))))) (* -1/2 (/ c b)))) (* 2 b))","(* 1/2 (/ (- b (sqrt 1/8)) a))","(* 2 a)","(* 1/2 (/ (- (* -16 b) (sqrt 1/8)) a))","(* (pow a 2) (pow c 2))","(* 1/2 (* a (pow c 2)))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* a c))","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (- (* 4 b) b) a))","(/ (+ (* 1/2 (- (* 4 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* 4 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* 4 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(- (* 4 b) b)","(- (+ (* 2 (/ (* a c) b)) (* 4 b)) b)","(- (+ (* 4 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* 4 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(+ b (* -1/2 (/ (* a c) b)))","(+ b (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5))))))))","(* -1 a)","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b a)))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 2 (/ b a)))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* 4 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ b a))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 4 (/ b a))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(* -1 (* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* 2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* -4 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 4 b)) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 4 b)) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -1)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -1)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b)","(* -1/2 (/ (sqrt 1/8) a))","(+ (* -1/2 (/ (sqrt 1/8) a)) (* 1/2 (/ b a)))","(* -1 (sqrt 1/8))","(- b (sqrt 1/8))","(+ (* -8 (/ b a)) (* -1/2 (/ (sqrt 1/8) a)))","(- (* -16 b) (sqrt 1/8))","(* -16 b)","(- (pow b 2) (* 4 (* a c)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 2 (/ 1 a)))))","(- (* 4 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 4 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 4 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(* 4 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* b (- (* 1/4 (/ c (pow b 2))) (/ 1 a)))","(* b (- (+ (* 1/16 (/ (* a (pow c 2)) (pow b 4))) (* 1/4 (/ c (pow b 2)))) (/ 1 a)))","(* b (- (+ (* 1/32 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 1/16 (/ (* a (pow c 2)) (pow b 4))) (* 1/4 (/ c (pow b 2))))) (/ 1 a)))","(* b (- (* 1/2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -1/2 (/ (* a c) (pow b 2))))))","(* b (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* 1/2 (/ b a))","(* b (+ (* -1/2 (/ (sqrt 1/8) (* a b))) (* 1/2 (/ 1 a))))","(* b (+ 1 (* -1 (/ (sqrt 1/8) b))))","(* -8 (/ b a))","(* b (- (* -1/2 (/ (sqrt 1/8) (* a b))) (* 8 (/ 1 a))))","(* b (- (* -1 (/ (sqrt 1/8) b)) 16))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* 3/2 (/ b a))","(* b (+ (* 3/2 (/ 1 a)) (/ c (pow b 2))))","(* b (+ (* 3/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))","(* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 3/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* 3 b)","(* b (+ 3 (* 2 (/ (* a c) (pow b 2)))))","(* b (- (+ 3 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2)))))","(* b (- (+ 3 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (* -1/2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1/4 (/ c b))","(* -1 (/ (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (* 1/4 c)) b))","(* -1 (/ (+ (* 1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (* 1/4 c))) b))","(* -1 (/ (+ (* 1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (+ (* 1/4 c) (* 1/4 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b))","(* -1/2 (/ (* a c) b))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (* a c))) b))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4)))))) b))","(* -1 (* b (- (* 1/2 (/ (sqrt 1/8) (* a b))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (/ (sqrt 1/8) b) 1)))","(* -1 (* b (+ (* 1/2 (/ (sqrt 1/8) (* a b))) (* 8 (/ 1 a)))))","(* -1 (* b (+ 16 (/ (sqrt 1/8) b))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* 5/2 (/ b a))","(* -1 (* b (- (/ c (pow b 2)) (* 5/2 (/ 1 a)))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 5/2 (/ 1 a)))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 5/2 (/ 1 a)))))","(* 5 b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 5)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 5 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 5 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (* 1/4 (/ c b)))","(+ (* -1 (/ b a)) (* c (+ (* 1/16 (/ (* a c) (pow b 3))) (* 1/4 (/ 1 b)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 1/32 (/ (* (pow a 2) c) (pow b 5))) (* 1/16 (/ a (pow b 3))))) (* 1/4 (/ 1 b)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b 3))) (* -1/2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b 5))) (* -1/8 (/ (pow a 2) (pow b 3))))) (* -1/2 (/ a b)))) (* 2 b))","(+ (* 1/2 (/ (- (* 4 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* 4 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* 4 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* 4 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* 4 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(+ b (* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b c)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 2 (/ b (* a c)))))))","(* c (- (* 4 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ b c))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 4 (/ b c))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))","(* -1 (* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -2 (/ b (* a c))) (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 2 (/ b a))) c)))))","(* -1 (* c (- (* -4 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 4 b)) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) (* 4 b)) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[4.037109375,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[4.050048828125,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[2.961181640625,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[6.294921875,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[5.173095703125,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[5.10498046875,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[6.74609375,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[6.324951171875,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[5.033935546875,"((+ (* (neg a) c) (* b b)) (/ (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (neg b) (/ (- b (sqrt 1/8)) (* 2 a)) (- b (sqrt 1/8)) (sqrt 1/8) (* 2 a) (/ (- (* b -16) (sqrt 1/8)) (* 2 a)) (- (* b -16) (sqrt 1/8)) (* b -16) (- b (+ (* (* (neg a) c) (* a c)) b)) (/ (- b (+ (* (* (neg a) c) (* a c)) b)) (* 2 a)) (+ (* (* (neg a) c) (* a c)) b) (* (neg a) c) (- (* b b) (* 4 (* a c))) (/ (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b 4) (sqrt (- (* b b) (* 4 (* a c))))) (* b 4) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":49.884033203125,"type":"series"},{"count":[[224,0]],"inputs":[["(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1 (/ b a))","(/ (+ (* -1 b) (* 1/4 (/ (* a c) b))) a)","(/ (+ (* -1 b) (* a (+ (* 1/16 (/ (* a (pow c 2)) (pow b 3))) (* 1/4 (/ c b))))) a)","(/ (+ (* -1 b) (* a (+ (* 1/4 (/ c b)) (* a (+ (* 1/32 (/ (* a (pow c 3)) (pow b 5))) (* 1/16 (/ (pow c 2) (pow b 3)))))))) a)","(* -2 b)","(- (* 1/2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b 3))) (* -1/2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b 5))) (* -1/8 (/ (pow c 2) (pow b 3))))) (* -1/2 (/ c b)))) (* 2 b))","(* 1/2 (/ (- b (sqrt 1/8)) a))","(* 2 a)","(* 1/2 (/ (- (* -16 b) (sqrt 1/8)) a))","(* (pow a 2) (pow c 2))","(* 1/2 (* a (pow c 2)))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* a c))","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (- (* 4 b) b) a))","(/ (+ (* 1/2 (- (* 4 b) b)) (/ (* a c) b)) a)","(/ (+ (* 1/2 (- (* 4 b) b)) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* 1/2 (- (* 4 b) b)) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(- (* 4 b) b)","(- (+ (* 2 (/ (* a c) b)) (* 4 b)) b)","(- (+ (* 4 b) (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))) b)","(- (+ (* 4 b) (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))) b)","(+ b (* -1/2 (/ (* a c) b)))","(+ b (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5))))))))","(* -1 a)","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b a)))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 2 (/ b a)))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* 4 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ b a))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 4 (/ b a))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(* -1 (* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* 2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* -4 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 4 b)) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 4 b)) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -1)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -1)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b)","(* -1/2 (/ (sqrt 1/8) a))","(+ (* -1/2 (/ (sqrt 1/8) a)) (* 1/2 (/ b a)))","(* -1 (sqrt 1/8))","(- b (sqrt 1/8))","(+ (* -8 (/ b a)) (* -1/2 (/ (sqrt 1/8) a)))","(- (* -16 b) (sqrt 1/8))","(* -16 b)","(- (pow b 2) (* 4 (* a c)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 2 (/ 1 a)))))","(- (* 4 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 4 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 4 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(* 4 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* b (- (* 1/4 (/ c (pow b 2))) (/ 1 a)))","(* b (- (+ (* 1/16 (/ (* a (pow c 2)) (pow b 4))) (* 1/4 (/ c (pow b 2)))) (/ 1 a)))","(* b (- (+ (* 1/32 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 1/16 (/ (* a (pow c 2)) (pow b 4))) (* 1/4 (/ c (pow b 2))))) (/ 1 a)))","(* b (- (* 1/2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -1/2 (/ (* a c) (pow b 2))))))","(* b (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* 1/2 (/ b a))","(* b (+ (* -1/2 (/ (sqrt 1/8) (* a b))) (* 1/2 (/ 1 a))))","(* b (+ 1 (* -1 (/ (sqrt 1/8) b))))","(* -8 (/ b a))","(* b (- (* -1/2 (/ (sqrt 1/8) (* a b))) (* 8 (/ 1 a))))","(* b (- (* -1 (/ (sqrt 1/8) b)) 16))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* 3/2 (/ b a))","(* b (+ (* 3/2 (/ 1 a)) (/ c (pow b 2))))","(* b (+ (* 3/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))))","(* b (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 3/2 (/ 1 a)) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))))))","(* 3 b)","(* b (+ 3 (* 2 (/ (* a c) (pow b 2)))))","(* b (- (+ 3 (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -2 (/ (* a c) (pow b 2)))))","(* b (- (+ 3 (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (* -1/2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1/4 (/ c b))","(* -1 (/ (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (* 1/4 c)) b))","(* -1 (/ (+ (* 1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (* 1/4 c))) b))","(* -1 (/ (+ (* 1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (+ (* 1/4 c) (* 1/4 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b))","(* -1/2 (/ (* a c) b))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (* a c))) b))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4)))))) b))","(* -1 (* b (- (* 1/2 (/ (sqrt 1/8) (* a b))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (/ (sqrt 1/8) b) 1)))","(* -1 (* b (+ (* 1/2 (/ (sqrt 1/8) (* a b))) (* 8 (/ 1 a)))))","(* -1 (* b (+ 16 (/ (sqrt 1/8) b))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* 5/2 (/ b a))","(* -1 (* b (- (/ c (pow b 2)) (* 5/2 (/ 1 a)))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 5/2 (/ 1 a)))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 5/2 (/ 1 a)))))","(* 5 b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 5)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 5 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 5 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (* 1/4 (/ c b)))","(+ (* -1 (/ b a)) (* c (+ (* 1/16 (/ (* a c) (pow b 3))) (* 1/4 (/ 1 b)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 1/32 (/ (* (pow a 2) c) (pow b 5))) (* 1/16 (/ a (pow b 3))))) (* 1/4 (/ 1 b)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b 3))) (* -1/2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b 5))) (* -1/8 (/ (pow a 2) (pow b 3))))) (* -1/2 (/ a b)))) (* 2 b))","(+ (* 1/2 (/ (- (* 4 b) b) a)) (/ c b))","(+ (* 1/2 (/ (- (* 4 b) b) a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* 1/2 (/ (- (* 4 b) b) a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (+ (* 4 b) (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))) b)","(- (+ (* 4 b) (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))) b)","(+ b (* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b c)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 2 (/ b (* a c)))))))","(* c (- (* 4 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ b c))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 4 (/ b c))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))","(* -1 (* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -2 (/ b (* a c))) (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 2 (/ b a))) c)))))","(* -1 (* c (- (* -4 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 4 b)) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) (* 4 b)) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[-6600320,12343120]],"method":["egg-herbie"],"outputs":[[]],"time":211.85693359375,"type":"simplify"},{"count":[[22,330]],"inputs":[["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(neg.f64 b)","(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 1/8 binary64)))","(sqrt.f64 #s(literal 1/8 binary64))","(*.f64 #s(literal 2 binary64) a)","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64)))","(*.f64 b #s(literal -16 binary64))","(-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal 4 binary64))","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(neg.f64 a)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[4064896,20176624]],"outputs":[["(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))","#s(literal 2 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)","#s(literal 4 binary64)","#s(literal 9 binary64)","#s(literal 18 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 1/4 binary64)","#s(literal -64 binary64)","#s(literal 9/2 binary64)","(neg.f64 c)","(neg.f64 (neg.f64 c))","(+.f64 (neg.f64 c) #s(literal 2 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(+.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 #s(literal 2 binary64) c)","(-.f64 #s(literal 2 binary64) (neg.f64 c))","(-.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) c)","(*.f64 c #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 c))","(*.f64 (neg.f64 c) #s(literal 2 binary64))","(*.f64 (neg.f64 c) c)","(*.f64 (neg.f64 c) (neg.f64 c))"]],"time":371.1689453125,"type":"rewrite"},{"compiler":[[402,115]],"memory":[[-6078320,2889792]],"time":5.27197265625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b b) b) b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.08532652866249,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",43.51160834764549,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",40.345697986901015,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","next",54.74165869201227,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","done",54.70161340925562,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","next",46.0641890694066,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",29.652450954656487,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",54.73992987687827,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","fresh",56.78556253269949,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","done",43.00354838618027,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","next",60.703496537806465,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",54.70930040266761,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","fresh",57.6526444431,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",57.6521857933083,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","fresh",60.70450212347547,"binary64"],["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","done",57.020742607234496,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",43.269937441412374,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","next",61.55246626988727,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","done",61.51056069722519,"binary64"],["(/.f64 (-.f64 #s(literal -16 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",53.94092844924539,"binary64"],["(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","next",53.95433112292443,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","done",62.02382312723264,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","done",46.81399847701492,"binary64"],["(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))) (/.f64 (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))))","fresh",63.006728023151204,"binary64"],["(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","fresh",62.18742183741245,"binary64"]],"compiler":[[22,15],[18,14],[18,15],[10,11],[10,11],[18,12],[17,14],[13,11],[11,10],[16,13],[13,11],[13,11],[11,10],[11,11],[10,10],[15,11],[16,13],[8,9],[8,9],[15,13],[15,13],[15,11],[16,12],[121,28],[75,19],[22,15],[10,11],[18,12],[13,11],[11,10],[13,11],[13,11],[11,10],[11,11],[10,10],[8,9],[15,13],[15,13],[121,28],[75,19]],"count":[[48,25]],"kept":[{"done":[6,5],"fresh":[7,6],"new":[30,9],"picked":[5,5]}],"memory":[[2604896,10902720]],"min-error":[[23.03440085384468,"binary64"]],"time":19.89599609375,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b))","(neg.f64 b)","b","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 65536 binary64)))","b","(sqrt.f64 #s(literal 65536 binary64))","#s(literal 65536 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64)))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 #s(literal 65536 binary64))","#s(literal 65536 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c))))","(neg.f64 b)","b","(sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))","(+.f64 (neg.f64 c) (neg.f64 c))","(neg.f64 c)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","#s(literal -64 binary64)","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","cost-diff",0],["(-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","cost-diff",0],["(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","cost-diff",1],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (neg.f64 c) (neg.f64 c))","cost-diff",1],["(sqrt.f64 #s(literal 65536 binary64))","cost-diff",0],["(*.f64 b #s(literal -16 binary64))","cost-diff",0],["(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64)))","cost-diff",0],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(*.f64 #s(literal 2 binary64) a)","cost-diff",0],["(sqrt.f64 #s(literal 65536 binary64))","cost-diff",0],["(-.f64 b (sqrt.f64 #s(literal 65536 binary64)))","cost-diff",0],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","cost-diff",1],["(*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))","cost-diff",2]],"memory":[[4068608,12345728]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (fma.f64 (*.f64 a a) (*.f64 c c) b)) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b))","(-.f64 (neg.f64 b) (fma.f64 (*.f64 a a) (*.f64 c c) b))","(neg.f64 b)","b","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(fma.f64 (*.f64 a a) (*.f64 c c) b)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))","(*.f64 (*.f64 a a) (*.f64 c c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 65536 binary64)))","b","(sqrt.f64 #s(literal 65536 binary64))","#s(literal 65536 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64)))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 #s(literal 65536 binary64))","#s(literal 65536 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) c))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c))))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) c)))","(neg.f64 b)","b","(sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))","(sqrt.f64 (-.f64 (neg.f64 c) c))","(+.f64 (neg.f64 c) (neg.f64 c))","(-.f64 (neg.f64 c) c)","(neg.f64 c)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(-.f64 #s(literal -64 binary64) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b))))","#s(literal -64 binary64)","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"time":387.5400390625,"type":"simplify"},{"compiler":[[223,33]],"locations":[["(-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","accuracy",0.00390625],["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","accuracy",0.0078125],["(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.0234375],["(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","accuracy",6.16942168113752],["(neg.f64 c)","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c))))","accuracy",0.0078125],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.05859375],["(*.f64 b #s(literal -16 binary64))","accuracy",0.0],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(sqrt.f64 #s(literal 65536 binary64))","accuracy",0.0],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.00390625],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.0],["(-.f64 b (sqrt.f64 #s(literal 65536 binary64)))","accuracy",0.0],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(sqrt.f64 #s(literal 65536 binary64))","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))","accuracy",0.140625],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","accuracy",1.9051508628960754]],"memory":[[1892384,34331616]],"mixsample":[[0.06591796875,"adjust",800],[8.86376953125,"ival-div",0],[3.69091796875,"ival-add",0],[8.48046875,"ival-mult",0],[0.142333984375,"ival-assert",0],[0.005126953125,"ival-add",400],[7.05859375,"ival-sub",0],[0.297607421875,"ival-true",0],[0.006103515625,"ival-sub",400],[6.094482421875,"ival-sqrt",0],[0.495361328125,"exact",0],[0.015869140625,"ival-sqrt",400],[3.3994140625,"ival-neg",0]],"outcomes":[[0.427978515625,1,"valid",1],[35.746337890625,0,"invalid",146],[27.35888671875,0,"valid",109]],"time":91.943115234375,"type":"localize"},{"count":[[21,158]],"inputs":[["(*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 65536 binary64)))","(sqrt.f64 #s(literal 65536 binary64))","(*.f64 #s(literal 2 binary64) a)","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64)))","(*.f64 b #s(literal -16 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c))))","(neg.f64 b)","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(neg.f64 a)","(neg.f64 c)"]],"memory":[[-7493152,17361440]],"outputs":[["(* (pow a 2) (pow c 2))","b","(+ b (* (pow a 2) (pow c 2)))","(* -1 (/ b a))","(/ (+ (* -1 b) (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* -2 b)","(- (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","(* 1/2 (/ (- b 256) a))","(* 2 a)","(* 1/2 (/ (- (* -16 b) 256) a))","(* -1/2 (/ (+ b (* (sqrt c) (sqrt -2))) a))","(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1/2 (/ (+ 64 b) a))","(/ (+ (* -1/2 (+ 64 b)) (* 1/4 (/ (* a c) b))) a)","(/ (+ (* -1/2 (+ 64 b)) (* a (+ (* 1/16 (/ (* a (pow c 2)) (pow b 3))) (* 1/4 (/ c b))))) a)","(/ (+ (* -1/2 (+ 64 b)) (* a (+ (* 1/4 (/ c b)) (* a (+ (* 1/32 (/ (* a (pow c 3)) (pow b 5))) (* 1/16 (/ (pow c 2) (pow b 3)))))))) a)","(* -1 (+ 64 b))","(- (* 1/2 (/ (* a c) b)) (+ 64 b))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b 3))) (* -1/2 (/ c b)))) (+ 64 b))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b 5))) (* -1/8 (/ (pow c 2) (pow b 3))))) (* -1/2 (/ c b)))) (+ 64 b))","(+ b (* -1/2 (/ (* a c) b)))","(+ b (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5))))))))","(* -1 a)","(* (pow a 2) (+ (/ b (pow a 2)) (pow c 2)))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ b (pow a 2))) (* -1/2 (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (pow c 2)))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -1)))","(- (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* 32 (/ 1 a)))","(- (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))) (* 32 (/ 1 a)))","(- (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))))) (* 32 (/ 1 a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (* 64 (/ 1 a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (* 64 (/ 1 a)))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (* 64 (/ 1 a))))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/2 (pow c 2)) (/ b (pow a 2)))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -1)))","(- (* 1/2 (* (sqrt (/ c a)) (sqrt -1))) (* 32 (/ 1 a)))","(+ (* -1 (/ (+ 32 (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ 32 (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(* -1 (* a (- (* 64 (/ 1 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) 64) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) 64) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(+ (* -1 (/ b a)) (* -1/2 (* a (pow c 2))))","(- (* -2 b) (* (pow a 2) (pow c 2)))","(/ -128 a)","(- (* 1/2 (/ b a)) (* 128 (/ 1 a)))","-256","(- b 256)","(- (* -8 (/ b a)) (* 128 (/ 1 a)))","(- (* -16 b) 256)","(* -16 b)","(* -1/2 (* (/ (sqrt -2) a) (sqrt c)))","(+ (* -1/2 (* (/ (sqrt -2) a) (sqrt c))) (* -1/2 (/ b a)))","(* -1 (* (sqrt c) (sqrt -2)))","(- (* -1 b) (* (sqrt c) (sqrt -2)))","(* -1 b)","(* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a))","(+ (* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))))","(+ (* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a)) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))))))","(+ (* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a)) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(* -1 (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(* b (+ 1 (/ (* (pow a 2) (pow c 2)) b)))","(* b (- (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 2))","(* 1/2 (/ b a))","(* b (- (* 1/2 (/ 1 a)) (* 128 (/ 1 (* a b)))))","(* b (- 1 (* 256 (/ 1 b))))","(* -8 (/ b a))","(* -1 (* b (+ (* 8 (/ 1 a)) (* 128 (/ 1 (* a b))))))","(* -1 (* b (+ 16 (* 256 (/ 1 b)))))","(* -1/2 (/ b a))","(* b (- (* -1/2 (* (/ (sqrt -2) (* a b)) (sqrt c))) (* 1/2 (/ 1 a))))","(* b (- (* -1 (* (/ (sqrt -2) b) (sqrt c))) 1))","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* -1 (* b (+ (* 1/2 (/ 1 a)) (* 32 (/ 1 (* a b))))))","(* b (- (* 1/4 (/ c (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 32 (* a b)))))","(* b (- (+ (* 1/16 (/ (* a (pow c 2)) (pow b 4))) (* 1/4 (/ c (pow b 2)))) (+ (* 1/2 (/ 1 a)) (/ 32 (* a b)))))","(* -1 (* b (+ 1 (* 64 (/ 1 b)))))","(* b (- (* 1/2 (/ (* a c) (pow b 2))) (+ 1 (* 64 (/ 1 b)))))","(* b (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* 64 (/ 1 b))))))","(* b (+ 1 (* -1/2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1)))","(* -1 (* b (+ (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (+ 2 (/ (* (pow a 2) (pow c 2)) b))))","(* -1 (* b (- (* 128 (/ 1 (* a b))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* 256 (/ 1 b)) 1)))","(* -1 (* b (+ (* 1/2 (* (/ (sqrt -2) (* a b)) (sqrt c))) (* 1/2 (/ 1 a)))))","(* -1 (* b (+ 1 (* (/ (sqrt -2) b) (sqrt c)))))","(* -1 (* b (- (* 32 (/ 1 (* a b))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* -1 (/ (- (* -1/4 (/ c b)) (* 32 (/ 1 a))) b)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* -1 (/ (- (* -1 (/ (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (* 1/4 c)) b)) (* 32 (/ 1 a))) b)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* 64 (/ 1 b)) 1)))","(* -1 (* b (- (* -1 (/ (- (* -1/2 (/ (* a c) b)) 64) b)) 1)))","(* -1 (* b (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (* a c))) b)) 64) b)) 1)))","(* -1 (* b (+ 1 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -2 c)","(* -1 (+ b (* (sqrt c) (sqrt -2))))","(+ (* -1/2 (/ (+ 64 b) a)) (* 1/4 (/ c b)))","(+ (* -1/2 (/ (+ 64 b) a)) (* c (+ (* 1/16 (/ (* a c) (pow b 3))) (* 1/4 (/ 1 b)))))","(+ (* -1/2 (/ (+ 64 b) a)) (* c (+ (* c (+ (* 1/32 (/ (* (pow a 2) c) (pow b 5))) (* 1/16 (/ a (pow b 3))))) (* 1/4 (/ 1 b)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b 3))) (* -1/2 (/ a b)))) (+ 64 b))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b 5))) (* -1/8 (/ (pow a 2) (pow b 3))))) (* -1/2 (/ a b)))) (+ 64 b))","(+ b (* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5))))))))","(* -1 c)","(* (pow c 2) (+ (/ b (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (* -1/2 a)))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (pow a 2)))","(* c (+ (* -1/2 (* (/ (sqrt -2) a) (sqrt (/ 1 c)))) (* -1/2 (/ b (* a c)))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ 1 c)) (sqrt -2))))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 32 (/ 1 (* a c)))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1))))) (/ 32 (* a c))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))))) (/ 32 (* a c))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (* 64 (/ 1 c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (* 64 (/ 1 c)))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (* 64 (/ 1 c))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* 1/2 (* (/ (* (sqrt -1) (sqrt 2)) a) (sqrt c)))","(* -1 (* c (+ (* -1/2 (* (/ (* (sqrt -1) (sqrt 2)) a) (sqrt (/ 1 c)))) (* 1/2 (/ b (* a c))))))","(* (sqrt c) (* (sqrt -1) (sqrt 2)))","(* -1 (* c (- (/ b c) (* (sqrt (/ 1 c)) (* (sqrt -1) (sqrt 2))))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))","(* -1 (* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 32 (/ 1 (* a c))))))","(* -1 (* c (+ (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 32 (/ 1 a))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 32 (/ 1 a))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (- (* 64 (/ 1 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) 64) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) 64) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))"]],"series":[[5.5810546875,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","c","-inf"],[4.40380859375,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","c","inf"],[3.531005859375,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","c","0"],[5.723876953125,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","b","-inf"],[6.727783203125,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","b","inf"],[4.10791015625,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","b","0"],[5.26806640625,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","a","-inf"],[5.07080078125,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","a","inf"],[20.64013671875,"((* (* (neg a) c) (* (neg a) c)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (* 2 a)) (- (neg b) (+ (* (* (neg a) c) (* (neg a) c)) b)) (/ (- b (sqrt 65536)) (* 2 a)) (- b (sqrt 65536)) (sqrt 65536) (* 2 a) (/ (- (* b -16) (sqrt 65536)) (* 2 a)) (- (* b -16) (sqrt 65536)) (* b -16) (+ (neg c) (neg c)) (/ (- (neg b) (sqrt (+ (neg c) (neg c)))) (* 2 a)) (- (neg b) (sqrt (+ (neg c) (neg c)))) (neg b) (+ (* (neg a) c) (* b b)) (/ (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (- -64 (sqrt (+ (* (neg a) c) (* b b)))) (sqrt (+ (* (neg a) c) (* b b))) (neg a) (neg c))","a","0"]],"time":66.949951171875,"type":"series"},{"count":[[158,0]],"inputs":[["(* (pow a 2) (pow c 2))","b","(+ b (* (pow a 2) (pow c 2)))","(* -1 (/ b a))","(/ (+ (* -1 b) (* -1/2 (* (pow a 2) (pow c 2)))) a)","(* -2 b)","(- (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","(* 1/2 (/ (- b 256) a))","(* 2 a)","(* 1/2 (/ (- (* -16 b) 256) a))","(* -1/2 (/ (+ b (* (sqrt c) (sqrt -2))) a))","(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1/2 (/ (+ 64 b) a))","(/ (+ (* -1/2 (+ 64 b)) (* 1/4 (/ (* a c) b))) a)","(/ (+ (* -1/2 (+ 64 b)) (* a (+ (* 1/16 (/ (* a (pow c 2)) (pow b 3))) (* 1/4 (/ c b))))) a)","(/ (+ (* -1/2 (+ 64 b)) (* a (+ (* 1/4 (/ c b)) (* a (+ (* 1/32 (/ (* a (pow c 3)) (pow b 5))) (* 1/16 (/ (pow c 2) (pow b 3)))))))) a)","(* -1 (+ 64 b))","(- (* 1/2 (/ (* a c) b)) (+ 64 b))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b 3))) (* -1/2 (/ c b)))) (+ 64 b))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b 5))) (* -1/8 (/ (pow c 2) (pow b 3))))) (* -1/2 (/ c b)))) (+ 64 b))","(+ b (* -1/2 (/ (* a c) b)))","(+ b (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5))))))))","(* -1 a)","(* (pow a 2) (+ (/ b (pow a 2)) (pow c 2)))","(* -1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ b (pow a 2))) (* -1/2 (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (pow c 2)))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* -1/2 (* (sqrt (/ c a)) (sqrt -1)))","(- (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* 32 (/ 1 a)))","(- (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))) (* 32 (/ 1 a)))","(- (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))))) (* 32 (/ 1 a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (* 64 (/ 1 a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (* 64 (/ 1 a)))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (* 64 (/ 1 a))))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/2 (pow c 2)) (/ b (pow a 2)))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -1)))","(- (* 1/2 (* (sqrt (/ c a)) (sqrt -1))) (* 32 (/ 1 a)))","(+ (* -1 (/ (+ 32 (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ 32 (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(* -1 (* a (- (* 64 (/ 1 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) 64) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) 64) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(+ (* -1 (/ b a)) (* -1/2 (* a (pow c 2))))","(- (* -2 b) (* (pow a 2) (pow c 2)))","(/ -128 a)","(- (* 1/2 (/ b a)) (* 128 (/ 1 a)))","-256","(- b 256)","(- (* -8 (/ b a)) (* 128 (/ 1 a)))","(- (* -16 b) 256)","(* -16 b)","(* -1/2 (* (/ (sqrt -2) a) (sqrt c)))","(+ (* -1/2 (* (/ (sqrt -2) a) (sqrt c))) (* -1/2 (/ b a)))","(* -1 (* (sqrt c) (sqrt -2)))","(- (* -1 b) (* (sqrt c) (sqrt -2)))","(* -1 b)","(* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a))","(+ (* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))))","(+ (* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a)) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))))))","(+ (* -1/2 (/ (+ 64 (* (sqrt (* a c)) (sqrt -1))) a)) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(* -1 (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (+ 64 (* (sqrt (* a c)) (sqrt -1))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(* b (+ 1 (/ (* (pow a 2) (pow c 2)) b)))","(* b (- (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 2))","(* 1/2 (/ b a))","(* b (- (* 1/2 (/ 1 a)) (* 128 (/ 1 (* a b)))))","(* b (- 1 (* 256 (/ 1 b))))","(* -8 (/ b a))","(* -1 (* b (+ (* 8 (/ 1 a)) (* 128 (/ 1 (* a b))))))","(* -1 (* b (+ 16 (* 256 (/ 1 b)))))","(* -1/2 (/ b a))","(* b (- (* -1/2 (* (/ (sqrt -2) (* a b)) (sqrt c))) (* 1/2 (/ 1 a))))","(* b (- (* -1 (* (/ (sqrt -2) b) (sqrt c))) 1))","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* -1 (* b (+ (* 1/2 (/ 1 a)) (* 32 (/ 1 (* a b))))))","(* b (- (* 1/4 (/ c (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 32 (* a b)))))","(* b (- (+ (* 1/16 (/ (* a (pow c 2)) (pow b 4))) (* 1/4 (/ c (pow b 2)))) (+ (* 1/2 (/ 1 a)) (/ 32 (* a b)))))","(* -1 (* b (+ 1 (* 64 (/ 1 b)))))","(* b (- (* 1/2 (/ (* a c) (pow b 2))) (+ 1 (* 64 (/ 1 b)))))","(* b (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* 64 (/ 1 b))))))","(* b (+ 1 (* -1/2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1)))","(* -1 (* b (+ (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (+ 2 (/ (* (pow a 2) (pow c 2)) b))))","(* -1 (* b (- (* 128 (/ 1 (* a b))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* 256 (/ 1 b)) 1)))","(* -1 (* b (+ (* 1/2 (* (/ (sqrt -2) (* a b)) (sqrt c))) (* 1/2 (/ 1 a)))))","(* -1 (* b (+ 1 (* (/ (sqrt -2) b) (sqrt c)))))","(* -1 (* b (- (* 32 (/ 1 (* a b))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* -1 (/ (- (* -1/4 (/ c b)) (* 32 (/ 1 a))) b)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* -1 (/ (- (* -1 (/ (+ (* 1/16 (/ (* a (pow c 2)) (pow b 2))) (* 1/4 c)) b)) (* 32 (/ 1 a))) b)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (* 64 (/ 1 b)) 1)))","(* -1 (* b (- (* -1 (/ (- (* -1/2 (/ (* a c) b)) 64) b)) 1)))","(* -1 (* b (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (* a c))) b)) 64) b)) 1)))","(* -1 (* b (+ 1 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -2 c)","(* -1 (+ b (* (sqrt c) (sqrt -2))))","(+ (* -1/2 (/ (+ 64 b) a)) (* 1/4 (/ c b)))","(+ (* -1/2 (/ (+ 64 b) a)) (* c (+ (* 1/16 (/ (* a c) (pow b 3))) (* 1/4 (/ 1 b)))))","(+ (* -1/2 (/ (+ 64 b) a)) (* c (+ (* c (+ (* 1/32 (/ (* (pow a 2) c) (pow b 5))) (* 1/16 (/ a (pow b 3))))) (* 1/4 (/ 1 b)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b 3))) (* -1/2 (/ a b)))) (+ 64 b))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b 5))) (* -1/8 (/ (pow a 2) (pow b 3))))) (* -1/2 (/ a b)))) (+ 64 b))","(+ b (* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5))))))))","(* -1 c)","(* (pow c 2) (+ (/ b (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (* -1/2 a)))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (pow a 2)))","(* c (+ (* -1/2 (* (/ (sqrt -2) a) (sqrt (/ 1 c)))) (* -1/2 (/ b (* a c)))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ 1 c)) (sqrt -2))))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 32 (/ 1 (* a c)))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1))))) (/ 32 (* a c))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))))) (/ 32 (* a c))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (* 64 (/ 1 c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (* 64 (/ 1 c)))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (* 64 (/ 1 c))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* 1/2 (* (/ (* (sqrt -1) (sqrt 2)) a) (sqrt c)))","(* -1 (* c (+ (* -1/2 (* (/ (* (sqrt -1) (sqrt 2)) a) (sqrt (/ 1 c)))) (* 1/2 (/ b (* a c))))))","(* (sqrt c) (* (sqrt -1) (sqrt 2)))","(* -1 (* c (- (/ b c) (* (sqrt (/ 1 c)) (* (sqrt -1) (sqrt 2))))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))","(* -1 (* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 32 (/ 1 (* a c))))))","(* -1 (* c (+ (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 32 (/ 1 a))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 32 (/ 1 a))) c)) (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (- (* 64 (/ 1 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) 64) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) 64) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))"]],"memory":[[2917264,11071408]],"method":["egg-herbie"],"outputs":[[]],"time":138.97802734375,"type":"simplify"},{"count":[[21,0]],"inputs":[["(*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 #s(literal 65536 binary64)))","(sqrt.f64 #s(literal 65536 binary64))","(*.f64 #s(literal 2 binary64) a)","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64)))","(*.f64 b #s(literal -16 binary64))","(+.f64 (neg.f64 c) (neg.f64 c))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c))))","(neg.f64 b)","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(neg.f64 a)","(neg.f64 c)"]],"memory":[[4641440,95840976]],"outputs":[[]],"time":59908.90478515625,"type":"rewrite"},{"compiler":[[0,3]],"memory":[[77840,77840]],"time":0.26123046875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b b) b) b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.08532652866249,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",43.51160834764549,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",40.345697986901015,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","done",54.74165869201227,"binary64"],["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","done",54.70161340925562,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","done",46.0641890694066,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",29.652450954656487,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",54.73992987687827,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","fresh",56.78556253269949,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","done",43.00354838618027,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","done",60.703496537806465,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",54.70930040266761,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","fresh",57.6526444431,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","fresh",57.6521857933083,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","fresh",60.70450212347547,"binary64"],["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","done",57.020742607234496,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",43.269937441412374,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","done",61.55246626988727,"binary64"],["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","done",61.51056069722519,"binary64"],["(/.f64 (-.f64 #s(literal -16 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",53.94092844924539,"binary64"],["(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","done",53.95433112292443,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","done",62.02382312723264,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","done",46.81399847701492,"binary64"],["(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))) (/.f64 (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))))","fresh",63.006728023151204,"binary64"],["(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","fresh",62.18742183741245,"binary64"]],"compiler":[[699,133],[22,15],[18,14],[18,15],[10,11],[10,11],[18,12],[17,14],[13,11],[11,10],[16,13],[13,11],[13,11],[11,10],[11,11],[10,10],[15,11],[16,13],[8,9],[8,9],[15,13],[15,13],[15,11],[16,12],[121,28],[75,19]],"count":[[25,25]],"kept":[{"done":[10,10],"fresh":[10,10],"new":[0,0],"picked":[5,5]}],"memory":[[-3975936,12422592]],"min-error":[[23.03440085384468,"binary64"]],"time":20.684814453125,"type":"prune"},{"accuracy":[23.676657301226438],"baseline":[29.652450954656487],"branch":[["a",29.652450954656487,1,"binary64"],["b",23.676657301226438,3,"binary64"],["c",29.652450954656494,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",28.454814734483577,2,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[29,3]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -16 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal 4 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b b) b) b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (-.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))) (/.f64 b (*.f64 a #s(literal -2 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))) (/.f64 (*.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (*.f64 a a) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 (*.f64 a a) #s(literal 4 binary64))))))"]],"memory":[[1754752,17680256]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":38.426025390625,"times":[[8.48486328125,"a"],[7.2080078125,"b"],[11.2880859375,"c"],[9.02197265625,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[26.747948128428238],"baseline":[43.00354838618027],"branch":[["c",38.619111988970836,3,"binary64"],["a",37.95912055825666,3,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",36.59863693426079,3,"binary64"],["b",26.747948128428238,4,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[20,4]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -16 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-2360736,13974624]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":24.31103515625,"times":[[5.484130859375,"c"],[5.717041015625,"a"],[5.807861328125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[5.43505859375,"b"]],"type":"regimes"},{"accuracy":[37.027754732750225],"baseline":[43.00354838618027],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",41.80591216600739,2,"binary64"],["b",37.027754732750225,3,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[19,3]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -16 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[7231232,7231232]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":11.660888671875,"times":[[5.305908203125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[4.778076171875,"b"]],"type":"regimes"},{"accuracy":[40.4780453385184],"baseline":[46.0641890694066],"branch":[["c",46.06418906940658,1,"binary64"],["a",44.60636598918173,2,"binary64"],["b",40.4780453385184,2,"binary64"]],"compiler":[[1,3],[1,3],[1,3]],"count":[[18,2]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -64 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 #s(literal -16 binary64) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-7951824,10282704]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":21.396240234375,"times":[[6.344970703125,"c"],[4.93603515625,"a"],[7.751953125,"b"]],"type":"regimes"},{"accuracy":[40.77880660295425],"baseline":[46.81399847701492],"branch":[["b",40.77880660295425,2,"binary64"]],"compiler":[[1,3]],"count":[[15,2]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[3748848,3748848]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":6.6728515625,"times":[[5.31201171875,"b"]],"type":"regimes"},{"accuracy":[48.99059408341754],"baseline":[54.70161340925562],"branch":[["c",54.70161340925562,1,"binary64"],["a",53.01934449637181,2,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",53.54477287934773,2,"binary64"],["b",48.99059408341754,2,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[13,2]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[3021712,11135952]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":18.31005859375,"times":[[4.166015625,"c"],[4.10693359375,"a"],[4.47216796875,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[3.949951171875,"b"]],"type":"regimes"},{"accuracy":[49.21526804396946],"baseline":[54.70161340925562],"branch":[["b",49.21526804396946,2,"binary64"]],"compiler":[[1,3]],"count":[[12,2]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-4747376,3330672]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":4.930908203125,"times":[[3.907958984375,"b"]],"type":"regimes"},{"accuracy":[49.25185463356001],"baseline":[54.70161340925562],"branch":[["b",49.25185463356001,2,"binary64"]],"compiler":[[1,3]],"count":[[10,2]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[3027616,3027616]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":3.875,"times":[[3.06689453125,"b"]],"type":"regimes"},{"accuracy":[54.70161340925562],"baseline":[54.70161340925562],"branch":[["c",54.70161340925562,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",54.70161340925563,1,"binary64"],["a",54.70161340925564,1,"binary64"],["b",54.70161340925565,1,"binary64"]],"compiler":[[1,3],[17,14],[1,3],[1,3]],"count":[[9,1]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (*.f64 c #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[485648,9461264]],"oracle":[64.0],"outputs":[["(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":13.156005859375,"times":[[3.06103515625,"c"],[2.9150390625,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[3.261962890625,"a"],[2.775146484375,"b"]],"type":"regimes"},{"accuracy":[56.78556253269946],"baseline":[56.78556253269949],"branch":[["b",56.785562532699466,1,"binary64"],["a",56.78556253269952,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",56.78556253269946,1,"binary64"],["c",56.78556253269952,1,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[4,1]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-872240,7465040]],"oracle":[63.04728391425026],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":8.842041015625,"times":[[1.927001953125,"b"],[1.929931640625,"a"],[2.0859375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.89599609375,"c"]],"type":"regimes"},{"accuracy":[59.38592689332842],"baseline":[60.70450212347547],"branch":[["a",60.70450212347548,1,"binary64"],["c",59.38592689332842,2,"binary64"],["b",59.48747345110289,2,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",60.70450212347546,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[3,2]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-1257136,7065472]],"oracle":[63.04728391425026],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":7.99609375,"times":[[1.635986328125,"a"],[1.7109375,"c"],[1.795166015625,"b"],[1.9580078125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[61.51056069722518],"baseline":[61.51056069722519],"branch":[["a",61.51056069722518,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",61.510560697225195,1,"binary64"],["b",61.51056069722527,1,"binary64"],["c",61.51056069722518,1,"binary64"]],"compiler":[[1,3],[17,14],[1,3],[1,3]],"count":[[2,1]],"inputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 65536 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"link":["."],"memory":[[-1629360,6637792]],"name":["quadm (p42, negative)"],"oracle":[61.57763283956295],"outputs":[["(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":6.86083984375,"times":[[1.26806640625,"a"],[1.803955078125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.678955078125,"b"],[1.218994140625,"c"]],"type":"regimes"},{"bstep":[[19.201904296875,1.694819650715518e+151,2.2960707376000196e+162],[24.7109375,-6.069554465745815e+140,-2.037400722100798e+139]],"compiler":[[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[18,13],[17,15],[17,15],[15,12],[17,15],[15,12],[17,15],[15,12],[17,15],[15,12],[17,15],[15,12],[17,15],[15,12],[17,15],[15,12],[19,17],[1,3]],"memory":[[-838672,15330208]],"method":["binary-search","binary-search"],"mixsample":[[2.10400390625,"adjust",800],[3.249755859375,"ival-div",0],[0.467041015625,"ival-sqrt",2000],[0.238525390625,"ival-sub",2000],[0.97607421875,"ival-sqrt",800],[0.1259765625,"ival-assert",0],[0.05810546875,"ival-sqrt",4000],[3.55029296875,"ival-sub",0],[1.9697265625,"ival-sqrt",0],[0.800048828125,"adjust",2000],[0.607177734375,"ival-mult",800],[0.05908203125,"ival-mult",400],[7.064208984375,"ival-mult",0],[0.542236328125,"ival-sub",800],[0.007080078125,"ival-mult",1600],[0.20166015625,"ival-true",0],[0.064697265625,"adjust",2800],[0.02294921875,"ival-sub",4000],[0.357666015625,"exact",0],[1.3984375,"ival-neg",0]],"outcomes":[[7.356201171875,1,"valid",50],[10.575439453125,2,"valid",50],[0.27587890625,0,"invalid",3],[1.374755859375,3,"valid",5],[13.69482421875,0,"valid",167]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":51.498046875,"type":"bsearch"},{"bstep":[[1.202880859375,1.694819650715518e+151,2.2960707376000196e+162],[17.287109375,1.1658293765142531e-49,7.245769050662186e-48],[18.695068359375,-1.2942376003962119e+51,-8.501628984473667e+49]],"compiler":[[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[19,17],[1,3]],"memory":[[5261152,13132000]],"method":["binary-search","binary-search","binary-search"],"mixsample":[[2.459716796875,"ival-div",0],[1.562744140625,"adjust",800],[0.0078125,"ival-div",400],[0.177001953125,"ival-sub",1600],[0.012939453125,"ival-sqrt",800],[0.089599609375,"ival-assert",0],[0.02490234375,"ival-sqrt",4000],[2.940185546875,"ival-sub",0],[1.729736328125,"ival-sqrt",0],[0.3759765625,"ival-sub",400],[0.662353515625,"adjust",2000],[0.01318359375,"ival-mult",800],[0.37255859375,"ival-sqrt",1600],[5.631103515625,"ival-mult",0],[0.308837890625,"ival-mult",400],[0.009033203125,"ival-sub",800],[0.02783203125,"adjust",2800],[0.271484375,"ival-true",0],[0.01220703125,"ival-sub",4000],[0.267333984375,"exact",0],[1.104248046875,"ival-neg",0],[0.58544921875,"ival-sqrt",400]],"outcomes":[[4.8896484375,1,"valid",35],[7.731689453125,2,"valid",40],[1.941162109375,0,"invalid",22],[0.52685546875,3,"valid",2],[12.25830078125,0,"valid",131]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":42.64208984375,"type":"bsearch"},{"bstep":[[1.035888671875,1.694819650715518e+151,2.2960707376000196e+162],[1.005859375,-6.069554465745815e+140,-2.037400722100798e+139]],"compiler":[[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[18,13],[16,14],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[16,14],[15,12],[19,17],[1,3]],"memory":[[1414176,1414176]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":2.739990234375,"type":"bsearch"},{"bstep":[[16.407958984375,-1.2324034773563671e-304,-3.4817338482469684e-305]],"compiler":[[18,13],[15,12],[18,13],[15,12],[18,13],[15,12],[18,13],[15,12],[18,13],[15,12],[19,17],[1,3]],"memory":[[-2067232,5925296]],"method":["binary-search"],"mixsample":[[1.246337890625,"ival-sub",0],[0.988525390625,"ival-div",0],[0.093994140625,"ival-true",0],[3.404541015625,"ival-mult",0],[0.913330078125,"ival-sqrt",0],[0.136962890625,"exact",0],[0.08544921875,"ival-assert",0],[0.62353515625,"ival-neg",0]],"outcomes":[[5.02099609375,0,"invalid",56],[6.47412109375,0,"valid",80]],"stop":[["narrow-enough",1]],"time":19.281982421875,"type":"bsearch"},{"bstep":[[27.357177734375,5.561875883861019e-148,1.4103959716903e-127]],"compiler":[[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[16,13],[15,12],[19,17],[1,3]],"memory":[[340512,10174944]],"method":["binary-search"],"mixsample":[[2.22412109375,"ival-sub",0],[1.818115234375,"ival-div",0],[0.149658203125,"ival-true",0],[5.497802734375,"ival-mult",0],[2.508056640625,"ival-sqrt",0],[0.226806640625,"exact",0],[0.091064453125,"ival-assert",0],[1.030517578125,"ival-neg",0]],"outcomes":[[5.69873046875,0,"invalid",57],[13.863037109375,0,"valid",176]],"stop":[["narrow-enough",1]],"time":32.092041015625,"type":"bsearch"},{"bstep":[[1.427001953125,5.561875883861019e-148,1.4103959716903e-127]],"compiler":[[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[13,12],[15,12],[19,17],[1,3]],"memory":[[880624,880624]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":2.017822265625,"type":"bsearch"},{"bstep":[[32.72802734375,-6.794820765242213e-41,-3.520588114555909e-52]],"compiler":[[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[19,17],[1,3]],"memory":[[-5812848,10141536]],"method":["binary-search"],"mixsample":[[2.255615234375,"ival-div",0],[1.93017578125,"adjust",800],[0.116943359375,"ival-sub",1600],[0.013916015625,"ival-div",400],[0.10107421875,"ival-assert",0],[2.388427734375,"ival-sub",0],[1.4541015625,"ival-sqrt",0],[0.40087890625,"ival-sub",400],[0.451904296875,"adjust",2000],[0.0322265625,"ival-mult",800],[4.938720703125,"ival-mult",0],[0.292236328125,"ival-mult",400],[0.266357421875,"ival-sqrt",1600],[0.216064453125,"ival-true",0],[0.20849609375,"exact",0],[0.750244140625,"ival-sqrt",400],[0.966064453125,"ival-neg",0]],"outcomes":[[7.075439453125,1,"valid",47],[6.392822265625,2,"valid",29],[2.803466796875,0,"invalid",28],[8.120849609375,0,"valid",84]],"stop":[["narrow-enough",1]],"time":38.190185546875,"type":"bsearch"},{"bstep":[[24.9541015625,-2.5296931402670367e-11,-6.273968048720507e-13]],"compiler":[[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[10,12],[15,12],[19,17],[1,3]],"memory":[[7462672,7462672]],"method":["binary-search"],"mixsample":[[1.826416015625,"ival-div",0],[1.47412109375,"adjust",800],[0.030029296875,"ival-mult",800],[0.178955078125,"ival-mult",400],[0.2470703125,"ival-sqrt",1600],[3.49853515625,"ival-mult",0],[0.125,"ival-sub",1600],[0.084716796875,"ival-assert",0],[2.143310546875,"ival-sub",0],[0.177734375,"ival-true",0],[0.4990234375,"ival-sub",400],[1.1181640625,"ival-sqrt",0],[0.154296875,"exact",0],[0.670654296875,"adjust",2000],[0.572998046875,"ival-sqrt",400],[0.6884765625,"ival-neg",0]],"outcomes":[[5.449951171875,1,"valid",32],[2.228271484375,0,"invalid",22],[6.850830078125,2,"valid",27],[4.603515625,0,"valid",53]],"stop":[["narrow-enough",1]],"time":28.69482421875,"type":"bsearch"},{"bstep":[[26.406005859375,-1.5952032048620563e-307,2.7109487381884197e-305]],"compiler":[[8,10],[10,11],[8,10],[10,11],[8,10],[10,11],[8,10],[10,11],[8,10],[10,11],[8,10],[10,11],[8,10],[10,11],[8,10],[10,11],[19,17],[1,3]],"memory":[[484144,8572368]],"method":["binary-search"],"mixsample":[[0.103271484375,"ival-sub",1200],[1.38525390625,"adjust",800],[2.112548828125,"ival-div",0],[0.01318359375,"ival-sub",4800],[0.041015625,"ival-mult",1200],[0.134033203125,"ival-sub",1600],[0.06005859375,"ival-assert",0],[0.01806640625,"ival-sub",3600],[0.184326171875,"ival-sqrt",1200],[1.96240234375,"ival-sub",0],[0.0361328125,"ival-sqrt",4800],[1.097900390625,"ival-sqrt",0],[0.18798828125,"ival-sub",400],[0.114013671875,"ival-mult",800],[0.01416015625,"ival-sub",4400],[0.125732421875,"ival-sub",800],[0.0126953125,"ival-mult",1600],[0.17578125,"adjust",2800],[0.041015625,"ival-sqrt",3600],[0.01416015625,"ival-sub",4000],[0.281005859375,"ival-sqrt",400],[0.15185546875,"ival-sqrt",2000],[0.1552734375,"ival-sqrt",800],[0.05859375,"ival-sub",2000],[0.032958984375,"ival-sqrt",4000],[0.034912109375,"ival-sqrt",4400],[0.96826171875,"adjust",2000],[0.066650390625,"ival-sub",2400],[3.568359375,"ival-mult",0],[0.278076171875,"ival-sqrt",1600],[0.095458984375,"ival-mult",400],[0.109619140625,"ival-true",0],[0.137939453125,"ival-sqrt",2400],[0.1396484375,"exact",0],[0.67333984375,"ival-neg",0]],"outcomes":[[2.166748046875,1,"valid",15],[1.361572265625,0,"invalid",14],[8.3603515625,2,"valid",41],[3.201171875,3,"valid",13],[4.96923828125,0,"valid",59]],"stop":[["narrow-enough",1]],"time":30.9140625,"type":"bsearch"},{"inputs":[["(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -130000000000000009918700793419453104283454462230528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 271508251957999/205688069665150755269371147819668813122841983204197482918576128 binary64)) (/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -3459022883669859/98829225247710262867429368515096341332791332892647518728955741224331220492185227974590031104217345944915565363435943316108305047551656971126471386689813725547615929822542168634993607295943953291620980311754270053008792716515963231747120779125566189619536160406425180445475300105093018814544105228831057745755716670455808 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal -5884782876925013/196159429230833773869868419475239575503198607639501078528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal -7737125245533627/309485009821345068724781056 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(if (<=.f64 c #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-7350272,19128928]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -130000000000000009918700793419453104283454462230528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 271508251957999/205688069665150755269371147819668813122841983204197482918576128 binary64)) (/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -130000000000000009918700793419453104283454462230528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 271508251957999/205688069665150755269371147819668813122841983204197482918576128 binary64)) (/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 a (neg.f64 c)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 a (neg.f64 c)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -3459022883669859/98829225247710262867429368515096341332791332892647518728955741224331220492185227974590031104217345944915565363435943316108305047551656971126471386689813725547615929822542168634993607295943953291620980311754270053008792716515963231747120779125566189619536160406425180445475300105093018814544105228831057745755716670455808 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal -3459022883669859/98829225247710262867429368515096341332791332892647518728955741224331220492185227974590031104217345944915565363435943316108305047551656971126471386689813725547615929822542168634993607295943953291620980311754270053008792716515963231747120779125566189619536160406425180445475300105093018814544105228831057745755716670455808 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (neg.f64 c) (neg.f64 c)))) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(literal 0 binary64))) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal -5884782876925013/196159429230833773869868419475239575503198607639501078528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal -5884782876925013/196159429230833773869868419475239575503198607639501078528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal -7737125245533627/309485009821345068724781056 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(if (<=.f64 b #s(literal -7737125245533627/309485009821345068724781056 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))","(if (<=.f64 c #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"time":179.4599609375,"type":"simplify"},{"compiler":[[393,83]],"memory":[[3738336,3738336]],"stop":[["fuel",1]],"time":6.01513671875,"type":"soundness"},{"compiler":[[393,83],[393,83],[105,28],[105,28],[17,14],[17,14]],"memory":[[358976,56973840]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":86.94482421875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01513671875,"type":"end"}]