[{"memory":[[14144,14144]],"time":0.053955078125,"type":"start"},{"compiler":[[14,9]],"memory":[[1148880,1148880]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0007317066192626953,"valid":0.4987800121307373}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0014634132385253906,"valid":0.4980483055114746}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0029268264770507813,"valid":0.4965848922729492}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0058536529541015625,"valid":0.49365806579589844}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.011707305908203125,"valid":0.4878044128417969}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.02341461181640625,"valid":0.47609710693359375}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0468292236328125,"valid":0.4526824951171875}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.093658447265625,"valid":0.405853271484375}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.18731689453125,"valid":0.31219482421875}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.3746337890625,"valid":0.1248779296875}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":10.35986328125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[11217712,345247824]],"mixsample":[[233.256591796875,"ival-div",0],[220.40478515625,"adjust",800],[85.22119140625,"ival-fabs",0],[0.10693359375,"ival-log",400],[0.015869140625,"ival-div",400],[23.901123046875,"ival-sub",1600],[6.167236328125,"ival-assert",0],[73.71044921875,"ival-sub",0],[1916.3564453125,"ival-log",0],[109.326904296875,"ival-log1p",0],[86.0068359375,"ival-sub",400],[0.09912109375,"ival-log1p",400],[40.844482421875,"ival-<=",0],[8.79150390625,"exact",0],[70.169921875,"adjust",2000]],"outcomes":[[1406.966552734375,1,"valid",4848],[1842.440673828125,2,"valid",3021],[47.79541015625,0,"valid",387]],"time":3780.648193359375,"type":"sample"},{"compiler":[[9,7],[27,9],[27,9]],"confusion":[[250,0,5,1]],"explanations":[["log.f64","(log.f64 (+.f64 #s(literal 1 binary64) x))","sensitivity",255,0,[],[[2]]],["log.f64","(log.f64 (-.f64 #s(literal 1 binary64) x))","sensitivity",255,0,[],[[1]]]],"fperrors":[["(log.f64 (+.f64 #s(literal 1 binary64) x))",255,0,false,0,false],["(log.f64 (-.f64 #s(literal 1 binary64) x))",255,0,false,0,false],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0,0,false,0,false],["(+.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,255],[0,1]],"maybe-confusion":[[250,0,0,5,0,1]],"memory":[[225344,58491808]],"mixsample":[[14.730224609375,"ival-div",0],[17.043701171875,"adjust",800],[4.507080078125,"ival-add",0],[1.6513671875,"ival-sub",1600],[0.406494140625,"ival-assert",0],[4.663330078125,"ival-sub",0],[1.140380859375,"ival-true",0],[121.744873046875,"ival-log",0],[6.34912109375,"ival-log1p",0],[4.93310546875,"ival-sub",400],[0.552734375,"exact",0],[6.80078125,"adjust",2000]],"outcomes":[[86.3671875,1,"valid",284],[133.6728515625,2,"valid",208],[2.8193359375,0,"valid",20]],"time":309.375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,7]],"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"memory":[[-14247056,19920688]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"symmetry":[[]],"time":385.489990234375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.10791015625,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","next",61.8518992652888,"binary64"]],"compiler":[[9,7]],"memory":[[270400,270400]],"time":0.72900390625,"type":"prune"},{"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)"]],"locations":[["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(log.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",2]],"memory":[[2141328,10268448]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(log1p.f64 x)","(+.f64 #s(literal 1 binary64) x)"]],"time":193.18408203125,"type":"simplify"},{"compiler":[[27,9]],"locations":[["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.01953125],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.5673702265432],["(log.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",58.60778094324805]],"memory":[[-3876432,13106240]],"mixsample":[[6.76953125,"ival-div",0],[7.443603515625,"adjust",800],[1.846435546875,"ival-add",0],[0.832763671875,"ival-sub",1600],[0.1611328125,"ival-assert",0],[2.3544921875,"ival-sub",0],[0.31591796875,"ival-true",0],[57.410400390625,"ival-log",0],[3.048828125,"ival-log1p",0],[2.095703125,"ival-sub",400],[0.269775390625,"exact",0],[3.029052734375,"adjust",2000]],"outcomes":[[40.728271484375,1,"valid",142],[63.677490234375,2,"valid",104],[1.283447265625,0,"valid",10]],"time":118.476806640625,"type":"localize"},{"count":[[5,42]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[2073424,2073424]],"outputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[3.503173828125,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","-inf"],[3.302001953125,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","inf"],[1.030029296875,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","0"]],"time":9.18115234375,"type":"series"},{"count":[[42,0]],"inputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[2241168,10009536]],"method":["egg-herbie"],"outputs":[[]],"time":162.77685546875,"type":"simplify"},{"count":[[5,75]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[-7641344,18301200]],"outputs":[["(neg.f64 (neg.f64 (log1p.f64 x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x))) (log1p.f64 x))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log1p.f64 (*.f64 (*.f64 x x) x)) (neg.f64 (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x))))","(+.f64 (log1p.f64 (*.f64 (*.f64 x x) x)) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (+.f64 x #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (*.f64 (*.f64 x x) x)) (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (/.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64)))","(-.f64 (log.f64 (fma.f64 (neg.f64 x) (*.f64 x x) #s(literal -1 binary64))) (log.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(neg.f64 (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 x)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (*.f64 x x) x))) (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x))) (log1p.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))) (log1p.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (+.f64 (neg.f64 x) #s(literal -1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 (neg.f64 x))))","(-.f64 (log.f64 (neg.f64 (fma.f64 (neg.f64 x) (*.f64 x x) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(*.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 (neg.f64 x)))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 #s(literal 0 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) (*.f64 x x))) (log1p.f64 x)) (/.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(*.f64 (log1p.f64 (neg.f64 x)) (/.f64 #s(literal 1 binary64) (log1p.f64 x)))","(*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal -1 binary64)) x)))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal -1 binary64)) x)) (*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))))","(+.f64 (*.f64 (*.f64 (+.f64 x #s(literal -1 binary64)) x) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (*.f64 x x) x #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (/.f64 (*.f64 (*.f64 x x) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) x)","(-.f64 #s(literal 0 binary64) (+.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 (*.f64 x x) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(neg.f64 (+.f64 (neg.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x)))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) x))","(+.f64 (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))"]],"time":431.006103515625,"type":"rewrite"},{"compiler":[[1321,260]],"memory":[[6231120,6231120]],"time":9.841064453125,"type":"eval"},{"alts":[["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","next",0.0,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","next",0.17578125,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","next",0.01953125,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","next",0.015625,"binary64"]],"compiler":[[14,8],[8,7],[8,7],[9,8]],"count":[[76,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,4],"picked":[1,0]}],"memory":[[-4683456,3636624]],"min-error":[[0.0,"binary64"]],"time":3.4609375,"type":"prune"},{"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","#s(literal -1 binary64)","(/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","(log1p.f64 x)","x","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(neg.f64 (log1p.f64 x))","(log1p.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (log1p.f64 x))","#s(literal 1 binary64)","(log1p.f64 x)","x","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(log1p.f64 (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","(log1p.f64 x)","(/.f64 (log1p.f64 x) (log1p.f64 x))"]],"locations":[["(log1p.f64 (*.f64 (neg.f64 x) x))","cost-diff",0],["(/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","cost-diff",0],["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","cost-diff",0],["(/.f64 (log1p.f64 x) (log1p.f64 x))","cost-diff",4],["(log1p.f64 (neg.f64 x))","cost-diff",0],["(log1p.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (log1p.f64 x))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","cost-diff",2],["(neg.f64 x)","cost-diff",0],["(log1p.f64 (neg.f64 x))","cost-diff",0],["(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","cost-diff",0],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","cost-diff",2],["(log1p.f64 x)","cost-diff",0],["(/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","cost-diff",1],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","cost-diff",2]],"memory":[[3487648,11687984]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","#s(literal -1 binary64)","(/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","(log1p.f64 x)","x","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(neg.f64 (log1p.f64 x))","(log1p.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(literal 1 binary64) (log1p.f64 x))","#s(literal 1 binary64)","(log1p.f64 x)","x","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(+.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(log1p.f64 (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","(log1p.f64 x)","(/.f64 (log1p.f64 x) (log1p.f64 x))","#s(literal 1 binary64)"]],"time":307.095947265625,"type":"simplify"},{"compiler":[[182,21]],"locations":[["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","accuracy",0.00390625],["(log1p.f64 (*.f64 (neg.f64 x) x))","accuracy",0.00390625],["(log1p.f64 x)","accuracy",0.00390625],["(/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","accuracy",30.408710748454318],["(log1p.f64 (neg.f64 x))","accuracy",0.0],["(log1p.f64 x)","accuracy",0.00390625],["(/.f64 #s(literal 1 binary64) (log1p.f64 x))","accuracy",0.015625],["(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","accuracy",0.17578125],["(neg.f64 x)","accuracy",0.0],["(log1p.f64 (neg.f64 x))","accuracy",0.0],["(log1p.f64 x)","accuracy",0.00390625],["(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","accuracy",0.01953125],["(log1p.f64 (neg.f64 x))","accuracy",0.0],["(log1p.f64 x)","accuracy",0.00390625],["(/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","accuracy",0.015625],["(/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","accuracy",0.015625]],"memory":[[-1063712,23528976]],"mixsample":[[15.784912109375,"ival-div",0],[2.249267578125,"ival-sub",0],[0.39501953125,"ival-true",0],[5.95361328125,"ival-mult",0],[9.8759765625,"ival-log1p",0],[0.4921875,"exact",0],[0.25439453125,"ival-assert",0],[7.644287109375,"ival-neg",0]],"outcomes":[[67.53662109375,0,"valid",256]],"time":93.23193359375,"type":"localize"},{"count":[[14,108]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","(/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","(log1p.f64 x)","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (log1p.f64 x))","(/.f64 (log1p.f64 x) (log1p.f64 x))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(log1p.f64 (*.f64 (neg.f64 x) x))"]],"memory":[[-745936,6747856]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(- x 1)","(- (* x (+ 1 (* -1/2 x))) 1)","(- (* x (+ 1 (* x (- (* 5/12 x) 1/2)))) 1)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* -1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (- (* 1/24 x) 1/12))))) x)","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -7/24 x) 5/12)) 1/2)) 1))","(* -1 (pow x 2))","(* (pow x 2) (- (* -1/2 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* -1/3 (pow x 2)) 1/2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* (pow x 2) (- (* -1/4 (pow x 2)) 1/3)) 1/2)) 1))","(- 1 (/ (log -1) (log (/ 1 x))))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x))))))","(- (+ (* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x)))))) (/ 1 (* x (+ (log -1) (* -1 (log (/ 1 x))))))) (/ (log (/ 1 x)) (* x (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))","(- (+ (* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x)))))) (+ (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (+ (log -1) (* -1 (log (/ 1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ 1 x)))))) (* 1/2 (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))) (pow x 2))) (/ 1 (* x (+ (log -1) (* -1 (log (/ 1 x)))))))) (/ (log (/ 1 x)) (* x (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))","(- (+ (* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x)))))) (+ (/ 1/3 (* (pow x 3) (+ (log -1) (* -1 (log (/ 1 x)))))) (/ 1 (* x (+ (log -1) (* -1 (log (/ 1 x)))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (* (pow x 2) (+ (log -1) (* -1 (log (/ 1 x))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (* (pow x 3) (+ (log -1) (* -1 (log (/ 1 x))))))) (+ (* 1/3 (/ (log (/ 1 x)) (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* (pow x 2) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 3)))) (+ (/ 1/2 (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (+ (log -1) (* -1 (log (/ 1 x))))))) (/ (log (/ 1 x)) (* x (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))))))))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(/ -1 (log (/ 1 x)))","(* -1 (+ (/ 1 (log (/ 1 x))) (/ 1 (* x (pow (log (/ 1 x)) 2)))))","(- (* 1/2 (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (/ 1 (log (/ 1 x))) (+ (/ 1 (* x (pow (log (/ 1 x)) 2))) (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 3))))))","(- (+ (/ 1/2 (* (pow x 3) (pow (log (/ 1 x)) 3))) (* 1/2 (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log (/ 1 x)) 2))) (/ 1 (pow (log (/ 1 x)) 3))) (* (pow x 3) (log (/ 1 x))))) (+ (/ 1/3 (* (pow x 3) (pow (log (/ 1 x)) 2))) (+ (/ 1 (log (/ 1 x))) (+ (/ 1 (* x (pow (log (/ 1 x)) 2))) (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 3))))))))","(- (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) 1)","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (+ 1 (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x)))))) (+ 1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (* -1 (/ (- (/ 1 (log (/ 1 x))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))))) (pow x 3))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))))) (+ 1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))","(* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (* -1 (/ (- (/ 1 (log (/ 1 x))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))))) (pow x 3))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+ (log -1) (* -2 (log (/ 1 x))))","(- (+ (log -1) (* -2 (log (/ 1 x)))) (/ 1 (pow x 2)))","(+ (log -1) (+ (* -2 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow x 2)))) (pow x 2)))))","(- (+ (log -1) (+ (* -2 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))))) (/ 1 (pow x 2)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x))))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x)))) (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) x)))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x)))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ -1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))))) x)) (* 2 (/ 1 (log (/ -1 x))))) (/ (log -1) (pow (log (/ -1 x)) 2))) x)))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ -1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ -1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))))) (log (/ -1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x))))))) x)) (* 1/2 (/ 1 (log (/ -1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))))) x)) (* 2 (/ 1 (log (/ -1 x))))) (/ (log -1) (pow (log (/ -1 x)) 2))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))","(- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ 1 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) x)) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (+ (* 1/3 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) (+ (log -1) (* -1 (log (/ -1 x))))))) x)) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) x)) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))))","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))) 1)","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x))))))) 1)","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x))))))) 1)","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 4)))) (+ (* -1/3 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x))))))) 1)","(/ (+ (log -1) (* -2 (log (/ -1 x)))) (+ (log -1) (* -1 (log (/ -1 x)))))","(+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))))","(+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))))","(+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 4)))) (+ (* -1/3 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))))","(+ (log -1) (* -2 (log (/ -1 x))))","(- (+ (log -1) (* -2 (log (/ -1 x)))) (/ 1 (pow x 2)))","(+ (log -1) (+ (* -2 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow x 2)))) (pow x 2)))))","(- (+ (log -1) (+ (* -2 (log (/ -1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))))) (/ 1 (pow x 2)))"]],"series":[[10.125,"((neg (/ -1 (/ (log (+ 1 x)) (log (+ 1 (neg x)))))) (/ -1 (/ (log (+ 1 x)) (log (+ 1 (neg x))))) (/ (log (+ 1 x)) (log (+ 1 (neg x)))) (log (+ 1 x)) (neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (* (/ 1 (log (+ 1 x))) (log (+ 1 (neg x)))) (/ 1 (log (+ 1 x))) (/ (log (+ 1 x)) (log (+ 1 x))) (- (/ (log (+ 1 (* (neg x) x))) (log (+ 1 x))) (/ (log (+ 1 x)) (log (+ 1 x)))) (/ (log (+ 1 (* (neg x) x))) (log (+ 1 x))) (log (+ 1 (* (neg x) x))))","x","-inf"],[11.77197265625,"((neg (/ -1 (/ (log (+ 1 x)) (log (+ 1 (neg x)))))) (/ -1 (/ (log (+ 1 x)) (log (+ 1 (neg x))))) (/ (log (+ 1 x)) (log (+ 1 (neg x)))) (log (+ 1 x)) (neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (* (/ 1 (log (+ 1 x))) (log (+ 1 (neg x)))) (/ 1 (log (+ 1 x))) (/ (log (+ 1 x)) (log (+ 1 x))) (- (/ (log (+ 1 (* (neg x) x))) (log (+ 1 x))) (/ (log (+ 1 x)) (log (+ 1 x)))) (/ (log (+ 1 (* (neg x) x))) (log (+ 1 x))) (log (+ 1 (* (neg x) x))))","x","inf"],[3.179931640625,"((neg (/ -1 (/ (log (+ 1 x)) (log (+ 1 (neg x)))))) (/ -1 (/ (log (+ 1 x)) (log (+ 1 (neg x))))) (/ (log (+ 1 x)) (log (+ 1 (neg x)))) (log (+ 1 x)) (neg (/ (log (+ 1 (neg x))) (neg (log (+ 1 x))))) (/ (log (+ 1 (neg x))) (neg (log (+ 1 x)))) (log (+ 1 (neg x))) (neg x) (* (/ 1 (log (+ 1 x))) (log (+ 1 (neg x)))) (/ 1 (log (+ 1 x))) (/ (log (+ 1 x)) (log (+ 1 x))) (- (/ (log (+ 1 (* (neg x) x))) (log (+ 1 x))) (/ (log (+ 1 x)) (log (+ 1 x)))) (/ (log (+ 1 (* (neg x) x))) (log (+ 1 x))) (log (+ 1 (* (neg x) x))))","x","0"]],"time":32.14111328125,"type":"series"},{"count":[[108,0]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 5/12 x))))))","(- x 1)","(- (* x (+ 1 (* -1/2 x))) 1)","(- (* x (+ 1 (* x (- (* 5/12 x) 1/2)))) 1)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* -1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (- (* 1/24 x) 1/12))))) x)","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -7/24 x) 5/12)) 1/2)) 1))","(* -1 (pow x 2))","(* (pow x 2) (- (* -1/2 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* -1/3 (pow x 2)) 1/2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* (pow x 2) (- (* -1/4 (pow x 2)) 1/3)) 1/2)) 1))","(- 1 (/ (log -1) (log (/ 1 x))))","(- (+ 1 (/ 2 (* x (log (/ 1 x))))) (+ (/ (log -1) (log (/ 1 x))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ 1 (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (log (/ 1 x)))))))","(- (+ 1 (/ 1/3 (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (log (/ 1 x)))))))))","(/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))","(+ -1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))","(+ -1 (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x))))))","(+ -1 (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x))))))) (pow x 3))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (pow x 2))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) x)) (/ (log -1) (log (/ 1 x)))))))","(* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x))))))","(- (+ (* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x)))))) (/ 1 (* x (+ (log -1) (* -1 (log (/ 1 x))))))) (/ (log (/ 1 x)) (* x (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))","(- (+ (* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x)))))) (+ (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (+ (log -1) (* -1 (log (/ 1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ 1 x)))))) (* 1/2 (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))) (pow x 2))) (/ 1 (* x (+ (log -1) (* -1 (log (/ 1 x)))))))) (/ (log (/ 1 x)) (* x (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))","(- (+ (* -1 (/ (log (/ 1 x)) (+ (log -1) (* -1 (log (/ 1 x)))))) (+ (/ 1/3 (* (pow x 3) (+ (log -1) (* -1 (log (/ 1 x)))))) (/ 1 (* x (+ (log -1) (* -1 (log (/ 1 x)))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (* (pow x 2) (+ (log -1) (* -1 (log (/ 1 x))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ 1 x))))) (/ (log (/ 1 x)) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (* (pow x 3) (+ (log -1) (* -1 (log (/ 1 x))))))) (+ (* 1/3 (/ (log (/ 1 x)) (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* (pow x 2) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2)))) (+ (* 1/2 (/ (log (/ 1 x)) (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 3)))) (+ (/ 1/2 (* (pow x 3) (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (+ (log -1) (* -1 (log (/ 1 x))))))) (/ (log (/ 1 x)) (* x (pow (+ (log -1) (* -1 (log (/ 1 x)))) 2))))))))))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(/ -1 (log (/ 1 x)))","(* -1 (+ (/ 1 (log (/ 1 x))) (/ 1 (* x (pow (log (/ 1 x)) 2)))))","(- (* 1/2 (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (/ 1 (log (/ 1 x))) (+ (/ 1 (* x (pow (log (/ 1 x)) 2))) (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 3))))))","(- (+ (/ 1/2 (* (pow x 3) (pow (log (/ 1 x)) 3))) (* 1/2 (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (pow (log (/ 1 x)) 2))) (/ 1 (pow (log (/ 1 x)) 3))) (* (pow x 3) (log (/ 1 x))))) (+ (/ 1/3 (* (pow x 3) (pow (log (/ 1 x)) 2))) (+ (/ 1 (log (/ 1 x))) (+ (/ 1 (* x (pow (log (/ 1 x)) 2))) (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 3))))))))","(- (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) 1)","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (+ 1 (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x)))))) (+ 1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (* -1 (/ (- (/ 1 (log (/ 1 x))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))))) (pow x 3))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))))) (+ 1 (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))","(* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (* -1 (/ (- (/ 1 (log (/ 1 x))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (log (/ 1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))))) (pow x 3))) (+ (/ 1 (* (pow x 2) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+ (log -1) (* -2 (log (/ 1 x))))","(- (+ (log -1) (* -2 (log (/ 1 x)))) (/ 1 (pow x 2)))","(+ (log -1) (+ (* -2 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow x 2)))) (pow x 2)))))","(- (+ (log -1) (+ (* -2 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))))) (/ 1 (pow x 2)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))","(- (+ (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1/3 (* x (+ (log -1) (* -1 (log (/ -1 x))))))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (/ 1/2 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x))))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x)))) (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) x)))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x)))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ -1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))))) x)) (* 2 (/ 1 (log (/ -1 x))))) (/ (log -1) (pow (log (/ -1 x)) 2))) x)))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (log (/ -1 x)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/3 (/ 1 (log (/ -1 x)))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ -1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))))) (log (/ -1 x)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))) (* 1/2 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x))))))) x)) (* 1/2 (/ 1 (log (/ -1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ -1 x)))) (/ (log -1) (pow (log (/ -1 x)) 2))) (log (/ -1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 x)))) (pow (log (/ -1 x)) 2))))) x)) (* 2 (/ 1 (log (/ -1 x))))) (/ (log -1) (pow (log (/ -1 x)) 2))) x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))","(- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ 1 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) x)) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (+ (* 1/3 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) (+ (log -1) (* -1 (log (/ -1 x))))))) x)) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) x)) (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))))","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))) 1)","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x))))))) 1)","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x))))))) 1)","(- (+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 4)))) (+ (* -1/3 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x))))))) 1)","(/ (+ (log -1) (* -2 (log (/ -1 x)))) (+ (log -1) (* -1 (log (/ -1 x)))))","(+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))))","(+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (+ (log -1) (* -1 (log (/ -1 x)))))))) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))))","(+ (* -2 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 4)))) (+ (* -1/3 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (/ 1 (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) (+ (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) x)) (* -1 (/ (+ (log -1) (* -2 (log (/ -1 x)))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) x)) (/ (log -1) (+ (log -1) (* -1 (log (/ -1 x)))))))","(+ (log -1) (* -2 (log (/ -1 x))))","(- (+ (log -1) (* -2 (log (/ -1 x)))) (/ 1 (pow x 2)))","(+ (log -1) (+ (* -2 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 (pow x 2)))) (pow x 2)))))","(- (+ (log -1) (+ (* -2 (log (/ -1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 (pow x 2)))) (pow x 4))))) (/ 1 (pow x 2)))"]],"memory":[[3450416,11604768]],"method":["egg-herbie"],"outputs":[[]],"time":219.320068359375,"type":"simplify"},{"count":[[14,210]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","(/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","(log1p.f64 x)","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (log1p.f64 x))","(/.f64 (log1p.f64 x) (log1p.f64 x))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(log1p.f64 (*.f64 (neg.f64 x) x))"]],"memory":[[-1094192,16688736]],"outputs":[["#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)"]],"time":469.134033203125,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1414800,1414800]],"time":24.5068359375,"type":"eval"},{"alts":[["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","done",0.0,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","done",0.17578125,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","done",0.01953125,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","done",0.015625,"binary64"],["#s(literal -1 binary64)","next",1.1391891018928124,"binary64"]],"compiler":[[14,8],[8,7],[8,7],[9,8],[1,2]],"count":[[19,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[15,1],"picked":[4,4]}],"memory":[[1602848,1602848]],"min-error":[[0.0,"binary64"]],"time":5.921142578125,"type":"prune"},{"inputs":[["#s(literal -1 binary64)"]],"memory":[[-6439248,9813664]],"method":["egg-herbie"],"outputs":[["#s(literal -1 binary64)"]],"time":205.472900390625,"type":"simplify"},{"compiler":[[3,4]],"memory":[[3177984,3177984]],"mixsample":[[0.213623046875,"ival-true",0],[0.294677734375,"exact",0],[0.134521484375,"ival-assert",0]],"outcomes":[[5.0966796875,0,"valid",256]],"time":8.833984375,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28720,28720]],"outputs":[[]],"series":[[0.0029296875,"()","x","-inf"],[0.0087890625,"()","x","inf"],[0.02978515625,"()","x","0"]],"time":0.110107421875,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-408352,9424336]],"method":["egg-herbie"],"outputs":[[]],"time":192.160888671875,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[3407904,11592512]],"outputs":[[]],"time":488.76806640625,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[44496,44496]],"time":0.2919921875,"type":"eval"},{"alts":[["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","done",0.0,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","done",0.17578125,"binary64"],["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","done",0.01953125,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","done",0.015625,"binary64"],["#s(literal -1 binary64)","done",1.1391891018928124,"binary64"]],"compiler":[[49,24],[14,8],[8,7],[8,7],[9,8],[1,2]],"count":[[5,5]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"memory":[[-6223904,1871392]],"min-error":[[0.0,"binary64"]],"time":11.0380859375,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["x",0.0,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.0,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[6,1]],"inputs":[["#s(literal -1 binary64)","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))"]],"memory":[[3690048,3690048]],"oracle":[62.70513143571184],"outputs":[["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))"]],"repr":["binary64"],"time":10.014892578125,"times":[[4.389892578125,"x"],[4.113037109375,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.015625],"baseline":[0.015625],"branch":[["x",0.015625,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.015625,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[5,1]],"inputs":[["#s(literal -1 binary64)","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))"]],"memory":[[3514640,3514640]],"oracle":[62.70513143571184],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))"]],"repr":["binary64"],"time":9.66796875,"times":[[4.08984375,"x"],[4.27001953125,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["x",0.01953125,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.01953125,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[4,1]],"inputs":[["#s(literal -1 binary64)","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (log1p.f64 x)) (log1p.f64 (neg.f64 x)))"]],"memory":[[-4841424,3401808]],"oracle":[62.70513143571184],"outputs":[["(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))"]],"repr":["binary64"],"time":10.10693359375,"times":[[4.489013671875,"x"],[4.48486328125,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[1.1391891018928124],"baseline":[1.1391891018928124],"branch":[["x",1.1391891018928124,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",1.1391891018928124,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[1,1]],"inputs":[["#s(literal -1 binary64)"]],"link":["."],"memory":[[2654080,2654080]],"name":["qlog (example 3.10)"],"oracle":[1.1391891018928124],"outputs":[["#s(literal -1 binary64)"]],"repr":["binary64"],"time":6.135986328125,"times":[[3.280029296875,"x"],[1.973876953125,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"inputs":[["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","#s(literal -1 binary64)"]],"memory":[[-1145776,16111200]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(+.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) #s(literal -1 binary64))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","#s(literal -1 binary64)"]],"time":316.85107421875,"type":"simplify"},{"compiler":[[25,13]],"memory":[[797904,797904]],"stop":[["done",1]],"time":3.47314453125,"type":"soundness"},{"compiler":[[25,13],[25,13],[6,5],[6,5],[9,7],[9,7]],"memory":[[-2823024,21540464]],"remove-preprocessing":[[],[],[],[],[]],"time":71.032958984375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.014892578125,"type":"end"}]