[{"memory":[[11152,11152]],"time":0.038818359375,"type":"start"},{"compiler":[[11,7]],"memory":[[422880,422880]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.00036709150299429893,"valid":0.7514363066293299}],[11,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0007341830059885979,"valid":0.7510692151263356}],[10,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0014683660119771957,"valid":0.750335032120347}],[9,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0029367320239543915,"valid":0.7488666661083698}],[8,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.005873464047908783,"valid":0.7459299340844154}],[7,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.011746928095817566,"valid":0.7400564700365067}],[6,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.023493856191635132,"valid":0.7283095419406891}],[5,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.046987712383270264,"valid":0.704815685749054}],[4,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.09397542476654053,"valid":0.6578279733657837}],[3,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.18795084953308105,"valid":0.5638525485992432}],[2,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.3759016990661621,"valid":0.3759016990661621}],[1,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}]],"time":2.0810546875,"type":"analyze"},{"bogosity":[{"infinite":9.106145810711291e-5,"invalid":0.0,"precondition":0.24819660186767578,"valid":0.7517123366742171}],"memory":[[16037360,182420752]],"mixsample":[[98.0380859375,"ival-div",0],[149.058349609375,"ival-exp",0],[38.998291015625,"ival->",0],[12.509765625,"exact",0],[99.84326171875,"ival-expm1",0],[5.83740234375,"ival-assert",0]],"outcomes":[[632.25,0,"valid",8256]],"time":958.2900390625,"type":"sample"},{"compiler":[[7,5],[17,7],[17,7]],"confusion":[[170,0,1,85]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",171,0,[],[[2]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",170,1,[-0.006737598822425481],0,false],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,171],[0,85]],"maybe-confusion":[[170,0,0,1,0,85]],"memory":[[-3416432,31574560]],"mixsample":[[4.54736328125,"ival-div",0],[0.55029296875,"ival-true",0],[7.033447265625,"ival-exp",0],[5.090087890625,"ival-expm1",0],[0.41650390625,"exact",0],[0.255615234375,"ival-assert",0]],"outcomes":[[32.236083984375,0,"valid",512]],"time":83.970947265625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,5]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[4349200,20435776]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"symmetry":[[]],"time":351.62109375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.2138671875,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","next",40.1813616296202,"binary64"]],"compiler":[[7,5]],"memory":[[-18406704,308304]],"time":5.135009765625,"type":"prune"},{"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[1590352,9844000]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","#s(literal 1 binary64)"]],"time":182.364013671875,"type":"simplify"},{"compiler":[[17,7]],"locations":[["(exp.f64 x)","accuracy",0.0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.0078125],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",39.01945555415389]],"memory":[[6351344,6351344]],"mixsample":[[2.067626953125,"ival-div",0],[0.1845703125,"ival-true",0],[3.050537109375,"ival-exp",0],[2.181640625,"ival-expm1",0],[0.185791015625,"exact",0],[0.12109375,"ival-assert",0]],"outcomes":[[14.002197265625,0,"valid",256]],"time":20.503173828125,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[-7301168,716640]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"series":[[1.44091796875,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","-inf"],[0.857177734375,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","inf"],[0.764892578125,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","0"]],"time":3.39501953125,"type":"series"},{"count":[[15,0]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"memory":[[1727088,9934480]],"method":["egg-herbie"],"outputs":[[]],"time":134.976806640625,"type":"simplify"},{"count":[[3,36]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[5596480,14564304]],"outputs":[["(neg.f64 (neg.f64 (expm1.f64 x)))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(-.f64 (/.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) #s(literal 1 binary64)))","(*.f64 (expm1.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(neg.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 #s(literal 0 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))))","(neg.f64 (neg.f64 (exp.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x)))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(exp.f64 x)"]],"time":283.877197265625,"type":"rewrite"},{"compiler":[[614,117]],"memory":[[-4031184,4036352]],"time":6.78076171875,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","done",40.1813616296202,"binary64"],["(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))","next",0.0078125,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","next",40.191636950770786,"binary64"]],"compiler":[[7,5],[7,6],[8,8]],"count":[[43,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[42,2],"picked":[1,1]}],"memory":[[2352096,2352096]],"min-error":[[0.00390625,"binary64"]],"time":2.588134765625,"type":"prune"},{"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))","#s(literal -1 binary64)","(-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","#s(literal 1 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))","(exp.f64 x)","x","(neg.f64 (neg.f64 (expm1.f64 x)))","(neg.f64 (expm1.f64 x))","(expm1.f64 x)"]],"locations":[["(neg.f64 (expm1.f64 x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))","cost-diff",0],["(neg.f64 (neg.f64 (expm1.f64 x)))","cost-diff",2],["(exp.f64 (neg.f64 x))","cost-diff",0],["(-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","cost-diff",3]],"memory":[[2408624,10461792]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))","#s(literal -1 binary64)","(-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","#s(literal 1 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp.f64 x)","x","(neg.f64 (neg.f64 (expm1.f64 x)))","(expm1.f64 x)","(neg.f64 (expm1.f64 x))","(expm1.f64 x)"]],"time":242.14501953125,"type":"simplify"},{"compiler":[[57,16]],"locations":[["(neg.f64 (expm1.f64 x))","accuracy",0.0],["(expm1.f64 x)","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))","accuracy",0.0078125],["(neg.f64 x)","accuracy",0.0],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))","accuracy",0.01171875],["(-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","accuracy",39.025848493167146]],"memory":[[-2078960,14843296]],"mixsample":[[5.114013671875,"ival-div",0],[0.2890625,"ival-true",0],[5.9384765625,"ival-exp",0],[0.43701171875,"exact",0],[5.0244140625,"ival-expm1",0],[0.219970703125,"ival-assert",0],[7.587646484375,"ival-neg",0]],"outcomes":[[38.193603515625,0,"valid",256]],"time":53.10986328125,"type":"localize"},{"count":[[10,38]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))","(-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))","(neg.f64 (neg.f64 (expm1.f64 x)))","(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))","(exp.f64 x)","(neg.f64 (expm1.f64 x))","(neg.f64 x)","(expm1.f64 x)"]],"memory":[[2063616,2063616]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/ -1 x)","(/ (- (* -1/2 x) 1) x)","(/ (- (* x (- (* -1/12 x) 1/2)) 1) x)","(/ (- (* x (- (* x (- (* 1/720 (pow x 2)) 1/12)) 1/2)) 1) x)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/6 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/6 (* -1/24 x))) 1/2))))","1","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/6 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/24 x) 1/6)) 1/2)) 1))","(/ 1 (- 1 (exp (neg x))))","(/ -1 (- 1 (exp (neg x))))","(- 1 (exp (neg x)))","(exp (neg x))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)","(- 1 (exp x))","(/ 1 (- 1 (exp (* -1 x))))","(/ -1 (- 1 (exp (* -1 x))))","(- 1 (exp (* -1 x)))","(exp (* -1 x))"]],"series":[[3.02294921875,"((neg (/ -1 (- 1 (exp (neg x))))) (/ -1 (- 1 (exp (neg x)))) (- 1 (exp (neg x))) (exp (neg x)) (neg (neg (- (exp x) 1))) (/ (exp x) (neg (neg (- (exp x) 1)))) (exp x) (neg (- (exp x) 1)) (neg x) (- (exp x) 1))","x","-inf"],[2.2421875,"((neg (/ -1 (- 1 (exp (neg x))))) (/ -1 (- 1 (exp (neg x)))) (- 1 (exp (neg x))) (exp (neg x)) (neg (neg (- (exp x) 1))) (/ (exp x) (neg (neg (- (exp x) 1)))) (exp x) (neg (- (exp x) 1)) (neg x) (- (exp x) 1))","x","inf"],[1.416015625,"((neg (/ -1 (- 1 (exp (neg x))))) (/ -1 (- 1 (exp (neg x)))) (- 1 (exp (neg x))) (exp (neg x)) (neg (neg (- (exp x) 1))) (/ (exp x) (neg (neg (- (exp x) 1)))) (exp x) (neg (- (exp x) 1)) (neg x) (- (exp x) 1))","x","0"]],"time":7.35205078125,"type":"series"},{"count":[[38,0]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/ -1 x)","(/ (- (* -1/2 x) 1) x)","(/ (- (* x (- (* -1/12 x) 1/2)) 1) x)","(/ (- (* x (- (* x (- (* 1/720 (pow x 2)) 1/12)) 1/2)) 1) x)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/6 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/6 (* -1/24 x))) 1/2))))","1","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/6 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/24 x) 1/6)) 1/2)) 1))","(/ 1 (- 1 (exp (neg x))))","(/ -1 (- 1 (exp (neg x))))","(- 1 (exp (neg x)))","(exp (neg x))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)","(- 1 (exp x))","(/ 1 (- 1 (exp (* -1 x))))","(/ -1 (- 1 (exp (* -1 x))))","(- 1 (exp (* -1 x)))","(exp (* -1 x))"]],"memory":[[-6270288,9728384]],"method":["egg-herbie"],"outputs":[[]],"time":153.275146484375,"type":"simplify"},{"count":[[10,147]],"inputs":[["(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))))","(-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))","(neg.f64 (neg.f64 (expm1.f64 x)))","(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))","(exp.f64 x)","(neg.f64 (expm1.f64 x))","(neg.f64 x)","(expm1.f64 x)"]],"memory":[[57328,25787152]],"outputs":[["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(+.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (+.f64 (exp.f64 (-.f64 (neg.f64 x) x)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (exp.f64 (neg.f64 x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (+.f64 (exp.f64 (-.f64 (neg.f64 x) x)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 (-.f64 (neg.f64 x) x)))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x)))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x)))) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x)))) (exp.f64 (neg.f64 x))) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x)))) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64)))))) (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 (-.f64 (neg.f64 x) x))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64)))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (-.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64)))))) (*.f64 (exp.f64 (neg.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64)))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 (-.f64 (neg.f64 x) x))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64)))))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64)))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x))))) (*.f64 (exp.f64 (neg.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x))))))","(+.f64 (*.f64 (exp.f64 (neg.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x))))) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (-.f64 (neg.f64 x) x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x))))","(neg.f64 (expm1.f64 (neg.f64 x)))","(+.f64 (neg.f64 (exp.f64 (neg.f64 x))) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 (neg.f64 x))))","(+.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))) (neg.f64 (/.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))) (neg.f64 (/.f64 (exp.f64 (*.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))))))","(-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (expm1.f64 (neg.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 (+.f64 x x)) (exp.f64 x))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (+.f64 x x)) (exp.f64 x))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (exp.f64 (+.f64 x x)) (exp.f64 x)))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (exp.f64 (+.f64 x x)) (exp.f64 x)))))","(-.f64 (/.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (exp.f64 x)) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (exp.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))) (/.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))) (/.f64 (exp.f64 (*.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (+.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(neg.f64 (neg.f64 (exp.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 (neg.f64 x))))","(*.f64 (exp.f64 (neg.f64 x)) (pow.f64 #s(literal 1 binary64) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 x))))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(/.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) x))","(pow.f64 (exp.f64 #s(literal -1 binary64)) x)","(neg.f64 (neg.f64 (expm1.f64 x)))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 x)) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 (expm1.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 #s(literal 0 binary64) (expm1.f64 x))","(+.f64 (+.f64 #s(literal 0 binary64) (exp.f64 x)) #s(literal -1 binary64))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 #s(literal 0 binary64) (exp.f64 x)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 x)))","(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(+.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))))","(+.f64 (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (exp.f64 (+.f64 x x)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64))))))","(+.f64 (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (+.f64 x x)))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (+.f64 (exp.f64 (-.f64 (neg.f64 x) x)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (exp.f64 (neg.f64 x))))","(neg.f64 (neg.f64 (exp.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (neg.f64 (exp.f64 x)))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(/.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(exp.f64 x)","(exp.f64 (-.f64 x #s(literal 0 binary64)))","(neg.f64 (expm1.f64 x))","(+.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64))","(+.f64 (neg.f64 (expm1.f64 x)) #s(literal 0 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))","(+.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(+.f64 (-.f64 (neg.f64 (exp.f64 x)) #s(literal 0 binary64)) #s(literal 1 binary64))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(-.f64 #s(literal 1 binary64) (exp.f64 x))","(-.f64 #s(literal 0 binary64) (expm1.f64 x))","(-.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (expm1.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (expm1.f64 x))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(neg.f64 x)","(+.f64 (neg.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(-.f64 #s(literal 0 binary64) x)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (/.f64 (*.f64 (*.f64 x x) x) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (*.f64 x x) x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (exp.f64 x))))","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(*.f64 (*.f64 x (neg.f64 x)) (/.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 (*.f64 x x) (neg.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))))","(/.f64 (*.f64 x (neg.f64 x)) x)","(/.f64 (*.f64 (*.f64 x x) (neg.f64 x)) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 x (neg.f64 x))) (neg.f64 x))","(neg.f64 (neg.f64 (expm1.f64 x)))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 x)) #s(literal 1 binary64)))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 (expm1.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 #s(literal 0 binary64) (expm1.f64 x))","(+.f64 (+.f64 #s(literal 0 binary64) (exp.f64 x)) #s(literal -1 binary64))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 (+.f64 #s(literal 0 binary64) (exp.f64 x)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 x)))"]],"time":746.794921875,"type":"rewrite"},{"compiler":[[1764,438]],"memory":[[3758640,11531152]],"time":17.425048828125,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","done",40.1813616296202,"binary64"],["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","next",0.0078125,"binary64"],["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","next",0.01171875,"binary64"]],"compiler":[[7,5],[7,6],[6,6]],"count":[[120,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[117,2],"picked":[2,0]}],"memory":[[-3335584,4910928]],"min-error":[[0.0,"binary64"]],"time":2.85986328125,"type":"prune"},{"inputs":[["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","#s(literal 1 binary64)","(expm1.f64 (neg.f64 x))","(neg.f64 x)","x","(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","(exp.f64 x)","x","(+.f64 (expm1.f64 x) #s(literal 0 binary64))","(expm1.f64 x)","#s(literal 0 binary64)"]],"locations":[["(expm1.f64 x)","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","cost-diff",0],["(+.f64 (expm1.f64 x) #s(literal 0 binary64))","cost-diff",2],["(neg.f64 x)","cost-diff",0],["(expm1.f64 (neg.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","cost-diff",0],["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","cost-diff",1]],"memory":[[918032,10401616]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","#s(literal 1 binary64)","(expm1.f64 (neg.f64 x))","(neg.f64 x)","x","(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp.f64 x)","x","(+.f64 (expm1.f64 x) #s(literal 0 binary64))","(expm1.f64 x)","(expm1.f64 x)","#s(literal 0 binary64)"]],"time":461.595947265625,"type":"simplify"},{"compiler":[[49,13]],"locations":[["(+.f64 (expm1.f64 x) #s(literal 0 binary64))","accuracy",0.0],["(expm1.f64 x)","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","accuracy",0.0078125],["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(expm1.f64 (neg.f64 x))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","accuracy",0.01171875]],"memory":[[4131152,12015968]],"mixsample":[[8.150146484375,"ival-div",0],[0.63623046875,"ival-true",0],[5.106201171875,"ival-exp",0],[5.680908203125,"ival-add",0],[8.447509765625,"ival-expm1",0],[0.638427734375,"exact",0],[0.244140625,"ival-assert",0],[5.819580078125,"ival-neg",0]],"outcomes":[[57.113525390625,0,"valid",256]],"time":79.47509765625,"type":"localize"},{"count":[[8,29]],"inputs":[["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","(expm1.f64 (neg.f64 x))","(neg.f64 x)","(+.f64 (expm1.f64 x) #s(literal 0 binary64))","(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","(exp.f64 x)","(expm1.f64 x)"]],"memory":[[1429376,1429376]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/ -1 x)","(/ (- (* -1/2 x) 1) x)","(/ (- (* x (- (* -1/12 x) 1/2)) 1) x)","(/ (- (* x (- (* x (- (* 1/720 (pow x 2)) 1/12)) 1/2)) 1) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(/ -1 (- (exp (neg x)) 1))","(/ 1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)","(/ -1 (- (exp (* -1 x)) 1))","(/ 1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)"]],"series":[[2.7060546875,"((neg (/ 1 (- (exp (neg x)) 1))) (/ 1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (+ (- (exp x) 1) 0) (/ (exp x) (+ (- (exp x) 1) 0)) (exp x) (- (exp x) 1))","x","-inf"],[2.1630859375,"((neg (/ 1 (- (exp (neg x)) 1))) (/ 1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (+ (- (exp x) 1) 0) (/ (exp x) (+ (- (exp x) 1) 0)) (exp x) (- (exp x) 1))","x","inf"],[1.030029296875,"((neg (/ 1 (- (exp (neg x)) 1))) (/ 1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (+ (- (exp x) 1) 0) (/ (exp x) (+ (- (exp x) 1) 0)) (exp x) (- (exp x) 1))","x","0"]],"time":6.819091796875,"type":"series"},{"count":[[29,0]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/ -1 x)","(/ (- (* -1/2 x) 1) x)","(/ (- (* x (- (* -1/12 x) 1/2)) 1) x)","(/ (- (* x (- (* x (- (* 1/720 (pow x 2)) 1/12)) 1/2)) 1) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(/ -1 (- (exp (neg x)) 1))","(/ 1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)","(/ -1 (- (exp (* -1 x)) 1))","(/ 1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)"]],"memory":[[-509616,7565760]],"method":["egg-herbie"],"outputs":[[]],"time":327.161865234375,"type":"simplify"},{"count":[[8,120]],"inputs":[["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","(expm1.f64 (neg.f64 x))","(neg.f64 x)","(+.f64 (expm1.f64 x) #s(literal 0 binary64))","(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","(exp.f64 x)","(expm1.f64 x)"]],"memory":[[-3747696,13693104]],"outputs":[["#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)"]],"time":405.001953125,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1398112,1398112]],"time":2.820068359375,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","done",40.1813616296202,"binary64"],["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","done",0.0078125,"binary64"],["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","done",0.01171875,"binary64"],["#s(literal 12 binary64)","fresh",62.02383873136896,"binary64"],["#s(literal 4 binary64)","fresh",62.00506620444908,"binary64"],["#s(literal 3 binary64)","next",61.99909976569673,"binary64"],["#s(literal 1 binary64)","next",61.950527774960584,"binary64"],["#s(literal 0 binary64)","next",42.754304480149145,"binary64"],["#s(literal -1 binary64)","next",61.76601342671524,"binary64"],["#s(literal -3 binary64)","next",61.76666433831623,"binary64"]],"compiler":[[7,5],[7,6],[6,6],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]],"count":[[18,10]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,7],"picked":[2,2]}],"memory":[[-4462528,3475904]],"min-error":[[0.0,"binary64"]],"time":9.114013671875,"type":"prune"},{"inputs":[["#s(literal 0 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)"]],"memory":[[1554112,9794704]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)"]],"time":190.220947265625,"type":"simplify"},{"compiler":[[7,8]],"memory":[[5004192,5004192]],"mixsample":[[0.1806640625,"ival-true",0],[0.559814453125,"exact",0],[0.101318359375,"ival-assert",0]],"outcomes":[[6.376708984375,0,"valid",256]],"time":11.801025390625,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28720,28720]],"outputs":[[]],"series":[[0.005859375,"()","x","-inf"],[0.010986328125,"()","x","inf"],[0.0400390625,"()","x","0"]],"time":0.193115234375,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-7413536,9769600]],"method":["egg-herbie"],"outputs":[[]],"time":177.37890625,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[3718032,11952576]],"outputs":[[]],"time":339.66796875,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[48576,48576]],"time":0.297119140625,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","done",40.1813616296202,"binary64"],["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","done",0.0078125,"binary64"],["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","done",0.01171875,"binary64"],["#s(literal 12 binary64)","fresh",62.02383873136896,"binary64"],["#s(literal 4 binary64)","fresh",62.00506620444908,"binary64"],["#s(literal 3 binary64)","done",61.99909976569673,"binary64"],["#s(literal 1 binary64)","done",61.950527774960584,"binary64"],["#s(literal 0 binary64)","done",42.754304480149145,"binary64"],["#s(literal -1 binary64)","done",61.76601342671524,"binary64"],["#s(literal -3 binary64)","done",61.76666433831623,"binary64"]],"compiler":[[42,25],[7,5],[7,6],[6,6],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]],"count":[[10,10]],"kept":[{"done":[3,3],"fresh":[2,2],"new":[0,0],"picked":[5,5]}],"memory":[[3264864,3264864]],"min-error":[[0.0,"binary64"]],"time":92.9208984375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.0078125,1,"binary64"],["(exp.f64 x)",0.0078125,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[12,1]],"inputs":[["#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))","(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (neg.f64 (neg.f64 (expm1.f64 x))))"]],"memory":[[-780320,7074992]],"oracle":[63.06805718683357],"outputs":[["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))"]],"repr":["binary64"],"time":24.756103515625,"times":[[7.7841796875,"x"],[6.929931640625,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[7.8798828125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.01171875,1,"binary64"],["(exp.f64 x)",0.01171875,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[9,1]],"inputs":[["#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)","(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))))"]],"memory":[[-2062368,6181840]],"oracle":[63.06805718683357],"outputs":[["(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))"]],"repr":["binary64"],"time":20.02294921875,"times":[[6.343994140625,"x"],[5.243896484375,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[6.635009765625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[42.754304480149145],"baseline":[42.754304480149145],"branch":[["x",42.754304480149145,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",42.754304480149145,1,"binary64"],["(exp.f64 x)",42.75430448014915,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[7,1]],"inputs":[["#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 12 binary64)"]],"memory":[[-3845360,5691456]],"oracle":[62.8933257378041],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":15.14404296875,"times":[[4.656982421875,"x"],[4.453125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[4.057861328125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[61.76601342671534],"baseline":[61.76601342671524],"branch":[["(exp.f64 x)",61.76601342671534,1,"binary64"],["x",61.76601342671535,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",61.76601342671535,1,"binary64"]],"compiler":[[2,2],[1,1],[7,5]],"count":[[2,1]],"inputs":[["#s(literal -3 binary64)","#s(literal -1 binary64)"]],"memory":[[4021776,4021776]],"oracle":[61.772667726149464],"outputs":[["#s(literal -1 binary64)"]],"repr":["binary64"],"time":8.885009765625,"times":[[2.114990234375,"(exp.f64 x)"],[2.777099609375,"x"],[2.39892578125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[61.76666433831636],"baseline":[61.76666433831623],"branch":[["x",61.76666433831636,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",61.76666433831638,1,"binary64"],["(exp.f64 x)",61.766664338316374,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[1,1]],"inputs":[["#s(literal -3 binary64)"]],"link":["."],"memory":[[-4613616,3749040]],"name":["expq2 (section 3.11)"],"oracle":[61.76666433831623],"outputs":[["#s(literal -3 binary64)"]],"repr":["binary64"],"time":8.302978515625,"times":[[2.281982421875,"x"],[2.501953125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.9970703125,"(exp.f64 x)"]],"type":"regimes"},{"inputs":[["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)"]],"memory":[[3582960,11726240]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (+.f64 (expm1.f64 x) #s(literal 0 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))","(neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)"]],"time":322.720947265625,"type":"simplify"},{"compiler":[[13,10]],"memory":[[1232016,1232016]],"stop":[["fuel",1]],"time":4.488037109375,"type":"soundness"},{"compiler":[[13,10],[13,10],[6,6],[6,6],[7,5],[7,5]],"memory":[[-656896,23513872]],"remove-preprocessing":[[],[],[],[],[],[]],"time":66.069091796875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02197265625,"type":"end"}]