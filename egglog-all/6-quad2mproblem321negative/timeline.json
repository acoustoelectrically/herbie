[{"memory":[[16672,16672]],"time":0.044921875,"type":"start"},{"compiler":[[15,12]],"memory":[[-4267552,37000544]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":201.4189453125,"type":"analyze"},{"bogosity":[{"infinite":0.06403829896457514,"invalid":0.25597941597986645,"precondition":0.0014641286106780171,"valid":0.6785181564448804}],"memory":[[19537120,378071968]],"mixsample":[[8.0673828125,"ival-sub",1200],[120.424072265625,"ival-div",0],[68.082763671875,"adjust",800],[0.157470703125,"ival-sub",4800],[5.387939453125,"ival-mult",1200],[0.0400390625,"ival-div",400],[2.677978515625,"ival-sub",1600],[4.462158203125,"ival-assert",0],[0.03076171875,"ival-sub",3600],[134.896728515625,"ival-sub",0],[13.15869140625,"ival-sqrt",1200],[0.328369140625,"ival-sqrt",4800],[80.725341796875,"ival-sqrt",0],[4.49169921875,"ival-sub",400],[5.867919921875,"ival-mult",800],[0.6904296875,"ival-sub",4400],[5.207763671875,"ival-sub",800],[0.76220703125,"ival-mult",1600],[3.48193359375,"adjust",2800],[0.01416015625,"ival-div",2000],[0.101806640625,"ival-sqrt",3600],[0.31640625,"ival-sub",4000],[7.355712890625,"ival-sqrt",400],[5.787109375,"ival-sqrt",2000],[0.072998046875,"ival-mult",2000],[2.947021484375,"ival-sub",2000],[11.14990234375,"ival-sqrt",800],[0.689453125,"ival-sqrt",4000],[0.0078125,"ival-sub",6800],[0.0322265625,"ival-sqrt",6800],[1.72412109375,"ival-sqrt",4400],[24.927978515625,"adjust",2000],[3.60595703125,"ival-sub",2400],[160.376953125,"ival-mult",0],[6.249267578125,"ival-mult",400],[4.819580078125,"ival-sqrt",1600],[0.04931640625,"ival-div",800],[9.811279296875,"ival-true",0],[7.107666015625,"ival-sqrt",2400],[0.007080078125,"ival-mult",4000],[66.011962890625,"ival-neg",0]],"outcomes":[[213.5361328125,1,"valid",1335],[100.515380859375,0,"invalid",1171],[265.36083984375,2,"valid",1213],[61.453125,3,"valid",202],[463.9580078125,0,"valid",5506]],"time":1527.322021484375,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[122,0,14,120]],"explanations":[["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",3,0,[["(*.f64 b_2 b_2)","underflow",38],["(*.f64 a c)","underflow",28],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[1,2]]],["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",3,0,[["(*.f64 b_2 b_2)","overflow",76],["(*.f64 a c)","overflow",18]],[[1,2,1]]],["/.f64","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",13,0,[["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",26],["(*.f64 b_2 b_2)","underflow",38],["(*.f64 a c)","underflow",28],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[]]],["-.f64","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",68,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",87,0,[["(*.f64 b_2 b_2)","overflow",76],["(*.f64 a c)","overflow",18],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",87]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",3,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",90,0,false,0,false],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",15,0,false,2,[1.559681065657236e-62,-6.8571194752853695e+75,-4.132554683864109e-173]],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",68,0,false,0,false],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,2],[2,34],[1,100],[0,120]],"maybe-confusion":[[122,0,0,14,0,120]],"memory":[[-2454384,66809664]],"mixsample":[[0.415771484375,"ival-sub",1200],[6.5419921875,"ival-div",0],[4.366943359375,"adjust",800],[0.432373046875,"ival-sqrt",2000],[0.328125,"ival-mult",1200],[0.154296875,"ival-sub",1600],[0.255126953125,"ival-sub",2000],[0.77490234375,"ival-sqrt",800],[0.24755859375,"ival-assert",0],[0.02197265625,"ival-sqrt",4000],[0.01806640625,"ival-sub",3600],[7.71044921875,"ival-sub",0],[0.7314453125,"ival-sqrt",1200],[0.192138671875,"ival-sub",400],[4.285400390625,"ival-sqrt",0],[0.0517578125,"ival-sqrt",4400],[1.831298828125,"adjust",2000],[0.24365234375,"ival-sub",2400],[0.01904296875,"ival-sub",4400],[0.47705078125,"ival-mult",800],[0.476806640625,"ival-sqrt",1600],[0.4765625,"ival-mult",400],[0.393798828125,"ival-sub",800],[8.11376953125,"ival-mult",0],[0.179931640625,"adjust",2800],[0.505859375,"ival-sqrt",2400],[0.659912109375,"ival-true",0],[0.02490234375,"ival-sqrt",3600],[0.009033203125,"ival-sub",4000],[0.292236328125,"ival-sqrt",400],[3.018310546875,"ival-neg",0]],"outcomes":[[14.433349609375,1,"valid",84],[23.0673828125,2,"valid",92],[3.151123046875,3,"valid",10],[29.27734375,0,"valid",326]],"time":158.763916015625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[5133968,22154432]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)"]],"symmetry":[[]],"time":361.795166015625,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.083984375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",29.091938737141167,"binary64"]],"compiler":[[13,10]],"memory":[[338016,338016]],"time":0.636962890625,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0]],"memory":[[-6101824,10130544]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"time":174.139892578125,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",2.9291171925642243],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",15.775165141019793],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412]],"memory":[[-12521952,13616816]],"mixsample":[[0.18115234375,"ival-sub",1200],[3.269775390625,"ival-div",0],[1.907470703125,"adjust",800],[0.220947265625,"ival-sqrt",2000],[0.19921875,"ival-mult",1200],[0.055908203125,"ival-sub",1600],[0.195556640625,"ival-sub",2000],[0.33837890625,"ival-sqrt",800],[0.1064453125,"ival-assert",0],[0.010986328125,"ival-sqrt",4000],[0.0048828125,"ival-sub",3600],[3.206298828125,"ival-sub",0],[0.33642578125,"ival-sqrt",1200],[0.079345703125,"ival-sub",400],[1.822021484375,"ival-sqrt",0],[0.02490234375,"ival-sqrt",4400],[0.794189453125,"adjust",2000],[0.12109375,"ival-sub",2400],[0.010009765625,"ival-sub",4400],[0.202392578125,"ival-mult",800],[0.095947265625,"ival-sqrt",1600],[0.2060546875,"ival-mult",400],[0.188232421875,"ival-sub",800],[3.764892578125,"ival-mult",0],[0.09716796875,"adjust",2800],[0.231201171875,"ival-sqrt",2400],[0.202392578125,"ival-true",0],[0.010986328125,"ival-sqrt",3600],[0.005126953125,"ival-sub",4000],[0.14697265625,"ival-sqrt",400],[1.32958984375,"ival-neg",0]],"outcomes":[[6.29248046875,1,"valid",42],[14.125,2,"valid",46],[1.29150390625,3,"valid",5],[13.554443359375,0,"valid",163]],"time":44.7080078125,"type":"localize"},{"count":[[5,97]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-177760,7786784]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[3.748046875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[2.31201171875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[1.279052734375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[3.06494140625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.423828125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[2.612060546875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[4.06591796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[2.675048828125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[1.849853515625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":26.113037109375,"type":"series"},{"count":[[97,0]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[2997680,10610512]],"method":["egg-herbie"],"outputs":[[]],"time":159.06201171875,"type":"simplify"},{"count":[[5,75]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-6784512,18802464]],"outputs":[["(neg.f64 (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))","(+.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 b_2 a))","(+.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a))","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) #s(literal 16 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))","(-.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a a)) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a a)) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))","(-.f64 (/.f64 (*.f64 b_2 a) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (*.f64 a a)))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (-.f64 b_2 #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(+.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(-.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(-.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","b_2","(neg.f64 b_2)","(+.f64 b_2 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 16 binary64) b_2)","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 16 binary64) b_2))","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 b_2 (*.f64 (*.f64 b_2 b_2) b_2))","(neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 b_2 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(+.f64 b_2 (*.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) c)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(-.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(-.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 c c) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (/.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(+.f64 (*.f64 a c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 a c))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 16 binary64) (*.f64 a c)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(+.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 c c) (*.f64 c c)))))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (neg.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))))","(+.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) (*.f64 (*.f64 a a) (*.f64 c c))))"]],"time":605.697998046875,"type":"rewrite"},{"compiler":[[1728,287]],"memory":[[-622432,7220816]],"time":15.0810546875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",49.07027246266064,"binary64"],["(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",45.191996463501745,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","fresh",53.302313844864074,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","fresh",45.96514645966939,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.091938737141167,"binary64"],["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","fresh",57.77833476459413,"binary64"],["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",44.909390680545215,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","next",63.184289748784664,"binary64"],["(/.f64 (+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",62.922002416869965,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","next",46.62986445014101,"binary64"],["(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))))","fresh",63.43969794883377,"binary64"],["(+.f64 (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) #s(literal 16 binary64)))","fresh",63.20976730566153,"binary64"]],"compiler":[[18,11],[14,11],[25,14],[15,11],[13,10],[12,8],[12,9],[12,8],[65,18],[13,9],[95,21],[18,12],[18,11],[14,11],[25,14],[15,11],[12,8],[12,9],[12,8],[65,18],[13,9],[95,21],[18,12]],"count":[[76,12]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,11],"picked":[1,1]}],"memory":[[123568,8384592]],"min-error":[[23.28046843156281,"binary64"]],"time":11.638916015625,"type":"prune"},{"inputs":[["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","b_2","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","b_2","(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 b_2 #s(literal 16 binary64))","b_2","#s(literal 16 binary64)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) b_2)","(*.f64 b_2 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 a c)","a","c"]],"locations":[["(*.f64 (*.f64 b_2 b_2) b_2)","cost-diff",0],["(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","cost-diff",0],["(-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(*.f64 b_2 #s(literal 16 binary64))","cost-diff",0],["(-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","cost-diff",0],["(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","cost-diff",0],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","cost-diff",0],["(*.f64 a a)","cost-diff",0],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","cost-diff",0],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","cost-diff",0],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","cost-diff",0],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0]],"memory":[[3453040,12714512]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)","(-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2)) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","b_2","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2)) (neg.f64 a))","(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2)))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","b_2","(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)","(-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 b_2 #s(literal 16 binary64))","b_2","#s(literal 16 binary64)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)","(-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) b_2)","(*.f64 b_2 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 a c)","a","c"]],"time":237.2919921875,"type":"simplify"},{"compiler":[[269,27]],"locations":[["(*.f64 (*.f64 b_2 b_2) b_2)","accuracy",0.09765625],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",2.469775259804325],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412],["(-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",0.01953125],["(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",0.2109375],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412],["(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","accuracy",0.0],["(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","accuracy",0.015625],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","accuracy",3.5790525197398466],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","accuracy",14.212436208977326],["(*.f64 a a)","accuracy",0.0],["(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","accuracy",0.015625],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","accuracy",3.5790525197398466],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","accuracy",14.212436208977326],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",3.762734509296831],["(-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",13.544194098639203],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412]],"memory":[[-1914944,38442944]],"mixsample":[[0.24072265625,"ival-sub",1200],[0.008056640625,"ival-sub",4800],[6.2470703125,"adjust",800],[17.958251953125,"ival-div",0],[0.158935546875,"ival-mult",1200],[0.205322265625,"ival-sub",1600],[0.1953125,"ival-assert",0],[9.72705078125,"ival-sub",0],[0.393310546875,"ival-sqrt",1200],[0.012939453125,"ival-sqrt",4800],[3.59423828125,"ival-sqrt",0],[0.2841796875,"ival-sub",400],[3.608642578125,"ival-add",0],[0.333740234375,"ival-mult",800],[0.022216796875,"ival-sub",4400],[0.295654296875,"ival-sub",800],[0.07080078125,"ival-mult",1600],[0.421630859375,"adjust",2800],[0.023193359375,"ival-sub",4000],[0.3837890625,"ival-sqrt",400],[0.2119140625,"ival-sqrt",2000],[0.16552734375,"ival-sub",2000],[0.4599609375,"ival-sqrt",800],[0.053955078125,"ival-sqrt",4000],[0.041748046875,"ival-sqrt",4400],[3.0849609375,"adjust",2000],[0.110595703125,"ival-sub",2400],[0.334716796875,"ival-mult",400],[19.929443359375,"ival-mult",0],[0.338134765625,"ival-sqrt",1600],[0.521484375,"ival-true",0],[0.245361328125,"ival-sqrt",2400],[0.406494140625,"exact",0],[2.16015625,"ival-neg",0]],"outcomes":[[22.917724609375,1,"valid",38],[34.054443359375,2,"valid",42],[6.94189453125,3,"valid",8],[56.083251953125,0,"valid",168]],"time":160.841064453125,"type":"localize"},{"count":[[17,252]],"inputs":[["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 b_2 #s(literal 16 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) b_2)"]],"memory":[[7027904,14774208]],"outputs":[["(* 1/2 (/ c b_2))","(+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2)))","(+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3))))))","(+ (* 1/2 (/ c b_2)) (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* 1/16 (/ (pow c 3) (pow b_2 5))) (* 1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)))))))","(* 1/2 (/ (* a c) b_2))","(* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2))))","(* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* 2 (/ b_2 a))","(/ (+ (* 2 b_2) (* (pow a 2) (pow c 2))) a)","(* 2 b_2)","(+ (* 2 b_2) (* (pow a 2) (pow c 2)))","(+ b_2 (* (pow a 2) (pow c 2)))","(pow a 2)","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* -1 (* (pow a 2) (pow c 2)))) a)","(* -2 b_2)","(- (* -1 (* (pow a 2) (pow c 2))) (* 2 b_2))","(/ (- (* 16 b_2) b_2) a)","(/ (- (+ (* 1/2 (/ (* a c) b_2)) (* 16 b_2)) b_2) a)","(/ (- (+ (* 16 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) b_2) a)","(/ (- (+ (* 16 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) b_2) a)","(- (* 16 b_2) b_2)","(- (+ (* 1/2 (/ (* a c) b_2)) (* 16 b_2)) b_2)","(- (+ (* 16 b_2) (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2))))) b_2)","(- (+ (* 16 b_2) (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))) b_2)","(/ (- (pow b_2 4) b_2) a)","(/ (- (+ (* 1/2 (/ (* a c) b_2)) (pow b_2 4)) b_2) a)","(/ (- (+ (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2)))) (pow b_2 4)) b_2) a)","(/ (- (+ (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3))))))) (pow b_2 4)) b_2) a)","(- (pow b_2 4) b_2)","(- (+ (* 1/2 (/ (* a c) b_2)) (pow b_2 4)) b_2)","(- (+ (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (pow b_2 4)) b_2)","(- (+ (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (pow b_2 4)) b_2)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 a))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* a (pow c 2))","(* a (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* -1 (* a (pow c 2)))","(* a (+ (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (- (* -2 (/ b_2 (pow a 2))) (pow c 2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 16 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 a)))))","(* a (- (* 16 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 a))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 a))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ (pow b_2 4) a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) a))))","(* a (- (/ (pow b_2 4) a) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2)))))","(* -1 (* a (+ (* 2 (/ b_2 (pow a 2))) (pow c 2))))","(+ (* 16 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -16 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -16 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -16 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* 16 b_2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (* 16 b_2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))","(+ (* -1 (/ (+ (* -1 (pow b_2 4)) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (* -1 (pow b_2 4))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b_2 4) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- b_2 (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(+ (* 2 (/ b_2 a)) (* a (pow c 2)))","(+ (* -2 (/ b_2 a)) (* -1 (* a (pow c 2))))","(- (* -2 b_2) (* (pow a 2) (pow c 2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (* 16 (/ 1 a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (* 16 (/ 1 a)))))","(- (* 16 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 16 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 16 (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))) (* (sqrt (* a c)) (sqrt -1)))","(* 16 b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (- (/ 1 a) (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (- (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (/ 1 a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- 1 (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- (+ 1 (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5))))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(pow b_2 4)","(pow b_2 3)","(/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2)","(/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2)","(/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2)","(/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2)","(/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2)","(/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ (* 2 (/ 1 a)) (/ (* a (pow c 2)) b_2)))","(* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (- (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a))))","(* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2))","(* 15 (/ b_2 a))","(* b_2 (+ (* 1/2 (/ c (pow b_2 2))) (* 15 (/ 1 a))))","(* b_2 (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/2 (/ c (pow b_2 2))) (* 15 (/ 1 a)))))","(* b_2 (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/2 (/ c (pow b_2 2))) (* 15 (/ 1 a))))))","(* 15 b_2)","(* b_2 (+ 15 (* 1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (- (+ 15 (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))) (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (- (+ 15 (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))) (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(/ (pow b_2 4) a)","(* (pow b_2 4) (- (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (- (+ (* 1/2 (/ c (pow b_2 5))) (/ 1 a)) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 7))) (+ (* 1/2 (/ c (pow b_2 5))) (/ 1 a))) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (- 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (- (+ 1 (* 1/2 (/ (* a c) (pow b_2 5)))) (/ 1 (pow b_2 3))))","(* (pow b_2 4) (- (+ 1 (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 7)))) (+ (* -1/2 (/ (* a c) (pow b_2 5))) (/ 1 (pow b_2 3)))))","(* -1 (* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2)))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))))))","(* -1 (* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 (* b_2 (+ (* 2 (/ 1 a)) (/ (* a (pow c 2)) b_2))))","(* -1 (* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2))))","(* 17 (/ b_2 a))","(* -1 (* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 17 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 17 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 17 (/ 1 a)))))","(* 17 b_2)","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 17)))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 17 (* -1/2 (/ (* a c) (pow b_2 2)))))))","(* -1 (* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 17 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))))","(* (pow b_2 4) (+ (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (+ (* -1 (/ (- (* 1/2 (/ c (pow b_2 2))) (/ 1 a)) (pow b_2 3))) (/ 1 a)))","(* (pow b_2 4) (+ (* -1 (/ (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (/ 1 a)) (pow b_2 3))) (/ 1 a)))","(* (pow b_2 4) (+ 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (+ 1 (* -1 (/ (- (* 1/2 (/ (* a c) (pow b_2 2))) 1) (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))) (pow b_2 3)))))","(* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* c (+ (* 1/8 (/ a (pow b_2 3))) (* c (+ (* 1/16 (/ (pow a 2) (pow b_2 5))) (* 1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))))))) (* 1/2 (/ 1 b_2))))","(* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2))))","(* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5))))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(- (+ (* 1/2 (/ c b_2)) (* 16 (/ b_2 a))) (/ b_2 a))","(- (+ (* 16 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))) (/ b_2 a))","(- (+ (* 16 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2))))) (/ b_2 a))","(- (+ (* 16 b_2) (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2))))) b_2)","(- (+ (* 16 b_2) (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))) b_2)","(- (+ (* 1/2 (/ c b_2)) (/ (pow b_2 4) a)) (/ b_2 a))","(- (+ (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (/ (pow b_2 4) a)) (/ b_2 a))","(- (+ (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))) (/ (pow b_2 4) a)) (/ b_2 a))","(- (+ (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (pow b_2 4)) b_2)","(- (+ (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (pow b_2 4)) b_2)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 (* a c))))))","(* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* (pow c 2) (+ a (* 2 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ (* 2 (/ b_2 (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* -2 (/ b_2 (* a (pow c 2)))) (* -1 a)))","(* (pow c 2) (- (* -2 (/ b_2 (pow c 2))) (pow a 2)))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 16 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 (* a c))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 (* a c)))))))","(* c (- (* 16 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 c))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 c))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ (pow b_2 4) (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) (* a c))))))","(* c (- (/ (pow b_2 4) c) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -16 (/ b_2 (* a c))) (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c)) (* 16 (/ b_2 a))) c)))))","(* -1 (* c (- (* -16 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* 16 b_2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (* 16 b_2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (pow b_2 4) (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c)) (/ (pow b_2 4) a)) c)))))","(* -1 (* c (- (* -1 (/ (pow b_2 4) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"series":[[3.550048828125,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","c","-inf"],[7.567138671875,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","c","inf"],[2.5859375,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","c","0"],[6.037841796875,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","b_2","-inf"],[8.14794921875,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","b_2","inf"],[5.62109375,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","b_2","0"],[4.9501953125,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","a","-inf"],[10.955810546875,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","a","inf"],[5.319091796875,"((/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (/ (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) a) (neg (+ (+ (* (* a a) (* c c)) b_2) b_2)) (/ (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* b_2 16) (sqrt (- (* b_2 b_2) (* a c)))) (* b_2 16) (/ (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2))","a","0"]],"time":61.12109375,"type":"series"},{"count":[[252,0]],"inputs":[["(* 1/2 (/ c b_2))","(+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2)))","(+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3))))))","(+ (* 1/2 (/ c b_2)) (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* 1/16 (/ (pow c 3) (pow b_2 5))) (* 1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)))))))","(* 1/2 (/ (* a c) b_2))","(* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2))))","(* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* 2 (/ b_2 a))","(/ (+ (* 2 b_2) (* (pow a 2) (pow c 2))) a)","(* 2 b_2)","(+ (* 2 b_2) (* (pow a 2) (pow c 2)))","(+ b_2 (* (pow a 2) (pow c 2)))","(pow a 2)","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* -1 (* (pow a 2) (pow c 2)))) a)","(* -2 b_2)","(- (* -1 (* (pow a 2) (pow c 2))) (* 2 b_2))","(/ (- (* 16 b_2) b_2) a)","(/ (- (+ (* 1/2 (/ (* a c) b_2)) (* 16 b_2)) b_2) a)","(/ (- (+ (* 16 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) b_2) a)","(/ (- (+ (* 16 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) b_2) a)","(- (* 16 b_2) b_2)","(- (+ (* 1/2 (/ (* a c) b_2)) (* 16 b_2)) b_2)","(- (+ (* 16 b_2) (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2))))) b_2)","(- (+ (* 16 b_2) (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2))))) b_2)","(/ (- (pow b_2 4) b_2) a)","(/ (- (+ (* 1/2 (/ (* a c) b_2)) (pow b_2 4)) b_2) a)","(/ (- (+ (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2)))) (pow b_2 4)) b_2) a)","(/ (- (+ (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3))))))) (pow b_2 4)) b_2) a)","(- (pow b_2 4) b_2)","(- (+ (* 1/2 (/ (* a c) b_2)) (pow b_2 4)) b_2)","(- (+ (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (pow b_2 4)) b_2)","(- (+ (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (pow b_2 4)) b_2)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 a))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* a (pow c 2))","(* a (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* -1 (* a (pow c 2)))","(* a (+ (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (- (* -2 (/ b_2 (pow a 2))) (pow c 2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 16 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 a)))))","(* a (- (* 16 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 a))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 a))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ (pow b_2 4) a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) a))))","(* a (- (/ (pow b_2 4) a) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2)))))","(* -1 (* a (+ (* 2 (/ b_2 (pow a 2))) (pow c 2))))","(+ (* 16 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -16 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -16 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -16 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* 16 b_2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (* 16 b_2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))","(+ (* -1 (/ (+ (* -1 (pow b_2 4)) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (* -1 (pow b_2 4))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b_2 4) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- b_2 (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(+ (* 2 (/ b_2 a)) (* a (pow c 2)))","(+ (* -2 (/ b_2 a)) (* -1 (* a (pow c 2))))","(- (* -2 b_2) (* (pow a 2) (pow c 2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (* 16 (/ 1 a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (* 16 (/ 1 a)))))","(- (* 16 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 16 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 16 (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))) (* (sqrt (* a c)) (sqrt -1)))","(* 16 b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (- (/ 1 a) (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (- (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (/ 1 a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- 1 (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- (+ 1 (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5))))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(pow b_2 4)","(pow b_2 3)","(/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2)","(/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2)","(/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2)","(/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2)","(/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2)","(/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ (* 2 (/ 1 a)) (/ (* a (pow c 2)) b_2)))","(* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (- (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a))))","(* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2))","(* 15 (/ b_2 a))","(* b_2 (+ (* 1/2 (/ c (pow b_2 2))) (* 15 (/ 1 a))))","(* b_2 (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/2 (/ c (pow b_2 2))) (* 15 (/ 1 a)))))","(* b_2 (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/2 (/ c (pow b_2 2))) (* 15 (/ 1 a))))))","(* 15 b_2)","(* b_2 (+ 15 (* 1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (- (+ 15 (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))) (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (- (+ 15 (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))) (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(/ (pow b_2 4) a)","(* (pow b_2 4) (- (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (- (+ (* 1/2 (/ c (pow b_2 5))) (/ 1 a)) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 7))) (+ (* 1/2 (/ c (pow b_2 5))) (/ 1 a))) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (- 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (- (+ 1 (* 1/2 (/ (* a c) (pow b_2 5)))) (/ 1 (pow b_2 3))))","(* (pow b_2 4) (- (+ 1 (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 7)))) (+ (* -1/2 (/ (* a c) (pow b_2 5))) (/ 1 (pow b_2 3)))))","(* -1 (* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2)))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))))))","(* -1 (* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 (* b_2 (+ (* 2 (/ 1 a)) (/ (* a (pow c 2)) b_2))))","(* -1 (* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2))))","(* 17 (/ b_2 a))","(* -1 (* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 17 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 17 (/ 1 a)))))","(* -1 (* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 17 (/ 1 a)))))","(* 17 b_2)","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 17)))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 17 (* -1/2 (/ (* a c) (pow b_2 2)))))))","(* -1 (* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 17 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))))","(* (pow b_2 4) (+ (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (+ (* -1 (/ (- (* 1/2 (/ c (pow b_2 2))) (/ 1 a)) (pow b_2 3))) (/ 1 a)))","(* (pow b_2 4) (+ (* -1 (/ (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (/ 1 a)) (pow b_2 3))) (/ 1 a)))","(* (pow b_2 4) (+ 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (+ 1 (* -1 (/ (- (* 1/2 (/ (* a c) (pow b_2 2))) 1) (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))) (pow b_2 3)))))","(* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* c (+ (* 1/8 (/ a (pow b_2 3))) (* c (+ (* 1/16 (/ (pow a 2) (pow b_2 5))) (* 1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))))))) (* 1/2 (/ 1 b_2))))","(* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2))))","(* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5))))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(- (+ (* 1/2 (/ c b_2)) (* 16 (/ b_2 a))) (/ b_2 a))","(- (+ (* 16 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))) (/ b_2 a))","(- (+ (* 16 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2))))) (/ b_2 a))","(- (+ (* 16 b_2) (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2))))) b_2)","(- (+ (* 16 b_2) (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2))))) b_2)","(- (+ (* 1/2 (/ c b_2)) (/ (pow b_2 4) a)) (/ b_2 a))","(- (+ (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (/ (pow b_2 4) a)) (/ b_2 a))","(- (+ (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))) (/ (pow b_2 4) a)) (/ b_2 a))","(- (+ (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (pow b_2 4)) b_2)","(- (+ (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (pow b_2 4)) b_2)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 (* a c))))))","(* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ b_2 c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* (pow c 2) (+ a (* 2 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ (* 2 (/ b_2 (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* -2 (/ b_2 (* a (pow c 2)))) (* -1 a)))","(* (pow c 2) (- (* -2 (/ b_2 (pow c 2))) (pow a 2)))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 16 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 (* a c))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 (* a c)))))))","(* c (- (* 16 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 c))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 16 (/ b_2 c))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ (pow b_2 4) (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) (* a c))))))","(* c (- (/ (pow b_2 4) c) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (/ (pow b_2 4) c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -16 (/ b_2 (* a c))) (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 16 (/ b_2 a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c)) (* 16 (/ b_2 a))) c)))))","(* -1 (* c (- (* -16 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* 16 b_2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (* 16 b_2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (pow b_2 4) (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c)) (/ (pow b_2 4) a)) c)))))","(* -1 (* c (- (* -1 (/ (pow b_2 4) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))"]],"memory":[[-6282352,11732464]],"method":["egg-herbie"],"outputs":[[]],"time":148.0869140625,"type":"simplify"},{"count":[[17,255]],"inputs":[["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2))","(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 b_2 #s(literal 16 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) b_2)"]],"memory":[[1798368,17670592]],"outputs":[["#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)","#s(literal 16 binary64)","#s(literal -1/2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","#s(literal 18 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal -3 binary64)","#s(literal 4096 binary64)","#s(literal 1/8 binary64)","#s(literal 27 binary64)"]],"time":291.44091796875,"type":"rewrite"},{"compiler":[[15,18]],"memory":[[1393488,1393488]],"time":4.236083984375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",49.07027246266064,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","fresh",53.302313844864074,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","next",45.96514645966939,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.091938737141167,"binary64"],["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","fresh",57.77833476459413,"binary64"],["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",44.909390680545215,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","done",46.62986445014101,"binary64"],["#s(literal 16777216 binary64)","next",61.68511219916266,"binary64"],["#s(literal 65536 binary64)","fresh",61.668359713894056,"binary64"],["#s(literal 256 binary64)","next",61.66919871578325,"binary64"],["#s(literal 3/4 binary64)","fresh",61.657586402287954,"binary64"],["#s(literal 1/8 binary64)","next",61.659508088792755,"binary64"],["#s(literal -1/2 binary64)","fresh",61.78988041346028,"binary64"],["#s(literal -16 binary64)","next",61.7884233295529,"binary64"]],"compiler":[[18,11],[25,14],[15,11],[13,10],[12,8],[12,9],[13,9],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[25,14],[15,11],[12,8],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4]],"count":[[27,14]],"kept":[{"done":[1,1],"fresh":[6,3],"new":[15,7],"picked":[5,3]}],"memory":[[-3172752,5133088]],"min-error":[[22.686908543351976,"binary64"]],"time":14.160888671875,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","(neg.f64 b_2)","b_2","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","#s(literal -16 binary64)","#s(literal 1/8 binary64)","#s(literal 256 binary64)","#s(literal 16777216 binary64)"]],"locations":[["(neg.f64 b_2)","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","cost-diff",0],["(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","cost-diff",1],["(-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","cost-diff",1]],"memory":[[725632,9966112]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (fma.f64 (*.f64 (*.f64 a c) a) c (-.f64 (neg.f64 b_2) b_2)) a)","(-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","(fma.f64 (*.f64 (*.f64 a c) a) c (-.f64 (neg.f64 b_2) b_2))","(neg.f64 b_2)","b_2","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","#s(literal -16 binary64)","#s(literal 1/8 binary64)","#s(literal 256 binary64)","#s(literal 16777216 binary64)"]],"time":401.08203125,"type":"simplify"},{"compiler":[[66,17]],"locations":[["(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","accuracy",0.00390625],["(-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","accuracy",0.0078125],["(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","accuracy",0.2786712890737681],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","accuracy",3.5868650197398466]],"memory":[[5691808,13463536]],"mixsample":[[3.04541015625,"ival-sub",0],[7.405517578125,"ival-div",0],[0.745849609375,"ival-true",0],[3.61279296875,"ival-add",0],[10.30517578125,"ival-mult",0],[1.17822265625,"exact",0],[0.28076171875,"ival-assert",0],[12.86181640625,"ival-neg",0]],"outcomes":[[87.600341796875,0,"valid",256]],"time":118.93896484375,"type":"localize"},{"count":[[5,25]],"inputs":[["(-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(neg.f64 b_2)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))"]],"memory":[[-2400352,5683696]],"outputs":[["(* -2 b_2)","(- (* (pow a 2) (pow c 2)) (* 2 b_2))","b_2","(+ b_2 (* -1 (* (pow a 2) (pow c 2))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* (pow a 2) (pow c 2))) a)","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (pow c 2))","(* (pow a 2) (- (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b_2 (pow a 2))))","(* a (pow c 2))","(* a (+ (* -2 (/ b_2 (pow a 2))) (pow c 2)))","(* -1 (* a (+ (* -1 (pow c 2)) (* 2 (/ b_2 (pow a 2))))))","(- (* -2 b_2) (* -1 (* (pow a 2) (pow c 2))))","(+ (* -2 (/ b_2 a)) (* a (pow c 2)))","(* -1 b_2)","(* b_2 (- (/ (* (pow a 2) (pow c 2)) b_2) 2))","(* b_2 (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b_2))))","(* b_2 (- (/ (* a (pow c 2)) b_2) (* 2 (/ 1 a))))","(* -1 (* b_2 (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b_2)))))","(* -1 (* b_2 (- (/ (* (pow a 2) (pow c 2)) b_2) 1)))","(* -1 (* b_2 (+ (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a)))))","(* (pow c 2) (- (* -2 (/ b_2 (pow c 2))) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b_2 (pow c 2))))","(* (pow c 2) (+ a (* -2 (/ b_2 (* a (pow c 2))))))"]],"series":[[2.308837890625,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","c","-inf"],[2.51806640625,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","c","inf"],[3.158935546875,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","c","0"],[6.69482421875,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","b_2","-inf"],[2.68115234375,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","b_2","inf"],[2.26806640625,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","b_2","0"],[2.38916015625,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","a","-inf"],[3.5771484375,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","a","inf"],[5.212890625,"((- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- (neg b_2) (+ (* (* (neg a) c) (* a c)) b_2)) a) (neg b_2) (* (* (neg a) c) (* a c)))","a","0"]],"time":32.460205078125,"type":"series"},{"count":[[25,0]],"inputs":[["(* -2 b_2)","(- (* (pow a 2) (pow c 2)) (* 2 b_2))","b_2","(+ b_2 (* -1 (* (pow a 2) (pow c 2))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* (pow a 2) (pow c 2))) a)","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (pow c 2))","(* (pow a 2) (- (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b_2 (pow a 2))))","(* a (pow c 2))","(* a (+ (* -2 (/ b_2 (pow a 2))) (pow c 2)))","(* -1 (* a (+ (* -1 (pow c 2)) (* 2 (/ b_2 (pow a 2))))))","(- (* -2 b_2) (* -1 (* (pow a 2) (pow c 2))))","(+ (* -2 (/ b_2 a)) (* a (pow c 2)))","(* -1 b_2)","(* b_2 (- (/ (* (pow a 2) (pow c 2)) b_2) 2))","(* b_2 (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b_2))))","(* b_2 (- (/ (* a (pow c 2)) b_2) (* 2 (/ 1 a))))","(* -1 (* b_2 (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b_2)))))","(* -1 (* b_2 (- (/ (* (pow a 2) (pow c 2)) b_2) 1)))","(* -1 (* b_2 (+ (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a)))))","(* (pow c 2) (- (* -2 (/ b_2 (pow c 2))) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b_2 (pow c 2))))","(* (pow c 2) (+ a (* -2 (/ b_2 (* a (pow c 2))))))"]],"memory":[[-218400,7579808]],"method":["egg-herbie"],"outputs":[[]],"time":261.06982421875,"type":"simplify"},{"count":[[5,75]],"inputs":[["(-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(neg.f64 b_2)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))"]],"memory":[[-5033504,20740112]],"outputs":[["(neg.f64 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (-.f64 b_2 #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 (*.f64 (*.f64 (*.f64 a c) c) #s(literal 0 binary64)) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 (*.f64 a c) c)) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c)))) (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) (*.f64 c c))))","(+.f64 (-.f64 b_2 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (neg.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c))) (neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) (*.f64 c c)))))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(-.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(-.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c))) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c))) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(neg.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a))","(+.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 b_2 a))","(+.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a))","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) #s(literal 1 binary64)))","(-.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 b_2 a))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a))","(-.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a)) (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a)))","(-.f64 (/.f64 (*.f64 b_2 a) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (*.f64 a a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))) (/.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) a) (/.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) a))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) a)) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (neg.f64 a)) (/.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a a)) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a)) (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 a a)) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c))) a) (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) (*.f64 c c))) a))","b_2","(neg.f64 b_2)","(+.f64 b_2 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(*.f64 b_2 #s(literal 1 binary64))","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) b_2)","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (/.f64 #s(literal 1 binary64) (*.f64 b_2 b_2)))","(/.f64 (*.f64 b_2 b_2) b_2)","(/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 b_2 b_2))","(neg.f64 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (-.f64 b_2 #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 (*.f64 (*.f64 (*.f64 a c) c) #s(literal 0 binary64)) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 (*.f64 a c) c)) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c)))) (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) (*.f64 c c))))","(+.f64 (-.f64 b_2 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2))) (neg.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c))) (neg.f64 (/.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) (*.f64 c c)))))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))"]],"time":829.419189453125,"type":"rewrite"},{"compiler":[[1692,211]],"memory":[[5713648,5713648]],"time":11.371826171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",49.07027246266064,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","next",53.302313844864074,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","done",45.96514645966939,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.091938737141167,"binary64"],["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","fresh",57.77833476459413,"binary64"],["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","next",57.12714223357775,"binary64"],["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",44.909390680545215,"binary64"],["(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","next",60.039179924078546,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","done",46.62986445014101,"binary64"],["(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","fresh",59.127522517062,"binary64"],["#s(literal 16777216 binary64)","done",61.68511219916266,"binary64"],["#s(literal 65536 binary64)","next",61.668359713894056,"binary64"],["#s(literal 256 binary64)","done",61.66919871578325,"binary64"],["#s(literal 3/4 binary64)","fresh",61.657586402287954,"binary64"],["#s(literal 1/8 binary64)","done",61.659508088792755,"binary64"],["#s(literal -1/2 binary64)","next",61.78988041346028,"binary64"],["#s(literal -16 binary64)","done",61.7884233295529,"binary64"]],"compiler":[[18,11],[25,14],[15,11],[13,10],[12,8],[14,10],[12,9],[11,9],[13,9],[10,8],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[25,14],[12,8],[14,10],[11,9],[10,8],[1,4],[1,4],[1,4]],"count":[[74,17]],"kept":[{"done":[4,4],"fresh":[5,5],"new":[60,3],"picked":[5,5]}],"memory":[[-1225616,7112688]],"min-error":[[21.68698909082003,"binary64"]],"time":11.777099609375,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","b_2","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2)","(*.f64 a c)","a","c","(*.f64 b_2 b_2)","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 c a (*.f64 b_2 b_2))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","#s(literal -1/2 binary64)","#s(literal 65536 binary64)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(*.f64 (*.f64 a a) (*.f64 c c))","(*.f64 a a)","a","(*.f64 c c)","c","#s(literal 0 binary64)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","b_2","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)"]],"locations":[["(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","cost-diff",0],["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","cost-diff",0],["(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","cost-diff",1],["(-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","cost-diff",4],["(*.f64 a a)","cost-diff",0],["(*.f64 (*.f64 a a) (*.f64 c c))","cost-diff",0],["(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","cost-diff",0],["(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","cost-diff",2],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","cost-diff",3]],"memory":[[2682832,11613232]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (fma.f64 c (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 a) (*.f64 (*.f64 b_2 a) b_2)) b_2)) a)","(-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))))","(-.f64 (neg.f64 b_2) (fma.f64 c (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 a) (*.f64 (*.f64 b_2 a) b_2)) b_2))","(neg.f64 b_2)","b_2","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(fma.f64 c (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 a) (*.f64 (*.f64 b_2 a) b_2)) b_2)","(fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2)","(*.f64 a c)","a","c","(*.f64 b_2 b_2)","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 c a (*.f64 b_2 b_2))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","#s(literal -1/2 binary64)","#s(literal 65536 binary64)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a)","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(*.f64 (*.f64 a a) (*.f64 c c))","(*.f64 (*.f64 a a) (*.f64 c c))","(*.f64 a a)","a","(*.f64 c c)","c","#s(literal 0 binary64)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) a)","(-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","(*.f64 (*.f64 a a) (*.f64 c c))","b_2","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(fma.f64 (*.f64 (neg.f64 a) a) (*.f64 c c) b_2)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)"]],"time":621.02294921875,"type":"simplify"},{"compiler":[[215,30]],"locations":[["(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","accuracy",0.00390625],["(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","accuracy",0.2786712890737681],["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","accuracy",6.858861015890536],["(-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","accuracy",17.904785211236053],["(*.f64 c c)","accuracy",0.0],["(*.f64 a a)","accuracy",0.0],["(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","accuracy",6.858861015890536],["(*.f64 (*.f64 a a) (*.f64 c c))","accuracy",17.417400592960252],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","accuracy",3.5868650197398466],["(fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2)","accuracy",7.670383262506148],["(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))","accuracy",7.8087671658335065],["(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","accuracy",24.689915767585415]],"memory":[[1893872,42371632]],"mixsample":[[15.00830078125,"ival-div",0],[13.365966796875,"adjust",800],[0.0322265625,"ival-mult",1200],[0.078369140625,"ival-add",4800],[0.05712890625,"ival-div",400],[0.20556640625,"ival-assert",0],[6.759521484375,"ival-sub",0],[0.0068359375,"ival-sub",400],[0.036376953125,"ival-mult",8000],[0.081787109375,"ival-mult",5600],[0.309814453125,"ival-mult",4400],[0.053955078125,"ival-add",5200],[0.203125,"ival-mult",3600],[11.78662109375,"ival-add",0],[0.3916015625,"ival-mult",800],[0.1337890625,"ival-mult",4800],[0.180908203125,"ival-mult",1600],[0.12158203125,"ival-mult",5200],[0.081787109375,"ival-mult",6400],[0.31640625,"ival-add",400],[1.37451171875,"adjust",2800],[0.337646484375,"ival-add",2400],[0.247802734375,"ival-mult",2400],[0.0302734375,"ival-add",6400],[0.0048828125,"ival-add",6000],[0.35107421875,"ival-add",1200],[0.0400390625,"ival-add",5600],[0.24267578125,"ival-mult",2000],[0.242919921875,"ival-mult",2800],[0.044921875,"ival-mult",7200],[0.141845703125,"ival-add",3600],[0.13525390625,"ival-add",4000],[0.111083984375,"ival-add",3200],[6.897705078125,"adjust",2000],[0.510009765625,"ival-mult",400],[27.43212890625,"ival-mult",0],[0.58740234375,"ival-add",1600],[0.1904296875,"ival-add",2800],[0.3857421875,"ival-add",2000],[0.01611328125,"ival-add",7200],[0.401123046875,"ival-true",0],[0.574462890625,"exact",0],[0.351318359375,"ival-add",800],[0.175537109375,"ival-mult",3200],[0.13720703125,"ival-mult",4000],[0.02197265625,"ival-add",8000],[0.006103515625,"ival-mult",6000],[9.686279296875,"ival-neg",0],[0.168701171875,"ival-add",4400]],"outcomes":[[58.139404296875,1,"valid",92],[50.218505859375,2,"valid",78],[17.615966796875,3,"valid",21],[18.301513671875,0,"valid",65]],"time":185.51611328125,"type":"localize"},{"count":[[15,82]],"inputs":[["(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(*.f64 (*.f64 a a) (*.f64 c c))","(*.f64 a a)","(-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2)","(*.f64 c c)"]],"memory":[[-2122128,13434544]],"outputs":[["b_2","(+ b_2 (* a (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))))","(+ b_2 (* a (+ (* -1 (* a (pow c 2))) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* -1 (* a (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))))) a)","(/ (+ (* -2 b_2) (* a (+ (* -1 (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))) (* a (pow c 2))))) a)","(* -2 b_2)","(- (* -1 (* a (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)))) (* 2 b_2))","(- (* a (- (* a (pow c 2)) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)))) (* 2 b_2))","(* (pow a 2) (pow c 2))","(* a (pow c 2))","(pow a 2)","(+ b_2 (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* -1 (* a (* (pow b_2 2) c)))","(* a (+ (* -1 (* a (pow c 2))) (* -1 (* (pow b_2 2) c))))","(+ b_2 (* a (* (pow b_2 2) c)))","(* (pow a 2) (+ (* -1 (/ (* (pow b_2 2) c) a)) (+ (* -1 (pow c 2)) (/ (* (pow b_2 2) c) a))))","(* (pow a 2) (+ (* -1 (/ (* (pow b_2 2) c) a)) (+ (* -1 (pow c 2)) (+ (/ b_2 (pow a 2)) (/ (* (pow b_2 2) c) a)))))","(* a (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (pow c 2)))","(* a (+ (* -2 (/ b_2 (pow a 2))) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (pow c 2))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (* -1 (pow c 2))))","(* (pow a 2) (- (* -2 (/ b_2 (pow a 2))) (+ (* -1 (/ (* (pow b_2 2) c) a)) (+ (* -1 (pow c 2)) (/ (* (pow b_2 2) c) a)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b_2 (pow a 2))))","(* (pow a 2) (+ (* -1 (/ (* (pow b_2 2) c) a)) (* -1 (pow c 2))))","(* a (* (pow b_2 2) c))","(* a (+ (* (pow b_2 2) c) (/ b_2 a)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (* -1 (pow c 2))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (+ (* -1 (/ b_2 a)) (* (pow b_2 2) c))) a)) (* -1 (pow c 2))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (* -1 (pow c 2)))))","(* -1 (* a (+ (* -1 (/ (+ (* -2 (/ b_2 a)) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))) a)) (* -1 (pow c 2)))))","(* (pow a 2) (- (+ (* -1 (/ (* (pow b_2 2) c) a)) (/ (* (pow b_2 2) c) a)) (* -1 (pow c 2))))","(* (pow a 2) (- (* -1 (/ (- (* 2 (/ b_2 a)) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))) a)) (* -1 (pow c 2))))","(* -1 (* a (+ (* -1 (* (pow b_2 2) c)) (* -1 (/ b_2 a)))))","(+ (* -1 (* (pow a 2) (pow c 2))) (* b_2 (+ 1 (* b_2 (+ (* -1 (* a c)) (* a c))))))","(+ (* -2 (/ b_2 a)) (* a (pow c 2)))","(+ (* a (pow c 2)) (* b_2 (- (* -1 (* b_2 (+ c (* -1 c)))) (* 2 (/ 1 a)))))","(- (* -2 b_2) (* -1 (* (pow a 2) (pow c 2))))","(- (* b_2 (- (* -1 (* b_2 (+ (* -1 (* a c)) (* a c)))) 2)) (* -1 (* (pow a 2) (pow c 2))))","(* -1 b_2)","(+ (* -1 (* a (* (pow b_2 2) c))) (* -1 (* (pow a 2) (pow c 2))))","(* b_2 (+ 1 (* a (* b_2 c))))","(* (pow b_2 2) (+ (* -1 (* a c)) (* a c)))","(* (pow b_2 2) (+ (* -1 (* a c)) (+ (* a c) (/ 1 b_2))))","(* (pow b_2 2) (+ (* -1 (* a c)) (+ (* -1 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (+ (* a c) (/ 1 b_2)))))","(* -1 (/ (* (pow b_2 2) (+ (* -1 (* a c)) (* a c))) a))","(* (pow b_2 2) (- (* -1 (/ (+ (* -1 (* a c)) (* a c)) a)) (* 2 (/ 1 (* a b_2)))))","(* (pow b_2 2) (- (+ (* -1 (/ (+ (* -1 (* a c)) (* a c)) a)) (/ (* a (pow c 2)) (pow b_2 2))) (/ 2 (* a b_2))))","(* -1 (* (pow b_2 2) (+ (* -1 (* a c)) (* a c))))","(* -1 (* (pow b_2 2) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b_2))))))","(* (pow b_2 2) (- (/ (* (pow a 2) (pow c 2)) (pow b_2 2)) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b_2))))))","(* b_2 (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b_2))))","(* (pow b_2 2) (+ (* -1 (* a c)) (* -1 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))))","(* (pow b_2 2) (+ (* a c) (/ 1 b_2)))","(* (pow b_2 2) (+ (* -1 (* a c)) (+ (* -1 (/ (- (/ (* (pow a 2) (pow c 2)) b_2) 1) b_2)) (* a c))))","(* (pow b_2 2) (+ (* -1 (/ (+ (* -1 (* a c)) (* a c)) a)) (* -1 (/ (+ (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a))) b_2))))","(* (pow b_2 2) (- (* -1 (/ (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b_2))) b_2)) (+ (* -1 (* a c)) (* a c))))","(* -1 (* b_2 (- (/ (* (pow a 2) (pow c 2)) b_2) 1)))","(+ b_2 (* c (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2)))))","(+ b_2 (* c (+ (* -1 (* a (pow b_2 2))) (+ (* -1 (* (pow a 2) c)) (* a (pow b_2 2))))))","(+ (* -2 (/ b_2 a)) (* -1 (* c (+ (* -1 (pow b_2 2)) (pow b_2 2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* -1 (+ (* -1 (pow b_2 2)) (pow b_2 2))) (* a c))))","(- (* -1 (* c (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))))) (* 2 b_2))","(- (* c (- (* (pow a 2) c) (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))))) (* 2 b_2))","(* c (+ (* -1 (* a (pow b_2 2))) (* -1 (* (pow a 2) c))))","(pow c 2)","(* (pow c 2) (+ (* -1 (/ (* a (pow b_2 2)) c)) (+ (* -1 (pow a 2)) (/ (* a (pow b_2 2)) c))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b_2 2)) c)) (+ (* -1 (pow a 2)) (+ (/ b_2 (pow c 2)) (/ (* a (pow b_2 2)) c)))))","(* (pow c 2) (+ a (* -1 (/ (+ (* -1 (pow b_2 2)) (pow b_2 2)) c))))","(* (pow c 2) (+ a (+ (* -2 (/ b_2 (* a (pow c 2)))) (* -1 (/ (+ (* -1 (pow b_2 2)) (pow b_2 2)) c)))))","(* (pow c 2) (- (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))) c)) (* -1 (pow a 2))))","(* (pow c 2) (- (* -2 (/ b_2 (pow c 2))) (+ (* -1 (/ (* a (pow b_2 2)) c)) (+ (* -1 (pow a 2)) (/ (* a (pow b_2 2)) c)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b_2 (pow c 2))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b_2 2)) c)) (* -1 (pow a 2))))","(* c (+ (* a (pow b_2 2)) (/ b_2 c)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))) c)) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (+ (* -1 (/ b_2 c)) (* a (pow b_2 2)))) c)) (* -1 (pow a 2))))","(* (pow c 2) (+ a (+ (* -1 (/ (pow b_2 2) c)) (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (* -1 (/ (+ (* -1 (+ (* -1 (pow b_2 2)) (pow b_2 2))) (* 2 (/ b_2 (* a c)))) c))))","(* (pow c 2) (- (+ (* -1 (/ (* a (pow b_2 2)) c)) (/ (* a (pow b_2 2)) c)) (* -1 (pow a 2))))","(* (pow c 2) (- (* -1 (/ (- (* 2 (/ b_2 c)) (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2)))) c)) (* -1 (pow a 2))))","(* -1 (* c (+ (* -1 (* a (pow b_2 2))) (* -1 (/ b_2 c)))))"]],"series":[[4.451904296875,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","c","-inf"],[4.468017578125,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","c","inf"],[3.841064453125,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","c","0"],[3.283935546875,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","b_2","-inf"],[2.93994140625,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","b_2","inf"],[2.617919921875,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","b_2","0"],[2.955078125,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","a","-inf"],[3.551025390625,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","a","inf"],[10.9541015625,"((+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c))) (/ (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) a) (- (neg b_2) (+ (+ (* (* a c) (* b_2 b_2)) b_2) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)))) (neg b_2) (+ (* (* a a) (* c c)) 0) (/ (+ (* (* a a) (* c c)) 0) a) (* (* a a) (* c c)) (* a a) (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) (+ (* (* (neg a) c) (* a c)) b_2) (/ (- b_2 (+ (* (* (neg a) c) (* a c)) b_2)) a) (* (* (neg a) c) (* a c)) (* (+ (* c a) (* b_2 b_2)) (* (neg a) c)) (+ (* (* a c) (* b_2 b_2)) b_2) (* c c))","a","0"]],"time":42.2978515625,"type":"series"},{"count":[[82,0]],"inputs":[["b_2","(+ b_2 (* a (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))))","(+ b_2 (* a (+ (* -1 (* a (pow c 2))) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)))))","(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* -1 (* a (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))))) a)","(/ (+ (* -2 b_2) (* a (+ (* -1 (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))) (* a (pow c 2))))) a)","(* -2 b_2)","(- (* -1 (* a (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)))) (* 2 b_2))","(- (* a (- (* a (pow c 2)) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)))) (* 2 b_2))","(* (pow a 2) (pow c 2))","(* a (pow c 2))","(pow a 2)","(+ b_2 (* -1 (* (pow a 2) (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* -1 (* a (* (pow b_2 2) c)))","(* a (+ (* -1 (* a (pow c 2))) (* -1 (* (pow b_2 2) c))))","(+ b_2 (* a (* (pow b_2 2) c)))","(* (pow a 2) (+ (* -1 (/ (* (pow b_2 2) c) a)) (+ (* -1 (pow c 2)) (/ (* (pow b_2 2) c) a))))","(* (pow a 2) (+ (* -1 (/ (* (pow b_2 2) c) a)) (+ (* -1 (pow c 2)) (+ (/ b_2 (pow a 2)) (/ (* (pow b_2 2) c) a)))))","(* a (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (pow c 2)))","(* a (+ (* -2 (/ b_2 (pow a 2))) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (pow c 2))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (* -1 (pow c 2))))","(* (pow a 2) (- (* -2 (/ b_2 (pow a 2))) (+ (* -1 (/ (* (pow b_2 2) c) a)) (+ (* -1 (pow c 2)) (/ (* (pow b_2 2) c) a)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b_2 (pow a 2))))","(* (pow a 2) (+ (* -1 (/ (* (pow b_2 2) c) a)) (* -1 (pow c 2))))","(* a (* (pow b_2 2) c))","(* a (+ (* (pow b_2 2) c) (/ b_2 a)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (* -1 (pow c 2))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (+ (* -1 (/ b_2 a)) (* (pow b_2 2) c))) a)) (* -1 (pow c 2))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c)) a)) (* -1 (pow c 2)))))","(* -1 (* a (+ (* -1 (/ (+ (* -2 (/ b_2 a)) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))) a)) (* -1 (pow c 2)))))","(* (pow a 2) (- (+ (* -1 (/ (* (pow b_2 2) c) a)) (/ (* (pow b_2 2) c) a)) (* -1 (pow c 2))))","(* (pow a 2) (- (* -1 (/ (- (* 2 (/ b_2 a)) (+ (* -1 (* (pow b_2 2) c)) (* (pow b_2 2) c))) a)) (* -1 (pow c 2))))","(* -1 (* a (+ (* -1 (* (pow b_2 2) c)) (* -1 (/ b_2 a)))))","(+ (* -1 (* (pow a 2) (pow c 2))) (* b_2 (+ 1 (* b_2 (+ (* -1 (* a c)) (* a c))))))","(+ (* -2 (/ b_2 a)) (* a (pow c 2)))","(+ (* a (pow c 2)) (* b_2 (- (* -1 (* b_2 (+ c (* -1 c)))) (* 2 (/ 1 a)))))","(- (* -2 b_2) (* -1 (* (pow a 2) (pow c 2))))","(- (* b_2 (- (* -1 (* b_2 (+ (* -1 (* a c)) (* a c)))) 2)) (* -1 (* (pow a 2) (pow c 2))))","(* -1 b_2)","(+ (* -1 (* a (* (pow b_2 2) c))) (* -1 (* (pow a 2) (pow c 2))))","(* b_2 (+ 1 (* a (* b_2 c))))","(* (pow b_2 2) (+ (* -1 (* a c)) (* a c)))","(* (pow b_2 2) (+ (* -1 (* a c)) (+ (* a c) (/ 1 b_2))))","(* (pow b_2 2) (+ (* -1 (* a c)) (+ (* -1 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (+ (* a c) (/ 1 b_2)))))","(* -1 (/ (* (pow b_2 2) (+ (* -1 (* a c)) (* a c))) a))","(* (pow b_2 2) (- (* -1 (/ (+ (* -1 (* a c)) (* a c)) a)) (* 2 (/ 1 (* a b_2)))))","(* (pow b_2 2) (- (+ (* -1 (/ (+ (* -1 (* a c)) (* a c)) a)) (/ (* a (pow c 2)) (pow b_2 2))) (/ 2 (* a b_2))))","(* -1 (* (pow b_2 2) (+ (* -1 (* a c)) (* a c))))","(* -1 (* (pow b_2 2) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b_2))))))","(* (pow b_2 2) (- (/ (* (pow a 2) (pow c 2)) (pow b_2 2)) (+ (* -1 (* a c)) (+ (* a c) (* 2 (/ 1 b_2))))))","(* b_2 (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b_2))))","(* (pow b_2 2) (+ (* -1 (* a c)) (* -1 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))))","(* (pow b_2 2) (+ (* a c) (/ 1 b_2)))","(* (pow b_2 2) (+ (* -1 (* a c)) (+ (* -1 (/ (- (/ (* (pow a 2) (pow c 2)) b_2) 1) b_2)) (* a c))))","(* (pow b_2 2) (+ (* -1 (/ (+ (* -1 (* a c)) (* a c)) a)) (* -1 (/ (+ (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a))) b_2))))","(* (pow b_2 2) (- (* -1 (/ (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b_2))) b_2)) (+ (* -1 (* a c)) (* a c))))","(* -1 (* b_2 (- (/ (* (pow a 2) (pow c 2)) b_2) 1)))","(+ b_2 (* c (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2)))))","(+ b_2 (* c (+ (* -1 (* a (pow b_2 2))) (+ (* -1 (* (pow a 2) c)) (* a (pow b_2 2))))))","(+ (* -2 (/ b_2 a)) (* -1 (* c (+ (* -1 (pow b_2 2)) (pow b_2 2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* -1 (+ (* -1 (pow b_2 2)) (pow b_2 2))) (* a c))))","(- (* -1 (* c (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))))) (* 2 b_2))","(- (* c (- (* (pow a 2) c) (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))))) (* 2 b_2))","(* c (+ (* -1 (* a (pow b_2 2))) (* -1 (* (pow a 2) c))))","(pow c 2)","(* (pow c 2) (+ (* -1 (/ (* a (pow b_2 2)) c)) (+ (* -1 (pow a 2)) (/ (* a (pow b_2 2)) c))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b_2 2)) c)) (+ (* -1 (pow a 2)) (+ (/ b_2 (pow c 2)) (/ (* a (pow b_2 2)) c)))))","(* (pow c 2) (+ a (* -1 (/ (+ (* -1 (pow b_2 2)) (pow b_2 2)) c))))","(* (pow c 2) (+ a (+ (* -2 (/ b_2 (* a (pow c 2)))) (* -1 (/ (+ (* -1 (pow b_2 2)) (pow b_2 2)) c)))))","(* (pow c 2) (- (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))) c)) (* -1 (pow a 2))))","(* (pow c 2) (- (* -2 (/ b_2 (pow c 2))) (+ (* -1 (/ (* a (pow b_2 2)) c)) (+ (* -1 (pow a 2)) (/ (* a (pow b_2 2)) c)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b_2 (pow c 2))))","(* (pow c 2) (+ (* -1 (/ (* a (pow b_2 2)) c)) (* -1 (pow a 2))))","(* c (+ (* a (pow b_2 2)) (/ b_2 c)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2))) c)) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (* a (pow b_2 2))) (+ (* -1 (/ b_2 c)) (* a (pow b_2 2)))) c)) (* -1 (pow a 2))))","(* (pow c 2) (+ a (+ (* -1 (/ (pow b_2 2) c)) (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (* -1 (/ (+ (* -1 (+ (* -1 (pow b_2 2)) (pow b_2 2))) (* 2 (/ b_2 (* a c)))) c))))","(* (pow c 2) (- (+ (* -1 (/ (* a (pow b_2 2)) c)) (/ (* a (pow b_2 2)) c)) (* -1 (pow a 2))))","(* (pow c 2) (- (* -1 (/ (- (* 2 (/ b_2 c)) (+ (* -1 (* a (pow b_2 2))) (* a (pow b_2 2)))) c)) (* -1 (pow a 2))))","(* -1 (* c (+ (* -1 (* a (pow b_2 2))) (* -1 (/ b_2 c)))))"]],"memory":[[971520,10496400]],"method":["egg-herbie"],"outputs":[[]],"time":154.3359375,"type":"simplify"},{"count":[[15,222]],"inputs":[["(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","(-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))))","(neg.f64 b_2)","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64))","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(*.f64 (*.f64 a a) (*.f64 c c))","(*.f64 a a)","(-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2)","(*.f64 c c)"]],"memory":[[477440,16519440]],"outputs":[["#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 0 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","(*.f64 c c)","(*.f64 (*.f64 c c) (*.f64 c c))","(*.f64 (*.f64 c c) c)","(*.f64 c (*.f64 c c))","(*.f64 (exp.f64 (log.f64 c)) (exp.f64 (log.f64 c)))","(exp.f64 (*.f64 (log.f64 c) #s(literal 0 binary64)))","(exp.f64 (fma.f64 (log.f64 c) #s(literal 0 binary64) (*.f64 (log.f64 c) #s(literal 0 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 c c)) #s(literal 0 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 c) #s(literal 0 binary64)) #s(literal 0 binary64)))","(pow.f64 c #s(literal 0 binary64))","(pow.f64 (*.f64 c c) #s(literal 0 binary64))","(pow.f64 (exp.f64 (log.f64 c)) #s(literal 0 binary64))"]],"time":403.26318359375,"type":"rewrite"},{"compiler":[[254,105]],"memory":[[-5137024,2695984]],"time":5.31201171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",49.07027246266064,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","done",45.96514645966939,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",29.091938737141167,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","fresh",54.98323366903891,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","fresh",55.02373680211288,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","fresh",54.993825700311945,"binary64"],["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","fresh",57.77833476459413,"binary64"],["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","done",57.12714223357775,"binary64"],["(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",44.909390680545215,"binary64"],["(/.f64 (+.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 0 binary64))) #s(literal 0 binary64)) a)","fresh",61.766234596070404,"binary64"],["(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","done",60.039179924078546,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","done",46.62986445014101,"binary64"],["(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","fresh",59.127522517062,"binary64"],["#s(literal 16777216 binary64)","done",61.68511219916266,"binary64"],["#s(literal 65536 binary64)","done",61.668359713894056,"binary64"],["#s(literal 256 binary64)","done",61.66919871578325,"binary64"],["#s(literal 3/4 binary64)","fresh",61.657586402287954,"binary64"],["#s(literal 1/8 binary64)","done",61.659508088792755,"binary64"],["#s(literal -1/2 binary64)","done",61.78988041346028,"binary64"],["#s(literal -16 binary64)","done",61.7884233295529,"binary64"]],"compiler":[[383,89],[18,11],[15,11],[13,10],[6,7],[6,7],[6,7],[12,8],[14,10],[12,9],[11,9],[11,9],[13,9],[10,8],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4]],"count":[[44,20]],"kept":[{"done":[9,9],"fresh":[3,3],"new":[27,4],"picked":[5,4]}],"memory":[[620864,10122496]],"min-error":[[21.453308816718817,"binary64"]],"time":15.080810546875,"type":"prune"},{"accuracy":[22.9028300204905],"baseline":[29.091938737141167],"branch":[["a",29.091938737141184,1,"binary64"],["b_2",22.9028300204905,3,"binary64"],["c",29.091938737141163,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",26.828139743307773,3,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[26,3]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (*.f64 b_2 #s(literal 16 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal 16 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) #s(literal 16 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 0 binary64))) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (fma.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))) (/.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 a a) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a) (/.f64 (*.f64 b_2 b_2) (*.f64 a a)))))"]],"memory":[[702176,16539040]],"oracle":[63.88438021972068],"outputs":[["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)"]],"repr":["binary64"],"time":30.544189453125,"times":[[7.118896484375,"a"],[6.80908203125,"b_2"],[7.947998046875,"c"],[6.57080078125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[29.155689271922846],"baseline":[44.909390680545215],"branch":[["a",38.94806235621077,3,"binary64"],["c",39.75700298352674,3,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",37.21322116544153,3,"binary64"],["b_2",29.155689271922846,3,"binary64"]],"compiler":[[1,3],[1,3],[13,10],[1,3]],"count":[[18,3]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[4882448,13180496]],"oracle":[63.442387242291844],"outputs":[["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)"]],"repr":["binary64"],"time":21.7919921875,"times":[[5.05517578125,"a"],[5.200927734375,"c"],[4.5400390625,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[5.125,"b_2"]],"type":"regimes"},{"accuracy":[40.3390406702825],"baseline":[45.96514645966939],"branch":[["a",44.94011492033749,2,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",45.96514645966943,1,"binary64"],["b_2",40.3390406702825,2,"binary64"]],"compiler":[[1,3],[13,10],[1,3]],"count":[[17,2]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)"]],"memory":[[-7585664,9743600]],"oracle":[63.427764338031466],"outputs":[["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)"]],"repr":["binary64"],"time":16.39501953125,"times":[[5.10595703125,"a"],[4.31005859375,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[5.382080078125,"b_2"]],"type":"regimes"},{"accuracy":[40.91764238309556],"baseline":[46.62986445014101],"branch":[["c",46.62986445014101,1,"binary64"],["b_2",40.91764238309556,2,"binary64"]],"compiler":[[1,3],[1,3]],"count":[[16,2]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)","(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)"]],"memory":[[6831024,6831024]],"oracle":[63.427764338031466],"outputs":[["(/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)"]],"repr":["binary64"],"time":10.130859375,"times":[[4.565185546875,"c"],[4.3720703125,"b_2"]],"type":"regimes"},{"accuracy":[42.23882574010196],"baseline":[46.62986445014101],"branch":[["b_2",42.23882574010196,2,"binary64"]],"compiler":[[1,3]],"count":[[15,2]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)"]],"memory":[[-4290464,3732656]],"oracle":[63.427417265056164],"outputs":[["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)"]],"repr":["binary64"],"time":5.678955078125,"times":[[4.63720703125,"b_2"]],"type":"regimes"},{"accuracy":[50.729293159588906],"baseline":[54.98323366903891],"branch":[["c",54.983233669038896,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",54.983233669038945,1,"binary64"],["a",53.8260665508523,2,"binary64"],["b_2",50.729293159588906,2,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[14,2]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)"]],"memory":[[3250976,11474272]],"oracle":[63.42738261607054],"outputs":[["(/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)"]],"repr":["binary64"],"time":19.39111328125,"times":[[5.235107421875,"c"],[4.218994140625,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[4.11181640625,"a"],[4.360107421875,"b_2"]],"type":"regimes"},{"accuracy":[52.194943078328734],"baseline":[54.98323366903891],"branch":[["b_2",52.194943078328734,2,"binary64"]],"compiler":[[1,3]],"count":[[13,2]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal 0 binary64)) a)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)"]],"memory":[[-6550912,3523664]],"oracle":[63.42738261607054],"outputs":[["(/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)"]],"repr":["binary64"],"time":6.81689453125,"times":[[3.919921875,"b_2"]],"type":"regimes"},{"accuracy":[54.983233669038896],"baseline":[54.98323366903891],"branch":[["c",54.983233669038896,1,"binary64"],["a",54.983233669038924,1,"binary64"],["b_2",54.98323366903892,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3]],"count":[[10,1]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)"]],"memory":[[7694336,7694336]],"oracle":[63.04296847376393],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)"]],"repr":["binary64"],"time":12.14404296875,"times":[[4.069091796875,"c"],[3.57080078125,"a"],[3.158935546875,"b_2"]],"type":"regimes"},{"accuracy":[54.993825700311945],"baseline":[54.993825700311945],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",54.99382570031197,1,"binary64"],["a",54.993825700311966,1,"binary64"],["b_2",54.99382570031195,1,"binary64"],["c",54.993825700311945,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[9,1]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 1 binary64)) a)"]],"memory":[[-7193312,9443216]],"oracle":[63.04295635249983],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)"]],"repr":["binary64"],"time":14.22509765625,"times":[[3.01513671875,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[3.448974609375,"a"],[3.0830078125,"b_2"],[3.39208984375,"c"]],"type":"regimes"},{"accuracy":[61.65758640228794],"baseline":[61.657586402287954],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",61.65758640228794,1,"binary64"],["a",61.65758640228795,1,"binary64"],["b_2",61.65758640228794,1,"binary64"],["c",61.65758640228794,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[7,1]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 3/4 binary64)","#s(literal 256 binary64)","#s(literal 65536 binary64)","#s(literal 16777216 binary64)"]],"memory":[[479216,8716416]],"oracle":[62.91978359567758],"outputs":[["#s(literal 3/4 binary64)"]],"repr":["binary64"],"time":12.27587890625,"times":[[3.041015625,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[2.550048828125,"a"],[2.402099609375,"b_2"],[2.666015625,"c"]],"type":"regimes"},{"accuracy":[61.65950808879275],"baseline":[61.659508088792755],"branch":[["a",61.65950808879275,1,"binary64"],["b_2",61.65950808879278,1,"binary64"],["c",61.65950808879276,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",61.65950808879277,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[3,1]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)"]],"memory":[[7018784,7018784]],"oracle":[62.908453103788915],"outputs":[["#s(literal 1/8 binary64)"]],"repr":["binary64"],"time":7.255126953125,"times":[[1.5869140625,"a"],[1.52880859375,"b_2"],[1.592041015625,"c"],[1.593017578125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[61.78842332955286],"baseline":[61.7884233295529],"branch":[["b_2",61.78842332955286,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",61.788423329552884,1,"binary64"],["c",61.78842332955288,1,"binary64"],["a",61.78842332955288,1,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[2,1]],"inputs":[["#s(literal -16 binary64)","#s(literal -1/2 binary64)"]],"link":["."],"memory":[[-2166944,6547536]],"name":["quad2m (problem 3.2.1, negative)"],"oracle":[61.80169292928326],"outputs":[["#s(literal -16 binary64)"]],"repr":["binary64"],"time":6.925048828125,"times":[[1.527099609375,"b_2"],[1.308837890625,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.45703125,"c"],[1.718994140625,"a"]],"type":"regimes"},{"bstep":[[20.76708984375,1.5490198890947488e+152,7.347389268350515e+160],[34.0078125,-2.83572551492328e+154,-1.8540943341282057e+145]],"compiler":[[13,10],[13,11],[13,10],[13,11],[13,10],[13,11],[13,10],[13,11],[13,10],[13,11],[13,10],[13,11],[13,10],[13,11],[13,10],[13,11],[13,10],[13,11],[13,11],[14,11],[13,11],[14,11],[13,11],[14,11],[13,11],[14,11],[13,11],[14,11],[13,11],[14,11],[13,11],[14,11],[13,11],[14,11],[13,11],[14,11],[15,13],[1,3]],"memory":[[-1647808,14585152]],"method":["binary-search","binary-search"],"mixsample":[[0.0048828125,"ival-sub",1200],[4.251953125,"ival-div",0],[3.16162109375,"adjust",800],[0.824462890625,"ival-sqrt",2000],[1.621337890625,"ival-sqrt",800],[0.41748046875,"ival-sub",2000],[0.148193359375,"ival-assert",0],[0.098876953125,"ival-sqrt",4000],[4.56298828125,"ival-sub",0],[0.007080078125,"ival-sqrt",1200],[2.444091796875,"ival-sqrt",0],[1.43798828125,"adjust",2000],[0.581298828125,"ival-mult",800],[0.890380859375,"ival-sub",800],[4.684814453125,"ival-mult",0],[0.159423828125,"ival-mult",400],[0.023193359375,"ival-mult",1600],[0.10107421875,"adjust",2800],[0.361328125,"ival-true",0],[0.10009765625,"ival-sub",4000],[1.773681640625,"ival-neg",0]],"outcomes":[[9.0625,1,"valid",55],[15.0439453125,2,"valid",75],[0.3212890625,0,"invalid",4],[1.896484375,3,"valid",8],[13.560546875,0,"valid",150]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":61.8388671875,"type":"bsearch"},{"bstep":[[9.287841796875,7.675734527112308e-123,1.1282372926521407e-122],[34.074951171875,-9.692476102160504e+52,-8.501628984473667e+49]],"compiler":[[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[12,10],[14,11],[12,10],[14,11],[12,10],[14,11],[12,10],[14,11],[12,10],[14,11],[12,10],[14,11],[12,10],[14,11],[12,10],[14,11],[15,13],[1,3]],"memory":[[2677200,10499600]],"method":["binary-search","binary-search"],"mixsample":[[3.5263671875,"ival-div",0],[2.489990234375,"adjust",800],[0.340576171875,"ival-sub",1600],[0.0078125,"ival-mult",2000],[0.062255859375,"ival-sqrt",800],[0.111572265625,"ival-assert",0],[0.088134765625,"ival-sqrt",4000],[3.572998046875,"ival-sub",0],[1.996826171875,"ival-sqrt",0],[0.698974609375,"ival-sub",400],[1.096435546875,"adjust",2000],[0.12109375,"ival-mult",800],[0.4423828125,"ival-sqrt",1600],[3.779541015625,"ival-mult",0],[0.31005859375,"ival-mult",400],[0.062255859375,"ival-sub",800],[0.012939453125,"ival-mult",1600],[0.092041015625,"adjust",2800],[0.238037109375,"ival-true",0],[0.030029296875,"ival-sub",4000],[1.50927734375,"ival-neg",0],[1.10107421875,"ival-sqrt",400]],"outcomes":[[9.650390625,1,"valid",53],[10.297119140625,2,"valid",41],[1.78466796875,0,"invalid",26],[2.4541015625,3,"valid",7],[7.056396484375,0,"valid",91]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":48.8740234375,"type":"bsearch"},{"bstep":[[26.38720703125,-1.983068774029661e-260,-9.574914209377524e-269]],"compiler":[[15,12],[14,11],[15,12],[14,11],[15,12],[14,11],[15,12],[14,11],[15,12],[14,11],[15,12],[14,11],[15,12],[14,11],[15,12],[14,11],[15,12],[14,11],[15,13],[1,3]],"memory":[[-1093648,8084592]],"method":["binary-search"],"mixsample":[[2.515625,"ival-sub",0],[1.8837890625,"ival-div",0],[0.225341796875,"ival-true",0],[3.2041015625,"ival-mult",0],[1.6435546875,"ival-sqrt",0],[0.0869140625,"ival-assert",0],[2.107177734375,"ival-neg",0]],"outcomes":[[7.3759765625,0,"invalid",83],[11.509765625,0,"valid",144]],"stop":[["narrow-enough",1]],"time":29.863037109375,"type":"bsearch"},{"bstep":[[25.385009765625,-1.7249434658386735e-30,-4.1201977931114906e-34]],"compiler":[[13,10],[14,11],[13,10],[14,11],[13,10],[14,11],[13,10],[14,11],[13,10],[14,11],[13,10],[14,11],[13,10],[14,11],[13,10],[14,11],[15,13],[1,3]],"memory":[[-1192464,6856864]],"method":["binary-search"],"mixsample":[[2.040283203125,"ival-div",0],[1.265869140625,"adjust",800],[0.0810546875,"ival-mult",800],[2.1982421875,"ival-mult",0],[0.37158203125,"ival-sqrt",1600],[0.288330078125,"ival-mult",400],[0.168212890625,"ival-sub",1600],[0.070068359375,"ival-assert",0],[2.338623046875,"ival-sub",0],[0.136962890625,"ival-true",0],[1.3583984375,"ival-sqrt",0],[0.339111328125,"ival-sub",400],[0.778564453125,"ival-neg",0],[0.449462890625,"adjust",2000],[0.54638671875,"ival-sqrt",400]],"outcomes":[[4.622802734375,1,"valid",32],[1.8681640625,0,"invalid",22],[6.089599609375,2,"valid",27],[6.44775390625,0,"valid",69]],"stop":[["narrow-enough",1]],"time":29.364990234375,"type":"bsearch"},{"bstep":[[31.969970703125,1.0651828671072938e-295,2.0118791876576401e-283]],"compiler":[[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[13,10],[12,9],[15,13],[1,3]],"memory":[[1515504,9537808]],"method":["binary-search"],"mixsample":[[2.760986328125,"ival-sub",0],[2.33154296875,"ival-div",0],[0.262939453125,"ival-true",0],[4.03857421875,"ival-mult",0],[2.0947265625,"ival-sqrt",0],[0.108642578125,"ival-assert",0],[1.701904296875,"ival-neg",0]],"outcomes":[[9.7646484375,0,"invalid",114],[12.572509765625,0,"valid",160]],"stop":[["narrow-enough",1]],"time":35.544921875,"type":"bsearch"},{"bstep":[[24.7119140625,1.0836532595541905e-272,1.1523860477705111e-259]],"compiler":[[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[6,8],[12,9],[15,13],[1,3]],"memory":[[451504,8498304]],"method":["binary-search"],"mixsample":[[2.297607421875,"ival-sub",0],[1.610595703125,"ival-div",0],[0.184326171875,"ival-true",0],[3.127197265625,"ival-mult",0],[1.549560546875,"ival-sqrt",0],[0.071533203125,"ival-assert",0],[1.113525390625,"ival-neg",0]],"outcomes":[[6.539306640625,0,"invalid",82],[10.3681640625,0,"valid",160]],"stop":[["narrow-enough",1]],"time":28.79296875,"type":"bsearch"},{"bstep":[[1.44287109375,1.0836532595541905e-272,1.1523860477705111e-259]],"compiler":[[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[6,8],[10,9],[15,13],[1,3]],"memory":[[664768,664768]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":2.132080078125,"type":"bsearch"},{"inputs":[["(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)))","(if (<=.f64 b_2 #s(literal -31999999999999999783070357579572095246774670142210048 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 520997997575091/46517678354918840995156723704832290198633047083988355858015372747560914439257467092876227245680868195888801382801035387746214504231337984 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)))","(if (<=.f64 b_2 #s(literal -290432989937067/2323463919496536035621972653359219625205094065092803842274643530181157276813131833664325491400244297796560505922176520391335289446163915168423172782972491602785891938199156053035447515366090213859748743409924120634480857354496687637745467094294778254706320477272099863787133357522944 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a))","(if (<=.f64 b_2 #s(literal -959110449498405/45671926166590716193865151022383844364247891968 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a))","(if (<=.f64 b_2 #s(literal 2531151933886141/23010472126237643618935106442099516590310105330461524130999050388189782503104123280986685097268164610703374576623538349780325090408245327679084471121852687920354290358382782115366684108959500047289994617866880738411283287339835248828660878149225886356908865367627046174713247480125403687018925610191900689563648 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a))","(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a))","(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a) (/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a))","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","#s(literal 3/4 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)"]],"memory":[[-478704,17375520]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a)))","(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) b_2) a)))","(if (<=.f64 b_2 #s(literal -31999999999999999783070357579572095246774670142210048 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 520997997575091/46517678354918840995156723704832290198633047083988355858015372747560914439257467092876227245680868195888801382801035387746214504231337984 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a)))","(if (<=.f64 b_2 #s(literal -31999999999999999783070357579572095246774670142210048 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 520997997575091/46517678354918840995156723704832290198633047083988355858015372747560914439257467092876227245680868195888801382801035387746214504231337984 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (+.f64 (neg.f64 b_2) (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a)))","(if (<=.f64 b_2 #s(literal -290432989937067/2323463919496536035621972653359219625205094065092803842274643530181157276813131833664325491400244297796560505922176520391335289446163915168423172782972491602785891938199156053035447515366090213859748743409924120634480857354496687637745467094294778254706320477272099863787133357522944 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (/.f64 (-.f64 (neg.f64 b_2) (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a))","(if (<=.f64 b_2 #s(literal -290432989937067/2323463919496536035621972653359219625205094065092803842274643530181157276813131833664325491400244297796560505922176520391335289446163915168423172782972491602785891938199156053035447515366090213859748743409924120634480857354496687637745467094294778254706320477272099863787133357522944 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (/.f64 (+.f64 (neg.f64 b_2) (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a))","(if (<=.f64 b_2 #s(literal -959110449498405/45671926166590716193865151022383844364247891968 binary64)) (/.f64 (-.f64 b_2 (+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 a c)) b_2)) a) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a))","(if (<=.f64 b_2 #s(literal -959110449498405/45671926166590716193865151022383844364247891968 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) b_2) a))","(if (<=.f64 b_2 #s(literal 2531151933886141/23010472126237643618935106442099516590310105330461524130999050388189782503104123280986685097268164610703374576623538349780325090408245327679084471121852687920354290358382782115366684108959500047289994617866880738411283287339835248828660878149225886356908865367627046174713247480125403687018925610191900689563648 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)) a))","(if (<=.f64 b_2 #s(literal 2531151933886141/23010472126237643618935106442099516590310105330461524130999050388189782503104123280986685097268164610703374576623538349780325090408245327679084471121852687920354290358382782115366684108959500047289994617866880738411283287339835248828660878149225886356908865367627046174713247480125403687018925610191900689563648 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) b_2) a))","(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a))","(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (neg.f64 b_2) a))","(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (neg.f64 (*.f64 (*.f64 a a) (*.f64 c c))) a) (/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a))","(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (neg.f64 a)) (/.f64 (neg.f64 b_2) a))","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)","(/.f64 (-.f64 (neg.f64 b_2) #s(literal 0 binary64)) a)","(/.f64 (neg.f64 b_2) a)","#s(literal 3/4 binary64)","#s(literal 1/8 binary64)","#s(literal -16 binary64)"]],"time":343.785888671875,"type":"simplify"},{"compiler":[[235,61]],"memory":[[-4863872,3230800]],"stop":[["fuel",1]],"time":9.93115234375,"type":"soundness"},{"compiler":[[235,61],[235,61],[89,26],[89,26],[13,10],[13,10]],"memory":[[5563568,54060000]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":115.596923828125,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.02001953125,"type":"end"}]