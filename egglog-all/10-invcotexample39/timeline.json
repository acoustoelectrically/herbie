[{"memory":[[15584,15584]],"time":0.031982421875,"type":"start"},{"compiler":[[16,12]],"memory":[[1526704,1526704]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0007278900146484375,"valid":0.49617835998535154}],[11,{"invalid":0.0,"precondition":0.50309375,"unknown":0.001455780029296875,"valid":0.49545046997070313}],[10,{"invalid":0.0,"precondition":0.5030937499999999,"unknown":0.00291156005859375,"valid":0.4939946899414063}],[9,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0058231201171875,"valid":0.4910831298828125}],[8,{"invalid":0.0,"precondition":0.50309375,"unknown":0.011646240234375,"valid":0.485260009765625}],[7,{"invalid":0.0,"precondition":0.50309375,"unknown":0.02329248046875,"valid":0.47361376953125}],[6,{"invalid":0.0,"precondition":0.50309375,"unknown":0.0465849609375,"valid":0.4503212890625}],[5,{"invalid":0.0,"precondition":0.50309375,"unknown":0.093169921875,"valid":0.403736328125}],[4,{"invalid":0.0,"precondition":0.50309375,"unknown":0.18633984375,"valid":0.31056640625}],[3,{"invalid":0.0,"precondition":0.50309375,"unknown":0.3726796875,"valid":0.1242265625}],[2,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50309375,"unknown":0.49690625,"valid":0.0}]],"time":8.655029296875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50309375,"valid":0.49690625}],"memory":[[25332336,483570368]],"mixsample":[[636.560791015625,"ival-tan",2000],[171.847412109375,"ival-div",0],[213.43994140625,"adjust",800],[26.47021484375,"ival-div",400],[5.785888671875,"ival-assert",0],[8.080810546875,"ival-div",1600],[143.12841796875,"ival-sub",0],[6491.99365234375,"ival-tan",2400],[105.776123046875,"ival-tan",0],[25.9423828125,"ival-and",0],[0.044189453125,"ival-sub",400],[349.725830078125,"const",0],[44.78076171875,"ival-tan",400],[74.720703125,"adjust",2000],[840.55126953125,"ival-tan",800],[1.98974609375,"ival-tan",1600],[83.880126953125,"ival-div",1200],[0.0712890625,"ival-sub",800],[84.463623046875,"ival-div",800],[23.685546875,"ival-div",2000],[9.4794921875,"exact",0],[61.028076171875,"ival-tan",1200],[65.00439453125,"ival-<",0],[115.6337890625,"ival-div",2400]],"outcomes":[[1721.59423828125,1,"valid",4308],[8307.950439453125,2,"valid",3856],[11.7744140625,0,"valid",92]],"time":10579.919921875,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cancellation",256,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",256,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(tan.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (tan.f64 x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-6412368,52755360]],"mixsample":[[53.747802734375,"ival-tan",2000],[9.420166015625,"ival-div",0],[9.914306640625,"adjust",800],[1.147216796875,"ival-div",400],[0.3046875,"ival-assert",0],[0.328369140625,"ival-div",1600],[8.716064453125,"ival-sub",0],[365.780029296875,"ival-tan",2400],[5.54248046875,"ival-tan",0],[1.903564453125,"ival-tan",400],[4.18017578125,"adjust",2000],[41.3896484375,"ival-tan",800],[0.15869140625,"ival-tan",1600],[4.330322265625,"ival-div",1200],[4.563720703125,"ival-div",800],[0.740234375,"ival-true",0],[1.22802734375,"ival-div",2000],[0.495361328125,"exact",0],[3.022216796875,"ival-tan",1200],[6.427001953125,"ival-div",2400]],"outcomes":[[77.469970703125,1,"valid",250],[477.41748046875,2,"valid",256],[0.463134765625,0,"valid",6]],"time":622.0849609375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"memory":[[4812656,21209040]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))"]],"symmetry":[["(negabs x)"]],"time":306.343994140625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.0751953125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","next",59.742249883117175,"binary64"]],"compiler":[[8,6]],"memory":[[311312,311312]],"time":0.581787109375,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"locations":[["(tan.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cost-diff",0]],"memory":[[2001344,9810672]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"time":203.091064453125,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(tan.f64 x)","accuracy",0.00390625],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","accuracy",0.01171875],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","accuracy",59.736804157979115]],"memory":[[-4073168,13557472]],"mixsample":[[41.283203125,"ival-tan",2000],[7.590576171875,"ival-div",0],[6.9990234375,"adjust",800],[1.98046875,"ival-div",400],[0.259765625,"ival-assert",0],[0.219482421875,"ival-div",1600],[4.857666015625,"ival-sub",0],[365.961181640625,"ival-tan",2400],[5.34619140625,"ival-tan",0],[1.154052734375,"ival-tan",400],[2.548828125,"adjust",2000],[37.250732421875,"ival-tan",800],[0.091064453125,"ival-tan",1600],[2.863037109375,"ival-div",1200],[3.580078125,"ival-div",800],[0.50146484375,"ival-true",0],[1.16943359375,"ival-div",2000],[0.32763671875,"exact",0],[10.834716796875,"ival-tan",1200],[6.876953125,"ival-div",2400]],"outcomes":[[64.573486328125,1,"valid",125],[461.5986328125,2,"valid",128],[0.365966796875,0,"valid",3]],"time":540.35693359375,"type":"localize"},{"count":[[4,16]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[1401344,1401344]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"series":[[1.39501953125,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","-inf"],[1.31103515625,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","inf"],[1.875,"((- (/ 1 x) (/ 1 (tan x))) (/ 1 x) (/ 1 (tan x)) (tan x))","x","0"]],"time":5.112060546875,"type":"series"},{"count":[[16,0]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"memory":[[1673856,9360240]],"method":["egg-herbie"],"outputs":[[]],"time":147.607177734375,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[-2936512,15671328]],"outputs":[["(neg.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (tan.f64 x)) x) (*.f64 (tan.f64 x) x)))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 (tan.f64 x) (*.f64 (tan.f64 x) x)) (neg.f64 (/.f64 x (*.f64 (tan.f64 x) x))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (cos.f64 x) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(neg.f64 (neg.f64 (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(*.f64 (tan.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (neg.f64 (tan.f64 x)) (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)))","(*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (sin.f64 x) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (/.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"time":426.841796875,"type":"rewrite"},{"compiler":[[826,193]],"memory":[[-2204704,5536352]],"time":12.56298828125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","done",59.742249883117175,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","fresh",60.712557673032826,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","next",59.736355135964665,"binary64"],["(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","fresh",60.61088706903093,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","next",62.81982524838522,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","next",62.41352160889503,"binary64"],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","fresh",62.862045720559415,"binary64"],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","next",62.37214302744394,"binary64"],["(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","next",62.28135444145946,"binary64"]],"compiler":[[8,6],[17,10],[11,8],[16,10],[49,18],[29,14],[32,18],[20,14],[11,7],[17,10],[11,8],[16,10],[49,18],[29,14],[32,18],[20,14],[11,7]],"count":[[61,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[60,8],"picked":[1,1]}],"memory":[[-2094112,6176832]],"min-error":[[59.3565135183642,"binary64"]],"time":8.857177734375,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(sin.f64 x)","(cos.f64 x)","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x)))","(-.f64 (tan.f64 x) x)","(tan.f64 x)","x","(*.f64 (neg.f64 x) (tan.f64 x))","(neg.f64 x)","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(pow.f64 (tan.f64 x) #s(literal -2 binary64))","(tan.f64 x)","#s(literal -2 binary64)","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","#s(literal -1 binary64)","(/.f64 #s(literal -1 binary64) x)","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))","(+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)","x","(/.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))","(pow.f64 (tan.f64 x) #s(literal -2 binary64))","#s(literal -2 binary64)","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x))","(+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)","x","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(*.f64 (*.f64 x x) x)","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(pow.f64 (tan.f64 x) #s(literal -3 binary64))","#s(literal -3 binary64)"]],"locations":[["(*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x)))","cost-diff",0],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","cost-diff",0],["(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","cost-diff",1],["(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x)))","cost-diff",0],["(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))))","cost-diff",1],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","cost-diff",9],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","cost-diff",0],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","cost-diff",1],["(tan.f64 x)","cost-diff",0],["(-.f64 (tan.f64 x) x)","cost-diff",0],["(/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x)))","cost-diff",1],["(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","cost-diff",2],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","cost-diff",2]],"memory":[[6942496,15160704]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(sin.f64 x)","(cos.f64 x)","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (tan.f64 x))) x)","(/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 x (tan.f64 x))) (neg.f64 x))","(-.f64 (tan.f64 x) x)","(tan.f64 x)","x","(*.f64 (neg.f64 x) (tan.f64 x))","(neg.f64 x)","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(pow.f64 (tan.f64 x) #s(literal -2 binary64))","(tan.f64 x)","#s(literal -2 binary64)","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","#s(literal -1 binary64)","(/.f64 #s(literal -1 binary64) x)","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))","(+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)","x","(/.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))","(pow.f64 (tan.f64 x) #s(literal -2 binary64))","#s(literal -2 binary64)","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x))","(+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)","x","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(*.f64 (*.f64 x x) x)","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(pow.f64 (tan.f64 x) #s(literal -3 binary64))","#s(literal -3 binary64)"]],"time":408.7578125,"type":"simplify"},{"compiler":[[466,44]],"locations":[["(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x)))","accuracy",0.2578125],["(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","accuracy",42.339885806772664],["(*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))","accuracy",43.43660834339824],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","accuracy",59.672551929404285],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","accuracy",0.01171875],["(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))","accuracy",30.67606814745522],["(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))","accuracy",31.47381446927041],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","accuracy",59.71245747864531],["(/.f64 #s(literal -1 binary64) (tan.f64 x))","accuracy",0.01171875],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",0.1171875],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","accuracy",0.39291000976844204],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))","accuracy",61.5155978584964],["(tan.f64 x)","accuracy",0.00390625],["(*.f64 (neg.f64 x) (tan.f64 x))","accuracy",0.0078125],["(-.f64 (tan.f64 x) x)","accuracy",17.80858630272669],["(/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x)))","accuracy",43.571124908058245],["(cos.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","accuracy",0.00390625],["(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","accuracy",0.01171875],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","accuracy",59.736804157979115]],"memory":[[-1328256,95060192]],"mixsample":[[106.814208984375,"ival-tan",2000],[35.10009765625,"ival-div",0],[26.22998046875,"adjust",800],[3.443115234375,"ival-mult",1200],[0.914794921875,"ival-neg",2400],[1.726318359375,"ival-div",400],[1.876220703125,"ival-pow",1600],[1.509765625,"ival-div",1600],[0.20263671875,"ival-assert",0],[1.010498046875,"ival-neg",800],[13.02685546875,"ival-sub",0],[4.565673828125,"ival-sin",1200],[2.478515625,"ival-tan",0],[2.280517578125,"ival-cos",0],[1.169921875,"ival-cos",1200],[0.45751953125,"ival-cos",400],[3.398193359375,"ival-pow",800],[0.127685546875,"ival-tan",400],[0.244384765625,"ival-neg",400],[12.53662109375,"ival-pow",0],[108.8984375,"ival-sin",2400],[1.5830078125,"ival-tan",800],[59.722900390625,"ival-tan",1600],[2.914306640625,"ival-mult",800],[12.263916015625,"ival-add",0],[7.103271484375,"ival-cos",800],[1.1103515625,"ival-neg",1200],[0.568115234375,"ival-mult",1600],[0.204345703125,"ival-add",400],[13.9931640625,"ival-sin",2000],[2.750732421875,"ival-div",2000],[1.012939453125,"ival-add",2400],[3.215576171875,"ival-mult",2400],[0.836669921875,"ival-pow",400],[18.202392578125,"ival-sin",800],[7.793701171875,"ival-pow",2400],[10.1376953125,"ival-div",2400],[1.023193359375,"ival-add",1200],[0.08544921875,"ival-cos",1600],[0.608642578125,"ival-mult",2000],[0.1259765625,"ival-neg",1600],[283.865234375,"ival-tan",2400],[40.09912109375,"ival-cos",2400],[2.58642578125,"ival-pow",2000],[0.13916015625,"ival-sin",1600],[13.59912109375,"adjust",2000],[9.316162109375,"ival-div",1200],[4.3056640625,"ival-pow",1200],[1.301025390625,"ival-sin",400],[0.88232421875,"ival-mult",400],[0.218505859375,"ival-add",1600],[16.297119140625,"ival-mult",0],[3.75146484375,"ival-sin",0],[6.150146484375,"ival-cos",2000],[0.2333984375,"ival-add",2000],[0.177734375,"ival-neg",2000],[7.39794921875,"ival-div",800],[0.46630859375,"ival-true",0],[0.9599609375,"ival-add",800],[0.972900390625,"exact",0],[12.71142578125,"ival-tan",1200],[10.22119140625,"ival-neg",0]],"outcomes":[[174.63232421875,1,"valid",125],[786.2333984375,2,"valid",128],[1.607666015625,0,"valid",3]],"time":1038.8251953125,"type":"localize"},{"count":[[26,124]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x)))","(-.f64 (tan.f64 x) x)","(tan.f64 x)","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x)))","(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x)))","(*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))","(cos.f64 x)","(*.f64 (neg.f64 x) (tan.f64 x))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))"]],"memory":[[-20901024,11194032]],"outputs":[["(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","(* -1/3 x)","(* x (- (* -1/45 (pow x 2)) 1/3))","(* x (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/4725 (pow x 2)) 2/945)) 1/45)) 1/3))","(* 1/3 (pow x 3))","(* (pow x 3) (+ 1/3 (* 2/15 (pow x 2))))","(* (pow x 3) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))","(* (pow x 3) (+ 1/3 (* (pow x 2) (+ 2/15 (* (pow x 2) (+ 17/315 (* 62/2835 (pow x 2))))))))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","2/3","(+ 2/3 (* -1/15 (pow x 2)))","(+ 2/3 (* (pow x 2) (- (* -2/189 (pow x 2)) 1/15)))","(+ 2/3 (* (pow x 2) (- (* (pow x 2) (- (* -1/675 (pow x 2)) 2/189)) 1/15)))","(/ 1 (pow x 2))","(/ -1/2 x)","(/ (- (* 1/4 (pow x 2)) 1/2) x)","(/ (- (* (pow x 2) (+ 1/4 (* 1/360 (pow x 2)))) 1/2) x)","(/ (- (* (pow x 2) (+ 1/4 (* (pow x 2) (+ 1/360 (* -13/5040 (pow x 2)))))) 1/2) x)","(/ 1/2 x)","(/ (+ 1/2 (* 1/12 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/12 (* 7/360 (pow x 2))))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 7/360 (* 71/15120 (pow x 2))))))) x)","(* 2 x)","(* x (+ 2 (* -1/3 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))))","(/ -1/3 x)","(/ (- (* 2/9 (pow x 2)) 1/3) x)","(/ (- (* (pow x 2) (+ 2/9 (* -4/405 (pow x 2)))) 1/3) x)","(/ (- (* (pow x 2) (+ 2/9 (* (pow x 2) (- (* -17/2835 (pow x 2)) 4/405)))) 1/3) x)","(/ 1/3 x)","(/ (+ 1/3 (* 1/9 (pow x 2))) x)","(/ (+ 1/3 (* (pow x 2) (+ 1/9 (* 13/405 (pow x 2))))) x)","(/ (+ 1/3 (* (pow x 2) (+ 1/9 (* (pow x 2) (+ 13/405 (* 23/2835 (pow x 2))))))) x)","(* 3 x)","(* x (+ 3 (* -1 (pow x 2))))","(* x (+ 3 (* (pow x 2) (- (* 2/45 (pow x 2)) 1))))","(* x (+ 3 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* 8/945 (pow x 2)))) 1))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 (pow x 2))","(* (pow x 2) (- (* -1/3 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* -2/15 (pow x 2)) 1/3)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* (pow x 2) (- (* -17/315 (pow x 2)) 2/15)) 1/3)) 1))","(/ -1 x)","(/ (- (* 1/3 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* 1/45 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))) 1) x)","(/ (+ 1/2 (* -1/4 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/4))) x)","(/ (+ 1/2 (* (pow x 2) (- (* (pow x 2) (- (* 13/5040 (pow x 2)) 1/360)) 1/4))) x)","(/ (+ 1/3 (* -2/9 (pow x 2))) x)","(/ (+ 1/3 (* (pow x 2) (- (* 4/405 (pow x 2)) 2/9))) x)","(/ (+ 1/3 (* (pow x 2) (- (* (pow x 2) (+ 4/405 (* 17/2835 (pow x 2)))) 2/9))) x)","(/ (cos x) (sin x))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ 1 (sin x))","(- (/ (cos x) (sin x)) (/ 1 x))","(* -1 x)","(* x (- (/ (sin x) (* x (cos x))) 1))","(/ (sin x) (cos x))","(+ (* -1 (/ (cos x) (sin x))) (/ 1 x))","(+ (* -1 (/ (cos x) (sin x))) (+ (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) (pow x 2))) (/ 1 x)))","(* -1 (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (/ 1 (pow x 2)) (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ 1 x) (/ (sin x) (* (pow x 2) (cos x))))) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (/ 1 x)) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ 1 x) (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2))))) (/ (cos x) (sin x)))","(/ (sin x) (* (pow x 2) (cos x)))","(/ (+ (* -1 (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (/ (sin x) (cos x))) (pow x 2))","(/ (- (+ (/ (sin x) (cos x)) (/ (pow (sin x) 3) (* (pow x 2) (pow (cos x) 3)))) (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (pow x 2))","(/ (- (+ (* -1 (/ (pow (sin x) 4) (* (pow x 3) (pow (cos x) 4)))) (/ (sin x) (cos x))) (+ (* -1 (/ (pow (sin x) 3) (* (pow x 2) (pow (cos x) 3)))) (/ (pow (sin x) 2) (* x (pow (cos x) 2))))) (pow x 2))","(/ (* (pow x 2) (cos x)) (sin x))","(* (pow x 2) (+ (/ 1 x) (/ (cos x) (sin x))))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (* -1 (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))) (+ (/ 1 x) (/ (sin x) (* (pow x 2) (cos x))))))) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (* -1 (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))) (+ (/ 1 x) (+ (/ (sin x) (* (pow x 2) (cos x))) (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))))))) (/ (cos x) (sin x)))","(/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))","(/ (+ (* -1 (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (/ (pow (sin x) 2) (pow (cos x) 2))) (pow x 3))","(/ (- (+ (* -1 (/ (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4))) (pow x 2))) (/ (pow (sin x) 2) (pow (cos x) 2))) (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (pow x 3))","(/ (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4)))) (cos x))) (* -1 (/ (pow (sin x) 5) (pow (cos x) 5)))) (pow x 3))) (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (* (pow x 2) (pow (cos x) 4)))) (+ (/ (pow (sin x) 3) (* x (pow (cos x) 3))) (/ (pow (sin x) 4) (* (pow x 2) (pow (cos x) 4)))))) (pow x 3))","(/ (* (pow x 3) (pow (cos x) 2)) (pow (sin x) 2))","(* (pow x 3) (+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2))))","(* (pow x 3) (+ (/ 1 (pow x 2)) (+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2)))))","(cos x)","(* -1 (/ (* x (sin x)) (cos x)))","(- (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x)))) (/ 1 x))","(- (+ (* -1 (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))) (/ (cos x) (sin x))) (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (/ 1 x)))","(- (+ (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) (pow x 2))) (/ (cos x) (sin x))) (/ 1 x))","(- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (pow x 3))) (/ (cos x) (sin x))) (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ 1 x) (/ (sin x) (* (pow x 2) (cos x))))))","(* -1 (* x (+ 1 (* -1 (/ (sin x) (* x (cos x)))))))","(+ (* -1 (/ (cos x) (sin x))) (* -1 (/ (- (+ (* -1 (/ (sin x) (* x (cos x)))) (/ (sin x) (* x (cos x)))) 1) x)))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) x)) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (/ (sin x) (* x (cos x))) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) x)) 1) x)) (/ (cos x) (sin x)))","(/ (+ (* -1 (/ (- (* -1 (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) x)) (/ (sin x) (cos x))) (pow x 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (* -1 (/ (pow (sin x) 4) (* x (pow (cos x) 4)))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3)))) x)) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) x)) (/ (sin x) (cos x))) (pow x 2))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (+ (* -1 (/ (+ (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))) x)) (/ (sin x) (cos x)))) x)) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (+ (* -1 (/ (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))) x)) (/ (sin x) (cos x)))) x)) 1) x)) (/ (cos x) (sin x)))","(* -1 (/ (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (pow x 3)))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4))) x)) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3)))) x)) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (pow x 3)))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (/ (* (sin x) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4)))) (cos x)) (/ (pow (sin x) 5) (pow (cos x) 5))) x)) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4)))) x)) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3)))) x)) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (pow x 3)))","(* -1 (* (pow x 3) (+ (* -1 (/ (cos x) (* x (sin x)))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (/ 1 x) (/ (cos x) (sin x))) x)) (* -1 (/ (pow (cos x) 2) (pow (sin x) 2))))))","(+ (* -1 (/ (+ 1 (* -1 (/ (sin x) (* x (cos x))))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (* -1 (/ (sin x) (cos x)))) x))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (+ (* -1 (/ (sin x) (* x (cos x)))) (/ (sin x) (* x (cos x))))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (* -1 (/ (- (+ (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* x (cos x))) (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) x))) x)) (/ (cos x) (sin x)))"]],"series":[[23.364990234375,"((* (/ 1 (sin x)) (cos x)) (- (/ 1 x) (* (/ 1 (sin x)) (cos x))) (/ 1 x) (/ 1 (sin x)) (neg (/ (- (tan x) x) (* (neg x) (tan x)))) (/ (- (tan x) x) (* (neg x) (tan x))) (- (tan x) x) (tan x) (neg (/ (- (/ 1 (* x x)) (pow (tan x) -2)) (+ (/ -1 (tan x)) (/ -1 x)))) (/ (- (/ 1 (* x x)) (pow (tan x) -2)) (+ (/ -1 (tan x)) (/ -1 x))) (- (/ 1 (* x x)) (pow (tan x) -2)) (/ 1 (* x x)) (+ (/ 1 (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x))) (neg (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x))))) (neg (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x)))) (/ 1 (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x))) (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x)) (neg (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))))) (+ (/ 1 (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x))) (neg (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))) (/ 1 (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x))) (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x)) (cos x) (* (neg x) (tan x)) (/ -1 (tan x)) (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x))) (/ 1 (tan x)) (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))","x","-inf"],[19.0791015625,"((* (/ 1 (sin x)) (cos x)) (- (/ 1 x) (* (/ 1 (sin x)) (cos x))) (/ 1 x) (/ 1 (sin x)) (neg (/ (- (tan x) x) (* (neg x) (tan x)))) (/ (- (tan x) x) (* (neg x) (tan x))) (- (tan x) x) (tan x) (neg (/ (- (/ 1 (* x x)) (pow (tan x) -2)) (+ (/ -1 (tan x)) (/ -1 x)))) (/ (- (/ 1 (* x x)) (pow (tan x) -2)) (+ (/ -1 (tan x)) (/ -1 x))) (- (/ 1 (* x x)) (pow (tan x) -2)) (/ 1 (* x x)) (+ (/ 1 (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x))) (neg (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x))))) (neg (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x)))) (/ 1 (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x))) (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x)) (neg (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))))) (+ (/ 1 (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x))) (neg (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))) (/ 1 (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x))) (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x)) (cos x) (* (neg x) (tan x)) (/ -1 (tan x)) (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x))) (/ 1 (tan x)) (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))","x","inf"],[9.878173828125,"((* (/ 1 (sin x)) (cos x)) (- (/ 1 x) (* (/ 1 (sin x)) (cos x))) (/ 1 x) (/ 1 (sin x)) (neg (/ (- (tan x) x) (* (neg x) (tan x)))) (/ (- (tan x) x) (* (neg x) (tan x))) (- (tan x) x) (tan x) (neg (/ (- (/ 1 (* x x)) (pow (tan x) -2)) (+ (/ -1 (tan x)) (/ -1 x)))) (/ (- (/ 1 (* x x)) (pow (tan x) -2)) (+ (/ -1 (tan x)) (/ -1 x))) (- (/ 1 (* x x)) (pow (tan x) -2)) (/ 1 (* x x)) (+ (/ 1 (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x))) (neg (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x))))) (neg (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x)))) (/ 1 (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x))) (* (+ (/ 1 (tan x)) (/ 1 x)) (* x x)) (neg (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))))) (+ (/ 1 (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x))) (neg (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))) (/ 1 (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x))) (* (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (* (* x x) x)) (cos x) (* (neg x) (tan x)) (/ -1 (tan x)) (/ (pow (tan x) -2) (+ (/ 1 (tan x)) (/ 1 x))) (/ 1 (tan x)) (/ (pow (tan x) -3) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))","x","0"]],"time":56.718017578125,"type":"series"},{"count":[[124,0]],"inputs":[["(/ 1 x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","(* -1/3 x)","(* x (- (* -1/45 (pow x 2)) 1/3))","(* x (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/4725 (pow x 2)) 2/945)) 1/45)) 1/3))","(* 1/3 (pow x 3))","(* (pow x 3) (+ 1/3 (* 2/15 (pow x 2))))","(* (pow x 3) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))","(* (pow x 3) (+ 1/3 (* (pow x 2) (+ 2/15 (* (pow x 2) (+ 17/315 (* 62/2835 (pow x 2))))))))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","2/3","(+ 2/3 (* -1/15 (pow x 2)))","(+ 2/3 (* (pow x 2) (- (* -2/189 (pow x 2)) 1/15)))","(+ 2/3 (* (pow x 2) (- (* (pow x 2) (- (* -1/675 (pow x 2)) 2/189)) 1/15)))","(/ 1 (pow x 2))","(/ -1/2 x)","(/ (- (* 1/4 (pow x 2)) 1/2) x)","(/ (- (* (pow x 2) (+ 1/4 (* 1/360 (pow x 2)))) 1/2) x)","(/ (- (* (pow x 2) (+ 1/4 (* (pow x 2) (+ 1/360 (* -13/5040 (pow x 2)))))) 1/2) x)","(/ 1/2 x)","(/ (+ 1/2 (* 1/12 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/12 (* 7/360 (pow x 2))))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 7/360 (* 71/15120 (pow x 2))))))) x)","(* 2 x)","(* x (+ 2 (* -1/3 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))))","(/ -1/3 x)","(/ (- (* 2/9 (pow x 2)) 1/3) x)","(/ (- (* (pow x 2) (+ 2/9 (* -4/405 (pow x 2)))) 1/3) x)","(/ (- (* (pow x 2) (+ 2/9 (* (pow x 2) (- (* -17/2835 (pow x 2)) 4/405)))) 1/3) x)","(/ 1/3 x)","(/ (+ 1/3 (* 1/9 (pow x 2))) x)","(/ (+ 1/3 (* (pow x 2) (+ 1/9 (* 13/405 (pow x 2))))) x)","(/ (+ 1/3 (* (pow x 2) (+ 1/9 (* (pow x 2) (+ 13/405 (* 23/2835 (pow x 2))))))) x)","(* 3 x)","(* x (+ 3 (* -1 (pow x 2))))","(* x (+ 3 (* (pow x 2) (- (* 2/45 (pow x 2)) 1))))","(* x (+ 3 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* 8/945 (pow x 2)))) 1))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 (pow x 2))","(* (pow x 2) (- (* -1/3 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* -2/15 (pow x 2)) 1/3)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* (pow x 2) (- (* -17/315 (pow x 2)) 2/15)) 1/3)) 1))","(/ -1 x)","(/ (- (* 1/3 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* 1/45 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2)))))) 1) x)","(/ (+ 1/2 (* -1/4 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/4))) x)","(/ (+ 1/2 (* (pow x 2) (- (* (pow x 2) (- (* 13/5040 (pow x 2)) 1/360)) 1/4))) x)","(/ (+ 1/3 (* -2/9 (pow x 2))) x)","(/ (+ 1/3 (* (pow x 2) (- (* 4/405 (pow x 2)) 2/9))) x)","(/ (+ 1/3 (* (pow x 2) (- (* (pow x 2) (+ 4/405 (* 17/2835 (pow x 2)))) 2/9))) x)","(/ (cos x) (sin x))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(/ 1 (sin x))","(- (/ (cos x) (sin x)) (/ 1 x))","(* -1 x)","(* x (- (/ (sin x) (* x (cos x))) 1))","(/ (sin x) (cos x))","(+ (* -1 (/ (cos x) (sin x))) (/ 1 x))","(+ (* -1 (/ (cos x) (sin x))) (+ (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) (pow x 2))) (/ 1 x)))","(* -1 (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (/ 1 (pow x 2)) (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ 1 x) (/ (sin x) (* (pow x 2) (cos x))))) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (/ 1 x)) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ 1 x) (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2))))) (/ (cos x) (sin x)))","(/ (sin x) (* (pow x 2) (cos x)))","(/ (+ (* -1 (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (/ (sin x) (cos x))) (pow x 2))","(/ (- (+ (/ (sin x) (cos x)) (/ (pow (sin x) 3) (* (pow x 2) (pow (cos x) 3)))) (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (pow x 2))","(/ (- (+ (* -1 (/ (pow (sin x) 4) (* (pow x 3) (pow (cos x) 4)))) (/ (sin x) (cos x))) (+ (* -1 (/ (pow (sin x) 3) (* (pow x 2) (pow (cos x) 3)))) (/ (pow (sin x) 2) (* x (pow (cos x) 2))))) (pow x 2))","(/ (* (pow x 2) (cos x)) (sin x))","(* (pow x 2) (+ (/ 1 x) (/ (cos x) (sin x))))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (* -1 (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))) (+ (/ 1 x) (/ (sin x) (* (pow x 2) (cos x))))))) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (* -1 (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))) (+ (/ 1 x) (+ (/ (sin x) (* (pow x 2) (cos x))) (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))))))) (/ (cos x) (sin x)))","(/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))","(/ (+ (* -1 (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (/ (pow (sin x) 2) (pow (cos x) 2))) (pow x 3))","(/ (- (+ (* -1 (/ (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4))) (pow x 2))) (/ (pow (sin x) 2) (pow (cos x) 2))) (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (pow x 3))","(/ (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4)))) (cos x))) (* -1 (/ (pow (sin x) 5) (pow (cos x) 5)))) (pow x 3))) (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (* (pow x 2) (pow (cos x) 4)))) (+ (/ (pow (sin x) 3) (* x (pow (cos x) 3))) (/ (pow (sin x) 4) (* (pow x 2) (pow (cos x) 4)))))) (pow x 3))","(/ (* (pow x 3) (pow (cos x) 2)) (pow (sin x) 2))","(* (pow x 3) (+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2))))","(* (pow x 3) (+ (/ 1 (pow x 2)) (+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2)))))","(cos x)","(* -1 (/ (* x (sin x)) (cos x)))","(- (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x)))) (/ 1 x))","(- (+ (* -1 (/ (pow (sin x) 2) (* (pow x 3) (pow (cos x) 2)))) (/ (cos x) (sin x))) (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (/ 1 x)))","(- (+ (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) (pow x 2))) (/ (cos x) (sin x))) (/ 1 x))","(- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (pow x 3))) (/ (cos x) (sin x))) (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ 1 x) (/ (sin x) (* (pow x 2) (cos x))))))","(* -1 (* x (+ 1 (* -1 (/ (sin x) (* x (cos x)))))))","(+ (* -1 (/ (cos x) (sin x))) (* -1 (/ (- (+ (* -1 (/ (sin x) (* x (cos x)))) (/ (sin x) (* x (cos x)))) 1) x)))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) x)) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (/ (sin x) (* x (cos x))) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) x)) 1) x)) (/ (cos x) (sin x)))","(/ (+ (* -1 (/ (- (* -1 (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) x)) (/ (sin x) (cos x))) (pow x 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (* -1 (/ (pow (sin x) 4) (* x (pow (cos x) 4)))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3)))) x)) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) x)) (/ (sin x) (cos x))) (pow x 2))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (+ (* -1 (/ (+ (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))) x)) (/ (sin x) (cos x)))) x)) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (+ (* -1 (/ (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))) x)) (/ (sin x) (cos x)))) x)) 1) x)) (/ (cos x) (sin x)))","(* -1 (/ (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (/ (pow (sin x) 3) (* x (pow (cos x) 3)))) (pow x 3)))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4))) x)) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3)))) x)) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (pow x 3)))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (/ (* (sin x) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4)))) (cos x)) (/ (pow (sin x) 5) (pow (cos x) 5))) x)) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (/ (pow (sin x) 4) (pow (cos x) 4)))) x)) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3)))) x)) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (pow x 3)))","(* -1 (* (pow x 3) (+ (* -1 (/ (cos x) (* x (sin x)))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 2))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (/ 1 x) (/ (cos x) (sin x))) x)) (* -1 (/ (pow (cos x) 2) (pow (sin x) 2))))))","(+ (* -1 (/ (+ 1 (* -1 (/ (sin x) (* x (cos x))))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (* -1 (/ (sin x) (cos x)))) x))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (+ (* -1 (/ (sin x) (* x (cos x)))) (/ (sin x) (* x (cos x))))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (* -1 (/ (- (+ (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* x (cos x))) (/ (pow (sin x) 2) (* x (pow (cos x) 2)))) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) x))) x)) (/ (cos x) (sin x)))"]],"memory":[[3587808,11495792]],"method":["egg-herbie"],"outputs":[[]],"time":156.599853515625,"type":"simplify"},{"count":[[26,390]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","(/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x)))","(-.f64 (tan.f64 x) x)","(tan.f64 x)","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x)))","(*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))","(neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x)))","(*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))","(cos.f64 x)","(*.f64 (neg.f64 x) (tan.f64 x))","(/.f64 #s(literal -1 binary64) (tan.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))"]],"memory":[[-3800784,21476272]],"outputs":[["#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -3 binary64)","#s(literal 1/2 binary64)","#s(literal -1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -6 binary64)","#s(literal -9 binary64)","#s(literal 9 binary64)"]],"time":505.869140625,"type":"rewrite"},{"compiler":[[75,32]],"memory":[[1472592,1472592]],"time":2.597900390625,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","done",59.742249883117175,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","next",60.712557673032826,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","done",59.736355135964665,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","next",61.74867328547654,"binary64"],["(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","next",60.61088706903093,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","done",62.81982524838522,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","done",62.41352160889503,"binary64"],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","next",62.862045720559415,"binary64"],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","done",62.37214302744394,"binary64"],["(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","done",62.28135444145946,"binary64"]],"compiler":[[8,6],[17,10],[11,8],[5,5],[16,10],[49,18],[29,14],[32,18],[20,14],[11,7]],"count":[[24,10]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[15,1],"picked":[5,5]}],"memory":[[-3277856,5008432]],"min-error":[[59.25077657804862,"binary64"]],"time":8.98388671875,"type":"prune"},{"inputs":[["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))","#s(literal 1 binary64)","(*.f64 (*.f64 x x) x)","(*.f64 x x)","x","(pow.f64 (tan.f64 x) #s(literal -3 binary64))","(tan.f64 x)","#s(literal -3 binary64)","(neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x))","(+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","x","(/.f64 #s(literal -1 binary64) #s(literal 2 binary64))","#s(literal -1 binary64)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","#s(literal 1 binary64)","(tan.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 9 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","(tan.f64 x)","(/.f64 #s(literal -1 binary64) #s(literal 2 binary64))","#s(literal -1 binary64)","#s(literal 2 binary64)"]],"locations":[["(pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","cost-diff",0],["(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","cost-diff",7],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(literal 2 binary64))","cost-diff",0],["(pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","cost-diff",0],["(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cost-diff",0],["(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","cost-diff",6],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","cost-diff",0],["(neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","cost-diff",1],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","cost-diff",1]],"memory":[[5037376,13265888]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x))","#s(literal 1 binary64)","(*.f64 (*.f64 x x) x)","(*.f64 x x)","x","(pow.f64 (tan.f64 x) #s(literal -3 binary64))","(tan.f64 x)","#s(literal -3 binary64)","(neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x))","(+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (pow.f64 x (/.f64 #s(literal -2 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(pow.f64 x (/.f64 #s(literal -2 binary64) #s(literal 2 binary64)))","(pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","x","(/.f64 #s(literal -1 binary64) #s(literal 2 binary64))","#s(literal -1 binary64)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","#s(literal 1 binary64)","(tan.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","(+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -9 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 9 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (pow.f64 (tan.f64 x) (/.f64 #s(literal -2 binary64) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(pow.f64 (tan.f64 x) (/.f64 #s(literal -2 binary64) #s(literal 2 binary64)))","(pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","(tan.f64 x)","(/.f64 #s(literal -1 binary64) #s(literal 2 binary64))","#s(literal -1 binary64)","#s(literal 2 binary64)"]],"time":278.76123046875,"type":"simplify"},{"compiler":[[271,31]],"locations":[["(pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","accuracy",0.00390625],["(tan.f64 x)","accuracy",0.00390625],["(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","accuracy",0.4606437988422102],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","accuracy",59.736804157979115],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","accuracy",0.00390625],["(tan.f64 x)","accuracy",0.00390625],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","accuracy",0.01171875],["(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","accuracy",0.4645500488422102],["(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","accuracy",59.736804157979115],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",0.1171875],["(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","accuracy",0.15625],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","accuracy",31.288340900234218],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))","accuracy",59.945321024121384]],"memory":[[2947568,59491776]],"mixsample":[[3.904541015625,"ival-tan",2000],[22.827392578125,"adjust",800],[19.832275390625,"ival-div",0],[2.88037109375,"ival-mult",1200],[1.663818359375,"ival-pow",2800],[0.37744140625,"ival-div",400],[4.50146484375,"ival-pow",1600],[0.245849609375,"ival-assert",0],[0.91845703125,"ival-div",1600],[13.7509765625,"ival-sub",0],[3.480224609375,"ival-tan",0],[21.699462890625,"ival-pow",800],[0.030029296875,"ival-tan",400],[44.875,"ival-pow",0],[1.041259765625,"ival-tan",800],[3.958740234375,"ival-tan",1600],[0.13134765625,"ival-mult",3600],[8.001708984375,"ival-add",0],[63.885009765625,"ival-mult",800],[0.510986328125,"ival-mult",1600],[2.38525390625,"ival-pow",3200],[1.007568359375,"ival-div",2000],[2.779296875,"ival-mult",2400],[4.095458984375,"ival-pow",400],[51.263671875,"ival-pow",2400],[2.865234375,"ival-div",2400],[46.13037109375,"ival-tan",2800],[0.865234375,"ival-mult",2000],[0.334716796875,"ival-mult",2800],[7.0439453125,"ival-tan",2400],[0.4912109375,"ival-pow",3600],[10.857177734375,"ival-pow",2000],[0.70849609375,"ival-div",3200],[10.351806640625,"adjust",2000],[0.45751953125,"ival-div",2800],[32.0390625,"ival-pow",1200],[2.610595703125,"ival-div",1200],[0.436767578125,"ival-mult",400],[9.99072265625,"ival-mult",0],[42.59033203125,"ival-tan",3600],[1.780517578125,"ival-div",800],[84.85888671875,"ival-tan",3200],[0.175048828125,"ival-div",3600],[0.4873046875,"ival-true",0],[0.879638671875,"exact",0],[0.47119140625,"ival-mult",3200],[3.59130859375,"ival-tan",1200],[6.71337890625,"ival-neg",0]],"outcomes":[[186.07275390625,1,"valid",125],[415.4912109375,2,"valid",128],[1.124755859375,0,"valid",3]],"time":645.324951171875,"type":"localize"},{"count":[[17,62]],"inputs":[["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) #s(literal 2 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","(/.f64 #s(literal 1 binary64) x)","(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[-1389312,6038736]],"outputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ -3 (pow x 2))","(/ (- (pow x 2) 3) (pow x 2))","(/ (- (* (pow x 2) (+ 1 (* -2/45 (pow x 2)))) 3) (pow x 2))","(/ (- (* (pow x 2) (+ 1 (* (pow x 2) (- (* -8/945 (pow x 2)) 2/45)))) 3) (pow x 2))","(* -1/3 x)","(* x (- (* -1/45 (pow x 2)) 1/3))","(* x (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/4725 (pow x 2)) 2/945)) 1/45)) 1/3))","(/ 1 x)","(/ (+ 1 (* -4/15 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/945 (pow x 2)) 4/15))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* 11/4725 (pow x 2)) 1/945)) 4/15))) x)","(sqrt (/ 1 x))","(/ (+ 1 (* -9 x)) x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(/ (+ (sqrt x) (* -1/6 (sqrt (pow x 5)))) x)","(/ (+ (sqrt x) (* (pow x 3) (+ (* -1/6 (sqrt (/ 1 x))) (* -1/90 (sqrt (pow x 3)))))) x)","(/ (+ (sqrt x) (* (pow x 3) (+ (* -1/6 (sqrt (/ 1 x))) (* (pow x 2) (+ (* -1/72 (sqrt (/ 1 x))) (* -1/90 (sqrt (/ 1 x)))))))) x)","(/ 3 (pow x 2))","(/ (+ 3 (* -1 (pow x 2))) (pow x 2))","(/ (+ 3 (* (pow x 2) (- (* 2/45 (pow x 2)) 1))) (pow x 2))","(/ (+ 3 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* 8/945 (pow x 2)))) 1))) (pow x 2))","(/ 1 (pow x 2))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) (pow x 2))) (/ 1 x)) (/ (cos x) (sin x)))","(- (+ (/ 1 x) (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x))))))","(* -1 (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (* -1 (/ (cos x) (* x (sin x)))) (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (* -1 (/ (+ (/ 1 x) (/ (cos x) (sin x))) x)) (/ (pow (cos x) 2) (pow (sin x) 2)))","(/ (cos x) (sin x))","(- (/ (cos x) (sin x)) (/ 1 x))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x))))) (/ 1 x))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x)))))) (/ 1 x))","(* -1 (/ (pow (cos x) 3) (pow (sin x) 3)))","(- (/ 1 (pow x 3)) (/ (pow (cos x) 3) (pow (sin x) 3)))","-9","(- (/ 1 x) 9)","(sqrt (/ (cos x) (sin x)))","(/ (pow (cos x) 2) (pow (sin x) 2))","(+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2)))","(+ (/ 1 (pow x 2)) (+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2))))","(/ (sin x) (cos x))","(- (* -1 (/ (- (+ (* -1 (/ (sin x) (* x (cos x)))) (/ (sin x) (* x (cos x)))) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (* -1 (/ (- (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* x (cos x))) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) x)) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (/ 1 x) (* -1 (/ (cos x) (sin x)))) x)) (/ (pow (cos x) 2) (pow (sin x) 2)))","(+ (* -1 (/ (+ 1 (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) x))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* x (cos x)))) (/ (sin x) (cos x)))) x))) x)) (/ (cos x) (sin x)))","(* -1 (/ (pow (sqrt -1) 2) x))","(- (* -1 (/ (pow (sqrt -1) 2) x)) (/ (cos x) (sin x)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1 (/ (- (* -1 (/ (cos x) (sin x))) (/ 1 x)) x)) (/ (pow (cos x) 2) (pow (sin x) 2)))"]],"series":[[5.6171875,"((neg (/ (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))) (/ (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))))) (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (* (pow x (/ -1 2)) (pow x (/ -1 2))) (- (* (pow x (/ -1 2)) (pow x (/ -1 2))) (/ 1 (tan x))) (pow x (/ -1 2)) (/ -1 2) (- (/ 1 x) 9) (/ 1 x) (* (pow (tan x) (/ -1 2)) (pow (tan x) (/ -1 2))) (- (/ 1 x) (* (pow (tan x) (/ -1 2)) (pow (tan x) (/ -1 2)))) (pow (tan x) (/ -1 2)) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (/ 1 (* x x)) (/ 1 (tan x)) (tan x))","x","-inf"],[4.091064453125,"((neg (/ (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))) (/ (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))))) (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (* (pow x (/ -1 2)) (pow x (/ -1 2))) (- (* (pow x (/ -1 2)) (pow x (/ -1 2))) (/ 1 (tan x))) (pow x (/ -1 2)) (/ -1 2) (- (/ 1 x) 9) (/ 1 x) (* (pow (tan x) (/ -1 2)) (pow (tan x) (/ -1 2))) (- (/ 1 x) (* (pow (tan x) (/ -1 2)) (pow (tan x) (/ -1 2)))) (pow (tan x) (/ -1 2)) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (/ 1 (* x x)) (/ 1 (tan x)) (tan x))","x","inf"],[5.27490234375,"((neg (/ (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))))) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x)))) (/ (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (neg (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))))) (- (/ 1 (* (* x x) x)) (pow (tan x) -3)) (* (pow x (/ -1 2)) (pow x (/ -1 2))) (- (* (pow x (/ -1 2)) (pow x (/ -1 2))) (/ 1 (tan x))) (pow x (/ -1 2)) (/ -1 2) (- (/ 1 x) 9) (/ 1 x) (* (pow (tan x) (/ -1 2)) (pow (tan x) (/ -1 2))) (- (/ 1 x) (* (pow (tan x) (/ -1 2)) (pow (tan x) (/ -1 2)))) (pow (tan x) (/ -1 2)) (+ (/ (+ (/ 1 (tan x)) (/ 1 x)) (tan x)) (/ 1 (* x x))) (/ 1 (* x x)) (/ 1 (tan x)) (tan x))","x","0"]],"time":16.375,"type":"series"},{"count":[[62,0]],"inputs":[["(* 1/3 x)","(* x (+ 1/3 (* 1/45 (pow x 2))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* 2/945 (pow x 2))))))","(* x (+ 1/3 (* (pow x 2) (+ 1/45 (* (pow x 2) (+ 2/945 (* 1/4725 (pow x 2))))))))","(/ -3 (pow x 2))","(/ (- (pow x 2) 3) (pow x 2))","(/ (- (* (pow x 2) (+ 1 (* -2/45 (pow x 2)))) 3) (pow x 2))","(/ (- (* (pow x 2) (+ 1 (* (pow x 2) (- (* -8/945 (pow x 2)) 2/45)))) 3) (pow x 2))","(* -1/3 x)","(* x (- (* -1/45 (pow x 2)) 1/3))","(* x (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -1/4725 (pow x 2)) 2/945)) 1/45)) 1/3))","(/ 1 x)","(/ (+ 1 (* -4/15 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/945 (pow x 2)) 4/15))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* 11/4725 (pow x 2)) 1/945)) 4/15))) x)","(sqrt (/ 1 x))","(/ (+ 1 (* -9 x)) x)","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(/ (+ (sqrt x) (* -1/6 (sqrt (pow x 5)))) x)","(/ (+ (sqrt x) (* (pow x 3) (+ (* -1/6 (sqrt (/ 1 x))) (* -1/90 (sqrt (pow x 3)))))) x)","(/ (+ (sqrt x) (* (pow x 3) (+ (* -1/6 (sqrt (/ 1 x))) (* (pow x 2) (+ (* -1/72 (sqrt (/ 1 x))) (* -1/90 (sqrt (/ 1 x)))))))) x)","(/ 3 (pow x 2))","(/ (+ 3 (* -1 (pow x 2))) (pow x 2))","(/ (+ 3 (* (pow x 2) (- (* 2/45 (pow x 2)) 1))) (pow x 2))","(/ (+ 3 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* 8/945 (pow x 2)))) 1))) (pow x 2))","(/ 1 (pow x 2))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(* -1 (/ (cos x) (sin x)))","(- (/ 1 x) (/ (cos x) (sin x)))","(- (+ (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) (pow x 2))) (/ 1 x)) (/ (cos x) (sin x)))","(- (+ (/ 1 x) (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x))))))","(* -1 (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (* -1 (/ (cos x) (* x (sin x)))) (/ (pow (cos x) 2) (pow (sin x) 2)))","(- (* -1 (/ (+ (/ 1 x) (/ (cos x) (sin x))) x)) (/ (pow (cos x) 2) (pow (sin x) 2)))","(/ (cos x) (sin x))","(- (/ (cos x) (sin x)) (/ 1 x))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x))))) (/ 1 x))","(- (+ (* -1 (/ (sin x) (* (pow x 2) (cos x)))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* (pow x 3) (cos x)))) (+ (/ (cos x) (sin x)) (/ (sin x) (* (pow x 2) (cos x)))))) (/ 1 x))","(* -1 (/ (pow (cos x) 3) (pow (sin x) 3)))","(- (/ 1 (pow x 3)) (/ (pow (cos x) 3) (pow (sin x) 3)))","-9","(- (/ 1 x) 9)","(sqrt (/ (cos x) (sin x)))","(/ (pow (cos x) 2) (pow (sin x) 2))","(+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2)))","(+ (/ 1 (pow x 2)) (+ (/ (cos x) (* x (sin x))) (/ (pow (cos x) 2) (pow (sin x) 2))))","(/ (sin x) (cos x))","(- (* -1 (/ (- (+ (* -1 (/ (sin x) (* x (cos x)))) (/ (sin x) (* x (cos x)))) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (* -1 (/ (- (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* x (cos x))) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) x)) 1) x)) (/ (cos x) (sin x)))","(- (* -1 (/ (- (/ 1 x) (* -1 (/ (cos x) (sin x)))) x)) (/ (pow (cos x) 2) (pow (sin x) 2)))","(+ (* -1 (/ (+ 1 (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x))) x))) x)) (/ (cos x) (sin x)))","(+ (* -1 (/ (+ 1 (* -1 (/ (+ (* -1 (/ (sin x) (cos x))) (+ (* -1 (/ (* (sin x) (+ (* -1 (/ (sin x) (cos x))) (/ (sin x) (cos x)))) (* x (cos x)))) (/ (sin x) (cos x)))) x))) x)) (/ (cos x) (sin x)))","(* -1 (/ (pow (sqrt -1) 2) x))","(- (* -1 (/ (pow (sqrt -1) 2) x)) (/ (cos x) (sin x)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1 (/ (- (* -1 (/ (cos x) (sin x))) (/ 1 x)) x)) (/ (pow (cos x) 2) (pow (sin x) 2)))"]],"memory":[[2327648,10222160]],"method":["egg-herbie"],"outputs":[[]],"time":134.800048828125,"type":"simplify"},{"count":[[17,255]],"inputs":[["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64)))","(*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) #s(literal 2 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","(/.f64 #s(literal 1 binary64) x)","(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[-2947728,16889888]],"outputs":[["#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)","#s(literal 1 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 9 binary64)","#s(literal 5 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -9 binary64)","#s(literal 81 binary64)"]],"time":531.23583984375,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1335152,1335152]],"time":2.08203125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","done",59.742249883117175,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","done",60.712557673032826,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","done",59.736355135964665,"binary64"],["(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","done",60.61088706903093,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","done",62.81982524838522,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","done",62.41352160889503,"binary64"],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","done",62.862045720559415,"binary64"],["(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","done",62.28135444145946,"binary64"],["#s(literal 1 binary64)","next",60.75416940257014,"binary64"],["#s(literal 0 binary64)","next",60.201682098248774,"binary64"]],"compiler":[[8,6],[17,10],[11,8],[16,10],[49,18],[29,14],[32,18],[11,7],[1,2],[1,2]],"count":[[25,10]],"kept":[{"done":[6,5],"fresh":[0,0],"new":[15,2],"picked":[4,3]}],"memory":[[-5240592,2673104]],"min-error":[[58.962062002268034,"binary64"]],"time":5.5791015625,"type":"prune"},{"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"memory":[[1543088,9784944]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"time":130.3740234375,"type":"simplify"},{"compiler":[[4,5]],"memory":[[3656208,3656208]],"mixsample":[[0.15380859375,"ival-true",0],[0.242431640625,"exact",0],[0.116943359375,"ival-assert",0]],"outcomes":[[4.085205078125,0,"valid",256]],"time":8.0888671875,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28976,28976]],"outputs":[[]],"series":[[0.0029296875,"()","x","-inf"],[0.0068359375,"()","x","inf"],[0.027099609375,"()","x","0"]],"time":0.110107421875,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-7682976,9244752]],"method":["egg-herbie"],"outputs":[[]],"time":129.450927734375,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[3996064,12150256]],"outputs":[[]],"time":184.1669921875,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[47520,47520]],"time":0.166015625,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","done",59.742249883117175,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","done",60.712557673032826,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","done",59.736355135964665,"binary64"],["(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","done",60.61088706903093,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","done",62.81982524838522,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","done",62.41352160889503,"binary64"],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","done",62.862045720559415,"binary64"],["(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","done",62.28135444145946,"binary64"],["#s(literal 1 binary64)","done",60.75416940257014,"binary64"],["#s(literal 0 binary64)","done",60.201682098248774,"binary64"]],"compiler":[[200,59],[8,6],[17,10],[11,8],[16,10],[49,18],[29,14],[32,18],[11,7],[1,2],[1,2]],"count":[[10,10]],"kept":[{"done":[8,8],"fresh":[0,0],"new":[0,0],"picked":[2,2]}],"memory":[[3819040,3819040]],"min-error":[[58.962062002268034,"binary64"]],"time":12.965087890625,"type":"prune"},{"accuracy":[59.73635513596466],"baseline":[59.736355135964665],"branch":[["x",59.736355135964665,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",59.73635513596466,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[12,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","(-.f64 (*.f64 (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) x))))","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (*.f64 x x) x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) x)) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 x x))))))"]],"memory":[[-2536976,5263824]],"oracle":[63.58640057658312],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))"]],"repr":["binary64"],"time":16.90087890625,"times":[[5.947021484375,"x"],[8.10205078125,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[59.74224988311717],"baseline":[59.742249883117175],"branch":[["x",59.742249883117175,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",59.74224988311717,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[5,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) x) (*.f64 (neg.f64 x) (tan.f64 x))))"]],"memory":[[3613232,3613232]],"oracle":[62.87641714938209],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"repr":["binary64"],"time":7.06298828125,"times":[[3.81591796875,"x"],[2.110107421875,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"accuracy":[60.20168209824877],"baseline":[60.201682098248774],"branch":[["x",60.201682098248774,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))",60.20168209824877,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[3,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 9 binary64))"]],"link":["."],"memory":[[-6811024,3238928]],"name":["invcot (example 3.9)"],"oracle":[62.19190765591487],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":7.2041015625,"times":[[2.692138671875,"x"],[3.657958984375,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"]],"type":"regimes"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","#s(literal 0 binary64)"]],"memory":[[-1319552,14962224]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","#s(literal 0 binary64)"]],"time":174.705810546875,"type":"simplify"},{"compiler":[[20,12]],"memory":[[562736,562736]],"stop":[["done",1]],"time":1.377197265625,"type":"soundness"},{"compiler":[[20,12],[20,12],[24,17],[24,17],[8,6],[8,6],[11,8],[11,8],[11,8],[11,8]],"memory":[[6211936,22776352]],"remove-preprocessing":[["(negabs x)"],[],["(negabs x)"],[]],"time":44.44091796875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.012939453125,"type":"end"}]