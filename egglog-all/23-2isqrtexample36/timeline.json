[{"memory":[[18576,18576]],"time":0.06884765625,"type":"start"},{"compiler":[[19,13]],"memory":[[646112,646112]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":5.533203125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[25336256,472972864]],"mixsample":[[185.0498046875,"ival-div",0],[231.135498046875,"adjust",800],[167.216064453125,"ival-div",400],[5.222900390625,"ival-assert",0],[16.07568359375,"ival-div",1600],[124.341552734375,"ival-sub",0],[20.08837890625,"ival-and",0],[0.079345703125,"ival-sub",400],[184.908203125,"ival-sqrt",0],[195.143310546875,"const",0],[25.979736328125,"adjust",2000],[64.48583984375,"ival-add",0],[0.05810546875,"ival-sub",800],[18.22314453125,"ival-sqrt",1600],[3.73193359375,"ival-add",1600],[54.2314453125,"ival-add",400],[40.276611328125,"ival->",0],[11.783447265625,"exact",0],[188.958740234375,"ival-sqrt",400],[29.51806640625,"ival-<",0]],"outcomes":[[1548.101806640625,1,"valid",6940],[348.110595703125,2,"valid",1058],[28.9462890625,0,"valid",258]],"time":2476.033935546875,"type":"sample"},{"compiler":[[11,8],[34,10],[34,10]],"confusion":[[179,0,1,76]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cancellation",180,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",180,1,[3.122742213152787e+215],1,[9.78558673385419]],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,180],[0,76]],"maybe-confusion":[[179,0,0,1,0,76]],"memory":[[-2135216,65232832]],"mixsample":[[12.964111328125,"adjust",800],[9.853515625,"ival-div",0],[3.934326171875,"ival-add",0],[0.166748046875,"ival-add",1600],[0.795166015625,"ival-sqrt",1600],[9.139404296875,"ival-div",400],[0.765380859375,"ival-div",1600],[0.271728515625,"ival-assert",0],[6.337890625,"ival-sub",0],[3.317626953125,"ival-add",400],[0.6650390625,"ival-true",0],[10.781005859375,"ival-sqrt",0],[0.478759765625,"exact",0],[1.02197265625,"adjust",2000],[9.809326171875,"ival-sqrt",400]],"outcomes":[[85.873046875,1,"valid",448],[14.12744140625,2,"valid",50],[1.243408203125,0,"valid",14]],"time":189.81103515625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[11,8]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"memory":[[4477120,20714816]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))"]],"symmetry":[[]],"time":431.65087890625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.123046875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",40.413736605142276,"binary64"]],"compiler":[[11,8]],"memory":[[327664,327664]],"time":1.014892578125,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"locations":[["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0]],"memory":[[-165248,10170688]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"time":207.3310546875,"type":"simplify"},{"compiler":[[34,10]],"locations":[["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.29296875],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","accuracy",0.29296875],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",40.44092869920616]],"memory":[[-1173296,15040608]],"mixsample":[[6.60400390625,"adjust",800],[5.98046875,"ival-div",0],[1.8369140625,"ival-add",0],[0.084228515625,"ival-add",1600],[0.4013671875,"ival-sqrt",1600],[5.383544921875,"ival-div",400],[0.41552734375,"ival-div",1600],[0.157958984375,"ival-assert",0],[3.638916015625,"ival-sub",0],[1.663330078125,"ival-add",400],[0.32470703125,"ival-true",0],[6.085205078125,"ival-sqrt",0],[0.258544921875,"exact",0],[0.693603515625,"adjust",2000],[5.755859375,"ival-sqrt",400]],"outcomes":[[47.375,1,"valid",224],[7.385009765625,2,"valid",25],[0.84228515625,0,"valid",7]],"time":69.14306640625,"type":"localize"},{"count":[[4,25]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-5654896,2214880]],"outputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"series":[[4.557861328125,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","-inf"],[1.881103515625,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","inf"],[1.421875,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","0"]],"time":9.527099609375,"type":"series"},{"count":[[25,0]],"inputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"memory":[[595792,10004176]],"method":["egg-herbie"],"outputs":[[]],"time":165.65185546875,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[5528992,13644816]],"outputs":[["x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 x #s(literal 1 binary64))"]],"time":266.416015625,"type":"rewrite"},{"compiler":[[44,17]],"memory":[[1363568,1363568]],"time":2.7109375,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","next",58.91851734341969,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",40.413736605142276,"binary64"],["(-.f64 x x)","next",42.24037073298221,"binary64"],["(-.f64 x #s(literal 1 binary64))","next",61.74953344402326,"binary64"],["x","next",61.750108192353444,"binary64"]],"compiler":[[3,3],[11,8],[3,2],[3,3],[1,1]],"count":[[16,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[15,4],"picked":[1,1]}],"memory":[[-6345984,1587168]],"min-error":[[39.30629767648596,"binary64"]],"time":2.80712890625,"type":"prune"},{"inputs":[["x","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(-.f64 x x)","x","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x"]],"locations":[["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 x x)","cost-diff",2],["(-.f64 x #s(literal 1 binary64))","cost-diff",0]],"memory":[[1986688,10155696]],"method":["egg-herbie"],"outputs":[["x","(-.f64 x #s(literal 1 binary64))","(+.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x"]],"time":208.912841796875,"type":"simplify"},{"compiler":[[17,7]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 x x)","accuracy",0.0],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0]],"memory":[[-2802192,6383216]],"mixsample":[[3.62353515625,"ival-sub",0],[3.311767578125,"ival-div",0],[0.2890625,"ival-true",0],[0.2314453125,"exact",0],[0.1923828125,"ival-assert",0]],"outcomes":[[16.88720703125,0,"valid",256]],"time":24.317138671875,"type":"localize"},{"count":[[3,7]],"inputs":[["(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[528064,528064]],"outputs":[["-1","(- x 1)","0","(/ 1 x)","x","(* x (- 1 (/ 1 x)))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[0.5,"((- x 1) (- x x) (/ 1 x))","x","-inf"],[0.300048828125,"((- x 1) (- x x) (/ 1 x))","x","inf"],[0.47998046875,"((- x 1) (- x x) (/ 1 x))","x","0"]],"time":1.50390625,"type":"series"},{"count":[[7,0]],"inputs":[["-1","(- x 1)","0","(/ 1 x)","x","(* x (- 1 (/ 1 x)))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[1507120,9597120]],"method":["egg-herbie"],"outputs":[[]],"time":159.333984375,"type":"simplify"},{"count":[[3,45]],"inputs":[["(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[4154704,12193408]],"outputs":[["#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 16 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 16 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 16 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)"]],"time":265.278076171875,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1308912,1308912]],"time":2.6220703125,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","done",58.91851734341969,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",40.413736605142276,"binary64"],["#s(literal 1 binary64)","next",60.97056514215416,"binary64"],["#s(literal 0 binary64)","next",42.24037073298221,"binary64"]],"compiler":[[3,3],[11,8],[1,2],[1,2]],"count":[[20,4]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,2],"picked":[4,1]}],"memory":[[-6621120,1438080]],"min-error":[[39.30629767648596,"binary64"]],"time":3.179931640625,"type":"prune"},{"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"memory":[[183680,9624768]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"time":167.527099609375,"type":"simplify"},{"compiler":[[4,5]],"memory":[[3589008,3589008]],"mixsample":[[0.170654296875,"ival-true",0],[0.242919921875,"exact",0],[0.119140625,"ival-assert",0]],"outcomes":[[4.32958984375,0,"valid",256]],"time":8.58984375,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28976,28976]],"outputs":[[]],"series":[[0.00390625,"()","x","-inf"],[0.004150390625,"()","x","inf"],[0.028076171875,"()","x","0"]],"time":0.130126953125,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[2035440,9917872]],"method":["egg-herbie"],"outputs":[[]],"time":154.196044921875,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[-3798432,12432128]],"outputs":[[]],"time":206.242919921875,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[44096,44096]],"time":0.200927734375,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","done",58.91851734341969,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",40.413736605142276,"binary64"],["#s(literal 1 binary64)","done",60.97056514215416,"binary64"],["#s(literal 0 binary64)","done",42.24037073298221,"binary64"]],"compiler":[[23,12],[3,3],[11,8],[1,2],[1,2]],"count":[[4,4]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[0,0],"picked":[2,2]}],"memory":[[1592016,1592016]],"min-error":[[39.30629767648596,"binary64"]],"time":4.088134765625,"type":"prune"},{"accuracy":[40.41373660514228],"baseline":[40.413736605142276],"branch":[["x",40.413736605142304,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",40.41373660514228,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[7,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","x","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"memory":[[-5394512,4108544]],"oracle":[62.23175201207275],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":10.280029296875,"times":[[3.886962890625,"x"],[3.030029296875,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[40.82325120788798],"baseline":[42.24037073298221],"branch":[["x",40.82325120788798,2,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",42.24037073298222,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[6,2]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","x","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[3868304,3868304]],"oracle":[62.23175201207275],"outputs":[["(/.f64 #s(literal 1 binary64) x)","#s(literal 0 binary64)"]],"repr":["binary64"],"time":7.680908203125,"times":[[3.738037109375,"x"],[2.991943359375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[42.24037073298222],"baseline":[42.24037073298221],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",42.24037073298222,1,"binary64"],["x",42.24037073298224,1,"binary64"]],"compiler":[[11,8],[1,1]],"count":[[5,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","x","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)"]],"link":["."],"memory":[[3633520,3633520]],"name":["2isqrt (example 3.6)"],"oracle":[62.23175201207275],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":7.140869140625,"times":[[2.363037109375,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"],[3.47900390625,"x"]],"type":"regimes"},{"bstep":[[30.73486328125,2.96003277098621e+152,9.826743571203881e+153]],"compiler":[[1,3],[3,4],[1,3],[3,4],[1,3],[3,4],[1,3],[3,4],[1,3],[3,4],[1,3],[3,4],[1,3],[3,4],[13,11],[1,1]],"memory":[[-2311184,5996816]],"method":["binary-search"],"mixsample":[[3.5234375,"adjust",800],[2.443115234375,"ival-div",0],[0.919921875,"ival-add",0],[3.03662109375,"ival-div",400],[0.0810546875,"ival-assert",0],[1.717529296875,"ival-sub",0],[0.78076171875,"ival-add",400],[0.159912109375,"ival-true",0],[2.779541015625,"ival-sqrt",0],[0.121337890625,"exact",0],[2.95947265625,"ival-sqrt",400]],"outcomes":[[24.195068359375,1,"valid",112]],"stop":[["narrow-enough",1]],"time":34.877197265625,"type":"bsearch"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(if (<=.f64 x #s(literal 4600000000000000259272652606512016799213132235005633869259928535246893330689236690036551753838824648947751718403393963071093676518791710391413096650375168 binary64)) (/.f64 #s(literal 1 binary64) x) #s(literal 0 binary64))","#s(literal 0 binary64)"]],"memory":[[-766608,15664704]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(if (<=.f64 x #s(literal 4600000000000000259272652606512016799213132235005633869259928535246893330689236690036551753838824648947751718403393963071093676518791710391413096650375168 binary64)) (/.f64 #s(literal 1 binary64) x) #s(literal 0 binary64))","#s(literal 0 binary64)"]],"time":186.141845703125,"type":"simplify"},{"compiler":[[20,13]],"memory":[[675968,675968]],"stop":[["done",1]],"time":1.97509765625,"type":"soundness"},{"compiler":[[20,13],[20,13],[9,7],[9,7],[11,8],[11,8]],"memory":[[1254592,17605376]],"remove-preprocessing":[[],[],[],[]],"time":41.0390625,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.016845703125,"type":"end"}]