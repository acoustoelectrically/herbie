[{"memory":[[27264,27264]],"time":0.052001953125,"type":"start"},{"compiler":[[27,19]],"memory":[[4637808,12710816]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":67.552001953125,"type":"analyze"},{"bogosity":[{"invalid":0.49929134691837646,"precondition":0.4942799140699208,"valid":0.006428739011702773}],"memory":[[-272306144,1650622304]],"mixsample":[[117.389892578125,"adjust",800],[286.937255859375,"ival-add",0],[0.962890625,"ival-sin",400],[348.330810546875,"ival-mult",0],[295.04833984375,"ival-fabs",0],[853.243408203125,"ival-sin",0],[20.173828125,"ival-assert",0],[251.072021484375,"ival-sub",0],[185.094482421875,"ival-and",0],[0.06982421875,"ival-sub",400],[1114.38427734375,"const",0],[69.712890625,"exact",0],[277.35888671875,"ival-<=",0],[231.1240234375,"ival-<",0]],"outcomes":[[633.99169921875,1,"valid",2779],[4230.50390625,0,"invalid",25993],[755.391845703125,0,"valid",5477]],"time":7443.176025390625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[225,2,1,28]],"explanations":[["sin.f64","(sin.f64 (+.f64 x eps))","sensitivity",1,0,[],[[1]]],["-.f64","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cancellation",226,5,[],[[]]]],"fperrors":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",227,1,[-4.8514663301747776e-262,4.4717699294696404e-264],2,[8.45072036584718e-280,1.0376376496868734e-281]],["(sin.f64 (+.f64 x eps))",2,0,false,1,[-18.453937854113196,3.491952286210705e-6]],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,1],[1,225],[0,30]],"maybe-confusion":[[225,2,0,1,3,25]],"memory":[[5365104,39259536]],"mixsample":[[4.9423828125,"adjust",800],[4.434326171875,"ival-add",0],[0.2119140625,"ival-sin",400],[12.789306640625,"ival-sin",0],[0.246337890625,"ival-assert",0],[3.86865234375,"ival-sub",0],[0.116943359375,"adjust",2800],[0.56982421875,"ival-true",0],[10.4326171875,"ival-sin",2000],[0.01123046875,"ival-sub",400],[0.750732421875,"ival-sin",800],[0.162841796875,"adjust",2000]],"outcomes":[[23.83203125,1,"valid",182],[1.053955078125,2,"valid",2],[11.919189453125,3,"valid",6],[20.935791015625,0,"valid",322]],"time":115.805908203125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"memory":[[-2831984,21573408]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"symmetry":[[]],"time":463.27294921875,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.199951171875,"type":"eval"},{"alts":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","next",25.03741077484549,"binary64"]],"compiler":[[7,6]],"memory":[[311696,311696]],"time":0.6201171875,"type":"prune"},{"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(sin.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","cost-diff",0]],"memory":[[1073568,10369840]],"method":["egg-herbie"],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(sin.f64 x)"]],"time":192.171875,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(sin.f64 x)","accuracy",0.00390625],["(sin.f64 (+.f64 x eps))","accuracy",0.08697906310910489],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","accuracy",24.954719095224064]],"memory":[[610960,8553680]],"mixsample":[[3.24072265625,"adjust",800],[2.702880859375,"ival-add",0],[0.113525390625,"ival-sin",400],[8.78662109375,"ival-sin",0],[0.1826171875,"ival-assert",0],[2.703857421875,"ival-sub",0],[0.090087890625,"adjust",2800],[0.383544921875,"ival-true",0],[5.711181640625,"ival-sin",2000],[0.006103515625,"ival-sub",400],[0.488037109375,"ival-sin",800],[0.10888671875,"adjust",2000]],"outcomes":[[16.624755859375,1,"valid",91],[0.638916015625,2,"valid",1],[6.81201171875,3,"valid",3],[14.171630859375,0,"valid",161]],"time":48.14013671875,"type":"localize"},{"count":[[4,31]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[1872704,1872704]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.68701171875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","-inf"],[0.925048828125,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","inf"],[0.9912109375,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","eps","0"],[0.674072265625,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","-inf"],[0.742919921875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","inf"],[1.5419921875,"((- (sin (+ x eps)) (sin x)) (sin (+ x eps)) (+ x eps) (sin x))","x","0"]],"time":6.300048828125,"type":"series"},{"count":[[31,0]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","eps","(+ eps x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(* x (+ 1 (/ eps x)))","(sin x)","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[1778880,9659824]],"method":["egg-herbie"],"outputs":[[]],"time":232.385986328125,"type":"simplify"},{"count":[[4,46]],"inputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)"]],"memory":[[-1227424,16317888]],"outputs":[["(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))) (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64))))))","(+.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 x eps)))","(+.f64 (sin.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x)))","(+.f64 (+.f64 (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 x) (sin.f64 eps)))","(+.f64 (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (fma.f64 (sin.f64 eps) (cos.f64 x) (neg.f64 (sin.f64 x))))","(+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))))) (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))) (neg.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))) (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(+.f64 (/.f64 (pow.f64 (sin.f64 (+.f64 x eps)) #s(literal 3 binary64)) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (-.f64 (fma.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)) (sin.f64 x) #s(literal 1/2 binary64)) (*.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64))))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (+.f64 (sin.f64 (+.f64 x eps)) #s(literal 0 binary64)) (sin.f64 x))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 eps)))","(-.f64 (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))) (/.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (sin.f64 (-.f64 x eps))))","(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","(*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (sin.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))) (neg.f64 (sin.f64 (-.f64 x eps))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) #s(literal 3 binary64)))))","(sin.f64 (+.f64 x eps))","(neg.f64 (/.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps)) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps)))","(+.f64 x eps)","(+.f64 eps x)","(+.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (neg.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(*.f64 #s(literal 1 binary64) (+.f64 x eps))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (/.f64 #s(literal 1 binary64) (-.f64 x eps)))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 x eps) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x eps))))","(sin.f64 x)"]],"time":477.0830078125,"type":"rewrite"},{"compiler":[[1003,193]],"memory":[[-3187072,4653440]],"time":11.156982421875,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","next",40.48171968007185,"binary64"],["(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","next",40.555465283496105,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",25.03741077484549,"binary64"],["(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","next",40.52090149119425,"binary64"],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","next",0.23258223038526776,"binary64"],["(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","next",59.95168704846347,"binary64"]],"compiler":[[19,12],[19,12],[7,6],[17,11],[14,10],[28,20],[19,12],[19,12],[17,11],[14,10],[28,20]],"count":[[47,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[46,5],"picked":[1,1]}],"memory":[[4594304,4594304]],"min-error":[[0.23184556675401508,"binary64"]],"time":6.883056640625,"type":"prune"},{"inputs":[["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","x","(sin.f64 eps)","eps","(fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x)))","(sin.f64 x)","(cos.f64 eps)","(neg.f64 (sin.f64 x))","(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","(sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(/.f64 #s(literal 1 binary64) (-.f64 x eps))","#s(literal 1 binary64)","(-.f64 x eps)","x","eps","(*.f64 (+.f64 x eps) (-.f64 x eps))","(+.f64 x eps)","(sin.f64 x)","(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","(*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(sin.f64 (-.f64 x eps))","(-.f64 x eps)","(/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))","#s(literal 1 binary64)","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","#s(literal 1 binary64)","(/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))","(sin.f64 (-.f64 x eps))","(-.f64 x eps)","x","eps","(*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))","#s(literal 1/2 binary64)","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))","(cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64)))","(*.f64 (+.f64 x eps) #s(literal 2 binary64))","(+.f64 x eps)","x","eps","#s(literal 2 binary64)","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))","(*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))","#s(literal -1/2 binary64)","(cos.f64 (+.f64 x x))","(+.f64 x x)","(neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))","(+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(sin.f64 x)"]],"locations":[["(/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))","cost-diff",1],["(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","cost-diff",2],["(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))","cost-diff",3],["(sin.f64 (-.f64 x eps))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","cost-diff",4],["(/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))","cost-diff",8],["(sin.f64 (+.f64 x eps))","cost-diff",0],["(*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))","cost-diff",0],["(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","cost-diff",0],["(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","cost-diff",12],["(/.f64 #s(literal 1 binary64) (-.f64 x eps))","cost-diff",0],["(sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))))","cost-diff",0],["(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","cost-diff",10],["(cos.f64 x)","cost-diff",0],["(*.f64 (cos.f64 x) (sin.f64 eps))","cost-diff",0],["(fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x)))","cost-diff",1],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","cost-diff",1]],"memory":[[-2200336,14366896]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(fma.f64 (+.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","x","(sin.f64 eps)","eps","(fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x)))","(*.f64 (+.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 x))","(sin.f64 x)","(cos.f64 eps)","(neg.f64 (sin.f64 x))","(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))))","(sin.f64 (+.f64 x eps))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(+.f64 x eps)","(/.f64 #s(literal 1 binary64) (-.f64 x eps))","#s(literal 1 binary64)","(-.f64 x eps)","x","eps","(*.f64 (+.f64 x eps) (-.f64 x eps))","(+.f64 x eps)","(sin.f64 x)","(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","(sin.f64 (+.f64 x eps))","(*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(sin.f64 (-.f64 x eps))","(-.f64 x eps)","(/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))","#s(literal 1 binary64)","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","(sin.f64 (+.f64 x eps))","#s(literal 1 binary64)","(/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (sin.f64 (+.f64 x eps)))","(sin.f64 (-.f64 x eps))","(-.f64 x eps)","x","eps","(*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))","(sin.f64 (+.f64 x eps))","(+.f64 x eps)","(sin.f64 x)","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(/.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))) (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","(/.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))) (-.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 x eps))))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","#s(literal 1/2 binary64)","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)))","(cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64)))","(*.f64 (+.f64 x eps) #s(literal 2 binary64))","(+.f64 x eps)","x","eps","#s(literal 2 binary64)","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))","#s(literal -1/2 binary64)","(cos.f64 (+.f64 x x))","(+.f64 x x)","(neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))","(-.f64 (neg.f64 (sin.f64 x)) (sin.f64 (+.f64 x eps)))","(+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(sin.f64 (+.f64 x eps))","(sin.f64 x)"]],"time":603.7939453125,"type":"simplify"},{"compiler":[[411,46]],"locations":[["(+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","accuracy",0.2578125],["(/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","accuracy",27.137463856033165],["(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))","accuracy",30.526575550203322],["(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))","accuracy",30.699772624461684],["(sin.f64 (+.f64 x eps))","accuracy",0.07135406310910489],["(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","accuracy",0.25390625],["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","accuracy",24.90574937953778],["(/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))","accuracy",26.074085192665716],["(sin.f64 (+.f64 x eps))","accuracy",0.07135406310910489],["(/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))","accuracy",0.1875],["(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","accuracy",24.90574937953778],["(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","accuracy",26.075718850705414],["(sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))))","accuracy",0.07135406310910489],["(/.f64 #s(literal 1 binary64) (-.f64 x eps))","accuracy",0.18359375],["(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","accuracy",24.90574937953778],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","accuracy",26.075718850705414],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","accuracy",0.00390625],["(sin.f64 x)","accuracy",0.00390625],["(*.f64 (cos.f64 x) (sin.f64 eps))","accuracy",0.015625],["(fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x)))","accuracy",20.52925788102906]],"memory":[[-17009792,98274432]],"mixsample":[[23.821533203125,"ival-div",0],[37.4560546875,"adjust",800],[2.13525390625,"ival-mult",1200],[1.170654296875,"adjust",4800],[0.395751953125,"ival-div",400],[0.86669921875,"adjust",4000],[0.212890625,"ival-assert",0],[0.0302734375,"ival-neg",800],[17.8798828125,"ival-sub",0],[15.8466796875,"ival-cos",0],[0.034912109375,"ival-sub",400],[13.17041015625,"ival-cos",1200],[8.027587890625,"ival-cos",400],[1.32080078125,"ival-neg",400],[0.154541015625,"ival-mult",800],[18.482666015625,"ival-add",0],[1.115478515625,"ival-mult",3600],[0.006103515625,"ival-cos",800],[0.01220703125,"ival-neg",1200],[5.034423828125,"ival-mult",1600],[3.67529296875,"ival-add",400],[19.41064453125,"ival-sin",2000],[5.21923828125,"adjust",2800],[0.2197265625,"ival-div",2000],[0.099609375,"ival-div",4000],[24.92626953125,"ival-sin",3600],[3.785888671875,"ival-sin",800],[0.1904296875,"ival-neg",3600],[73.40869140625,"ival-cos",1600],[0.006103515625,"ival-sub",2000],[0.18115234375,"ival-mult",2000],[1.3134765625,"ival-mult",2800],[1.3486328125,"ival-neg",1600],[8.113525390625,"ival-cos",4000],[0.3681640625,"ival-sin",4000],[90.814697265625,"ival-sin",1600],[0.11767578125,"ival-add",3600],[28.385498046875,"adjust",2000],[27.174560546875,"ival-mult",0],[4.371337890625,"ival-mult",400],[0.931640625,"ival-add",1600],[9.273193359375,"ival-sin",400],[26.19140625,"ival-sin",0],[0.88916015625,"ival-cos",2000],[0.16552734375,"ival-add",2000],[0.033447265625,"ival-neg",2000],[0.208740234375,"ival-div",800],[13.4580078125,"ival-cos",3600],[0.5234375,"ival-true",0],[36.935791015625,"ival-cos",2800],[1.058837890625,"exact",0],[0.327392578125,"ival-add",800],[0.05859375,"ival-mult",4000],[8.560791015625,"ival-neg",0]],"outcomes":[[91.848388671875,1,"valid",80],[368.595947265625,2,"valid",138],[42.770751953125,5,"exit",6],[128.5224609375,3,"valid",30],[1.142822265625,0,"valid",2]],"time":707.721923828125,"type":"localize"},{"count":[[23,164]],"inputs":[["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","(sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (-.f64 x eps))","(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","(*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))","(sin.f64 (+.f64 x eps))","(/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","(sin.f64 (-.f64 x eps))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))","(/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","(sin.f64 x)","(/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))","(+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"memory":[[835696,18078912]],"outputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(* x (- (cos eps) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ 1/6 (* -1/6 (cos eps))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ 1/6 (+ (* -1/6 (cos eps)) (* (pow x 2) (- (* 1/120 (cos eps)) 1/120)))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ 1/6 (+ (* -1/6 (cos eps)) (* (pow x 2) (- (+ (* 1/120 (cos eps)) (* (pow x 2) (+ 1/5040 (* -1/5040 (cos eps))))) 1/120)))))) 1))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","eps","(+ eps x)","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(/ -1 eps)","(- (* -1 (/ x (pow eps 2))) (/ 1 eps))","(- (* x (- (* -1 (/ x (pow eps 3))) (/ 1 (pow eps 2)))) (/ 1 eps))","(- (* x (- (* x (- (* -1 (/ x (pow eps 4))) (/ 1 (pow eps 3)))) (/ 1 (pow eps 2)))) (/ 1 eps))","(* (sin eps) (sin (neg eps)))","(+ (* x (+ (* (cos eps) (sin (neg eps))) (* (cos (neg eps)) (sin eps)))) (* (sin eps) (sin (neg eps))))","(+ (* x (+ (* x (+ (* -1 (* (sin eps) (sin (neg eps)))) (* (cos eps) (cos (neg eps))))) (+ (* (cos eps) (sin (neg eps))) (* (cos (neg eps)) (sin eps))))) (* (sin eps) (sin (neg eps))))","(+ (* x (+ (* x (+ (* -1 (* (sin eps) (sin (neg eps)))) (+ (* x (+ (* -1/2 (* (cos eps) (sin (neg eps)))) (+ (* -1/2 (* (cos (neg eps)) (sin eps))) (+ (* -1/6 (* (cos eps) (sin (neg eps)))) (* -1/6 (* (cos (neg eps)) (sin eps))))))) (* (cos eps) (cos (neg eps)))))) (+ (* (cos eps) (sin (neg eps))) (* (cos (neg eps)) (sin eps))))) (* (sin eps) (sin (neg eps))))","(/ 1 (sin eps))","(+ (* -1 (/ (* x (cos eps)) (pow (sin eps) 2))) (/ 1 (sin eps)))","(+ (* x (- (* x (- (* 1/2 (/ 1 (sin eps))) (* -1 (/ (pow (cos eps) 2) (pow (sin eps) 3))))) (/ (cos eps) (pow (sin eps) 2)))) (/ 1 (sin eps)))","(+ (* x (- (* x (- (+ (* -1 (* x (+ (* -1/6 (/ (cos eps) (pow (sin eps) 2))) (+ (* 1/2 (/ (cos eps) (pow (sin eps) 2))) (/ (* (cos eps) (- (* 1/2 (/ 1 (sin eps))) (* -1 (/ (pow (cos eps) 2) (pow (sin eps) 3))))) (sin eps)))))) (* 1/2 (/ 1 (sin eps)))) (* -1 (/ (pow (cos eps) 2) (pow (sin eps) 3))))) (/ (cos eps) (pow (sin eps) 2)))) (/ 1 (sin eps)))","(sin (neg eps))","(+ (sin (neg eps)) (* x (cos (neg eps))))","(+ (sin (neg eps)) (* x (+ (cos (neg eps)) (* -1/2 (* x (sin (neg eps)))))))","(+ (sin (neg eps)) (* x (+ (cos (neg eps)) (* x (+ (* -1/2 (sin (neg eps))) (* -1/6 (* x (cos (neg eps)))))))))","(- 1/2 (* 1/2 (cos (* 2 eps))))","(- (+ 1/2 (* x (sin (* 2 eps)))) (* 1/2 (cos (* 2 eps))))","(- (+ 1/2 (* x (- (* -1 (* x (+ 1 (* -1 (cos (* 2 eps)))))) (* -1 (sin (* 2 eps)))))) (* 1/2 (cos (* 2 eps))))","(- (+ 1/2 (* x (- (* x (- (* -2/3 (* x (sin (* 2 eps)))) (+ 1 (* -1 (cos (* 2 eps)))))) (* -1 (sin (* 2 eps)))))) (* 1/2 (cos (* 2 eps))))","(- (* 1/2 (/ 1 (sin eps))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(- (+ (* -1 (* x (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (* 1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2))))))) (* 1/2 (/ 1 (sin eps)))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(- (+ (* 1/2 (/ 1 (sin eps))) (* x (- (* -1 (* x (+ (* -1/2 (- (* 1/2 (/ 1 (sin eps))) (+ (* -1 (/ (* (+ 1 (cos eps)) (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (sin eps))) (* 2 (/ 1 (sin eps)))))) (* 1/2 (- (* -2 (/ (cos (* 2 eps)) (sin eps))) (+ (* -1/2 (/ (cos (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (sin eps)))))))) (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (* 1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))))))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(- (+ (* 1/2 (/ 1 (sin eps))) (* x (- (* x (- (* -1 (* x (+ (* -1/2 (- (* 1/6 (/ 1 (pow (sin eps) 2))) (+ (* -1/6 (/ (cos eps) (pow (sin eps) 2))) (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (/ 1 (sin eps))) (+ (* -1 (/ (* (+ 1 (cos eps)) (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (sin eps))) (* 2 (/ 1 (sin eps)))))) (sin eps)))))) (* 1/2 (- (* 4/3 (/ (sin (* 2 eps)) (sin eps))) (+ (* -1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (+ (/ (* (cos (* 2 eps)) (- (* -1/6 (cos eps)) 1/6)) (pow (sin eps) 2)) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (cos (* 2 eps)) (sin eps))) (+ (* -1/2 (/ (cos (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (sin eps))))) (sin eps))))))))) (+ (* -1/2 (- (* 1/2 (/ 1 (sin eps))) (+ (* -1 (/ (* (+ 1 (cos eps)) (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (sin eps))) (* 2 (/ 1 (sin eps)))))) (* 1/2 (- (* -2 (/ (cos (* 2 eps)) (sin eps))) (+ (* -1/2 (/ (cos (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (sin eps)))))))) (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (* 1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))))))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))","(- (+ (* 1/2 (/ (cos (* 2 eps)) (sin eps))) (* x (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2))))) (* 1/2 (/ 1 (sin eps))))","(- (+ (* 1/2 (/ (cos (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (sin (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (cos (* 2 eps)) (sin eps))) (/ 1 (sin eps))) (+ (* -1/2 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (sin eps)))))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2))))) (* 1/2 (/ 1 (sin eps))))","(- (+ (* 1/2 (/ (cos (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (sin (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (cos (* 2 eps)) (sin eps))) (+ (* x (- (* 2/3 (/ (sin (* 2 eps)) (sin eps))) (+ (* -1/2 (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (+ (/ (* (+ 1 (cos eps)) (- (+ (* -1 (/ (cos (* 2 eps)) (sin eps))) (/ 1 (sin eps))) (+ (* -1/2 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (sin eps))))) (sin eps)) (/ (* (- (* -1/6 (cos eps)) 1/6) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))))) (/ 1 (sin eps)))) (+ (* -1/2 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (sin eps)))))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2))))) (* 1/2 (/ 1 (sin eps))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ 1 (sin (neg eps)))","(+ (* -1 (/ (* x (cos (neg eps))) (pow (sin (neg eps)) 2))) (/ 1 (sin (neg eps))))","(+ (* x (- (* x (- (* 1/2 (/ 1 (sin (neg eps)))) (* -1 (/ (pow (cos (neg eps)) 2) (pow (sin (neg eps)) 3))))) (/ (cos (neg eps)) (pow (sin (neg eps)) 2)))) (/ 1 (sin (neg eps))))","(+ (* x (- (* x (- (+ (* -1 (* x (+ (* -1/6 (/ (cos (neg eps)) (pow (sin (neg eps)) 2))) (+ (* 1/2 (/ (cos (neg eps)) (pow (sin (neg eps)) 2))) (/ (* (cos (neg eps)) (- (* 1/2 (/ 1 (sin (neg eps)))) (* -1 (/ (pow (cos (neg eps)) 2) (pow (sin (neg eps)) 3))))) (sin (neg eps))))))) (* 1/2 (/ 1 (sin (neg eps))))) (* -1 (/ (pow (cos (neg eps)) 2) (pow (sin (neg eps)) 3))))) (/ (cos (neg eps)) (pow (sin (neg eps)) 2)))) (/ 1 (sin (neg eps))))","(+ (sin eps) (* x (+ 1 (cos eps))))","(+ (sin eps) (* x (+ 1 (+ (cos eps) (* -1/2 (* x (sin eps)))))))","(+ (sin eps) (* x (+ 1 (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (- (* -1/6 (cos eps)) 1/6))))))))","(- (+ (* (cos eps) (sin x)) (* (cos x) (sin eps))) (sin x))","(- (* (cos eps) (sin x)) (sin x))","(* (cos x) (sin eps))","(cos x)","(* x (+ 1 (/ eps x)))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(/ 1 x)","(/ (+ 1 (/ eps x)) x)","(/ (- (+ 1 (/ (pow eps 2) (pow x 2))) (* -1 (/ eps x))) x)","(/ (- (+ 1 (/ (pow eps 3) (pow x 3))) (+ (* -1 (/ eps x)) (* -1 (/ (pow eps 2) (pow x 2))))) x)","(* (sin (+ eps x)) (sin (- x eps)))","(/ 1 (sin (+ eps x)))","(sin (- x eps))","(* -1 (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (+ eps x))))))","(* -1 (+ (* -1/2 (/ (cos (* 2 x)) (+ (sin x) (sin (+ eps x))))) (* 1/2 (/ (cos (* 2 (+ eps x))) (+ (sin x) (sin (+ eps x)))))))","(+ 1/2 (* -1/2 (cos (* 2 x))))","(/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (+ eps x))))) (+ (sin x) (sin (+ eps x))))","(sin x)","(/ 1 (sin (- x eps)))","(+ (sin x) (sin (+ eps x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (/ (- (* -1 (/ eps x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ (pow eps 2) x) (* -1 eps)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (pow eps 3) x)) (pow eps 2)) x)) (* -1 eps)) x)) 1) x))","(* (sin (neg (+ eps (* -1 x)))) (sin (- eps (* -1 x))))","(/ 1 (sin (- eps (* -1 x))))","(sin (neg (+ eps (* -1 x))))","(* -1 (+ (* -1/2 (cos (neg (* -2 x)))) (* 1/2 (cos (* 2 (- eps (* -1 x)))))))","(* -1 (+ (* -1/2 (/ (cos (neg (* -2 x))) (+ (sin x) (sin (- eps (* -1 x)))))) (* 1/2 (/ (cos (* 2 (- eps (* -1 x)))) (+ (sin x) (sin (- eps (* -1 x))))))))","(+ 1/2 (* -1/2 (cos (neg (* -2 x)))))","(/ (+ (* -1/2 (cos (neg (* -2 x)))) (* 1/2 (cos (* 2 (- eps (* -1 x)))))) (+ (sin x) (sin (- eps (* -1 x)))))","(/ 1 (sin (neg (+ eps (* -1 x)))))","(+ (sin x) (sin (- eps (* -1 x))))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(+ (/ 1 x) (/ eps (pow x 2)))","(+ (* eps (+ (/ 1 (pow x 2)) (/ eps (pow x 3)))) (/ 1 x))","(+ (* eps (+ (* eps (+ (/ 1 (pow x 3)) (/ eps (pow x 4)))) (/ 1 (pow x 2)))) (/ 1 x))","(pow (sin x) 2)","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* (cos x) (sin x)))) (pow (sin x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (* -1 (pow (sin x) 2)))) (* (cos x) (sin x))))) (pow (sin x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (+ (* -1 (pow (sin x) 2)) (* eps (+ (* -1/2 (* (cos x) (sin x))) (+ (* -1/6 (* (cos x) (sin x))) (+ (* 1/6 (* (cos x) (sin x))) (* 1/2 (* (cos x) (sin x)))))))))) (* (cos x) (sin x))))) (pow (sin x) 2))","(/ 1 (sin x))","(+ (* -1 (/ (* eps (cos x)) (pow (sin x) 2))) (/ 1 (sin x)))","(+ (* eps (- (* eps (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (/ (cos x) (pow (sin x) 2)))) (/ 1 (sin x)))","(+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1/6 (/ (cos x) (pow (sin x) 2))) (+ (* 1/2 (/ (cos x) (pow (sin x) 2))) (/ (* (cos x) (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (sin x)))))) (* 1/2 (/ 1 (sin x)))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (/ (cos x) (pow (sin x) 2)))) (/ 1 (sin x)))","(+ (sin x) (* -1 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1 (cos x)) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (* -1 (cos x)) (* eps (+ (* -1/2 (sin x)) (* 1/6 (* eps (cos x))))))))","(* -1 (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(- (* eps (sin (* 2 x))) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(- (* eps (- (* eps (cos (* 2 x))) (* -1 (sin (* 2 x))))) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(- (* eps (- (* eps (- (* -2/3 (* eps (sin (* 2 x)))) (* -1 (cos (* 2 x))))) (* -1 (sin (* 2 x))))) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(* -1 (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(- (* -1 (* eps (+ (* 1/8 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))))) (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* -1/8 (/ (* (pow (cos x) 2) (cos (* 2 x))) (pow (sin x) 3))))) (* 1/2 (- (* -1 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (sin x))))))))) (+ (* 1/8 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))))) (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* 1/2 (+ (* -1/2 (/ (* (cos x) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* -1/8 (/ (* (pow (cos x) 2) (cos (* 2 x))) (pow (sin x) 3))))) (sin x))) (+ (* -1/24 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/16 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))) (* 1/2 (- (* 2/3 (/ (sin (* 2 x)) (sin x))) (+ (* -1/4 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (+ (* -1/24 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (sin x)))))) (sin x)))))))))) (+ (* 1/2 (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* -1/8 (/ (* (pow (cos x) 2) (cos (* 2 x))) (pow (sin x) 3))))) (* 1/2 (- (* -1 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (sin x))))))))) (+ (* 1/8 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))))) (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x)))","(+ (* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* eps (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))))","(+ (* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* eps (- (+ (* -1/2 (/ (sin (* 2 x)) (sin x))) (* eps (- (* -1/2 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (sin x))))))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))))","(+ (* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* eps (- (+ (* -1/2 (/ (sin (* 2 x)) (sin x))) (* eps (- (+ (* -1/2 (/ (cos (* 2 x)) (sin x))) (* eps (- (* 1/3 (/ (sin (* 2 x)) (sin x))) (+ (* -1/4 (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (+ (* -1/24 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (sin x)))))) (sin x)))))))) (+ (* -1/8 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (sin x))))))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))))","(+ (/ 1 (sin x)) (/ (* eps (cos x)) (pow (sin x) 2)))","(+ (* eps (- (* eps (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (* -1 (/ (cos x) (pow (sin x) 2))))) (/ 1 (sin x)))","(+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (cos x) (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (sin x))) (+ (* -1/2 (/ (cos x) (pow (sin x) 2))) (* 1/6 (/ (cos x) (pow (sin x) 2))))))) (* 1/2 (/ 1 (sin x)))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (* -1 (/ (cos x) (pow (sin x) 2))))) (/ 1 (sin x)))","(* 2 (sin x))","(+ (* 2 (sin x)) (* eps (cos x)))","(+ (* 2 (sin x)) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (* 2 (sin x)) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(/ (- (* -1 (/ x eps)) 1) eps)","(/ (- (* -1 (/ (pow x 2) (pow eps 2))) (+ 1 (/ x eps))) eps)","(/ (- (* -1 (/ (pow x 3) (pow eps 3))) (+ 1 (+ (/ x eps) (/ (pow x 2) (pow eps 2))))) eps)","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (/ (+ 1 (/ x eps)) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow x 2) eps)) x) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow x 3) eps) (* -1 (pow x 2))) eps)) x) eps))) eps))","(* (sin (+ x (* -1 eps))) (sin (- x (* -1 eps))))","(/ 1 (sin (- x (* -1 eps))))","(sin (+ x (* -1 eps)))","(* -1 (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (- x (* -1 eps)))))))","(* -1 (+ (* -1/2 (/ (cos (* 2 x)) (+ (sin x) (sin (- x (* -1 eps)))))) (* 1/2 (/ (cos (* 2 (- x (* -1 eps)))) (+ (sin x) (sin (- x (* -1 eps))))))))","(/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (- x (* -1 eps)))))) (+ (sin x) (sin (- x (* -1 eps)))))","(/ 1 (sin (+ x (* -1 eps))))","(+ (sin x) (sin (- x (* -1 eps))))"]],"series":[[7.017822265625,"((+ (* (cos x) (sin eps)) (+ (* (sin x) (cos eps)) (neg (sin x)))) (+ (* (sin x) (cos eps)) (neg (sin x))) (* (cos x) (sin eps)) (cos x) (* (/ 1 (- x eps)) (* (+ x eps) (- x eps))) (- (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (sin x)) (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (/ 1 (- x eps)) (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (- (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (sin x)) (* (sin (+ x eps)) (sin (- x eps))) (sin (+ x eps)) (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps)))) (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (- (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (sin x)) (sin (- x eps)) (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x))))) (+ 1/2 (* -1/2 (cos (+ x x)))) (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x)))) (sin x) (/ 1 (sin (- x eps))) (+ (sin (+ x eps)) (sin x)))","eps","-inf"],[9.734130859375,"((+ (* (cos x) (sin eps)) (+ (* (sin x) (cos eps)) (neg (sin x)))) (+ (* (sin x) (cos eps)) (neg (sin x))) (* (cos x) (sin eps)) (cos x) (* (/ 1 (- x eps)) (* (+ x eps) (- x eps))) (- (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (sin x)) (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (/ 1 (- x eps)) (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (- (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (sin x)) (* (sin (+ x eps)) (sin (- x eps))) (sin (+ x eps)) (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps)))) (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (- (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (sin x)) (sin (- x eps)) (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x))))) (+ 1/2 (* -1/2 (cos (+ x x)))) (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x)))) (sin x) (/ 1 (sin (- x eps))) (+ (sin (+ x eps)) (sin x)))","eps","inf"],[9.656005859375,"((+ (* (cos x) (sin eps)) (+ (* (sin x) (cos eps)) (neg (sin x)))) (+ (* (sin x) (cos eps)) (neg (sin x))) (* (cos x) (sin eps)) (cos x) (* (/ 1 (- x eps)) (* (+ x eps) (- x eps))) (- (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (sin x)) (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (/ 1 (- x eps)) (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (- (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (sin x)) (* (sin (+ x eps)) (sin (- x eps))) (sin (+ x eps)) (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps)))) (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (- (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (sin x)) (sin (- x eps)) (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x))))) (+ 1/2 (* -1/2 (cos (+ x x)))) (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x)))) (sin x) (/ 1 (sin (- x eps))) (+ (sin (+ x eps)) (sin x)))","eps","0"],[12.238037109375,"((+ (* (cos x) (sin eps)) (+ (* (sin x) (cos eps)) (neg (sin x)))) (+ (* (sin x) (cos eps)) (neg (sin x))) (* (cos x) (sin eps)) (cos x) (* (/ 1 (- x eps)) (* (+ x eps) (- x eps))) (- (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (sin x)) (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (/ 1 (- x eps)) (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (- (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (sin x)) (* (sin (+ x eps)) (sin (- x eps))) (sin (+ x eps)) (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps)))) (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (- (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (sin x)) (sin (- x eps)) (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x))))) (+ 1/2 (* -1/2 (cos (+ x x)))) (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x)))) (sin x) (/ 1 (sin (- x eps))) (+ (sin (+ x eps)) (sin x)))","x","-inf"],[13.02197265625,"((+ (* (cos x) (sin eps)) (+ (* (sin x) (cos eps)) (neg (sin x)))) (+ (* (sin x) (cos eps)) (neg (sin x))) (* (cos x) (sin eps)) (cos x) (* (/ 1 (- x eps)) (* (+ x eps) (- x eps))) (- (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (sin x)) (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (/ 1 (- x eps)) (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (- (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (sin x)) (* (sin (+ x eps)) (sin (- x eps))) (sin (+ x eps)) (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps)))) (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (- (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (sin x)) (sin (- x eps)) (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x))))) (+ 1/2 (* -1/2 (cos (+ x x)))) (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x)))) (sin x) (/ 1 (sin (- x eps))) (+ (sin (+ x eps)) (sin x)))","x","inf"],[11.93115234375,"((+ (* (cos x) (sin eps)) (+ (* (sin x) (cos eps)) (neg (sin x)))) (+ (* (sin x) (cos eps)) (neg (sin x))) (* (cos x) (sin eps)) (cos x) (* (/ 1 (- x eps)) (* (+ x eps) (- x eps))) (- (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (sin x)) (sin (* (/ 1 (- x eps)) (* (+ x eps) (- x eps)))) (/ 1 (- x eps)) (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (- (* (* (sin (+ x eps)) (sin (- x eps))) (/ 1 (sin (- x eps)))) (sin x)) (* (sin (+ x eps)) (sin (- x eps))) (sin (+ x eps)) (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps)))) (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (- (/ 1 (/ (sin (- x eps)) (* (sin (+ x eps)) (sin (- x eps))))) (sin x)) (sin (- x eps)) (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x))))) (+ 1/2 (* -1/2 (cos (+ x x)))) (/ (- 1/2 (+ (* (cos (* (+ x eps) 2)) 1/2) (+ 1/2 (* -1/2 (cos (+ x x)))))) (neg (+ (sin (+ x eps)) (sin x)))) (sin x) (/ 1 (sin (- x eps))) (+ (sin (+ x eps)) (sin x)))","x","0"]],"time":68.465087890625,"type":"series"},{"count":[[164,0]],"inputs":[["(sin eps)","(+ (sin eps) (* x (- (cos eps) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* -1/2 (* x (sin eps)))) 1)))","(+ (sin eps) (* x (- (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (+ 1/6 (* -1/6 (cos eps))))))) 1)))","(* x (- (cos eps) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ 1/6 (* -1/6 (cos eps))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ 1/6 (+ (* -1/6 (cos eps)) (* (pow x 2) (- (* 1/120 (cos eps)) 1/120)))))) 1))","(* x (- (+ (cos eps) (* (pow x 2) (+ 1/6 (+ (* -1/6 (cos eps)) (* (pow x 2) (- (+ (* 1/120 (cos eps)) (* (pow x 2) (+ 1/5040 (* -1/5040 (cos eps))))) 1/120)))))) 1))","(+ (sin eps) (* -1/2 (* (pow x 2) (sin eps))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* 1/24 (* (pow x 2) (sin eps))))))","(+ (sin eps) (* (pow x 2) (+ (* -1/2 (sin eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (sin eps))) (* 1/24 (sin eps)))))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","eps","(+ eps x)","(+ (sin eps) (* x (cos eps)))","(+ (sin eps) (* x (+ (cos eps) (* -1/2 (* x (sin eps))))))","(+ (sin eps) (* x (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* -1/6 (* x (cos eps))))))))","(/ -1 eps)","(- (* -1 (/ x (pow eps 2))) (/ 1 eps))","(- (* x (- (* -1 (/ x (pow eps 3))) (/ 1 (pow eps 2)))) (/ 1 eps))","(- (* x (- (* x (- (* -1 (/ x (pow eps 4))) (/ 1 (pow eps 3)))) (/ 1 (pow eps 2)))) (/ 1 eps))","(* (sin eps) (sin (neg eps)))","(+ (* x (+ (* (cos eps) (sin (neg eps))) (* (cos (neg eps)) (sin eps)))) (* (sin eps) (sin (neg eps))))","(+ (* x (+ (* x (+ (* -1 (* (sin eps) (sin (neg eps)))) (* (cos eps) (cos (neg eps))))) (+ (* (cos eps) (sin (neg eps))) (* (cos (neg eps)) (sin eps))))) (* (sin eps) (sin (neg eps))))","(+ (* x (+ (* x (+ (* -1 (* (sin eps) (sin (neg eps)))) (+ (* x (+ (* -1/2 (* (cos eps) (sin (neg eps)))) (+ (* -1/2 (* (cos (neg eps)) (sin eps))) (+ (* -1/6 (* (cos eps) (sin (neg eps)))) (* -1/6 (* (cos (neg eps)) (sin eps))))))) (* (cos eps) (cos (neg eps)))))) (+ (* (cos eps) (sin (neg eps))) (* (cos (neg eps)) (sin eps))))) (* (sin eps) (sin (neg eps))))","(/ 1 (sin eps))","(+ (* -1 (/ (* x (cos eps)) (pow (sin eps) 2))) (/ 1 (sin eps)))","(+ (* x (- (* x (- (* 1/2 (/ 1 (sin eps))) (* -1 (/ (pow (cos eps) 2) (pow (sin eps) 3))))) (/ (cos eps) (pow (sin eps) 2)))) (/ 1 (sin eps)))","(+ (* x (- (* x (- (+ (* -1 (* x (+ (* -1/6 (/ (cos eps) (pow (sin eps) 2))) (+ (* 1/2 (/ (cos eps) (pow (sin eps) 2))) (/ (* (cos eps) (- (* 1/2 (/ 1 (sin eps))) (* -1 (/ (pow (cos eps) 2) (pow (sin eps) 3))))) (sin eps)))))) (* 1/2 (/ 1 (sin eps)))) (* -1 (/ (pow (cos eps) 2) (pow (sin eps) 3))))) (/ (cos eps) (pow (sin eps) 2)))) (/ 1 (sin eps)))","(sin (neg eps))","(+ (sin (neg eps)) (* x (cos (neg eps))))","(+ (sin (neg eps)) (* x (+ (cos (neg eps)) (* -1/2 (* x (sin (neg eps)))))))","(+ (sin (neg eps)) (* x (+ (cos (neg eps)) (* x (+ (* -1/2 (sin (neg eps))) (* -1/6 (* x (cos (neg eps)))))))))","(- 1/2 (* 1/2 (cos (* 2 eps))))","(- (+ 1/2 (* x (sin (* 2 eps)))) (* 1/2 (cos (* 2 eps))))","(- (+ 1/2 (* x (- (* -1 (* x (+ 1 (* -1 (cos (* 2 eps)))))) (* -1 (sin (* 2 eps)))))) (* 1/2 (cos (* 2 eps))))","(- (+ 1/2 (* x (- (* x (- (* -2/3 (* x (sin (* 2 eps)))) (+ 1 (* -1 (cos (* 2 eps)))))) (* -1 (sin (* 2 eps)))))) (* 1/2 (cos (* 2 eps))))","(- (* 1/2 (/ 1 (sin eps))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(- (+ (* -1 (* x (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (* 1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2))))))) (* 1/2 (/ 1 (sin eps)))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(- (+ (* 1/2 (/ 1 (sin eps))) (* x (- (* -1 (* x (+ (* -1/2 (- (* 1/2 (/ 1 (sin eps))) (+ (* -1 (/ (* (+ 1 (cos eps)) (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (sin eps))) (* 2 (/ 1 (sin eps)))))) (* 1/2 (- (* -2 (/ (cos (* 2 eps)) (sin eps))) (+ (* -1/2 (/ (cos (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (sin eps)))))))) (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (* 1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))))))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(- (+ (* 1/2 (/ 1 (sin eps))) (* x (- (* x (- (* -1 (* x (+ (* -1/2 (- (* 1/6 (/ 1 (pow (sin eps) 2))) (+ (* -1/6 (/ (cos eps) (pow (sin eps) 2))) (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (/ 1 (sin eps))) (+ (* -1 (/ (* (+ 1 (cos eps)) (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (sin eps))) (* 2 (/ 1 (sin eps)))))) (sin eps)))))) (* 1/2 (- (* 4/3 (/ (sin (* 2 eps)) (sin eps))) (+ (* -1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (+ (/ (* (cos (* 2 eps)) (- (* -1/6 (cos eps)) 1/6)) (pow (sin eps) 2)) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (cos (* 2 eps)) (sin eps))) (+ (* -1/2 (/ (cos (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (sin eps))))) (sin eps))))))))) (+ (* -1/2 (- (* 1/2 (/ 1 (sin eps))) (+ (* -1 (/ (* (+ 1 (cos eps)) (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (sin eps))) (* 2 (/ 1 (sin eps)))))) (* 1/2 (- (* -2 (/ (cos (* 2 eps)) (sin eps))) (+ (* -1/2 (/ (cos (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))) (sin eps)))))))) (+ (* 1/2 (+ (/ 1 (pow (sin eps) 2)) (/ (cos eps) (pow (sin eps) 2)))) (* 1/2 (- (* -2 (/ (sin (* 2 eps)) (sin eps))) (/ (* (cos (* 2 eps)) (+ 1 (cos eps))) (pow (sin eps) 2)))))))) (* 1/2 (/ (cos (* 2 eps)) (sin eps))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))","(- (+ (* 1/2 (/ (cos (* 2 eps)) (sin eps))) (* x (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2))))) (* 1/2 (/ 1 (sin eps))))","(- (+ (* 1/2 (/ (cos (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (sin (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (cos (* 2 eps)) (sin eps))) (/ 1 (sin eps))) (+ (* -1/2 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (sin eps)))))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2))))) (* 1/2 (/ 1 (sin eps))))","(- (+ (* 1/2 (/ (cos (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (sin (* 2 eps)) (sin eps))) (* x (- (+ (* -1 (/ (cos (* 2 eps)) (sin eps))) (+ (* x (- (* 2/3 (/ (sin (* 2 eps)) (sin eps))) (+ (* -1/2 (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (+ (/ (* (+ 1 (cos eps)) (- (+ (* -1 (/ (cos (* 2 eps)) (sin eps))) (/ 1 (sin eps))) (+ (* -1/2 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (sin eps))))) (sin eps)) (/ (* (- (* -1/6 (cos eps)) 1/6) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))))) (/ 1 (sin eps)))) (+ (* -1/2 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* -1 (/ (sin (* 2 eps)) (sin eps))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2)))) (sin eps)))))) (/ (* (+ 1 (cos eps)) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (sin eps) 2))))) (* 1/2 (/ 1 (sin eps))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ 1 (sin (neg eps)))","(+ (* -1 (/ (* x (cos (neg eps))) (pow (sin (neg eps)) 2))) (/ 1 (sin (neg eps))))","(+ (* x (- (* x (- (* 1/2 (/ 1 (sin (neg eps)))) (* -1 (/ (pow (cos (neg eps)) 2) (pow (sin (neg eps)) 3))))) (/ (cos (neg eps)) (pow (sin (neg eps)) 2)))) (/ 1 (sin (neg eps))))","(+ (* x (- (* x (- (+ (* -1 (* x (+ (* -1/6 (/ (cos (neg eps)) (pow (sin (neg eps)) 2))) (+ (* 1/2 (/ (cos (neg eps)) (pow (sin (neg eps)) 2))) (/ (* (cos (neg eps)) (- (* 1/2 (/ 1 (sin (neg eps)))) (* -1 (/ (pow (cos (neg eps)) 2) (pow (sin (neg eps)) 3))))) (sin (neg eps))))))) (* 1/2 (/ 1 (sin (neg eps))))) (* -1 (/ (pow (cos (neg eps)) 2) (pow (sin (neg eps)) 3))))) (/ (cos (neg eps)) (pow (sin (neg eps)) 2)))) (/ 1 (sin (neg eps))))","(+ (sin eps) (* x (+ 1 (cos eps))))","(+ (sin eps) (* x (+ 1 (+ (cos eps) (* -1/2 (* x (sin eps)))))))","(+ (sin eps) (* x (+ 1 (+ (cos eps) (* x (+ (* -1/2 (sin eps)) (* x (- (* -1/6 (cos eps)) 1/6))))))))","(- (+ (* (cos eps) (sin x)) (* (cos x) (sin eps))) (sin x))","(- (* (cos eps) (sin x)) (sin x))","(* (cos x) (sin eps))","(cos x)","(* x (+ 1 (/ eps x)))","(- (sin (+ eps x)) (sin x))","(sin (+ eps x))","(/ 1 x)","(/ (+ 1 (/ eps x)) x)","(/ (- (+ 1 (/ (pow eps 2) (pow x 2))) (* -1 (/ eps x))) x)","(/ (- (+ 1 (/ (pow eps 3) (pow x 3))) (+ (* -1 (/ eps x)) (* -1 (/ (pow eps 2) (pow x 2))))) x)","(* (sin (+ eps x)) (sin (- x eps)))","(/ 1 (sin (+ eps x)))","(sin (- x eps))","(* -1 (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (+ eps x))))))","(* -1 (+ (* -1/2 (/ (cos (* 2 x)) (+ (sin x) (sin (+ eps x))))) (* 1/2 (/ (cos (* 2 (+ eps x))) (+ (sin x) (sin (+ eps x)))))))","(+ 1/2 (* -1/2 (cos (* 2 x))))","(/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (+ eps x))))) (+ (sin x) (sin (+ eps x))))","(sin x)","(/ 1 (sin (- x eps)))","(+ (sin x) (sin (+ eps x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(- (sin (- eps (* -1 x))) (sin x))","(sin (- eps (* -1 x)))","(* -1 (/ (- (* -1 (/ eps x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ (pow eps 2) x) (* -1 eps)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -1 (/ (pow eps 3) x)) (pow eps 2)) x)) (* -1 eps)) x)) 1) x))","(* (sin (neg (+ eps (* -1 x)))) (sin (- eps (* -1 x))))","(/ 1 (sin (- eps (* -1 x))))","(sin (neg (+ eps (* -1 x))))","(* -1 (+ (* -1/2 (cos (neg (* -2 x)))) (* 1/2 (cos (* 2 (- eps (* -1 x)))))))","(* -1 (+ (* -1/2 (/ (cos (neg (* -2 x))) (+ (sin x) (sin (- eps (* -1 x)))))) (* 1/2 (/ (cos (* 2 (- eps (* -1 x)))) (+ (sin x) (sin (- eps (* -1 x))))))))","(+ 1/2 (* -1/2 (cos (neg (* -2 x)))))","(/ (+ (* -1/2 (cos (neg (* -2 x)))) (* 1/2 (cos (* 2 (- eps (* -1 x)))))) (+ (sin x) (sin (- eps (* -1 x)))))","(/ 1 (sin (neg (+ eps (* -1 x)))))","(+ (sin x) (sin (- eps (* -1 x))))","(* eps (cos x))","(* eps (+ (cos x) (* -1/2 (* eps (sin x)))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x)))))))","(* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* eps (+ (* -1/6 (cos x)) (* 1/24 (* eps (sin x)))))))))","(* -1/2 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* 1/24 (* (pow eps 2) (sin x)))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (sin x))) (* 1/24 (sin x))))))","(* (pow eps 2) (+ (* -1/2 (sin x)) (* (pow eps 2) (+ (* 1/24 (sin x)) (* (pow eps 2) (+ (* -1/720 (sin x)) (* 1/40320 (* (pow eps 2) (sin x)))))))))","(* eps (+ (cos x) (* -1/6 (* (pow eps 2) (cos x)))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* 1/120 (* (pow eps 2) (cos x)))))))","(* eps (+ (cos x) (* (pow eps 2) (+ (* -1/6 (cos x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (cos x))) (* 1/120 (cos x))))))))","(+ (sin x) (* eps (cos x)))","(+ (sin x) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(+ (/ 1 x) (/ eps (pow x 2)))","(+ (* eps (+ (/ 1 (pow x 2)) (/ eps (pow x 3)))) (/ 1 x))","(+ (* eps (+ (* eps (+ (/ 1 (pow x 3)) (/ eps (pow x 4)))) (/ 1 (pow x 2)))) (/ 1 x))","(pow (sin x) 2)","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* (cos x) (sin x)))) (pow (sin x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (* -1 (pow (sin x) 2)))) (* (cos x) (sin x))))) (pow (sin x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (+ (* -1 (pow (sin x) 2)) (* eps (+ (* -1/2 (* (cos x) (sin x))) (+ (* -1/6 (* (cos x) (sin x))) (+ (* 1/6 (* (cos x) (sin x))) (* 1/2 (* (cos x) (sin x)))))))))) (* (cos x) (sin x))))) (pow (sin x) 2))","(/ 1 (sin x))","(+ (* -1 (/ (* eps (cos x)) (pow (sin x) 2))) (/ 1 (sin x)))","(+ (* eps (- (* eps (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (/ (cos x) (pow (sin x) 2)))) (/ 1 (sin x)))","(+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1/6 (/ (cos x) (pow (sin x) 2))) (+ (* 1/2 (/ (cos x) (pow (sin x) 2))) (/ (* (cos x) (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (sin x)))))) (* 1/2 (/ 1 (sin x)))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (/ (cos x) (pow (sin x) 2)))) (/ 1 (sin x)))","(+ (sin x) (* -1 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1 (cos x)) (* -1/2 (* eps (sin x))))))","(+ (sin x) (* eps (+ (* -1 (cos x)) (* eps (+ (* -1/2 (sin x)) (* 1/6 (* eps (cos x))))))))","(* -1 (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(- (* eps (sin (* 2 x))) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(- (* eps (- (* eps (cos (* 2 x))) (* -1 (sin (* 2 x))))) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(- (* eps (- (* eps (- (* -2/3 (* eps (sin (* 2 x)))) (* -1 (cos (* 2 x))))) (* -1 (sin (* 2 x))))) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))))","(* -1 (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(- (* -1 (* eps (+ (* 1/8 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))))) (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(- (* eps (- (* -1 (* eps (+ (* 1/2 (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* -1/8 (/ (* (pow (cos x) 2) (cos (* 2 x))) (pow (sin x) 3))))) (* 1/2 (- (* -1 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (sin x))))))))) (+ (* 1/8 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))))) (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(- (* eps (- (* eps (- (* -1 (* eps (+ (* 1/2 (+ (* -1/2 (/ (* (cos x) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* -1/8 (/ (* (pow (cos x) 2) (cos (* 2 x))) (pow (sin x) 3))))) (sin x))) (+ (* -1/24 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/16 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))) (* 1/2 (- (* 2/3 (/ (sin (* 2 x)) (sin x))) (+ (* -1/4 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (+ (* -1/24 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (sin x)))))) (sin x)))))))))) (+ (* 1/2 (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* -1/8 (/ (* (pow (cos x) 2) (cos (* 2 x))) (pow (sin x) 3))))) (* 1/2 (- (* -1 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (cos (* 2 x)) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))))) (sin x))))))))) (+ (* 1/8 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2))) (* 1/2 (- (* -1 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (cos (* 2 x))) (pow (sin x) 2)))))))) (+ (* -1/4 (/ (cos (* 2 x)) (sin x))) (* 1/4 (/ (cos (* 2 x)) (sin x)))))","(* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x)))","(+ (* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* eps (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))))","(+ (* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* eps (- (+ (* -1/2 (/ (sin (* 2 x)) (sin x))) (* eps (- (* -1/2 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (sin x))))))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))))","(+ (* 1/2 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* eps (- (+ (* -1/2 (/ (sin (* 2 x)) (sin x))) (* eps (- (+ (* -1/2 (/ (cos (* 2 x)) (sin x))) (* eps (- (* 1/3 (/ (sin (* 2 x)) (sin x))) (+ (* -1/4 (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (+ (* -1/24 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (cos (* 2 x)) (sin x))) (+ (* -1/8 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (sin x)))))) (sin x)))))))) (+ (* -1/8 (/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/2 (/ (* (cos x) (- (* -1/2 (/ (sin (* 2 x)) (sin x))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))) (sin x))))))) (* 1/4 (/ (* (cos x) (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 x))))) (pow (sin x) 2))))))","(+ (/ 1 (sin x)) (/ (* eps (cos x)) (pow (sin x) 2)))","(+ (* eps (- (* eps (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (* -1 (/ (cos x) (pow (sin x) 2))))) (/ 1 (sin x)))","(+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (cos x) (- (* 1/2 (/ 1 (sin x))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (sin x))) (+ (* -1/2 (/ (cos x) (pow (sin x) 2))) (* 1/6 (/ (cos x) (pow (sin x) 2))))))) (* 1/2 (/ 1 (sin x)))) (* -1 (/ (pow (cos x) 2) (pow (sin x) 3))))) (* -1 (/ (cos x) (pow (sin x) 2))))) (/ 1 (sin x)))","(* 2 (sin x))","(+ (* 2 (sin x)) (* eps (cos x)))","(+ (* 2 (sin x)) (* eps (+ (cos x) (* -1/2 (* eps (sin x))))))","(+ (* 2 (sin x)) (* eps (+ (cos x) (* eps (+ (* -1/2 (sin x)) (* -1/6 (* eps (cos x))))))))","(* eps (+ 1 (/ x eps)))","(/ (- (* -1 (/ x eps)) 1) eps)","(/ (- (* -1 (/ (pow x 2) (pow eps 2))) (+ 1 (/ x eps))) eps)","(/ (- (* -1 (/ (pow x 3) (pow eps 3))) (+ 1 (+ (/ x eps) (/ (pow x 2) (pow eps 2))))) eps)","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(- (sin (- x (* -1 eps))) (sin x))","(sin (- x (* -1 eps)))","(* -1 (/ (+ 1 (/ x eps)) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow x 2) eps)) x) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow x 3) eps) (* -1 (pow x 2))) eps)) x) eps))) eps))","(* (sin (+ x (* -1 eps))) (sin (- x (* -1 eps))))","(/ 1 (sin (- x (* -1 eps))))","(sin (+ x (* -1 eps)))","(* -1 (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (- x (* -1 eps)))))))","(* -1 (+ (* -1/2 (/ (cos (* 2 x)) (+ (sin x) (sin (- x (* -1 eps)))))) (* 1/2 (/ (cos (* 2 (- x (* -1 eps)))) (+ (sin x) (sin (- x (* -1 eps))))))))","(/ (+ (* -1/2 (cos (* 2 x))) (* 1/2 (cos (* 2 (- x (* -1 eps)))))) (+ (sin x) (sin (- x (* -1 eps)))))","(/ 1 (sin (+ x (* -1 eps))))","(+ (sin x) (sin (- x (* -1 eps))))"]],"memory":[[4271744,11991712]],"method":["egg-herbie"],"outputs":[[]],"time":146.454833984375,"type":"simplify"},{"count":[[23,345]],"inputs":[["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x)))","(*.f64 (cos.f64 x) (sin.f64 eps))","(cos.f64 x)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","(sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (-.f64 x eps))","(*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps))))","(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","(*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))","(sin.f64 (+.f64 x eps))","(/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps)))))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","(sin.f64 (-.f64 x eps))","(-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x))))","(/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))))","(sin.f64 x)","(/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))","(+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"memory":[[-4602048,20650512]],"outputs":[["#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","#s(literal 6 binary64)","#s(literal -3/2 binary64)","#s(literal -3 binary64)","#s(literal 1/4 binary64)","#s(literal -1/4 binary64)"]],"time":484.191162109375,"type":"rewrite"},{"compiler":[[15,17]],"memory":[[1345952,1345952]],"time":1.85205078125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","done",40.48171968007185,"binary64"],["(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","done",40.555465283496105,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",25.03741077484549,"binary64"],["(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","done",40.52090149119425,"binary64"],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","done",0.23258223038526776,"binary64"],["(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","done",59.95168704846347,"binary64"],["#s(literal 1/4 binary64)","next",60.60828858605114,"binary64"],["#s(literal 0 binary64)","next",60.573314326801665,"binary64"]],"compiler":[[19,12],[19,12],[7,6],[17,11],[14,10],[28,20],[1,3],[1,3]],"count":[[21,8]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,2],"picked":[5,5]}],"memory":[[2441680,2441680]],"min-error":[[0.23184556675401508,"binary64"]],"time":3.686767578125,"type":"prune"},{"inputs":[["#s(literal 0 binary64)","#s(literal 1/4 binary64)"]],"memory":[[-6346736,9851856]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(literal 1/4 binary64)"]],"time":139.31201171875,"type":"simplify"},{"compiler":[[4,6]],"memory":[[3783184,3783184]],"mixsample":[[0.14892578125,"ival-true",0],[0.302978515625,"exact",0],[0.098876953125,"ival-assert",0]],"outcomes":[[4.658935546875,0,"valid",256]],"time":7.9150390625,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[51632,51632]],"outputs":[[]],"series":[[0.001953125,"()","eps","-inf"],[0.001953125,"()","eps","inf"],[0.001953125,"()","eps","0"],[0.002197265625,"()","x","-inf"],[0.0029296875,"()","x","inf"],[0.029052734375,"()","x","0"]],"time":0.131103515625,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-4239712,8633072]],"method":["egg-herbie"],"outputs":[[]],"time":127.514892578125,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[4123312,12244160]],"outputs":[[]],"time":161.626953125,"type":"rewrite"},{"compiler":[[0,2]],"memory":[[51216,51216]],"time":0.1572265625,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","done",40.48171968007185,"binary64"],["(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","done",40.555465283496105,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","done",25.03741077484549,"binary64"],["(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","done",40.52090149119425,"binary64"],["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","done",0.23258223038526776,"binary64"],["(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","done",59.95168704846347,"binary64"],["#s(literal 1/4 binary64)","done",60.60828858605114,"binary64"],["#s(literal 0 binary64)","done",60.573314326801665,"binary64"]],"compiler":[[106,45],[19,12],[19,12],[7,6],[17,11],[14,10],[28,20],[1,3],[1,3]],"count":[[8,8]],"kept":[{"done":[6,6],"fresh":[0,0],"new":[0,0],"picked":[2,2]}],"memory":[[-5010720,3110432]],"min-error":[[0.23184556675401508,"binary64"]],"time":7.260986328125,"type":"prune"},{"accuracy":[0.23258223038526776],"baseline":[0.23258223038526776],"branch":[["x",0.23258223038526776,1,"binary64"],["eps",0.23258223038526776,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",0.23258223038526776,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[8,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1/4 binary64)","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))"]],"memory":[[-1050592,7115664]],"oracle":[61.581441263957906],"outputs":[["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))"]],"repr":["binary64"],"time":10.073974609375,"times":[[3.226806640625,"x"],[2.84912109375,"eps"],[3.072021484375,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[25.037410774845476],"baseline":[25.03741077484549],"branch":[["x",25.037410774845476,1,"binary64"],["eps",25.037410774845487,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",25.037410774845487,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[7,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1/4 binary64)","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","(-.f64 (sin.f64 (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))) (sin.f64 x))","(-.f64 (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (sin.f64 (-.f64 x eps)))) (sin.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (-.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (sin.f64 (-.f64 x eps))))) (sin.f64 x))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) (+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 (+.f64 x x)))))) (neg.f64 (+.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x)))))"]],"memory":[[6904560,6904560]],"oracle":[61.581441263957906],"outputs":[["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"repr":["binary64"],"time":8.5859375,"times":[[2.51708984375,"x"],[2.575927734375,"eps"],[2.52880859375,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[60.573314326801686],"baseline":[60.573314326801665],"branch":[["eps",60.57331432680171,1,"binary64"],["(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))",60.57331432680171,1,"binary64"],["x",60.573314326801686,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[2,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1/4 binary64)"]],"link":["."],"memory":[[-4076752,5098560]],"name":["2sin (example 3.3)"],"oracle":[61.541855101490704],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":5.3779296875,"times":[[1.427978515625,"eps"],[1.47509765625,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"],[1.8310546875,"x"]],"type":"regimes"},{"inputs":[["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(literal 0 binary64)"]],"memory":[[-710368,15776544]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))","#s(literal 0 binary64)"]],"time":158.255126953125,"type":"simplify"},{"compiler":[[22,14]],"memory":[[573232,573232]],"stop":[["done",1]],"time":1.099853515625,"type":"soundness"},{"compiler":[[22,14],[22,14],[15,13],[15,13],[7,6],[7,6]],"memory":[[3630944,20142480]],"remove-preprocessing":[[],[],[],[]],"time":38.505126953125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.012939453125,"type":"end"}]