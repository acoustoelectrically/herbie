[{"memory":[[19296,19296]],"time":0.035888671875,"type":"start"},{"compiler":[[20,13]],"memory":[[1219056,1219056]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.5,"unknown":0.00024414062500000005,"valid":0.499755859375}],[11,{"invalid":0.0,"precondition":0.5,"unknown":0.00048828125,"valid":0.49951171875}],[10,{"invalid":0.0,"precondition":0.5,"unknown":0.0009765625,"valid":0.4990234375}],[9,{"invalid":0.0,"precondition":0.5,"unknown":0.001953125,"valid":0.498046875}],[8,{"invalid":0.0,"precondition":0.5,"unknown":0.00390625,"valid":0.49609375}],[7,{"invalid":0.0,"precondition":0.5,"unknown":0.0078125,"valid":0.4921875}],[6,{"invalid":0.0,"precondition":0.5,"unknown":0.015625,"valid":0.484375}],[5,{"invalid":0.0,"precondition":0.5,"unknown":0.03125,"valid":0.46875}],[4,{"invalid":0.0,"precondition":0.5,"unknown":0.0625,"valid":0.4375}],[3,{"invalid":0.0,"precondition":0.5,"unknown":0.125,"valid":0.375}],[2,{"invalid":0.0,"precondition":0.5,"unknown":0.25,"valid":0.25}],[1,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}]],"time":4.39404296875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.5,"valid":0.5}],"memory":[[31855088,468982112]],"mixsample":[[290.021240234375,"adjust",800],[215.550537109375,"ival-div",0],[149.031005859375,"ival-add",0],[66.715576171875,"ival-fabs",0],[1.97119140625,"ival-sub",1600],[216.24658203125,"ival-div",400],[21.626220703125,"ival-div",1600],[4.6318359375,"ival-assert",0],[56.629638671875,"ival-add",400],[95.568359375,"ival-sub",0],[82.020263671875,"ival-sub",400],[27.97705078125,"ival->",0],[0.039306640625,"ival-add",800],[11.95654296875,"exact",0],[16.92724609375,"adjust",2000]],"outcomes":[[1371.499755859375,1,"valid",7332],[146.500244140625,2,"valid",500],[37.80419921875,0,"valid",424]],"time":2014.485107421875,"type":"sample"},{"compiler":[[15,10],[48,12],[48,12]],"confusion":[[78,0,0,178]],"explanations":[["+.f64","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cancellation",78,0,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",78,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(/.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["(-.f64 x #s(literal 1 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,78],[0,178]],"maybe-confusion":[[78,0,0,0,0,178]],"memory":[[-30361184,79030800]],"mixsample":[[16.85400390625,"adjust",800],[13.012939453125,"ival-div",0],[8.6787109375,"ival-add",0],[0.053955078125,"ival-sub",1600],[12.51025390625,"ival-div",400],[0.2939453125,"ival-div",1600],[0.275146484375,"ival-assert",0],[2.60107421875,"ival-add",400],[5.92041015625,"ival-sub",0],[0.693359375,"ival-true",0],[5.387451171875,"ival-sub",400],[0.7509765625,"exact",0],[0.610107421875,"adjust",2000]],"outcomes":[[90.83154296875,1,"valid",464],[5.364013671875,2,"valid",20],[2.7529296875,0,"valid",28]],"time":202.89892578125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,10]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[4825856,21093136]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))"]],"symmetry":[["(negabs x)"]],"time":317.51708984375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.0888671875,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",17.67701826380449,"binary64"]],"compiler":[[15,10]],"memory":[[320432,320432]],"time":0.905029296875,"type":"prune"},{"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","cost-diff",0],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0]],"memory":[[-6661792,10642512]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 x #s(literal -1 binary64))"]],"time":156.97802734375,"type":"simplify"},{"compiler":[[48,12]],"locations":[["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","accuracy",0.0078125],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",17.664932546582524]],"memory":[[711360,16606992]],"mixsample":[[6.829345703125,"adjust",800],[5.060546875,"ival-div",0],[3.65234375,"ival-add",0],[0.02099609375,"ival-sub",1600],[5.83154296875,"ival-div",400],[0.107421875,"ival-div",1600],[0.101318359375,"ival-assert",0],[1.3466796875,"ival-add",400],[2.4970703125,"ival-sub",0],[0.234619140625,"ival-true",0],[2.05615234375,"ival-sub",400],[0.286376953125,"exact",0],[0.24658203125,"adjust",2000]],"outcomes":[[37.396728515625,1,"valid",232],[2.390869140625,2,"valid",10],[1.024169921875,0,"valid",14]],"time":52.259033203125,"type":"localize"},{"count":[[5,37]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[1224352,1224352]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- x 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[1.087158203125,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","-inf"],[0.908935546875,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","inf"],[0.7109375,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","0"]],"time":3.166015625,"type":"series"},{"count":[[37,0]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- x 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[-239472,9780400]],"method":["egg-herbie"],"outputs":[[]],"time":118.119873046875,"type":"simplify"},{"count":[[5,75]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[5438800,13502032]],"outputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -3 binary64)","#s(literal 3 binary64)","#s(literal 5 binary64)","#s(literal 9 binary64)","#s(literal 6 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal 0 binary64)","#s(literal -1 binary64)","#s(literal -2 binary64)","#s(literal -6 binary64)","#s(literal -4 binary64)","#s(literal -5 binary64)"]],"time":274.81298828125,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[-6747168,1266160]],"time":2.320068359375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",17.67701826380449,"binary64"],["#s(literal 9 binary64)","next",61.48134162717822,"binary64"],["#s(literal 3 binary64)","next",61.46964753144204,"binary64"],["#s(literal 1 binary64)","next",61.47884523207007,"binary64"],["#s(literal 0 binary64)","next",18.995580385316003,"binary64"]],"compiler":[[15,10],[1,2],[1,2],[1,2],[1,2]],"count":[[16,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[15,4],"picked":[1,1]}],"memory":[[1529856,1529856]],"min-error":[[17.476421000860658,"binary64"]],"time":2.296142578125,"type":"prune"},{"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)"]],"memory":[[1740768,9994688]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)"]],"time":127.5478515625,"type":"simplify"},{"compiler":[[6,7]],"memory":[[4541360,4541360]],"mixsample":[[0.1591796875,"ival-true",0],[0.5146484375,"exact",0],[0.14794921875,"ival-assert",0]],"outcomes":[[5.653564453125,0,"valid",256]],"time":10.862060546875,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[-9988464,30448]],"outputs":[[]],"series":[[0.012939453125,"()","x","-inf"],[0.09814453125,"()","x","inf"],[0.052978515625,"()","x","0"]],"time":1.868896484375,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[1162896,9433216]],"method":["egg-herbie"],"outputs":[[]],"time":120.93798828125,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[3871200,11953712]],"outputs":[[]],"time":167.8720703125,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[45040,45040]],"time":0.175048828125,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",17.67701826380449,"binary64"],["#s(literal 9 binary64)","done",61.48134162717822,"binary64"],["#s(literal 3 binary64)","done",61.46964753144204,"binary64"],["#s(literal 1 binary64)","done",61.47884523207007,"binary64"],["#s(literal 0 binary64)","done",18.995580385316003,"binary64"]],"compiler":[[19,13],[15,10],[1,2],[1,2],[1,2],[1,2]],"count":[[5,5]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[0,0],"picked":[4,4]}],"memory":[[1529824,1529824]],"min-error":[[17.476421000860658,"binary64"]],"time":4.973876953125,"type":"prune"},{"accuracy":[17.677018263804488],"baseline":[17.67701826380449],"branch":[["x",17.677018263804488,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",17.67701826380449,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[5,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[-4224864,3626960]],"oracle":[61.86767760684782],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"repr":["binary64"],"time":7.610107421875,"times":[[3.715087890625,"x"],[2.891845703125,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[18.995580385316],"baseline":[18.995580385316003],"branch":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",18.995580385316003,1,"binary64"],["x",18.995580385316,1,"binary64"]],"compiler":[[15,10],[1,1]],"count":[[4,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)"]],"link":["."],"memory":[[3394640,3394640]],"name":["3frac (problem 3.3.3)"],"oracle":[61.86767760684782],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":4.27197265625,"times":[[1.4921875,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"],[2.14599609375,"x"]],"type":"regimes"},{"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(literal 0 binary64)"]],"memory":[[-2387168,15097840]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","#s(literal 0 binary64)"]],"time":162.072021484375,"type":"simplify"},{"compiler":[[16,12]],"memory":[[340384,340384]],"stop":[["done",1]],"time":1.160888671875,"type":"soundness"},{"compiler":[[16,12],[16,12],[9,7],[9,7],[15,10],[15,10],[15,11],[15,11],[15,11],[15,11]],"memory":[[4004048,28669392]],"remove-preprocessing":[[],[],[]],"time":101.239013671875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.022216796875,"type":"end"}]