[{"memory":[[14864,14864]],"time":0.073974609375,"type":"start"},{"compiler":[[15,11]],"memory":[[574448,574448]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":4.60400390625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[12940944,372662384]],"mixsample":[[265.24951171875,"adjust",800],[90.087646484375,"ival-add",0],[136.657470703125,"ival-sqrt",800],[6.154052734375,"ival-assert",0],[26.242431640625,"ival-add",400],[137.505126953125,"ival-sub",0],[22.74951171875,"ival-and",0],[0.0791015625,"ival-sub",400],[252.5625,"const",0],[214.544677734375,"ival-sqrt",0],[41.776611328125,"ival->",0],[13.857421875,"exact",0],[51.250732421875,"ival-add",800],[69.392822265625,"ival-sqrt",400],[33.988525390625,"ival-<",0]],"outcomes":[[1746.990478515625,1,"valid",8001],[33.89599609375,0,"valid",255]],"time":2332.205078125,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[254,0,0,2]],"explanations":[["-.f64","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cancellation",254,0,[],[[]]]],"fperrors":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",254,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,254],[0,2]],"maybe-confusion":[[254,0,0,0,0,2]],"memory":[[932112,45281280]],"mixsample":[[15.66455078125,"adjust",800],[4.843994140625,"ival-add",0],[7.913330078125,"ival-sqrt",800],[0.361328125,"ival-assert",0],[1.230712890625,"ival-add",400],[7.549560546875,"ival-sub",0],[0.907958984375,"ival-true",0],[13.8671875,"ival-sqrt",0],[2.586181640625,"ival-add",800],[0.585205078125,"exact",0],[3.9873046875,"ival-sqrt",400]],"outcomes":[[91.154541015625,1,"valid",498],[1.363037109375,0,"valid",14]],"time":180.844970703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[-3059968,21129200]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"symmetry":[[]],"time":530.705078125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41232,41232]],"time":0.097900390625,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","next",59.698026489576904,"binary64"]],"compiler":[[7,6]],"memory":[[311456,311456]],"time":0.6640625,"type":"prune"},{"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"locations":[["(sqrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cost-diff",0]],"memory":[[-18350384,9870816]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"time":244.9580078125,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",59.698026489576904]],"memory":[[3473680,11246832]],"mixsample":[[5.666015625,"adjust",800],[2.490966796875,"ival-add",0],[3.19921875,"ival-sqrt",800],[0.160400390625,"ival-assert",0],[0.55029296875,"ival-add",400],[4.138671875,"ival-sub",0],[0.250732421875,"ival-true",0],[5.074462890625,"ival-sqrt",0],[1.052734375,"ival-add",800],[0.242431640625,"exact",0],[1.47509765625,"ival-sqrt",400]],"outcomes":[[35.9580078125,1,"valid",249],[0.846923828125,0,"valid",7]],"time":47.048095703125,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[1901072,1901072]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"series":[[3.02294921875,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","-inf"],[1.97900390625,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","inf"],[0.761962890625,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","0"]],"time":6.298828125,"type":"series"},{"count":[[27,0]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"memory":[[-5274288,10251968]],"method":["egg-herbie"],"outputs":[[]],"time":154.8671875,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[3733872,13925056]],"outputs":[["x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","x","(neg.f64 x)","(+.f64 x #s(literal 1 binary64))","(+.f64 x x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(-.f64 #s(literal 1 binary64) x)","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (/.f64 x #s(literal 1 binary64)) x)","(*.f64 (sqrt.f64 #s(literal 1 binary64)) x)","(*.f64 x (sqrt.f64 #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)"]],"time":248.77685546875,"type":"rewrite"},{"compiler":[[46,18]],"memory":[[1401152,1401152]],"time":2.64892578125,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","next",59.45059506219484,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",59.698026489576904,"binary64"],["(-.f64 x x)","next",61.56854093654185,"binary64"],["(-.f64 x #s(literal 1 binary64))","next",61.074920984129825,"binary64"],["x","next",61.0758235317273,"binary64"]],"compiler":[[3,3],[7,6],[3,2],[3,3],[1,1]],"count":[[16,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[15,4],"picked":[1,1]}],"memory":[[-6352928,1603040]],"min-error":[[57.92739553574521,"binary64"]],"time":4.105224609375,"type":"prune"},{"inputs":[["x","(-.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(-.f64 x x)","x","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x"]],"locations":[["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 x x)","cost-diff",2],["(-.f64 x #s(literal 1 binary64))","cost-diff",0]],"memory":[[2239200,10423232]],"method":["egg-herbie"],"outputs":[["x","(-.f64 x #s(literal 1 binary64))","(+.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x"]],"time":190.14794921875,"type":"simplify"},{"compiler":[[17,7]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 x x)","accuracy",0.0],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0]],"memory":[[-1363040,6385632]],"mixsample":[[3.151611328125,"ival-sub",0],[3.138916015625,"ival-div",0],[0.229736328125,"ival-true",0],[0.20166015625,"exact",0],[0.13623046875,"ival-assert",0]],"outcomes":[[14.64013671875,0,"valid",256]],"time":23.31396484375,"type":"localize"},{"count":[[3,7]],"inputs":[["(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[544288,544288]],"outputs":[["-1","(- x 1)","0","(/ 1 x)","x","(* x (- 1 (/ 1 x)))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[1.12109375,"((- x 1) (- x x) (/ 1 x))","x","-inf"],[0.39306640625,"((- x 1) (- x x) (/ 1 x))","x","inf"],[0.47216796875,"((- x 1) (- x x) (/ 1 x))","x","0"]],"time":2.248046875,"type":"series"},{"count":[[7,0]],"inputs":[["-1","(- x 1)","0","(/ 1 x)","x","(* x (- 1 (/ 1 x)))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[196432,9608928]],"method":["egg-herbie"],"outputs":[[]],"time":158.7568359375,"type":"simplify"},{"count":[[3,45]],"inputs":[["(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[5192592,13232256]],"outputs":[["#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 16 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 16 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 16 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)"]],"time":266.362060546875,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1306672,1306672]],"time":3.6689453125,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","done",59.45059506219484,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",59.698026489576904,"binary64"],["#s(literal 1 binary64)","next",59.50558948804756,"binary64"]],"compiler":[[3,3],[7,6],[1,2]],"count":[[20,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,1],"picked":[4,1]}],"memory":[[-6644304,1317104]],"min-error":[[57.92739553574521,"binary64"]],"time":4.1201171875,"type":"prune"},{"inputs":[["#s(literal 1 binary64)"]],"memory":[[1717712,9878608]],"method":["egg-herbie"],"outputs":[["#s(literal 1 binary64)"]],"time":173.534912109375,"type":"simplify"},{"compiler":[[3,4]],"memory":[[3234160,3234160]],"mixsample":[[0.17138671875,"ival-true",0],[0.17529296875,"exact",0],[0.121826171875,"ival-assert",0]],"outcomes":[[4.516845703125,0,"valid",256]],"time":8.06298828125,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28976,28976]],"outputs":[[]],"series":[[0.009765625,"()","x","-inf"],[0.004150390625,"()","x","inf"],[0.029052734375,"()","x","0"]],"time":0.12109375,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[390272,9574912]],"method":["egg-herbie"],"outputs":[[]],"time":153.837890625,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[-4110480,12129312]],"outputs":[[]],"time":209.547119140625,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[43648,43648]],"time":0.18896484375,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) x)","done",59.45059506219484,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",59.698026489576904,"binary64"],["#s(literal 1 binary64)","done",59.50558948804756,"binary64"]],"compiler":[[18,9],[3,3],[7,6],[1,2]],"count":[[3,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"memory":[[1398672,1398672]],"min-error":[[57.92739553574521,"binary64"]],"time":3.10302734375,"type":"prune"},{"accuracy":[57.927395535745205],"baseline":[59.45059506219484],"branch":[["x",57.92739553574524,2,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",57.927395535745205,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[6,2]],"inputs":[["#s(literal 1 binary64)","x","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[3862976,3862976]],"oracle":[61.9614500786206],"outputs":[["(/.f64 #s(literal 1 binary64) x)","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"repr":["binary64"],"time":6.65087890625,"times":[[3.112060546875,"x"],[2.52490234375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[59.450595062194814],"baseline":[59.45059506219484],"branch":[["x",59.45059506219485,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",59.450595062194814,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[5,1]],"inputs":[["#s(literal 1 binary64)","x","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[-4306944,3662032]],"oracle":[61.9614500786206],"outputs":[["(/.f64 #s(literal 1 binary64) x)"]],"repr":["binary64"],"time":6.212158203125,"times":[[2.4150390625,"x"],[2.98388671875,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[59.50558948804753],"baseline":[59.50558948804756],"branch":[["x",59.50558948804753,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",59.50558948804756,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[4,1]],"inputs":[["#s(literal 1 binary64)","x","(-.f64 x #s(literal 1 binary64))","(-.f64 x x)"]],"link":["."],"memory":[[3507824,3507824]],"name":["2sqrt (example 3.1)"],"oracle":[61.9614500786206],"outputs":[["#s(literal 1 binary64)"]],"repr":["binary64"],"time":5.00390625,"times":[[2.158935546875,"x"],[1.907958984375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"bstep":[[0.06884765625,0.0,5.931360647082329e-7]],"compiler":[[3,4],[7,6]],"memory":[[141664,141664]],"method":["left-value"],"time":0.591064453125,"type":"bsearch"},{"inputs":[["(if (<=.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 0 binary64)) (/.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"memory":[[-2827968,15141248]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 0 binary64)) (/.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"time":186.85400390625,"type":"simplify"},{"compiler":[[24,10]],"memory":[[640656,640656]],"stop":[["done",1]],"time":1.593994140625,"type":"soundness"},{"compiler":[[24,10],[24,10],[5,5],[5,5],[7,6],[7,6]],"memory":[[2714800,18318480]],"remove-preprocessing":[[],[],[],[]],"time":39.907958984375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.013916015625,"type":"end"}]