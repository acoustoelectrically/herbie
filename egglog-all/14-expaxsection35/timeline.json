[{"memory":[[12464,12464]],"time":0.046875,"type":"start"},{"compiler":[[12,7]],"memory":[[6186752,6186752]],"method":["search"],"sampling":[[12,{"invalid":0.21951203816570342,"precondition":0.0009763240814208984,"unknown":0.04585362575016916,"valid":0.7336580120027065}],[11,{"invalid":0.20487790228798985,"precondition":0.0009763240814208984,"unknown":0.06048776162788272,"valid":0.7336580120027065}],[10,{"invalid":0.19121937546879053,"precondition":0.0009763240814208984,"unknown":0.08975603338330984,"valid":0.7180482670664787}],[9,{"invalid":0.16390232183039188,"precondition":0.0009763240814208984,"unknown":0.11707308702170849,"valid":0.7180482670664787}],[8,{"invalid":0.1404877044260502,"precondition":0.0009763240814208984,"unknown":0.17170719429850578,"valid":0.6868287771940231}],[7,{"invalid":0.09365846961736679,"precondition":0.0009763240814208984,"unknown":0.21853642910718918,"valid":0.6868287771940231}],[6,{"invalid":0.062438979744911194,"precondition":0.0009763240814208984,"unknown":0.31219489872455597,"valid":0.6243897974491119}],[5,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.37463387846946716,"valid":0.6243897974491119}],[4,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[3,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[2,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}]],"time":40.9130859375,"type":"analyze"},{"bogosity":[{"invalid":0.24929766458496522,"precondition":0.0009763240814208984,"valid":0.7497260113336138}],"memory":[[-5951584,180472784]],"mixsample":[[154.139892578125,"ival-mult",0],[45.4208984375,"ival->",0],[16.567138671875,"exact",0],[134.750732421875,"ival-expm1",0],[7.81787109375,"ival-assert",0]],"outcomes":[[33.81982421875,0,"invalid",328],[687.68115234375,0,"valid",8256]],"time":1154.0380859375,"type":"sample"},{"compiler":[[6,6],[18,8],[18,8]],"confusion":[[119,0,2,135]],"explanations":[["exp.f64","(exp.f64 (*.f64 a x))","sensitivity",1,0,[],[[1]]],["-.f64","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cancellation",120,0,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",118,2,[-9.522347688348464e-284,2.159779270805569e+280],0,false],["(exp.f64 (*.f64 a x))",1,0,false,0,false],["a",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 a x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,121],[0,135]],"maybe-confusion":[[119,0,0,2,0,135]],"memory":[[6386064,31221648]],"mixsample":[[0.727783203125,"ival-true",0],[7.324462890625,"ival-exp",0],[6.5185546875,"ival-mult",0],[5.321533203125,"ival-expm1",0],[0.5029296875,"exact",0],[0.30712890625,"ival-assert",0]],"outcomes":[[41.588134765625,0,"valid",512]],"time":103.744873046875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[6,6]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"memory":[[-8729584,21879088]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 a x))"]],"symmetry":[["(sort a x)"]],"time":417.261962890625,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.119140625,"type":"eval"},{"alts":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","next",26.577254803269792,"binary64"]],"compiler":[[6,6]],"memory":[[310592,310592]],"time":0.742919921875,"type":"prune"},{"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)","a","x","#s(literal 1 binary64)"]],"locations":[["(*.f64 a x)","cost-diff",0],["(exp.f64 (*.f64 a x))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[2625856,10565696]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 a x))","(exp.f64 (*.f64 a x))","(*.f64 a x)","a","x","#s(literal 1 binary64)"]],"time":199.444091796875,"type":"simplify"},{"compiler":[[18,8]],"locations":[["(*.f64 a x)","accuracy",0.0],["(exp.f64 (*.f64 a x))","accuracy",0.03741920288117193],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","accuracy",26.548905632009273]],"memory":[[-2682896,6680528]],"mixsample":[[0.291748046875,"ival-true",0],[3.53076171875,"ival-exp",0],[3.0244140625,"ival-mult",0],[2.85595703125,"ival-expm1",0],[0.2451171875,"exact",0],[0.134765625,"ival-assert",0]],"outcomes":[[21.802490234375,0,"valid",256]],"time":30.037841796875,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[1666496,1666496]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"series":[[0.985107421875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","-inf"],[0.882080078125,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","inf"],[1.302978515625,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","0"],[0.8740234375,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","-inf"],[0.900146484375,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","inf"],[1.0830078125,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","0"]],"time":6.948974609375,"type":"series"},{"count":[[15,0]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"memory":[[-6293104,9720288]],"method":["egg-herbie"],"outputs":[[]],"time":179.340087890625,"type":"simplify"},{"count":[[3,45]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[6803600,14966320]],"outputs":[["(neg.f64 (/.f64 (expm1.f64 (*.f64 a (+.f64 x x))) (+.f64 (neg.f64 (exp.f64 (*.f64 a x))) #s(literal -1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 a (+.f64 x x)))) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))))","(+.f64 (exp.f64 (*.f64 a x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (*.f64 a x)))","(+.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 x x))) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))))","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a x))))","(-.f64 (/.f64 (exp.f64 (*.f64 a (+.f64 x x))) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(*.f64 (+.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))))","(*.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))))","(*.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a x)))","(*.f64 (*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))))","(*.f64 (*.f64 #s(literal 1 binary64) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))))","(*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) (*.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (*.f64 a x))","(exp.f64 (*.f64 (log.f64 (exp.f64 x)) a))","(pow.f64 (exp.f64 a) x)","(pow.f64 (exp.f64 x) a)","(pow.f64 (exp.f64 (+.f64 a a)) (/.f64 x #s(literal 2 binary64)))","(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","(pow.f64 (exp.f64 a) (+.f64 (/.f64 x #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))) (log.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))))","(*.f64 a x)","(*.f64 x a)","(*.f64 a (log.f64 (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 a x) (*.f64 a x)) #s(literal 0 binary64)) (-.f64 (*.f64 a x) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 (*.f64 a x) (*.f64 a x) (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 a x) #s(literal 0 binary64)))))","(log.f64 (exp.f64 (*.f64 a x)))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 #s(literal 0 binary64) #s(literal 2 binary64) (*.f64 a x))","(fma.f64 #s(literal 0 binary64) #s(literal 3 binary64) (*.f64 a x))","(fma.f64 #s(literal 0 binary64) #s(literal 0 binary64) (*.f64 a x))","(fma.f64 #s(literal 3 binary64) #s(literal 0 binary64) (*.f64 a x))"]],"time":402.9521484375,"type":"rewrite"},{"compiler":[[578,146]],"memory":[[-5033344,4456352]],"time":9.870849609375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","next",26.584287168126973,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","done",26.577254803269792,"binary64"],["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","next",0.036161671260518176,"binary64"],["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","next",0.12487338487225029,"binary64"]],"compiler":[[10,9],[6,6],[6,6],[22,16]],"count":[[46,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[45,3],"picked":[1,1]}],"memory":[[2875376,2875376]],"min-error":[[0.029858813241307517,"binary64"]],"time":3.783935546875,"type":"prune"},{"inputs":[["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))","(neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","(expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))","(*.f64 (*.f64 a x) #s(literal 3 binary64))","(*.f64 a x)","a","x","#s(literal 3 binary64)","(+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))","(+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","#s(literal 1 binary64)","(exp.f64 (*.f64 a (+.f64 x x)))","(*.f64 a (+.f64 x x))","(+.f64 x x)","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","#s(literal 1 binary64)","(expm1.f64 (*.f64 a x))","(*.f64 a x)","a","x","(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","(exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))","(*.f64 a (/.f64 x #s(literal 2 binary64)))","a","(/.f64 x #s(literal 2 binary64))","x","#s(literal 2 binary64)","#s(literal 1 binary64)"]],"locations":[["(*.f64 a (/.f64 x #s(literal 2 binary64)))","cost-diff",0],["(exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))","cost-diff",1],["(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","cost-diff",2],["(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","cost-diff",3],["(*.f64 a x)","cost-diff",0],["(expm1.f64 (*.f64 a x))","cost-diff",0],["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","cost-diff",2],["(expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))","cost-diff",0],["(neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","cost-diff",0],["(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))","cost-diff",1],["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","cost-diff",1]],"memory":[[-4986608,11451520]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (-.f64 #s(literal -1 binary64) (+.f64 (exp.f64 (*.f64 a x)) (exp.f64 (*.f64 a (+.f64 x x))))))","(neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","(expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))","(*.f64 (*.f64 a x) #s(literal 3 binary64))","(*.f64 a x)","a","x","#s(literal 3 binary64)","(+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))","(+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","#s(literal 1 binary64)","(exp.f64 (*.f64 a (+.f64 x x)))","(*.f64 a (+.f64 x x))","(+.f64 x x)","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(expm1.f64 (*.f64 a x))","#s(literal 1 binary64)","(expm1.f64 (*.f64 a x))","(*.f64 a x)","a","x","(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","(expm1.f64 (*.f64 a x))","(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","(exp.f64 (*.f64 a x))","(exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))","(sqrt.f64 (exp.f64 (*.f64 a x)))","(*.f64 a (/.f64 x #s(literal 2 binary64)))","(/.f64 (*.f64 a x) #s(literal 2 binary64))","a","(/.f64 x #s(literal 2 binary64))","x","#s(literal 2 binary64)","#s(literal 1 binary64)"]],"time":537.901123046875,"type":"simplify"},{"compiler":[[171,26]],"locations":[["(*.f64 a (/.f64 x #s(literal 2 binary64)))","accuracy",0.0],["(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","accuracy",0.015625],["(exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))","accuracy",0.030079842648988643],["(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","accuracy",26.548905632009273],["(*.f64 a x)","accuracy",0.0],["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","accuracy",0.0],["(expm1.f64 (*.f64 a x))","accuracy",0.036161671260518176],["(exp.f64 (*.f64 a (+.f64 x x)))","accuracy",0.047768823009749536],["(expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))","accuracy",0.052271652153064785],["(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))","accuracy",0.125],["(*.f64 (*.f64 a x) #s(literal 3 binary64))","accuracy",0.25390625]],"memory":[[2322672,34572144]],"mixsample":[[14.849853515625,"adjust",800],[8.72509765625,"ival-div",0],[17.023193359375,"ival-exp",0],[3.38330078125,"ival-pow2",400],[0.259765625,"ival-assert",0],[6.80078125,"ival-sub",0],[7.338134765625,"ival-exp",400],[7.232177734375,"adjust",2000],[10.9365234375,"ival-add",0],[0.62744140625,"ival-mult",800],[0.92822265625,"ival-mult",400],[21.478271484375,"ival-mult",0],[2.199462890625,"ival-pow2",1600],[9.871826171875,"ival-expm1",0],[0.60302734375,"ival-true",0],[37.52734375,"ival-exp",1600],[1.027099609375,"exact",0],[6.64599609375,"ival-neg",0],[5.917236328125,"ival-pow2",0]],"outcomes":[[63.896240234375,1,"valid",77],[115.614990234375,2,"valid",75],[44.496337890625,0,"valid",104]],"time":268.217041015625,"type":"localize"},{"count":[[13,64]],"inputs":[["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))","(neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","(expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(expm1.f64 (*.f64 a x))","(*.f64 a x)","(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","(exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))","(*.f64 a (/.f64 x #s(literal 2 binary64)))","(*.f64 (*.f64 a x) #s(literal 3 binary64))","(exp.f64 (*.f64 a (+.f64 x x)))"]],"memory":[[2563472,10113968]],"outputs":[["(* a x)","(* a (+ x (* a (- (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 3/2 (pow x 2))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))","(* a (+ x (* a (- (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (+ (* 3/2 (pow x 2)) (* a (- (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 3/2 (pow x 3)))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x)))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- x (* 1/9 (+ x (* 2 x))))))))))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))","(* a (+ x (* a (- (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (+ (* 3/2 (pow x 2)) (* a (- (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (+ (* 3/2 (pow x 3)) (* a (- (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/9 (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3)))))))) (+ (* -1/3 (* (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3))))) (* 9/8 (pow x 4))))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 3)) (+ (* 1/9 (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3)))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x)))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- x (* 1/9 (+ x (* 2 x))))))))))) (+ (* 1/3 (* (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3))) (- x (* 1/9 (+ x (* 2 x)))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))))))))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x)))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- x (* 1/9 (+ x (* 2 x))))))))))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))","(* -1 (* a x))","(* a (+ (* -1 x) (* a (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))","(* a (+ (* -1 x) (* a (- (+ (* -3/2 (pow x 2)) (* a (- (* -3/2 (pow x 3)) (+ (* -1/3 (* x (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))))) (* -1/3 (* x (+ x (* 2 x))))))))","(* a (+ (* -1 x) (* a (- (+ (* -3/2 (pow x 2)) (* a (- (+ (* -3/2 (pow x 3)) (* a (- (* -9/8 (pow x 4)) (+ (* -1/3 (* x (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3))))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 3)) (+ (* -1/3 (* x (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x)))))))))))) (+ (* -1/3 (* x (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))))) (* -1/3 (* x (+ x (* 2 x))))))))","(* -3 (* a x))","(* a (- (* -9/2 (* a (pow x 2))) (* 3 x)))","(* a (- (* a (- (* -9/2 (* a (pow x 3))) (* 9/2 (pow x 2)))) (* 3 x)))","(* a (- (* a (- (* a (- (* -27/8 (* a (pow x 4))) (* 9/2 (pow x 3)))) (* 9/2 (pow x 2)))) (* 3 x)))","(* 3 (* a x))","(* a (+ (* 3 x) (* 9/2 (* a (pow x 2)))))","(* a (+ (* 3 x) (* a (+ (* 9/2 (* a (pow x 3))) (* 9/2 (pow x 2))))))","(* a (+ (* 3 x) (* a (+ (* 9/2 (pow x 2)) (* a (+ (* 27/8 (* a (pow x 4))) (* 9/2 (pow x 3))))))))","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (pow x 3)) (* 1/8 (pow x 3)))))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (pow x 3)) (* 1/8 (pow x 3))))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (pow x 3)) (+ (* 1/8 (pow x 3)) (* a (+ (* 1/192 (pow x 4)) (+ (* 1/64 (pow x 4)) (* 1/48 (pow x 4))))))))))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/8 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/48 (* a (pow x 3))) (* 1/8 (pow x 2)))))))","(* 1/2 (* a x))","(+ 1 (* 2 (* a x)))","(+ 1 (* a (+ (* 2 x) (* 2 (* a (pow x 2))))))","(+ 1 (* a (+ (* 2 x) (* a (+ (* 4/3 (* a (pow x 3))) (* 2 (pow x 2)))))))","(- (/ (exp (* 3 (* a x))) (+ 1 (+ (exp (* 2 (* a x))) (exp (* a x))))) (/ 1 (+ 1 (+ (exp (* 2 (* a x))) (exp (* a x))))))","(/ (- 1 (exp (* 3 (* a x)))) (+ 1 (+ (exp (* 2 (* a x))) (exp (* a x)))))","(- 1 (exp (* 3 (* a x))))","(- (exp (* 3 (* a x))) 1)","(- (exp (* a x)) 1)","(pow (exp (* 1/2 (* a x))) 2)","(- (pow (exp (* 1/2 (* a x))) 2) 1)","(exp (* 1/2 (* a x)))","(exp (* 2 (* a x)))","(* x (+ a (* x (- (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 3/2 (pow a 2))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))","(* x (+ a (* x (- (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (+ (* 3/2 (pow a 2)) (* x (- (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 3/2 (pow a 3)))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a)))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- a (* 1/9 (+ a (* 2 a))))))))))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))","(* x (+ a (* x (- (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (+ (* 3/2 (pow a 2)) (* x (- (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (+ (* 3/2 (pow a 3)) (* x (- (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/9 (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3)))))))) (+ (* -1/3 (* (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3))))) (* 9/8 (pow a 4))))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 3)) (+ (* 1/9 (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3)))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a)))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- a (* 1/9 (+ a (* 2 a))))))))))) (+ (* 1/3 (* (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3))) (- a (* 1/9 (+ a (* 2 a)))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))))))))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a)))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- a (* 1/9 (+ a (* 2 a))))))))))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))","(* x (+ (* -1 a) (* x (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))","(* x (+ (* -1 a) (* x (- (+ (* -3/2 (pow a 2)) (* x (- (* -3/2 (pow a 3)) (+ (* -1/3 (* a (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))))) (* -1/3 (* a (+ a (* 2 a))))))))","(* x (+ (* -1 a) (* x (- (+ (* -3/2 (pow a 2)) (* x (- (+ (* -3/2 (pow a 3)) (* x (- (* -9/8 (pow a 4)) (+ (* -1/3 (* a (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3))))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 3)) (+ (* -1/3 (* a (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a)))))))))))) (+ (* -1/3 (* a (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))))) (* -1/3 (* a (+ a (* 2 a))))))))","(* x (- (* -9/2 (* (pow a 2) x)) (* 3 a)))","(* x (- (* x (- (* -9/2 (* (pow a 3) x)) (* 9/2 (pow a 2)))) (* 3 a)))","(* x (- (* x (- (* x (- (* -27/8 (* (pow a 4) x)) (* 9/2 (pow a 3)))) (* 9/2 (pow a 2)))) (* 3 a)))","(* x (+ (* 3 a) (* 9/2 (* (pow a 2) x))))","(* x (+ (* 3 a) (* x (+ (* 9/2 (* (pow a 3) x)) (* 9/2 (pow a 2))))))","(* x (+ (* 3 a) (* x (+ (* 9/2 (pow a 2)) (* x (+ (* 27/8 (* (pow a 4) x)) (* 9/2 (pow a 3))))))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (pow a 3)) (* 1/8 (pow a 3)))))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (pow a 3)) (* 1/8 (pow a 3))))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (pow a 3)) (+ (* 1/8 (pow a 3)) (* x (+ (* 1/192 (pow a 4)) (+ (* 1/64 (pow a 4)) (* 1/48 (pow a 4))))))))))))","(+ 1 (* x (+ (* 1/8 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/48 (* (pow a 3) x)) (* 1/8 (pow a 2)))))))","(+ 1 (* x (+ (* 2 a) (* 2 (* (pow a 2) x)))))","(+ 1 (* x (+ (* 2 a) (* x (+ (* 4/3 (* (pow a 3) x)) (* 2 (pow a 2)))))))"]],"series":[[5.138916015625,"((neg (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x)))))) (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x))))) (neg (- (exp (* (* a x) 3)) 1)) (- (exp (* (* a x) 3)) 1) (* 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (* a x) (pow (exp (* a (/ x 2))) 2) (- (pow (exp (* a (/ x 2))) 2) 1) (exp (* a (/ x 2))) (* a (/ x 2)) (* (* a x) 3) (exp (* a (+ x x))))","x","-inf"],[12.55712890625,"((neg (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x)))))) (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x))))) (neg (- (exp (* (* a x) 3)) 1)) (- (exp (* (* a x) 3)) 1) (* 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (* a x) (pow (exp (* a (/ x 2))) 2) (- (pow (exp (* a (/ x 2))) 2) 1) (exp (* a (/ x 2))) (* a (/ x 2)) (* (* a x) 3) (exp (* a (+ x x))))","x","inf"],[11.31591796875,"((neg (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x)))))) (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x))))) (neg (- (exp (* (* a x) 3)) 1)) (- (exp (* (* a x) 3)) 1) (* 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (* a x) (pow (exp (* a (/ x 2))) 2) (- (pow (exp (* a (/ x 2))) 2) 1) (exp (* a (/ x 2))) (* a (/ x 2)) (* (* a x) 3) (exp (* a (+ x x))))","x","0"],[6.7021484375,"((neg (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x)))))) (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x))))) (neg (- (exp (* (* a x) 3)) 1)) (- (exp (* (* a x) 3)) 1) (* 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (* a x) (pow (exp (* a (/ x 2))) 2) (- (pow (exp (* a (/ x 2))) 2) 1) (exp (* a (/ x 2))) (* a (/ x 2)) (* (* a x) 3) (exp (* a (+ x x))))","a","-inf"],[6.156982421875,"((neg (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x)))))) (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x))))) (neg (- (exp (* (* a x) 3)) 1)) (- (exp (* (* a x) 3)) 1) (* 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (* a x) (pow (exp (* a (/ x 2))) 2) (- (pow (exp (* a (/ x 2))) 2) 1) (exp (* a (/ x 2))) (* a (/ x 2)) (* (* a x) 3) (exp (* a (+ x x))))","a","inf"],[11.128173828125,"((neg (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x)))))) (/ (neg (- (exp (* (* a x) 3)) 1)) (+ (+ (exp (* a x)) 1) (exp (* a (+ x x))))) (neg (- (exp (* (* a x) 3)) 1)) (- (exp (* (* a x) 3)) 1) (* 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (* a x) (pow (exp (* a (/ x 2))) 2) (- (pow (exp (* a (/ x 2))) 2) 1) (exp (* a (/ x 2))) (* a (/ x 2)) (* (* a x) 3) (exp (* a (+ x x))))","a","0"]],"time":56.050048828125,"type":"series"},{"count":[[64,0]],"inputs":[["(* a x)","(* a (+ x (* a (- (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 3/2 (pow x 2))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))","(* a (+ x (* a (- (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (+ (* 3/2 (pow x 2)) (* a (- (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 3/2 (pow x 3)))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x)))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- x (* 1/9 (+ x (* 2 x))))))))))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))","(* a (+ x (* a (- (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (+ (* 3/2 (pow x 2)) (* a (- (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (+ (* 3/2 (pow x 3)) (* a (- (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/3 (* (+ x (* 2 x)) (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/9 (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3)))))))) (+ (* -1/3 (* (+ (* -1/27 (pow (+ x (* 2 x)) 2)) (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (+ (* -1/27 (* (+ x (* 2 x)) (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3))))) (* 9/8 (pow x 4))))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 3)) (+ (* 1/9 (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3)))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x)))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- x (* 1/9 (+ x (* 2 x))))))))))) (+ (* 1/3 (* (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3))) (- x (* 1/9 (+ x (* 2 x)))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))))))))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* 3/2 (pow x 2)) (+ (* 1/9 (+ (* 1/2 (pow x 2)) (* 2 (pow x 2)))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x)))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- x (* 1/9 (+ x (* 2 x))))))))))) (* 1/3 (* (+ x (* 2 x)) (- x (* 1/9 (+ x (* 2 x))))))))))","(* -1 (* a x))","(* a (+ (* -1 x) (* a (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))","(* a (+ (* -1 x) (* a (- (+ (* -3/2 (pow x 2)) (* a (- (* -3/2 (pow x 3)) (+ (* -1/3 (* x (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))))) (* -1/3 (* x (+ x (* 2 x))))))))","(* a (+ (* -1 x) (* a (- (+ (* -3/2 (pow x 2)) (* a (- (+ (* -3/2 (pow x 3)) (* a (- (* -9/8 (pow x 4)) (+ (* -1/3 (* x (+ (* 1/6 (pow x 3)) (* 4/3 (pow x 3))))) (+ (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 3)) (+ (* -1/3 (* x (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))))) (* 1/3 (* (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x)))))))))))) (+ (* -1/3 (* x (+ (* 1/2 (pow x 2)) (* 2 (pow x 2))))) (* 1/3 (* (+ x (* 2 x)) (- (* -3/2 (pow x 2)) (* -1/3 (* x (+ x (* 2 x))))))))))) (* -1/3 (* x (+ x (* 2 x))))))))","(* -3 (* a x))","(* a (- (* -9/2 (* a (pow x 2))) (* 3 x)))","(* a (- (* a (- (* -9/2 (* a (pow x 3))) (* 9/2 (pow x 2)))) (* 3 x)))","(* a (- (* a (- (* a (- (* -27/8 (* a (pow x 4))) (* 9/2 (pow x 3)))) (* 9/2 (pow x 2)))) (* 3 x)))","(* 3 (* a x))","(* a (+ (* 3 x) (* 9/2 (* a (pow x 2)))))","(* a (+ (* 3 x) (* a (+ (* 9/2 (* a (pow x 3))) (* 9/2 (pow x 2))))))","(* a (+ (* 3 x) (* a (+ (* 9/2 (pow x 2)) (* a (+ (* 27/8 (* a (pow x 4))) (* 9/2 (pow x 3))))))))","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (pow x 3)) (* 1/8 (pow x 3)))))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (pow x 3)) (* 1/8 (pow x 3))))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (pow x 3)) (+ (* 1/8 (pow x 3)) (* a (+ (* 1/192 (pow x 4)) (+ (* 1/64 (pow x 4)) (* 1/48 (pow x 4))))))))))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/8 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/48 (* a (pow x 3))) (* 1/8 (pow x 2)))))))","(* 1/2 (* a x))","(+ 1 (* 2 (* a x)))","(+ 1 (* a (+ (* 2 x) (* 2 (* a (pow x 2))))))","(+ 1 (* a (+ (* 2 x) (* a (+ (* 4/3 (* a (pow x 3))) (* 2 (pow x 2)))))))","(- (/ (exp (* 3 (* a x))) (+ 1 (+ (exp (* 2 (* a x))) (exp (* a x))))) (/ 1 (+ 1 (+ (exp (* 2 (* a x))) (exp (* a x))))))","(/ (- 1 (exp (* 3 (* a x)))) (+ 1 (+ (exp (* 2 (* a x))) (exp (* a x)))))","(- 1 (exp (* 3 (* a x))))","(- (exp (* 3 (* a x))) 1)","(- (exp (* a x)) 1)","(pow (exp (* 1/2 (* a x))) 2)","(- (pow (exp (* 1/2 (* a x))) 2) 1)","(exp (* 1/2 (* a x)))","(exp (* 2 (* a x)))","(* x (+ a (* x (- (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 3/2 (pow a 2))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))","(* x (+ a (* x (- (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (+ (* 3/2 (pow a 2)) (* x (- (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 3/2 (pow a 3)))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a)))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- a (* 1/9 (+ a (* 2 a))))))))))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))","(* x (+ a (* x (- (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (+ (* 3/2 (pow a 2)) (* x (- (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (+ (* 3/2 (pow a 3)) (* x (- (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/3 (* (+ a (* 2 a)) (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/9 (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3)))))))) (+ (* -1/3 (* (+ (* -1/27 (pow (+ a (* 2 a)) 2)) (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (+ (* -1/27 (* (+ a (* 2 a)) (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3))))) (* 9/8 (pow a 4))))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 3)) (+ (* 1/9 (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3)))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a)))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- a (* 1/9 (+ a (* 2 a))))))))))) (+ (* 1/3 (* (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3))) (- a (* 1/9 (+ a (* 2 a)))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))))))))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* 3/2 (pow a 2)) (+ (* 1/9 (+ (* 1/2 (pow a 2)) (* 2 (pow a 2)))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a)))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- a (* 1/9 (+ a (* 2 a))))))))))) (* 1/3 (* (+ a (* 2 a)) (- a (* 1/9 (+ a (* 2 a))))))))))","(* x (+ (* -1 a) (* x (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))","(* x (+ (* -1 a) (* x (- (+ (* -3/2 (pow a 2)) (* x (- (* -3/2 (pow a 3)) (+ (* -1/3 (* a (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))))) (* -1/3 (* a (+ a (* 2 a))))))))","(* x (+ (* -1 a) (* x (- (+ (* -3/2 (pow a 2)) (* x (- (+ (* -3/2 (pow a 3)) (* x (- (* -9/8 (pow a 4)) (+ (* -1/3 (* a (+ (* 1/6 (pow a 3)) (* 4/3 (pow a 3))))) (+ (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 3)) (+ (* -1/3 (* a (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))))) (* 1/3 (* (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a)))))))))))) (+ (* -1/3 (* a (+ (* 1/2 (pow a 2)) (* 2 (pow a 2))))) (* 1/3 (* (+ a (* 2 a)) (- (* -3/2 (pow a 2)) (* -1/3 (* a (+ a (* 2 a))))))))))) (* -1/3 (* a (+ a (* 2 a))))))))","(* x (- (* -9/2 (* (pow a 2) x)) (* 3 a)))","(* x (- (* x (- (* -9/2 (* (pow a 3) x)) (* 9/2 (pow a 2)))) (* 3 a)))","(* x (- (* x (- (* x (- (* -27/8 (* (pow a 4) x)) (* 9/2 (pow a 3)))) (* 9/2 (pow a 2)))) (* 3 a)))","(* x (+ (* 3 a) (* 9/2 (* (pow a 2) x))))","(* x (+ (* 3 a) (* x (+ (* 9/2 (* (pow a 3) x)) (* 9/2 (pow a 2))))))","(* x (+ (* 3 a) (* x (+ (* 9/2 (pow a 2)) (* x (+ (* 27/8 (* (pow a 4) x)) (* 9/2 (pow a 3))))))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (pow a 3)) (* 1/8 (pow a 3)))))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (pow a 3)) (* 1/8 (pow a 3))))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (pow a 3)) (+ (* 1/8 (pow a 3)) (* x (+ (* 1/192 (pow a 4)) (+ (* 1/64 (pow a 4)) (* 1/48 (pow a 4))))))))))))","(+ 1 (* x (+ (* 1/8 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/48 (* (pow a 3) x)) (* 1/8 (pow a 2)))))))","(+ 1 (* x (+ (* 2 a) (* 2 (* (pow a 2) x)))))","(+ 1 (* x (+ (* 2 a) (* x (+ (* 4/3 (* (pow a 3) x)) (* 2 (pow a 2)))))))"]],"memory":[[570672,10509264]],"method":["egg-herbie"],"outputs":[[]],"time":217.884765625,"type":"simplify"},{"count":[[13,195]],"inputs":[["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x)))))","(neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","(expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(expm1.f64 (*.f64 a x))","(*.f64 a x)","(pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64))","(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","(exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64))))","(*.f64 a (/.f64 x #s(literal 2 binary64)))","(*.f64 (*.f64 a x) #s(literal 3 binary64))","(exp.f64 (*.f64 a (+.f64 x x)))"]],"memory":[[39968,15905024]],"outputs":[["#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 3 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -3 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)"]],"time":638.071044921875,"type":"rewrite"},{"compiler":[[15,17]],"memory":[[1370400,1370400]],"time":3.156005859375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","done",26.584287168126973,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","done",26.577254803269792,"binary64"],["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","done",0.036161671260518176,"binary64"],["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","done",0.12487338487225029,"binary64"],["#s(literal 54 binary64)","next",62.18482516777927,"binary64"],["#s(literal 1 binary64)","next",62.17488616758841,"binary64"],["#s(literal 0 binary64)","next",51.851759667815244,"binary64"],["#s(literal -1 binary64)","next",38.03108721312429,"binary64"]],"compiler":[[10,9],[6,6],[6,6],[22,16],[1,3],[1,3],[1,3],[1,3]],"count":[[19,8]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,4],"picked":[3,3]}],"memory":[[2188976,2188976]],"min-error":[[0.029858813241307517,"binary64"]],"time":7.677001953125,"type":"prune"},{"inputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 54 binary64)"]],"memory":[[-7609328,9915632]],"method":["egg-herbie"],"outputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 54 binary64)"]],"time":229.608154296875,"type":"simplify"},{"compiler":[[6,8]],"memory":[[4704144,4704144]],"mixsample":[[0.829345703125,"ival-true",0],[1.08740234375,"exact",0],[0.695556640625,"ival-assert",0]],"outcomes":[[21.521728515625,0,"valid",256]],"time":35.949951171875,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[51584,51584]],"outputs":[[]],"series":[[0.0048828125,"()","x","-inf"],[0.005126953125,"()","x","inf"],[0.005859375,"()","x","0"],[0.0068359375,"()","a","-inf"],[0.028076171875,"()","a","inf"],[0.052001953125,"()","a","0"]],"time":0.2958984375,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[1933392,9959232]],"method":["egg-herbie"],"outputs":[[]],"time":362.150146484375,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[-4397328,11884128]],"outputs":[[]],"time":370.072021484375,"type":"rewrite"},{"compiler":[[0,2]],"memory":[[51456,51456]],"time":0.219970703125,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","done",26.584287168126973,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","done",26.577254803269792,"binary64"],["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","done",0.036161671260518176,"binary64"],["(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))","done",0.12487338487225029,"binary64"],["#s(literal 54 binary64)","done",62.18482516777927,"binary64"],["#s(literal 1 binary64)","done",62.17488616758841,"binary64"],["#s(literal 0 binary64)","done",51.851759667815244,"binary64"],["#s(literal -1 binary64)","done",38.03108721312429,"binary64"]],"compiler":[[48,28],[10,9],[6,6],[6,6],[22,16],[1,3],[1,3],[1,3],[1,3]],"count":[[8,8]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[0,0],"picked":[4,4]}],"memory":[[2630448,2630448]],"min-error":[[0.029858813241307517,"binary64"]],"time":10.100830078125,"type":"prune"},{"accuracy":[0.03616167126051817],"baseline":[0.036161671260518176],"branch":[["a",0.036161671260518176,1,"binary64"],["x",0.03616167126051817,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",0.03616167126051817,1,"binary64"],["(exp.f64 (*.f64 a x))",0.03616167126051817,1,"binary64"],["(*.f64 a x)",0.03616167126051817,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[8,1]],"inputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 54 binary64)","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(-.f64 (pow.f64 (exp.f64 (*.f64 a (/.f64 x #s(literal 2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64)) (exp.f64 (*.f64 a (+.f64 x x))))))"]],"memory":[[633392,9926304]],"oracle":[62.67053373676271],"outputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))"]],"repr":["binary64"],"time":28.485107421875,"times":[[4.916015625,"a"],[4.89990234375,"x"],[5.095947265625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[6.89306640625,"(exp.f64 (*.f64 a x))"],[4.73388671875,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[26.57725480326979],"baseline":[26.577254803269792],"branch":[["a",26.5772548032698,1,"binary64"],["x",26.57725480326979,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",26.577254803269792,1,"binary64"],["(exp.f64 (*.f64 a x))",26.577254803269792,1,"binary64"],["(*.f64 a x)",26.57725480326979,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[5,1]],"inputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 54 binary64)","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"memory":[[416384,8754688]],"oracle":[62.67053373676271],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"repr":["binary64"],"time":22.705078125,"times":[[4.672119140625,"a"],[4.94189453125,"x"],[3.72998046875,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[3.279052734375,"(exp.f64 (*.f64 a x))"],[4.01318359375,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[27.854968964594974],"baseline":[38.03108721312429],"branch":[["a",30.765643390717145,2,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",28.085259811577664,2,"binary64"],["(exp.f64 (*.f64 a x))",28.085259811577664,2,"binary64"],["x",32.33555773233919,2,"binary64"],["(*.f64 a x)",27.854968964594974,2,"binary64"]],"compiler":[[1,2],[6,6],[4,4],[1,2],[3,3]],"count":[[4,2]],"inputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 54 binary64)"]],"memory":[[-47328,8239360]],"oracle":[62.67053373676271],"outputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)"]],"repr":["binary64"],"time":23.097900390625,"times":[[4.14990234375,"a"],[3.635009765625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[3.341064453125,"(exp.f64 (*.f64 a x))"],[4.211181640625,"x"],[5.552001953125,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[38.03108721312429],"baseline":[38.03108721312429],"branch":[["x",38.0310872131243,1,"binary64"],["a",38.031087213124316,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",38.03108721312429,1,"binary64"],["(exp.f64 (*.f64 a x))",38.03108721312429,1,"binary64"],["(*.f64 a x)",38.03108721312433,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[1,1]],"inputs":[["#s(literal -1 binary64)"]],"link":["."],"memory":[[-1655472,6686384]],"name":["expax (section 3.5)"],"oracle":[38.03108721312429],"outputs":[["#s(literal -1 binary64)"]],"repr":["binary64"],"time":14.56591796875,"times":[[2.970947265625,"x"],[2.5380859375,"a"],[2.589111328125,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[2.616943359375,"(exp.f64 (*.f64 a x))"],[2.001953125,"(*.f64 a x)"]],"type":"regimes"},{"bstep":[[22.552001953125,-1.643819991608034e-154,-4.297159930818741e-164]],"compiler":[[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[6,6],[3,3]],"memory":[[3019072,3019072]],"method":["binary-search"],"mixsample":[[0.33984375,"ival-true",0],[2.22607421875,"ival-expm1",0],[0.135986328125,"ival-assert",0]],"outcomes":[[10.12890625,0,"valid",144]],"stop":[["narrow-enough",1]],"time":25.58203125,"type":"bsearch"},{"inputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(if (<=.f64 (*.f64 a x) #s(literal -3381470332640101/30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))","#s(literal -1 binary64)"]],"memory":[[-1022496,15872512]],"method":["egg-herbie"],"outputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(+.f64 (exp.f64 (*.f64 a x)) #s(literal -1 binary64))","(if (<=.f64 (*.f64 a x) #s(literal -3381470332640101/30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))","#s(literal -1 binary64)"]],"time":329.033935546875,"type":"simplify"},{"compiler":[[19,11]],"memory":[[851424,851424]],"stop":[["done",1]],"time":3.20703125,"type":"soundness"},{"compiler":[[19,11],[19,11],[4,4],[4,4],[6,6],[6,6],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4]],"memory":[[-1695088,22727792]],"remove-preprocessing":[["(sort a x)"],[],[],["(sort a x)"],["(sort a x)"]],"time":72.087158203125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.017822265625,"type":"end"}]