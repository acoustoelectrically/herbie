[{"memory":[[14864,14864]],"time":0.030029296875,"type":"start"},{"compiler":[[15,11]],"memory":[[555408,555408]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":3.959452955618883e-5,"valid":0.08105000200151859}],[11,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":7.918905911237766e-5,"valid":0.08101040747196239}],[10,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.00015837811822475538,"valid":0.08093121841285002}],[9,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0003167562364495108,"valid":0.08077284029462527}],[8,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0006335124728990216,"valid":0.08045608405817575}],[7,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0012670249457980432,"valid":0.07982257158527672}],[6,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.0025340498915960865,"valid":0.07855554663947868}],[5,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.005068099783192173,"valid":0.0760214967478826}],[4,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.010136199566384346,"valid":0.07095339696469043}],[3,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.020272399132768692,"valid":0.06081719739830608}],[2,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.040544798265537384,"valid":0.040544798265537384}],[1,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.08108959653107477,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.9189104034689253,"unknown":0.08108959653107477,"valid":0.0}]],"time":2.96484375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.9189104034689253,"valid":0.08108959653107478}],"memory":[[20186480,362883744]],"mixsample":[[1.530517578125,"ival-atan",1600],[365.440185546875,"adjust",800],[84.0859375,"ival-add",0],[0.28662109375,"ival-sub",800],[228.736083984375,"ival-atan",0],[5.29931640625,"ival-assert",0],[120.384521484375,"ival-sub",0],[42.45751953125,"ival-add",400],[23.7138671875,"ival-and",0],[0.124267578125,"ival-sub",400],[187.56103515625,"const",0],[38.691650390625,"ival->",0],[468.890869140625,"ival-atan",400],[12.430908203125,"exact",0],[13.136474609375,"adjust",2000],[27.9013671875,"ival-<",0]],"outcomes":[[1809.000732421875,1,"valid",7474],[119.61669921875,2,"valid",374],[53.9521484375,0,"valid",408]],"time":2454.947998046875,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[254,0,0,2]],"explanations":[["-.f64","(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","cancellation",254,0,[],[[]]]],"fperrors":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",254,0,false,0,false],["N",0,0,false,0,false],["(+.f64 N #s(literal 1 binary64))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(atan.f64 N)",0,0,false,0,false],["(atan.f64 (+.f64 N #s(literal 1 binary64)))",0,0,false,0,false]],"freqs":[[1,254],[0,2]],"maybe-confusion":[[254,0,0,0,0,2]],"memory":[[-8082944,44298384]],"mixsample":[[14.294921875,"adjust",800],[3.671875,"ival-add",0],[10.972900390625,"ival-atan",0],[0.247314453125,"ival-assert",0],[5.733642578125,"ival-sub",0],[1.75341796875,"ival-add",400],[0.5869140625,"ival-true",0],[0.01416015625,"ival-sub",400],[21.415771484375,"ival-atan",400],[0.386962890625,"exact",0],[0.64794921875,"adjust",2000]],"outcomes":[[73.608154296875,1,"valid",462],[5.434326171875,2,"valid",26],[2.3486328125,0,"valid",24]],"time":137.629150390625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"memory":[[3779152,20305216]],"method":["egg-herbie"],"outputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"symmetry":[[]],"time":306.098876953125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.0830078125,"type":"eval"},{"alts":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","next",58.351724565171295,"binary64"]],"compiler":[[7,6]],"memory":[[311456,311456]],"time":0.60791015625,"type":"prune"},{"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(atan.f64 N)"]],"locations":[["(atan.f64 N)","cost-diff",0],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(atan.f64 (+.f64 N #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","cost-diff",0]],"memory":[[1753520,9857264]],"method":["egg-herbie"],"outputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(atan.f64 N)"]],"time":160.320068359375,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(atan.f64 (+.f64 N #s(literal 1 binary64)))","accuracy",0.0],["(atan.f64 N)","accuracy",0.0],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","accuracy",58.351724565171295]],"memory":[[-16299616,11046672]],"mixsample":[[7.60009765625,"adjust",800],[7.1435546875,"ival-add",0],[5.579833984375,"ival-atan",0],[0.138671875,"ival-assert",0],[3.113525390625,"ival-sub",0],[1.007568359375,"ival-add",400],[0.316650390625,"ival-true",0],[0.005859375,"ival-sub",400],[11.39453125,"ival-atan",400],[0.228271484375,"exact",0],[0.325927734375,"adjust",2000]],"outcomes":[[44.72021484375,1,"valid",231],[3.010986328125,2,"valid",13],[1.08056640625,0,"valid",12]],"time":59.1259765625,"type":"localize"},{"count":[[4,9]],"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","(atan.f64 N)"]],"memory":[[-7610800,526272]],"outputs":[["(- (atan (+ 1 N)) (atan N))","(atan (+ 1 N))","1","(+ 1 N)","(atan N)","N","(* N (+ 1 (/ 1 N)))","(- (atan (- 1 (* -1 N))) (atan N))","(atan (- 1 (* -1 N)))"]],"series":[[0.51904296875,"((- (atan (+ N 1)) (atan N)) (atan (+ N 1)) (+ N 1) (atan N))","N","-inf"],[1.43798828125,"((- (atan (+ N 1)) (atan N)) (atan (+ N 1)) (+ N 1) (atan N))","N","inf"],[0.3759765625,"((- (atan (+ N 1)) (atan N)) (atan (+ N 1)) (+ N 1) (atan N))","N","0"]],"time":2.797119140625,"type":"series"},{"count":[[9,0]],"inputs":[["(- (atan (+ 1 N)) (atan N))","(atan (+ 1 N))","1","(+ 1 N)","(atan N)","N","(* N (+ 1 (/ 1 N)))","(- (atan (- 1 (* -1 N))) (atan N))","(atan (- 1 (* -1 N)))"]],"memory":[[1576592,9805872]],"method":["egg-herbie"],"outputs":[[]],"time":162.8349609375,"type":"simplify"},{"count":[[4,32]],"inputs":[["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","(atan.f64 N)"]],"memory":[[-1929328,15322928]],"outputs":[["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(neg.f64 (/.f64 (*.f64 (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(+.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (neg.f64 (atan.f64 N)))","(+.f64 (neg.f64 (atan.f64 N)) (atan.f64 (+.f64 N #s(literal 1 binary64))))","(+.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (neg.f64 (/.f64 (pow.f64 (atan.f64 N) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(+.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (atan.f64 N) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(-.f64 (+.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 0 binary64)) (atan.f64 N))","(-.f64 #s(literal 0 binary64) (-.f64 (atan.f64 N) (atan.f64 (+.f64 N #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))) (/.f64 (pow.f64 (atan.f64 N) #s(literal 2 binary64)) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(-.f64 (/.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 (atan.f64 N) #s(literal 3 binary64)) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(neg.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) N)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (+.f64 N #s(literal -1 binary64))))","(neg.f64 (/.f64 (fma.f64 (*.f64 N N) N #s(literal 1 binary64)) (neg.f64 (fma.f64 N (+.f64 N #s(literal -1 binary64)) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 N N) N #s(literal 1 binary64))) (fma.f64 N (+.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","(+.f64 (/.f64 (*.f64 N N) (+.f64 N #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N))))","(-.f64 (/.f64 (*.f64 N N) (+.f64 N #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(*.f64 (+.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 N #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)))","(*.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64))) (+.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) N)) (fma.f64 N N #s(literal -1 binary64)))","(*.f64 (+.f64 N #s(literal 1 binary64)) (/.f64 (+.f64 N #s(literal -1 binary64)) (+.f64 N #s(literal -1 binary64))))","(atan.f64 N)"]],"time":350.531005859375,"type":"rewrite"},{"compiler":[[639,117]],"memory":[[3298112,3298112]],"time":4.715087890625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","next",0.3646087890737681,"binary64"],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","next",0.265625,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","next",58.34114472393879,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","next",0.33431625976844204,"binary64"]],"compiler":[[36,12],[10,6],[35,19],[36,13]],"count":[[33,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[32,4],"picked":[1,0]}],"memory":[[2277552,2277552]],"min-error":[[0.22265625,"binary64"]],"time":3.60595703125,"type":"prune"},{"inputs":[["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))","(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","#s(literal 3 binary64)","(pow.f64 (atan.f64 N) #s(literal 3 binary64))","(atan.f64 N)","(neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))","(fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","#s(literal 1 binary64)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","N","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"locations":[["(+.f64 (+.f64 N #s(literal 1 binary64)) N)","cost-diff",0],["(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","cost-diff",0],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",0],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","cost-diff",28],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","cost-diff",0],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",2],["(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))","cost-diff",0],["(-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","cost-diff",1],["(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","cost-diff",1],["(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","cost-diff",0],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","cost-diff",0],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","cost-diff",2],["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","cost-diff",26]],"memory":[[-1761504,14466288]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (atan.f64 N) #s(literal 3 binary64)) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))","(-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))","(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))","(atan.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","#s(literal 3 binary64)","(pow.f64 (atan.f64 N) #s(literal 3 binary64))","(atan.f64 N)","(neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))","(fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","#s(literal 1 binary64)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","N","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(-.f64 #s(literal 1 binary64) (fma.f64 N N N))","(fma.f64 N N N)","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"time":416.716064453125,"type":"simplify"},{"compiler":[[517,33]],"locations":[["(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))","accuracy",0.03515625],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.265625],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.3125],["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","accuracy",0.4186325195368841],["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.0],["(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","accuracy",0.00390625],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.265625],["(fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))","accuracy",0.8984375],["(pow.f64 (atan.f64 N) #s(literal 3 binary64))","accuracy",0.9613075683790943],["(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))","accuracy",0.9691200683790943],["(-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))","accuracy",58.18619445926162],["(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","accuracy",0.01171875],["(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","accuracy",0.265625],["(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","accuracy",0.3125],["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","accuracy",0.33203125]],"memory":[[3799312,60239296]],"mixsample":[[0.06298828125,"ival-atan",1600],[11.431884765625,"ival-div",0],[23.709228515625,"adjust",800],[0.022216796875,"ival-pow2",400],[0.015869140625,"ival-div",400],[0.010986328125,"ival-pow2",800],[0.04296875,"ival-pow",1600],[5.527099609375,"ival-atan",0],[0.136962890625,"ival-assert",0],[0.008056640625,"ival-neg",800],[5.56689453125,"ival-sub",0],[0.071044921875,"ival-atan2",800],[0.122802734375,"ival-atan2",400],[0.01123046875,"ival-sub",400],[0.019287109375,"ival-neg",400],[11.029052734375,"ival-pow",0],[0.364990234375,"adjust",2000],[0.0068359375,"ival-mult",800],[12.282470703125,"ival-add",0],[0.011962890625,"ival-mult",400],[0.010009765625,"ival-sub",800],[19.317626953125,"ival-mult",0],[0.009033203125,"ival-div",800],[9.794189453125,"ival-atan2",0],[1.439453125,"ival-add",400],[0.31494140625,"ival-true",0],[11.425537109375,"ival-atan",400],[9.353515625,"ival-pow",400],[0.01611328125,"ival-add",800],[0.58642578125,"exact",0],[5.8896484375,"ival-pow2",0],[10.3291015625,"ival-neg",0]],"outcomes":[[173.36669921875,1,"valid",234],[4.464111328125,2,"valid",4],[7.079833984375,0,"valid",18]],"time":232.52197265625,"type":"localize"},{"count":[[17,35]],"inputs":[["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))","(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(pow.f64 (atan.f64 N) #s(literal 3 binary64))","(fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"memory":[[-1096624,6297808]],"outputs":[["(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(atan2 1 (+ 1 (* N (+ 1 N))))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(/ (- (pow (atan (+ 1 N)) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))) (pow (atan (+ 1 N)) 2)))","(* -1 (/ (- (pow (atan (+ 1 N)) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))) (pow (atan (+ 1 N)) 2))))","(- (pow (atan (+ 1 N)) 3) (pow (atan N) 3))","(pow (atan (+ 1 N)) 3)","1","(+ 1 N)","(+ 1 (* N (+ 1 N)))","(+ 1 (* 2 N))","(pow (atan N) 3)","(+ (* (atan N) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))) (pow (atan (+ 1 N)) 2))","(/ 1 (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(pow N 2)","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","N","(* N (+ 1 (/ 1 N)))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))","(/ (- (pow (atan (- 1 (* -1 N))) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))) (pow (atan (- 1 (* -1 N))) 2)))","(* -1 (/ (- (pow (atan (- 1 (* -1 N))) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))) (pow (atan (- 1 (* -1 N))) 2))))","(- (pow (atan (- 1 (* -1 N))) 3) (pow (atan N) 3))","(pow (atan (- 1 (* -1 N))) 3)","(+ (* (atan N) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))) (pow (atan (- 1 (* -1 N))) 2))","(/ 1 (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))"]],"series":[[7.169921875,"((/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (neg (/ (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (neg (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2))))) (/ (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (neg (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2)))) (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (pow (atan (+ N 1)) 3) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (+ N 1) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (+ (+ N 1) N) (pow (atan N) 3) (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2)) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))","N","-inf"],[10.403076171875,"((/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (neg (/ (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (neg (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2))))) (/ (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (neg (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2)))) (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (pow (atan (+ N 1)) 3) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (+ N 1) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (+ (+ N 1) N) (pow (atan N) 3) (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2)) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))","N","inf"],[6.842041015625,"((/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (neg (/ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (neg (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))) (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (neg (/ (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (neg (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2))))) (/ (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (neg (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2)))) (- (pow (atan (+ N 1)) 3) (pow (atan N) 3)) (pow (atan (+ N 1)) 3) (* 1 (atan2 1 (+ (* (+ N 1) N) 1))) (atan2 1 (+ (* (+ N 1) N) 1)) (+ (* (+ N 1) N) 1) (+ N 1) (* (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan2 1 (+ (* (+ N 1) N) 1))) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))))) (+ (+ N 1) N) (pow (atan N) 3) (+ (* (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N))) (atan N)) (pow (atan (+ N 1)) 2)) (/ 1 (atan2 (+ (+ N 1) N) (- 1 (+ (* N N) N)))))","N","0"]],"time":26.345947265625,"type":"series"},{"count":[[35,0]],"inputs":[["(* -1 (atan2 1 (+ 1 (* N (+ 1 N)))))","(atan2 1 (+ 1 (* N (+ 1 N))))","(* (atan2 1 (+ 1 (* N (+ 1 N)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))","(/ (- (pow (atan (+ 1 N)) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))) (pow (atan (+ 1 N)) 2)))","(* -1 (/ (- (pow (atan (+ 1 N)) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))) (pow (atan (+ 1 N)) 2))))","(- (pow (atan (+ 1 N)) 3) (pow (atan N) 3))","(pow (atan (+ 1 N)) 3)","1","(+ 1 N)","(+ 1 (* N (+ 1 N)))","(+ 1 (* 2 N))","(pow (atan N) 3)","(+ (* (atan N) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2))))) (pow (atan (+ 1 N)) 2))","(/ 1 (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(* -1 (atan2 1 (+ 1 (+ N (pow N 2)))))","(atan2 1 (+ 1 (+ N (pow N 2))))","(* (atan2 1 (+ 1 (+ N (pow N 2)))) (atan2 (+ 1 (* 2 N)) (- 1 (+ N (pow N 2)))))","(pow N 2)","(* (pow N 2) (+ 1 (/ 1 N)))","(* (pow N 2) (+ 1 (+ (/ 1 N) (/ 1 (pow N 2)))))","N","(* N (+ 1 (/ 1 N)))","(* 2 N)","(* N (+ 2 (/ 1 N)))","(* -1 (atan2 1 (+ 1 (* N (- 1 (* -1 N))))))","(atan2 1 (+ 1 (* N (- 1 (* -1 N)))))","(* (atan2 1 (+ 1 (* N (- 1 (* -1 N))))) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))","(atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))","(/ (- (pow (atan (- 1 (* -1 N))) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))) (pow (atan (- 1 (* -1 N))) 2)))","(* -1 (/ (- (pow (atan (- 1 (* -1 N))) 3) (pow (atan N) 3)) (+ (* (atan N) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))) (pow (atan (- 1 (* -1 N))) 2))))","(- (pow (atan (- 1 (* -1 N))) 3) (pow (atan N) 3))","(pow (atan (- 1 (* -1 N))) 3)","(+ (* (atan N) (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2)))) (pow (atan (- 1 (* -1 N))) 2))","(/ 1 (atan2 (- 1 (* -2 N)) (- (+ 1 (* -1 N)) (pow N 2))))"]],"memory":[[2026112,10055552]],"method":["egg-herbie"],"outputs":[[]],"time":192.81591796875,"type":"simplify"},{"count":[[17,255]],"inputs":[["(/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))","(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64)))","(pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","(fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))","(+.f64 N #s(literal 1 binary64))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(+.f64 (+.f64 N #s(literal 1 binary64)) N)","(pow.f64 (atan.f64 N) #s(literal 3 binary64))","(fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))"]],"memory":[[-2087520,17799824]],"outputs":[["#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 27 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 8 binary64)","#s(literal 54 binary64)","#s(literal 30 binary64)"]],"time":430.069091796875,"type":"rewrite"},{"compiler":[[30,31]],"memory":[[1443840,1443840]],"time":3.050048828125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","done",0.3646087890737681,"binary64"],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","done",0.265625,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","done",58.34114472393879,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","done",0.33431625976844204,"binary64"],["(neg.f64 #s(literal 0 binary64))","next",61.37119359993207,"binary64"],["(neg.f64 #s(literal -1 binary64))","next",59.955389056777676,"binary64"]],"compiler":[[36,12],[10,6],[35,19],[36,13],[2,3],[2,3]],"count":[[19,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[15,2],"picked":[4,4]}],"memory":[[-6253456,1993136]],"min-error":[[0.22265625,"binary64"]],"time":6.748779296875,"type":"prune"},{"inputs":[["(neg.f64 #s(literal -1 binary64))","#s(literal -1 binary64)","(neg.f64 #s(literal 0 binary64))","#s(literal 0 binary64)"]],"locations":[["(neg.f64 #s(literal 0 binary64))","cost-diff",1],["(neg.f64 #s(literal -1 binary64))","cost-diff",1]],"memory":[[1916016,10125632]],"method":["egg-herbie"],"outputs":[["(neg.f64 #s(literal -1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","(neg.f64 #s(literal 0 binary64))","#s(literal 0 binary64)","#s(literal 0 binary64)"]],"time":204.672119140625,"type":"simplify"},{"compiler":[[8,7]],"locations":[["(neg.f64 #s(literal 0 binary64))","accuracy",0.0],["(neg.f64 #s(literal -1 binary64))","accuracy",0.0]],"memory":[[5373648,5373648]],"mixsample":[[0.20361328125,"ival-true",0],[0.3056640625,"exact",0],[0.152099609375,"ival-assert",0],[2.6796875,"ival-neg",0]],"outcomes":[[8.898681640625,0,"valid",256]],"time":16.2900390625,"type":"localize"},{"count":[[2,0]],"inputs":[["(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))"]],"memory":[[49952,49952]],"outputs":[[]],"series":[[0.012939453125,"((neg -1) (neg 0))","N","-inf"],[0.01513671875,"((neg -1) (neg 0))","N","inf"],[0.058837890625,"((neg -1) (neg 0))","N","0"]],"time":0.278076171875,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-7335904,9669968]],"method":["egg-herbie"],"outputs":[[]],"time":152.323974609375,"type":"simplify"},{"count":[[2,30]],"inputs":[["(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))"]],"memory":[[4423616,12622192]],"outputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal -8 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","(neg.f64 #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal -8 binary64)","#s(literal -2 binary64)","#s(literal 1 binary64)","(neg.f64 #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(literal -1 binary64))"]],"time":219.768798828125,"type":"rewrite"},{"compiler":[[24,16]],"memory":[[1348000,1348000]],"time":3.35302734375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","done",0.3646087890737681,"binary64"],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","done",0.265625,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","done",58.34114472393879,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","done",0.33431625976844204,"binary64"],["#s(literal 1 binary64)","next",59.955389056777676,"binary64"],["#s(literal 0 binary64)","next",61.37119359993207,"binary64"]],"compiler":[[36,12],[10,6],[35,19],[36,13],[1,2],[1,2]],"count":[[21,6]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[15,2],"picked":[2,0]}],"memory":[[2007264,2007264]],"min-error":[[0.22265625,"binary64"]],"time":7.123046875,"type":"prune"},{"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"memory":[[-7908032,9599200]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"time":199.1279296875,"type":"simplify"},{"compiler":[[4,5]],"memory":[[3656528,3656528]],"mixsample":[[0.32421875,"ival-true",0],[0.59326171875,"exact",0],[0.1884765625,"ival-assert",0]],"outcomes":[[9.04345703125,0,"valid",256]],"time":14.876220703125,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28976,28976]],"outputs":[[]],"series":[[0.0068359375,"()","N","-inf"],[0.00390625,"()","N","inf"],[0.033203125,"()","N","0"]],"time":0.114990234375,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[1145264,9353584]],"method":["egg-herbie"],"outputs":[[]],"time":177.3798828125,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[-3171584,12620576]],"outputs":[[]],"time":214.801025390625,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[44976,44976]],"time":0.322021484375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","done",0.3646087890737681,"binary64"],["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","done",0.265625,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))","done",58.34114472393879,"binary64"],["(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","done",0.33431625976844204,"binary64"],["#s(literal 1 binary64)","done",59.955389056777676,"binary64"],["#s(literal 0 binary64)","done",61.37119359993207,"binary64"]],"compiler":[[130,33],[36,12],[10,6],[35,19],[36,13],[1,2],[1,2]],"count":[[6,6]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[0,0],"picked":[2,2]}],"memory":[[2710896,2710896]],"min-error":[[0.22265625,"binary64"]],"time":8.156982421875,"type":"prune"},{"accuracy":[0.265625],"baseline":[0.265625],"branch":[["N",0.265625,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",0.265625,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[9,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))","(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))","(neg.f64 (/.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (neg.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))))))","(*.f64 (*.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (atan.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (atan2.f64 (+.f64 (+.f64 N #s(literal 1 binary64)) N) (-.f64 #s(literal 1 binary64) (fma.f64 N N N))) (atan.f64 N) (pow.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))))"]],"memory":[[4513840,4513840]],"oracle":[61.47305434899317],"outputs":[["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))"]],"repr":["binary64"],"time":8.81103515625,"times":[[4.091064453125,"N"],[3.592041015625,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[59.955389056777705],"baseline":[59.955389056777676],"branch":[["N",59.955389056777705,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",59.955389056777705,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[4,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(neg.f64 #s(literal -1 binary64))","(neg.f64 #s(literal 0 binary64))"]],"memory":[[-7133600,3414400]],"oracle":[61.47305434899317],"outputs":[["#s(literal 1 binary64)"]],"repr":["binary64"],"time":5.8310546875,"times":[[2.239990234375,"N"],[2.810791015625,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"accuracy":[61.37119359993206],"baseline":[61.37119359993207],"branch":[["N",61.37119359993206,1,"binary64"],["(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))",61.371193599932084,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["#s(literal 0 binary64)"]],"link":["."],"memory":[[2805520,2805520]],"name":["2atan (example 3.5)"],"oracle":[61.37119359993207],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":3.282958984375,"times":[[1.299072265625,"N"],[1.25,"(-.f64 (atan.f64 (+.f64 N #s(literal 1 binary64))) (atan.f64 N))"]],"type":"regimes"},{"inputs":[["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","#s(literal 1 binary64)","#s(literal 0 binary64)"]],"memory":[[-477264,15984864]],"method":["egg-herbie"],"outputs":[["(*.f64 #s(literal 1 binary64) (atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64))))","(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(literal 0 binary64)"]],"time":171.572021484375,"type":"simplify"},{"compiler":[[10,6]],"memory":[[723200,723200]],"stop":[["done",1]],"time":2.27490234375,"type":"soundness"},{"compiler":[[10,6],[10,6],[8,5],[8,5],[7,6],[7,6]],"memory":[[2912016,19397392]],"remove-preprocessing":[[],[],[],[]],"time":46.949951171875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01708984375,"type":"end"}]