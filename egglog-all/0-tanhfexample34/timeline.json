[{"memory":[[10016,10016]],"time":0.02197265625,"type":"start"},{"compiler":[[9,8]],"memory":[[6685376,31444096]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5002439022064209,"valid":0.4992678165435791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5007319450378418,"valid":0.4987797737121582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5017080307006836,"valid":0.4978036880493164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5036602020263672,"valid":0.4958515167236328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5075645446777344,"valid":0.4919471740722656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5153732299804688,"valid":0.48413848876953125}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.5309906005859375,"valid":0.4685211181640625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.562225341796875,"valid":0.437286376953125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.62469482421875,"valid":0.37481689453125}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.7496337890625,"valid":0.2498779296875}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":105.425048828125,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[1113872,321258832]],"mixsample":[[81.3603515625,"adjust",800],[158.210693359375,"ival-div",0],[443.235595703125,"ival-cos",1600],[1.41064453125,"ival-cos",6000],[0.0458984375,"ival-sub",2000],[0.14892578125,"adjust",4000],[4.231201171875,"ival-assert",0],[106.917724609375,"ival-sub",0],[325.395263671875,"ival-cos",0],[59.2607421875,"ival-cos",400],[2.39990234375,"ival-sin",4000],[45.483154296875,"adjust",2000],[0.0234375,"ival-sub",800],[250.2109375,"ival-sin",0],[0.056884765625,"ival-div",800],[149.109619140625,"ival-cos",3600],[5.880859375,"ival-sin",2000],[7.839599609375,"ival-true",0],[8.853515625,"adjust",2800],[0.087158203125,"ival-div",2000],[0.09765625,"ival-div",4000],[0.041259765625,"ival-sub",4000],[0.667724609375,"ival-sin",800],[7.144287109375,"exact",0]],"outcomes":[[195.93408203125,1,"valid",1195],[767.96923828125,2,"valid",2176],[9.109130859375,4,"valid",6],[278.93310546875,3,"valid",571],[707.896728515625,0,"valid",4308]],"time":2362.54296875,"type":"sample"},{"compiler":[[7,6],[19,8],[19,8]],"confusion":[[133,1,2,120]],"explanations":[["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",64,4,[],[[1]]],["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","u/n",71,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",71]],[[]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",62,2,[3.5559503464490714e+45],0,false],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",73,0,false,2,[1.0714747403862036e-158]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(sin.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,135],[0,121]],"maybe-confusion":[[133,1,0,2,3,117]],"memory":[[-14913728,44400112]],"mixsample":[[4.922119140625,"adjust",800],[7.688720703125,"ival-div",0],[34.482421875,"ival-cos",1600],[0.450927734375,"ival-cos",6000],[0.040283203125,"adjust",4000],[0.2333984375,"ival-assert",0],[9.5078125,"ival-sub",0],[15.509765625,"ival-cos",0],[3.919677734375,"ival-cos",400],[0.7451171875,"ival-sin",4000],[2.882080078125,"adjust",2000],[17.3486328125,"ival-sin",0],[12.5927734375,"ival-cos",3600],[0.578369140625,"ival-true",0],[0.720703125,"adjust",2800],[0.03076171875,"ival-div",4000],[0.011962890625,"ival-sub",4000],[0.43359375,"exact",0]],"outcomes":[[9.121337890625,1,"valid",62],[60.09814453125,2,"valid",146],[3.16796875,4,"valid",2],[21.670166015625,3,"valid",42],[40.228515625,0,"valid",260]],"time":185.948974609375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"memory":[[5010784,21090208]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))"]],"symmetry":[["(negabs x)"]],"time":368.572998046875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41120,41120]],"time":0.088134765625,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","next",30.136001684203958,"binary64"]],"compiler":[[7,6]],"memory":[[313008,313008]],"time":0.69189453125,"type":"prune"},{"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","cost-diff",3]],"memory":[[-7163840,10195424]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(sin.f64 x)"]],"time":159.03515625,"type":"simplify"},{"compiler":[[19,8]],"locations":[["(cos.f64 x)","accuracy",0.1484375],["(sin.f64 x)","accuracy",0.166347509768442],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",13.111687899933914],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","accuracy",16.813742111254307]],"memory":[[3560672,11575488]],"mixsample":[[2.718017578125,"adjust",800],[3.813720703125,"ival-div",0],[16.81396484375,"ival-cos",1600],[0.22998046875,"ival-cos",6000],[0.015869140625,"adjust",4000],[0.150390625,"ival-assert",0],[3.602783203125,"ival-sub",0],[8.78662109375,"ival-cos",0],[1.77294921875,"ival-cos",400],[0.45703125,"ival-sin",4000],[1.343994140625,"adjust",2000],[7.914794921875,"ival-sin",0],[6.318603515625,"ival-cos",3600],[0.29052734375,"ival-true",0],[0.62109375,"adjust",2800],[0.06396484375,"ival-div",4000],[0.006103515625,"ival-sub",4000],[0.22216796875,"exact",0]],"outcomes":[[4.176025390625,1,"valid",31],[28.504150390625,2,"valid",73],[1.594970703125,4,"valid",1],[11.717041015625,3,"valid",21],[21.523681640625,0,"valid",130]],"time":77.43701171875,"type":"localize"},{"count":[[4,20]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[882144,882144]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"series":[[1.075927734375,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","-inf"],[0.535888671875,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","inf"],[0.985107421875,"((/ (- 1 (cos x)) (sin x)) (- 1 (cos x)) (cos x) (sin x))","x","0"]],"time":2.9609375,"type":"series"},{"count":[[20,0]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (- 1 (cos x)) (sin x))","(- 1 (cos x))","(cos x)","(sin x)"]],"memory":[[1409504,9425232]],"method":["egg-herbie"],"outputs":[[]],"time":134.1640625,"type":"simplify"},{"count":[[4,46]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(sin.f64 x)"]],"memory":[[-2567392,15198192]],"outputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(neg.f64 (*.f64 #s(literal 1 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","(-.f64 #s(literal 0 binary64) (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(neg.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(neg.f64 (neg.f64 (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(sin.f64 x)"]],"time":377.85595703125,"type":"rewrite"},{"compiler":[[575,135]],"memory":[[4376352,4376352]],"time":6.25,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","fresh",30.32593198076086,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.136001684203958,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","next",30.524062384264866,"binary64"],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","next",32.97138426835108,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",32.551090164210564,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","next",30.75783239545391,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","fresh",30.354281617394783,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","next",0.3962288574528623,"binary64"],["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","next",0.2809562988422101,"binary64"]],"compiler":[[21,10],[7,6],[18,13],[31,18],[26,12],[25,13],[9,7],[9,9],[6,6],[21,10],[18,13],[31,18],[26,12],[25,13],[9,7],[9,9],[6,6]],"count":[[47,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[46,8],"picked":[1,1]}],"memory":[[-2782944,5338032]],"min-error":[[0.060878759768442016,"binary64"]],"time":7.759033203125,"type":"prune"},{"inputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(neg.f64 x)","x","#s(literal 2 binary64)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","#s(literal 1 binary64)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","x","#s(literal 2 binary64)","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(sin.f64 x)","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","#s(literal 1/2 binary64)","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","#s(literal 1 binary64)","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","x","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"locations":[["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","cost-diff",1],["(/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","cost-diff",2],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","cost-diff",3],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","cost-diff",4],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","cost-diff",0],["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","cost-diff",1],["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","cost-diff",2],["(tan.f64 (/.f64 x #s(literal 2 binary64)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","cost-diff",1],["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","cost-diff",4],["(neg.f64 x)","cost-diff",0],["(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","cost-diff",0],["(/.f64 (neg.f64 x) #s(literal 2 binary64))","cost-diff",1],["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","cost-diff",1]],"memory":[[-4301456,13696304]],"method":["egg-herbie"],"outputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(tan.f64 (/.f64 x #s(literal -2 binary64)))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(/.f64 x #s(literal -2 binary64))","(neg.f64 x)","x","#s(literal 2 binary64)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(tan.f64 (/.f64 x #s(literal -2 binary64)))","#s(literal -1 binary64)","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","#s(literal 1 binary64)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","x","#s(literal 2 binary64)","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","(sin.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(+.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(sin.f64 x)","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","#s(literal 1/2 binary64)","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64))) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)))","#s(literal 1 binary64)","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","x","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(*.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"time":372.075927734375,"type":"simplify"},{"compiler":[[331,38]],"locations":[["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","accuracy",13.056111827670753],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","accuracy",17.204451233502414],["(/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","accuracy",17.238943713965533],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","accuracy",30.34213069087587],["(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","accuracy",0.32920444870399596],["(cos.f64 (+.f64 x x))","accuracy",0.37337496297553563],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",0.40078970122055374],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","accuracy",30.34213069087587],["(cos.f64 (+.f64 x x))","accuracy",0.37337496297553563],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",0.40078970122055374],["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","accuracy",13.056111827670753],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","accuracy",16.813742111254307],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","accuracy",0.14681625976844204],["(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","accuracy",0.23828125],["(tan.f64 (/.f64 x #s(literal 2 binary64)))","accuracy",0.2809562988422101],["(/.f64 (neg.f64 x) #s(literal 2 binary64))","accuracy",0.0],["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","accuracy",0.2809562988422101]],"memory":[[3084736,67317888]],"mixsample":[[10.687255859375,"adjust",800],[0.399658203125,"ival-mult",1200],[0.22119140625,"ival-pow2",400],[0.009033203125,"ival-neg",800],[24.700927734375,"ival-tan",0],[0.00390625,"ival-sub",400],[0.260009765625,"ival-cos",400],[0.40576171875,"ival-tan",400],[0.00927734375,"ival-neg",400],[0.34521484375,"ival-mult",800],[0.425048828125,"ival-mult",4800],[0.509033203125,"ival-tan",4000],[0.165283203125,"ival-add",400],[10.173828125,"ival-sin",2000],[0.567138671875,"ival-mult",2400],[0.85205078125,"ival-add",2400],[0.08984375,"ival-div",4000],[0.960693359375,"ival-div",2400],[2.839599609375,"ival-pow2",0],[0.6474609375,"ival-add",1200],[15.11083984375,"ival-cos",4800],[0.291015625,"ival-cos",6000],[0.634765625,"ival-pow2",800],[0.27001953125,"ival-mult",2000],[0.15185546875,"ival-cos",4000],[19.48095703125,"ival-cos",2400],[0.047119140625,"ival-add",4000],[4.47314453125,"ival-cos",3200],[2.3349609375,"ival-div",1200],[0.10693359375,"ival-mult",400],[0.052490234375,"ival-add",1600],[4.80908203125,"ival-cos",2000],[0.416748046875,"ival-true",0],[0.2587890625,"ival-mult",3200],[0.013916015625,"ival-mult",6000],[200.631103515625,"ival-tan",2000],[0.006103515625,"ival-sub",1200],[25.6171875,"ival-div",0],[0.484375,"ival-div",400],[0.02880859375,"ival-sub",1600],[0.205810546875,"ival-assert",0],[0.45556640625,"ival-div",1600],[6.037353515625,"ival-sub",0],[1.323486328125,"ival-sin",1200],[13.809814453125,"ival-cos",0],[0.810302734375,"ival-pow2",1200],[1.03515625,"ival-cos",1200],[56.868896484375,"ival-sin",2400],[22.573486328125,"ival-tan",800],[2.75341796875,"ival-tan",1600],[0.311767578125,"ival-mult",3600],[3.907470703125,"ival-add",0],[3.250244140625,"ival-cos",800],[0.715576171875,"ival-sub",800],[1.196533203125,"ival-mult",1600],[0.078125,"adjust",2800],[5.00830078125,"ival-div",2000],[0.006103515625,"ival-sub",4000],[8.136474609375,"ival-sin",800],[15.410400390625,"ival-cos",1600],[0.6171875,"ival-sub",2000],[1.0869140625,"ival-pow2",2000],[0.387939453125,"ival-sin",4000],[0.01513671875,"ival-pow2",4000],[0.03466796875,"ival-sin",1600],[5.837158203125,"adjust",2000],[6.149169921875,"ival-mult",0],[0.580810546875,"ival-sin",400],[0.11181640625,"ival-pow2",1600],[7.215087890625,"ival-sin",0],[1.434814453125,"ival-add",2000],[0.012939453125,"ival-neg",2000],[8.81787109375,"ival-cos",3600],[4.224365234375,"ival-div",800],[0.772705078125,"exact",0],[0.583984375,"ival-add",800],[0.010009765625,"ival-mult",4000],[5.501953125,"ival-neg",0],[1.481201171875,"ival-tan",1200]],"outcomes":[[51.075927734375,1,"valid",46],[432.59521484375,2,"valid",79],[7.10498046875,3,"valid",1],[78.420654296875,0,"valid",130]],"time":622.466064453125,"type":"localize"},{"count":[[21,73]],"inputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(neg.f64 x)","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(cos.f64 (+.f64 x x))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))"]],"memory":[[1214016,8682800]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(* -1 x)","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","1/2","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","(/ 1/2 x)","(/ (+ 1/2 (* 5/24 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (+ 5/24 (* 37/720 (pow x 2))))) x)","(/ (+ 1/2 (* (pow x 2) (+ 5/24 (* (pow x 2) (+ 37/720 (* 239/24192 (pow x 2))))))) x)","(* 2 x)","(* x (+ 2 (* -5/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ (+ 1/2 (* -7/24 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (- (* 7/720 (pow x 2)) 7/24))) x)","(/ (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 7/720 (* 691/120960 (pow x 2)))) 7/24))) x)","1","(+ 1 (* -2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/3 (* -4/45 (pow x 2)))) 2)))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (* 2 x))))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (* (sin x) (+ 1 (cos x))))","(/ 1 (+ 1 (cos x)))","(- (* 1/2 (/ 1 (* (sin x) (+ 1 (cos x))))) (* 1/2 (/ (cos (* 2 x)) (* (sin x) (+ 1 (cos x))))))","(/ 1 (* (sin x) (+ 1 (cos x))))","(* (sin x) (+ 1 (cos x)))","(+ 1 (cos x))","(/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (* 2 x))))))","(- (/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (* 2 x)))))) (/ (* (pow (cos x) 2) (sin (* 1/2 x))) (* (cos (* 1/2 x)) (pow (sin x) 2))))","(/ (* (pow (cos x) 2) (sin (* 1/2 x))) (* (cos (* 1/2 x)) (pow (sin x) 2)))","(cos (* 2 x))","(+ 1/2 (* 1/2 (cos (* 2 x))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (neg (* -2 x)))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (sin x) (+ 1 (cos x))))","(- (* 1/2 (/ 1 (* (sin x) (+ 1 (cos x))))) (* 1/2 (/ (cos (neg (* -2 x))) (* (sin x) (+ 1 (cos x))))))","(/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (neg (* -2 x)))))))","(- (/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (neg (* -2 x))))))) (/ (* (pow (cos x) 2) (sin (* 1/2 x))) (* (cos (* 1/2 x)) (pow (sin x) 2))))","(cos (neg (* -2 x)))","(+ 1/2 (* 1/2 (cos (neg (* -2 x)))))"]],"series":[[15.4521484375,"((neg (tan (/ (neg x) 2))) (/ (neg x) 2) (tan (/ (neg x) 2)) (neg x) (/ -1 (/ 1 (tan (/ x 2)))) (neg (/ -1 (/ 1 (tan (/ x 2))))) (/ 1 (tan (/ x 2))) (tan (/ x 2)) (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (- 1/2 (* (cos (+ x x)) 1/2)) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (sin x)) (/ 1 (+ (cos x) 1)) (- (/ 1 (* (+ (cos x) 1) (sin x))) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (sin x)))) (/ 1 (* (+ (cos x) 1) (sin x))) (* (+ (cos x) 1) (sin x)) (+ (cos x) 1) (/ (/ 1 (- 1/2 (* (cos (+ x x)) 1/2))) (/ 1 (tan (/ x 2)))) (- (/ (/ 1 (- 1/2 (* (cos (+ x x)) 1/2))) (/ 1 (tan (/ x 2)))) (/ (pow (/ 1 (tan x)) 2) (/ 1 (tan (/ x 2))))) (/ (pow (/ 1 (tan x)) 2) (/ 1 (tan (/ x 2)))) (cos (+ x x)) (+ (* (cos (+ x x)) 1/2) 1/2))","x","-inf"],[15.004150390625,"((neg (tan (/ (neg x) 2))) (/ (neg x) 2) (tan (/ (neg x) 2)) (neg x) (/ -1 (/ 1 (tan (/ x 2)))) (neg (/ -1 (/ 1 (tan (/ x 2))))) (/ 1 (tan (/ x 2))) (tan (/ x 2)) (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (- 1/2 (* (cos (+ x x)) 1/2)) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (sin x)) (/ 1 (+ (cos x) 1)) (- (/ 1 (* (+ (cos x) 1) (sin x))) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (sin x)))) (/ 1 (* (+ (cos x) 1) (sin x))) (* (+ (cos x) 1) (sin x)) (+ (cos x) 1) (/ (/ 1 (- 1/2 (* (cos (+ x x)) 1/2))) (/ 1 (tan (/ x 2)))) (- (/ (/ 1 (- 1/2 (* (cos (+ x x)) 1/2))) (/ 1 (tan (/ x 2)))) (/ (pow (/ 1 (tan x)) 2) (/ 1 (tan (/ x 2))))) (/ (pow (/ 1 (tan x)) 2) (/ 1 (tan (/ x 2)))) (cos (+ x x)) (+ (* (cos (+ x x)) 1/2) 1/2))","x","inf"],[7.384033203125,"((neg (tan (/ (neg x) 2))) (/ (neg x) 2) (tan (/ (neg x) 2)) (neg x) (/ -1 (/ 1 (tan (/ x 2)))) (neg (/ -1 (/ 1 (tan (/ x 2))))) (/ 1 (tan (/ x 2))) (tan (/ x 2)) (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (- 1/2 (* (cos (+ x x)) 1/2)) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (sin x)) (/ 1 (+ (cos x) 1)) (- (/ 1 (* (+ (cos x) 1) (sin x))) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (sin x)))) (/ 1 (* (+ (cos x) 1) (sin x))) (* (+ (cos x) 1) (sin x)) (+ (cos x) 1) (/ (/ 1 (- 1/2 (* (cos (+ x x)) 1/2))) (/ 1 (tan (/ x 2)))) (- (/ (/ 1 (- 1/2 (* (cos (+ x x)) 1/2))) (/ 1 (tan (/ x 2)))) (/ (pow (/ 1 (tan x)) 2) (/ 1 (tan (/ x 2))))) (/ (pow (/ 1 (tan x)) 2) (/ 1 (tan (/ x 2)))) (cos (+ x x)) (+ (* (cos (+ x x)) 1/2) 1/2))","x","0"]],"time":39.47998046875,"type":"series"},{"count":[[73,0]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* -1/2 x)","(* x (- (* -1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (- (* -1/240 (pow x 2)) 1/24)) 1/2))","(* x (- (* (pow x 2) (- (* (pow x 2) (- (* -17/40320 (pow x 2)) 1/240)) 1/24)) 1/2))","(* -1 x)","(/ 2 x)","(/ (+ 2 (* -1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))) x)","(/ (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))) x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","1/2","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","(/ 1/2 x)","(/ (+ 1/2 (* 5/24 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (+ 5/24 (* 37/720 (pow x 2))))) x)","(/ (+ 1/2 (* (pow x 2) (+ 5/24 (* (pow x 2) (+ 37/720 (* 239/24192 (pow x 2))))))) x)","(* 2 x)","(* x (+ 2 (* -5/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* 17/120 (pow x 2)) 5/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 17/120 (* -13/1008 (pow x 2)))) 5/6))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ (+ 1/2 (* -7/24 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (- (* 7/720 (pow x 2)) 7/24))) x)","(/ (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 7/720 (* 691/120960 (pow x 2)))) 7/24))) x)","1","(+ 1 (* -2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/3 (* -4/45 (pow x 2)))) 2)))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(* -1 (/ (sin (* -1/2 x)) (cos (* -1/2 x))))","(/ (sin (* -1/2 x)) (cos (* -1/2 x)))","(* -1 (/ (sin (* 1/2 x)) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (cos (* 1/2 x)) (sin (* 1/2 x)))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (* 2 x))))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (* (sin x) (+ 1 (cos x))))","(/ 1 (+ 1 (cos x)))","(- (* 1/2 (/ 1 (* (sin x) (+ 1 (cos x))))) (* 1/2 (/ (cos (* 2 x)) (* (sin x) (+ 1 (cos x))))))","(/ 1 (* (sin x) (+ 1 (cos x))))","(* (sin x) (+ 1 (cos x)))","(+ 1 (cos x))","(/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (* 2 x))))))","(- (/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (* 2 x)))))) (/ (* (pow (cos x) 2) (sin (* 1/2 x))) (* (cos (* 1/2 x)) (pow (sin x) 2))))","(/ (* (pow (cos x) 2) (sin (* 1/2 x))) (* (cos (* 1/2 x)) (pow (sin x) 2)))","(cos (* 2 x))","(+ 1/2 (* 1/2 (cos (* 2 x))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (neg (* -2 x)))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (sin x) (+ 1 (cos x))))","(- (* 1/2 (/ 1 (* (sin x) (+ 1 (cos x))))) (* 1/2 (/ (cos (neg (* -2 x))) (* (sin x) (+ 1 (cos x))))))","(/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (neg (* -2 x)))))))","(- (/ (sin (* 1/2 x)) (* (cos (* 1/2 x)) (- 1/2 (* 1/2 (cos (neg (* -2 x))))))) (/ (* (pow (cos x) 2) (sin (* 1/2 x))) (* (cos (* 1/2 x)) (pow (sin x) 2))))","(cos (neg (* -2 x)))","(+ 1/2 (* 1/2 (cos (neg (* -2 x)))))"]],"memory":[[2704448,10631184]],"method":["egg-herbie"],"outputs":[[]],"time":128.330810546875,"type":"simplify"},{"count":[[21,315]],"inputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 x) #s(literal 2 binary64))","(tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64)))","(neg.f64 x)","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x)))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64)))))","(cos.f64 (+.f64 x x))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))"]],"memory":[[1528448,19009280]],"outputs":[["#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 9 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)"]],"time":419.994140625,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1335680,1335680]],"time":2.166015625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","next",30.32593198076086,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.136001684203958,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","done",30.524062384264866,"binary64"],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","done",32.97138426835108,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",32.551090164210564,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","done",30.75783239545391,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","fresh",30.354281617394783,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","done",0.3962288574528623,"binary64"],["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","done",0.2809562988422101,"binary64"],["#s(literal 9 binary64)","fresh",59.68466907992517,"binary64"],["#s(literal 6 binary64)","fresh",59.64922351720624,"binary64"],["#s(literal 5 binary64)","next",59.62144867255614,"binary64"],["#s(literal 4 binary64)","fresh",59.592702795744586,"binary64"],["#s(literal 7/2 binary64)","fresh",59.553333412472426,"binary64"],["#s(literal 3 binary64)","fresh",59.52745062701112,"binary64"],["#s(literal 5/2 binary64)","next",59.49621980093474,"binary64"],["#s(literal 2 binary64)","fresh",59.4451538988701,"binary64"],["#s(literal 3/2 binary64)","fresh",59.456110842261204,"binary64"],["#s(literal 1 binary64)","fresh",59.448472092952656,"binary64"],["#s(literal 1/2 binary64)","next",59.46459823848712,"binary64"],["#s(literal 0 binary64)","fresh",61.09982501698949,"binary64"],["#s(literal -1/2 binary64)","fresh",59.85270117999236,"binary64"],["#s(literal -1 binary64)","fresh",59.75330116837445,"binary64"],["#s(literal -2 binary64)","next",59.76470010228123,"binary64"]],"compiler":[[21,10],[7,6],[18,13],[31,18],[26,12],[25,13],[9,7],[9,9],[6,6],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[21,10],[26,12],[9,7],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]],"count":[[24,24]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[15,15],"picked":[5,5]}],"memory":[[-444544,7838400]],"min-error":[[0.060878759768442016,"binary64"]],"time":17.01904296875,"type":"prune"},{"inputs":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(sin.f64 x)","#s(literal -2 binary64)","#s(literal 1/2 binary64)","#s(literal 5/2 binary64)","#s(literal 5 binary64)"]],"locations":[["(+.f64 (cos.f64 x) #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","cost-diff",3],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","cost-diff",14]],"memory":[[-5687712,10521296]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(sin.f64 x)","#s(literal -2 binary64)","#s(literal 1/2 binary64)","#s(literal 5/2 binary64)","#s(literal 5 binary64)"]],"time":188.848876953125,"type":"simplify"},{"compiler":[[76,16]],"locations":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",0.6265764856816832],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",13.111687899933914],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","accuracy",13.465973862301],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","accuracy",16.813742111254307]],"memory":[[-5074544,21327840]],"mixsample":[[4.870849609375,"adjust",800],[5.5810546875,"ival-div",0],[0.518310546875,"ival-sub",1600],[1.011962890625,"ival-div",400],[0.06103515625,"adjust",4000],[1.2451171875,"ival-div",1600],[0.140625,"ival-assert",0],[0.0888671875,"ival-sub",3600],[4.96337890625,"ival-sub",0],[8.931884765625,"ival-cos",0],[5.35595703125,"ival-cos",1200],[2.55029296875,"ival-sub",400],[1.568359375,"ival-add",0],[0.10400390625,"ival-sub",800],[0.824951171875,"ival-add",400],[1.053466796875,"adjust",2800],[0.028076171875,"ival-div",4000],[0.0087890625,"ival-sub",4000],[0.006103515625,"ival-add",6000],[0.23388671875,"ival-cos",6000],[3.9658203125,"ival-cos",1600],[0.071044921875,"ival-sub",2000],[0.229248046875,"ival-add",3600],[0.405029296875,"ival-sin",4000],[3.370361328125,"adjust",2000],[0.8076171875,"ival-add",1600],[0.004150390625,"ival-sub",6000],[21.79052734375,"ival-sin",0],[5.805419921875,"ival-cos",3600],[0.007080078125,"ival-div",800],[0.45703125,"ival-true",0],[0.37939453125,"ival-div",3600],[22.323974609375,"ival-cos",2800],[0.01806640625,"ival-div",6000],[0.64697265625,"exact",0],[0.0048828125,"ival-add",800]],"outcomes":[[6.96826171875,1,"valid",31],[44.49609375,2,"valid",73],[16.513916015625,4,"valid",1],[23.9248046875,3,"valid",21],[25.66259765625,0,"valid",130]],"time":131.215087890625,"type":"localize"},{"count":[[6,24]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))"]],"memory":[[1223040,1223040]],"outputs":[["(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","1/2","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1/2 (* -3/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/16 (pow x 2)) 3/8)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/16 (* 1/640 (pow x 2)))) 3/8)))","(- 1 (cos x))","(/ (- 1 (cos x)) (sin x))","(/ 1 (+ 1 (cos x)))","(+ 1 (cos x))","(- (+ (cos x) (/ 1 (+ 1 (cos x)))) 1)"]],"series":[[0.675048828125,"((- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (/ (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (sin x)) (/ 1 (+ (cos x) 1)) (+ (cos x) 1) (- 1 (cos x)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x))))","x","-inf"],[0.735107421875,"((- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (/ (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (sin x)) (/ 1 (+ (cos x) 1)) (+ (cos x) 1) (- 1 (cos x)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x))))","x","inf"],[0.656005859375,"((- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (/ (- (/ 1 (+ (cos x) 1)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x)))) (sin x)) (/ 1 (+ (cos x) 1)) (+ (cos x) 1) (- 1 (cos x)) (- (/ 1 (+ (cos x) 1)) (- 1 (cos x))))","x","0"]],"time":2.60693359375,"type":"series"},{"count":[[24,0]],"inputs":[["(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","1/2","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1/2 (* -3/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/16 (pow x 2)) 3/8)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/16 (* 1/640 (pow x 2)))) 3/8)))","(- 1 (cos x))","(/ (- 1 (cos x)) (sin x))","(/ 1 (+ 1 (cos x)))","(+ 1 (cos x))","(- (+ (cos x) (/ 1 (+ 1 (cos x)))) 1)"]],"memory":[[-5539072,10016560]],"method":["egg-herbie"],"outputs":[[]],"time":124.05908203125,"type":"simplify"},{"count":[[6,90]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))"]],"memory":[[3611088,13908432]],"outputs":[["#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 8 binary64)","#s(literal 3 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 9 binary64)"]],"time":273.9189453125,"type":"rewrite"},{"compiler":[[60,32]],"memory":[[1464784,1464784]],"time":2.3740234375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","done",30.32593198076086,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.136001684203958,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","done",30.524062384264866,"binary64"],["(/.f64 #s(literal 2 binary64) (sin.f64 x))","fresh",56.42518081095959,"binary64"],["(/.f64 #s(literal 3/2 binary64) (sin.f64 x))","fresh",56.54476005276403,"binary64"],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","next",56.81057741008372,"binary64"],["(/.f64 #s(literal 1/2 binary64) (sin.f64 x))","fresh",57.0901244950656,"binary64"],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","done",32.97138426835108,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",32.551090164210564,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","done",30.75783239545391,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","next",30.354281617394783,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","done",0.3962288574528623,"binary64"],["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","done",0.2809562988422101,"binary64"],["#s(literal 9 binary64)","fresh",59.68466907992517,"binary64"],["#s(literal 6 binary64)","fresh",59.64922351720624,"binary64"],["#s(literal 5 binary64)","done",59.62144867255614,"binary64"],["#s(literal 4 binary64)","next",59.592702795744586,"binary64"],["#s(literal 7/2 binary64)","fresh",59.553333412472426,"binary64"],["#s(literal 3 binary64)","fresh",59.52745062701112,"binary64"],["#s(literal 5/2 binary64)","done",59.49621980093474,"binary64"],["#s(literal 2 binary64)","fresh",59.4451538988701,"binary64"],["#s(literal 3/2 binary64)","next",59.456110842261204,"binary64"],["#s(literal 1 binary64)","fresh",59.448472092952656,"binary64"],["#s(literal 1/2 binary64)","done",59.46459823848712,"binary64"],["#s(literal 0 binary64)","fresh",61.09982501698949,"binary64"],["#s(literal -1/2 binary64)","fresh",59.85270117999236,"binary64"],["#s(literal -1 binary64)","next",59.75330116837445,"binary64"],["#s(literal -2 binary64)","done",59.76470010228123,"binary64"]],"compiler":[[21,10],[7,6],[18,13],[4,4],[4,4],[4,4],[4,4],[31,18],[26,12],[25,13],[9,7],[9,9],[6,6],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[4,4],[4,4],[4,4],[4,4],[26,12],[9,7],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]],"count":[[39,28]],"kept":[{"done":[6,6],"fresh":[13,13],"new":[15,4],"picked":[5,5]}],"memory":[[397264,8475232]],"min-error":[[0.060878759768442016,"binary64"]],"time":15.202880859375,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","#s(literal 1 binary64)","(sin.f64 x)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)","#s(literal -1 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","(/.f64 #s(literal 1 binary64) (sin.f64 x))","#s(literal 1 binary64)","(sin.f64 x)","x"]],"locations":[["(sin.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (tan.f64 x))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","cost-diff",0]],"memory":[[-5862864,9957792]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","#s(literal 1 binary64)","(sin.f64 x)","x","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)","#s(literal -1 binary64)","#s(literal 3/2 binary64)","#s(literal 4 binary64)","(/.f64 #s(literal 1 binary64) (sin.f64 x))","#s(literal 1 binary64)","(sin.f64 x)","x"]],"time":156.619140625,"type":"simplify"},{"compiler":[[36,12]],"locations":[["(/.f64 #s(literal 1 binary64) (sin.f64 x))","accuracy",0.13671875],["(sin.f64 x)","accuracy",0.166347509768442],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","accuracy",0.13671875],["(sin.f64 x)","accuracy",0.166347509768442],["(tan.f64 x)","accuracy",0.3220101074528622],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","accuracy",30.242807820192628]],"memory":[[6749312,16128784]],"mixsample":[[20.721435546875,"ival-tan",2000],[3.85888671875,"ival-div",0],[3.282958984375,"adjust",800],[0.273681640625,"ival-div",400],[0.0048828125,"ival-sub",2000],[0.078857421875,"ival-div",1600],[0.247802734375,"ival-assert",0],[2.4814453125,"ival-sub",0],[97.6435546875,"ival-tan",2400],[1.218994140625,"ival-sin",1200],[7.669677734375,"ival-tan",0],[0.387939453125,"ival-sin",4000],[0.03466796875,"ival-sin",1600],[0.445068359375,"ival-tan",400],[1.29541015625,"adjust",2000],[55.747314453125,"ival-sin",2400],[0.03125,"ival-tan",1600],[7.717529296875,"ival-tan",800],[1.003662109375,"ival-div",1200],[0.698486328125,"ival-sin",400],[9.26123046875,"ival-sin",0],[0.257080078125,"ival-tan",4000],[0.830078125,"ival-div",800],[0.034912109375,"adjust",2800],[10.070068359375,"ival-sin",2000],[0.255615234375,"ival-true",0],[0.850341796875,"ival-div",2000],[0.031005859375,"ival-div",4000],[0.599853515625,"exact",0],[7.068603515625,"ival-sin",800],[2.258544921875,"ival-div",2400],[0.59912109375,"ival-tan",1200]],"outcomes":[[25.080078125,1,"valid",57],[196.667236328125,2,"valid",68],[9.72802734375,3,"valid",1],[22.543212890625,0,"valid",130]],"time":265.967041015625,"type":"localize"},{"count":[[5,23]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(sin.f64 x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[-6616176,1415376]],"outputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ 1 (sin x)) (/ (cos x) (sin x)))","(/ 1 (sin x))","(sin x)","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"series":[[1.22900390625,"((- (/ 1 (sin x)) (/ 1 (tan x))) (/ 1 (sin x)) (sin x) (/ 1 (tan x)) (tan x))","x","-inf"],[2.054931640625,"((- (/ 1 (sin x)) (/ 1 (tan x))) (/ 1 (sin x)) (sin x) (/ 1 (tan x)) (tan x))","x","inf"],[0.953857421875,"((- (/ 1 (sin x)) (/ 1 (tan x))) (/ 1 (sin x)) (sin x) (/ 1 (tan x)) (tan x))","x","0"]],"time":4.640869140625,"type":"series"},{"count":[[23,0]],"inputs":[["(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ 1 x)","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(/ (+ 1 (* -1/3 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* -1/45 (pow x 2)) 1/3))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (- (* -2/945 (pow x 2)) 1/45)) 1/3))) x)","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ 1 (sin x)) (/ (cos x) (sin x)))","(/ 1 (sin x))","(sin x)","(/ (cos x) (sin x))","(/ (sin x) (cos x))"]],"memory":[[1459344,9631088]],"method":["egg-herbie"],"outputs":[[]],"time":153.93310546875,"type":"simplify"},{"count":[[5,75]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(sin.f64 x)","(/.f64 #s(literal 1 binary64) (tan.f64 x))","(tan.f64 x)"]],"memory":[[653792,18115936]],"outputs":[["(neg.f64 (+.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (tan.f64 x)) (sin.f64 x)) (*.f64 (sin.f64 x) (tan.f64 x))))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))))))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64))) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (+.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (pow.f64 (tan.f64 x) #s(literal -3 binary64))) (neg.f64 (+.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))))))","(+.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(+.f64 (/.f64 (tan.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))) (neg.f64 (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (tan.f64 x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))))))","(+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal -3 binary64)) (+.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))))))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(/.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(neg.f64 (neg.f64 (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (neg.f64 (sin.f64 x)))","(/.f64 (sin.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(/.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 (sin.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 x))) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 1 binary64))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x))","(*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (tan.f64 x)))","(*.f64 (cos.f64 x) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(neg.f64 (neg.f64 (tan.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x))) (neg.f64 (tan.f64 x)))","(*.f64 (tan.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (neg.f64 (tan.f64 x)) (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)))","(*.f64 (neg.f64 (tan.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (sin.f64 x) (*.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (/.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))"]],"time":472.9609375,"type":"rewrite"},{"compiler":[[1375,240]],"memory":[[1786592,9680784]],"time":14.1640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","done",30.32593198076086,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","done",30.136001684203958,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","done",30.524062384264866,"binary64"],["(/.f64 #s(literal 2 binary64) (sin.f64 x))","fresh",56.42518081095959,"binary64"],["(/.f64 #s(literal 3/2 binary64) (sin.f64 x))","fresh",56.54476005276403,"binary64"],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","done",56.81057741008372,"binary64"],["(/.f64 #s(literal 1/2 binary64) (sin.f64 x))","fresh",57.0901244950656,"binary64"],["(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","done",32.97138426835108,"binary64"],["(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","fresh",32.551090164210564,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","done",30.75783239545391,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","done",30.354281617394783,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","fresh",44.62973541315915,"binary64"],["(+.f64 (/.f64 (tan.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))) (neg.f64 (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (tan.f64 x)))))","fresh",31.706512007016965,"binary64"],["(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))))))","fresh",32.96803528160963,"binary64"],["(neg.f64 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","fresh",31.554349002597355,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","done",0.3962288574528623,"binary64"],["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","done",0.2809562988422101,"binary64"],["#s(literal 9 binary64)","fresh",59.68466907992517,"binary64"],["#s(literal 6 binary64)","fresh",59.64922351720624,"binary64"],["#s(literal 5 binary64)","done",59.62144867255614,"binary64"],["#s(literal 4 binary64)","done",59.592702795744586,"binary64"],["#s(literal 7/2 binary64)","fresh",59.553333412472426,"binary64"],["#s(literal 3 binary64)","fresh",59.52745062701112,"binary64"],["#s(literal 5/2 binary64)","done",59.49621980093474,"binary64"],["#s(literal 2 binary64)","fresh",59.4451538988701,"binary64"],["#s(literal 3/2 binary64)","done",59.456110842261204,"binary64"],["#s(literal 1 binary64)","fresh",59.448472092952656,"binary64"],["#s(literal 1/2 binary64)","done",59.46459823848712,"binary64"],["#s(literal 0 binary64)","fresh",61.09982501698949,"binary64"],["#s(literal -1/2 binary64)","fresh",59.85270117999236,"binary64"],["#s(literal -1 binary64)","done",59.75330116837445,"binary64"],["#s(literal -2 binary64)","done",59.76470010228123,"binary64"]],"compiler":[[259,87],[21,10],[7,6],[18,13],[4,4],[4,4],[4,4],[4,4],[31,18],[26,12],[25,13],[9,7],[18,11],[18,8],[27,21],[13,8],[9,9],[6,6],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]],"count":[[133,32]],"kept":[{"done":[11,11],"fresh":[12,12],"new":[105,4],"picked":[5,5]}],"memory":[[-2773712,13796160]],"min-error":[[0.049160009768442016,"binary64"]],"time":18.6728515625,"type":"prune"},{"accuracy":[0.2809562988422101],"baseline":[0.2809562988422101],"branch":[["x",0.2809562988422101,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",0.2809562988422101,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[32,1]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal 5/2 binary64)","#s(literal 3 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","(/.f64 #s(literal 1/2 binary64) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(/.f64 #s(literal 3/2 binary64) (sin.f64 x))","(/.f64 #s(literal 2 binary64) (sin.f64 x))","(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (sin.f64 x))","(neg.f64 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (sin.f64 x))","(-.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (*.f64 (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (sin.f64 x))))","(-.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (cos.f64 x) (sin.f64 x)) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (pow.f64 (tan.f64 x) #s(literal -2 binary64))) (neg.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (+.f64 #s(literal 1 binary64) (cos.f64 x))))))","(-.f64 (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 (/.f64 x #s(literal 2 binary64))))))","(+.f64 (/.f64 (tan.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))) (neg.f64 (/.f64 (sin.f64 x) (*.f64 (sin.f64 x) (tan.f64 x)))))"]],"memory":[[1797888,10240880]],"oracle":[63.71091358806975],"outputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))"]],"repr":["binary64"],"time":23.715087890625,"times":[[11.906005859375,"x"],[9.23779296875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[55.42283612929565],"baseline":[56.42518081095959],"branch":[["x",55.42283612929565,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.425180810959624,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[19,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal 5/2 binary64)","#s(literal 3 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","(/.f64 #s(literal 1/2 binary64) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(/.f64 #s(literal 3/2 binary64) (sin.f64 x))","(/.f64 #s(literal 2 binary64) (sin.f64 x))"]],"memory":[[-818672,7154992]],"oracle":[62.858119884933316],"outputs":[["#s(literal 0 binary64)","(/.f64 #s(literal 2 binary64) (sin.f64 x))"]],"repr":["binary64"],"time":16.60400390625,"times":[[8.475830078125,"x"],[6.296142578125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[55.54258849522574],"baseline":[56.54476005276403],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.544760052764104,1,"binary64"],["x",55.54258849522574,2,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[18,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal 5/2 binary64)","#s(literal 3 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","(/.f64 #s(literal 1/2 binary64) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(/.f64 #s(literal 3/2 binary64) (sin.f64 x))"]],"memory":[[-1077744,7129008]],"oracle":[62.85805364760284],"outputs":[["#s(literal 0 binary64)","(/.f64 #s(literal 3/2 binary64) (sin.f64 x))"]],"repr":["binary64"],"time":12.069091796875,"times":[[5.64111328125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[5.0419921875,"x"]],"type":"regimes"},{"accuracy":[55.80865189638869],"baseline":[56.81057741008372],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.81057741008371,1,"binary64"],["x",55.80865189638869,2,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[17,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal 5/2 binary64)","#s(literal 3 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","(/.f64 #s(literal 1/2 binary64) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (sin.f64 x))"]],"memory":[[6681264,6681264]],"oracle":[62.857957315297696],"outputs":[["#s(literal 0 binary64)","(/.f64 #s(literal 1 binary64) (sin.f64 x))"]],"repr":["binary64"],"time":10.723876953125,"times":[[4.154052734375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[5.071044921875,"x"]],"type":"regimes"},{"accuracy":[56.088618520358644],"baseline":[57.0901244950656],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",57.090124495065545,1,"binary64"],["x",56.088618520358644,2,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[16,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal 5/2 binary64)","#s(literal 3 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","(/.f64 #s(literal 1/2 binary64) (sin.f64 x))"]],"memory":[[-1755072,6462576]],"oracle":[62.857794648534956],"outputs":[["#s(literal 0 binary64)","(/.f64 #s(literal 1/2 binary64) (sin.f64 x))"]],"repr":["binary64"],"time":10.85107421875,"times":[[4.60693359375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[5.089111328125,"x"]],"type":"regimes"},{"accuracy":[56.44388524798203],"baseline":[59.4451538988701],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.44388524798203,2,"binary64"],["x",59.44515389887009,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[15,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 3/2 binary64)","#s(literal 2 binary64)","#s(literal 5/2 binary64)","#s(literal 3 binary64)","#s(literal 7/2 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)"]],"memory":[[-3407440,6228672]],"oracle":[62.75566130659562],"outputs":[["#s(literal -1 binary64)","#s(literal 2 binary64)"]],"repr":["binary64"],"time":10.373046875,"times":[[4.14599609375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[5.093994140625,"x"]],"type":"regimes"},{"accuracy":[56.44739618076746],"baseline":[59.448472092952656],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.44739618076746,2,"binary64"]],"compiler":[[7,6]],"count":[[7,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 3/2 binary64)"]],"memory":[[2409248,2409248]],"oracle":[62.755137628468624],"outputs":[["#s(literal -1 binary64)","#s(literal 1 binary64)"]],"repr":["binary64"],"time":3.3408203125,"times":[[2.414794921875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[56.463715159219355],"baseline":[59.46459823848712],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",56.463715159219355,2,"binary64"]],"compiler":[[7,6]],"count":[[5,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)"]],"memory":[[2074704,2074704]],"oracle":[62.754848414428764],"outputs":[["#s(literal -1 binary64)","#s(literal 1/2 binary64)"]],"repr":["binary64"],"time":2.947998046875,"times":[[2.10986328125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[58.372139655175836],"baseline":[59.75330116837445],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",58.372139655175836,2,"binary64"]],"compiler":[[7,6]],"count":[[4,2]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 0 binary64)"]],"memory":[[-6340352,1916864]],"oracle":[62.48165069697463],"outputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)"]],"repr":["binary64"],"time":2.443115234375,"times":[[1.97998046875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[59.75330116837441],"baseline":[59.75330116837445],"branch":[["x",59.75330116837441,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",59.75330116837443,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[3,1]],"inputs":[["#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)"]],"memory":[[3472928,3472928]],"oracle":[60.081725919284146],"outputs":[["#s(literal -1 binary64)"]],"repr":["binary64"],"time":5.15087890625,"times":[[2.106201171875,"x"],[2.195068359375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"]],"type":"regimes"},{"accuracy":[59.76470010228125],"baseline":[59.76470010228123],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))",59.76470010228128,1,"binary64"],["x",59.76470010228125,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[1,1]],"inputs":[["#s(literal -2 binary64)"]],"link":["."],"memory":[[3010208,3010208]],"name":["tanhf (example 3.4)"],"oracle":[59.76470010228123],"outputs":[["#s(literal -2 binary64)"]],"repr":["binary64"],"time":3.281982421875,"times":[[1.35107421875,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x))"],[1.287841796875,"x"]],"type":"regimes"},{"bstep":[[31.06201171875,3.8612455405077004e-104,4.6085135196009935e-101]],"compiler":[[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[9,9],[1,1]],"memory":[[-1795648,6501760]],"method":["binary-search"],"mixsample":[[2.705810546875,"ival-div",0],[2.597412109375,"adjust",800],[0.90478515625,"ival-sin",0],[0.051025390625,"ival-assert",0],[2.44482421875,"ival-sub",0],[0.131103515625,"ival-true",0],[1.212158203125,"ival-cos",0],[5.69873046875,"ival-cos",400],[0.096923828125,"exact",0],[2.48779296875,"adjust",2000]],"outcomes":[[24.296875,2,"valid",128]],"stop":[["narrow-enough",1]],"time":34.93798828125,"type":"bsearch"},{"bstep":[[14.756103515625,3.8612455405077004e-104,4.6085135196009935e-101]],"compiler":[[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[9,9],[1,1]],"memory":[[-5334192,2710768]],"method":["binary-search"],"mixsample":[[1.30078125,"ival-div",0],[1.032470703125,"adjust",800],[0.3564453125,"ival-sin",0],[0.026611328125,"ival-assert",0],[1.739990234375,"ival-sub",0],[0.061279296875,"ival-true",0],[0.583740234375,"ival-cos",0],[2.10498046875,"ival-cos",400],[0.050537109375,"exact",0],[0.998046875,"adjust",2000]],"outcomes":[[11.07568359375,2,"valid",48]],"stop":[["narrow-enough",1]],"time":17.855224609375,"type":"bsearch"},{"bstep":[[7.993896484375,3.8612455405077004e-104,4.6085135196009935e-101]],"compiler":[[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[9,9],[1,1]],"memory":[[1962464,1962464]],"method":["binary-search"],"mixsample":[[0.663330078125,"ival-div",0],[0.85498046875,"adjust",800],[0.236083984375,"ival-sin",0],[0.01171875,"ival-assert",0],[0.6083984375,"ival-sub",0],[0.030517578125,"ival-true",0],[0.274658203125,"ival-cos",0],[1.125732421875,"ival-cos",400],[0.022705078125,"exact",0],[0.51318359375,"adjust",2000]],"outcomes":[[5.5654296875,2,"valid",32]],"stop":[["narrow-enough",1]],"time":9.98486328125,"type":"bsearch"},{"bstep":[[20.0009765625,3.8612455405077004e-104,4.6085135196009935e-101]],"compiler":[[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[4,5],[1,3],[9,9],[1,1]],"memory":[[3527776,3527776]],"method":["binary-search"],"mixsample":[[1.915283203125,"ival-div",0],[1.57421875,"adjust",800],[0.568603515625,"ival-sin",0],[0.041015625,"ival-assert",0],[1.788330078125,"ival-sub",0],[0.15380859375,"ival-true",0],[0.7724609375,"ival-cos",0],[3.395263671875,"ival-cos",400],[0.06298828125,"exact",0],[1.61474609375,"adjust",2000]],"outcomes":[[15.650634765625,2,"valid",64]],"stop":[["narrow-enough",1]],"time":23.130126953125,"type":"bsearch"},{"bstep":[[11.97900390625,-0.0043217356649768255,0.0]],"compiler":[[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[3,4],[7,6]],"memory":[[-4903616,3838064]],"method":["binary-search"],"mixsample":[[0.147216796875,"ival-true",0],[0.083984375,"ival-assert",0]],"outcomes":[[4.74755859375,0,"valid",224]],"stop":[["narrow-enough",1]],"time":13.4599609375,"type":"bsearch"},{"bstep":[[0.901123046875,-0.0043217356649768255,0.0]],"compiler":[[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[3,4],[7,6]],"memory":[[654816,654816]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.308837890625,"type":"bsearch"},{"bstep":[[3.212890625,-0.0043217356649768255,0.0]],"compiler":[[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[3,4],[7,6]],"memory":[[1325968,1325968]],"method":["binary-search"],"mixsample":[[0.033447265625,"ival-true",0],[0.019775390625,"ival-assert",0]],"outcomes":[[0.857666015625,0,"valid",48]],"stop":[["narrow-enough",1]],"time":4.026123046875,"type":"bsearch"},{"bstep":[[9.199951171875,-0.0043217356649768255,0.0]],"compiler":[[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[3,4],[7,6]],"memory":[[3611424,3611424]],"method":["binary-search"],"mixsample":[[0.126220703125,"ival-true",0],[0.06494140625,"ival-assert",0]],"outcomes":[[3.05810546875,0,"valid",208]],"stop":[["narrow-enough",1]],"time":10.52490234375,"type":"bsearch"},{"inputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(if (<=.f64 x #s(literal 1134777778456161/2521728396569246669585858566409191283525103313309788586748690777871726193375821479130513040312634601011624191379636224 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 2 binary64) (sin.f64 x)))","(if (<=.f64 x #s(literal 8271269140747129/20173827172553973356686868531273530268200826506478308693989526222973809547006571833044104322501076808092993531037089792 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 3/2 binary64) (sin.f64 x)))","(if (<=.f64 x #s(literal 3631288891059715/10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(if (<=.f64 x #s(literal 1462602470010163/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) (sin.f64 x)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 2 binary64))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -2428827039687727/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 1/2 binary64))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -6642173867685913/60383398797144661635864873295812302254670739526663046854019300803929986598274381633378027602842540280663494000492221518396329354078796682120982948022923136698390325231616 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))","#s(literal -1 binary64)","#s(literal -2 binary64)"]],"memory":[[-458272,16050752]],"method":["egg-herbie"],"outputs":[["(neg.f64 (tan.f64 (/.f64 (neg.f64 x) #s(literal 2 binary64))))","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(if (<=.f64 x #s(literal 1134777778456161/2521728396569246669585858566409191283525103313309788586748690777871726193375821479130513040312634601011624191379636224 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 2 binary64) (sin.f64 x)))","(if (<=.f64 x #s(literal 8271269140747129/20173827172553973356686868531273530268200826506478308693989526222973809547006571833044104322501076808092993531037089792 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 3/2 binary64) (sin.f64 x)))","(if (<=.f64 x #s(literal 3631288891059715/10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(if (<=.f64 x #s(literal 1462602470010163/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) (sin.f64 x)))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 2 binary64))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -2428827039687727/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 1/2 binary64))","(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -6642173867685913/60383398797144661635864873295812302254670739526663046854019300803929986598274381633378027602842540280663494000492221518396329354078796682120982948022923136698390325231616 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))","#s(literal -1 binary64)","#s(literal -2 binary64)"]],"time":254.4130859375,"type":"simplify"},{"compiler":[[90,40]],"memory":[[-4784320,3273248]],"stop":[["fuel",1]],"time":10.73388671875,"type":"soundness"},{"compiler":[[90,40],[90,40],[4,4],[4,4],[7,6],[7,6],[4,4],[4,4],[4,4],[4,4]],"memory":[[2021520,42354848]],"remove-preprocessing":[["(negabs x)"],[],[],[],[],[],[],[],[],[],[],["(negabs x)"]],"time":120.951171875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.014892578125,"type":"end"}]