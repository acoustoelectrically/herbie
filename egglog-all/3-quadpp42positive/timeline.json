[{"memory":[[20128,20128]],"time":0.03515625,"type":"start"},{"compiler":[[19,16]],"memory":[[645136,44405344]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":149.376953125,"type":"analyze"},{"bogosity":[{"infinite":0.0638811413257279,"invalid":0.2504469312684573,"precondition":0.0014641286106780171,"valid":0.6842077987951367}],"memory":[[22804560,443346768]],"mixsample":[[6.4189453125,"ival-sub",1200],[108.869873046875,"ival-div",0],[67.84130859375,"adjust",800],[0.146240234375,"ival-sub",4800],[4.639892578125,"ival-mult",1200],[0.01904296875,"ival-sqrt",3200],[0.030517578125,"ival-div",400],[2.943115234375,"ival-sub",1600],[4.392333984375,"ival-assert",0],[0.0322265625,"ival-sub",3600],[62.614501953125,"ival-sub",0],[12.406005859375,"ival-sqrt",1200],[0.3564453125,"ival-sqrt",4800],[78.829833984375,"ival-sqrt",0],[4.2978515625,"ival-sub",400],[0.5126953125,"ival-sub",4400],[75.7802734375,"ival-add",0],[6.157470703125,"ival-mult",800],[5.072998046875,"ival-sub",800],[0.7197265625,"ival-mult",1600],[0.017333984375,"ival-add",400],[3.072021484375,"adjust",2800],[0.081787109375,"ival-sqrt",3600],[0.20556640625,"ival-sub",4000],[6.853271484375,"ival-sqrt",400],[4.776611328125,"ival-sqrt",2000],[0.140869140625,"ival-mult",2000],[8.83642578125,"ival-sqrt",800],[2.660888671875,"ival-sub",2000],[0.010009765625,"ival-sub",3200],[0.512451171875,"ival-sqrt",4000],[1.324462890625,"ival-sqrt",4400],[25.5048828125,"adjust",2000],[3.267822265625,"ival-sub",2400],[272.558837890625,"ival-mult",0],[5.41162109375,"ival-mult",400],[5.431640625,"ival-sqrt",1600],[0.052001953125,"ival-div",800],[9.0927734375,"ival-true",0],[6.549072265625,"ival-sqrt",2400],[0.035400390625,"ival-add",800],[11.50634765625,"exact",0],[53.771240234375,"ival-neg",0]],"outcomes":[[233.35205078125,1,"valid",1310],[95.646728515625,0,"invalid",956],[277.943359375,2,"valid",1183],[50.564208984375,3,"valid",175],[532.634765625,0,"valid",5588]],"time":1644.866943359375,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[112,1,18,125]],"explanations":[["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",1,0,[["(*.f64 b b)","overflow",69],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",16],["(*.f64 a c)","overflow",16]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",4,0,[["(*.f64 b b)","underflow",35],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",34],["(*.f64 a c)","underflow",34],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[1,2]]],["/.f64","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",13,0,[["(*.f64 b b)","underflow",35],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",34],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",28],["(*.f64 a c)","underflow",34],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[]]],["+.f64","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",50,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",82,0,[["(*.f64 b b)","overflow",69],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",16],["(*.f64 a c)","overflow",16],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",82]],[[1,2]]]],"fperrors":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",13,0,false,0,false],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",1,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",87,0,false,1,[3.710755293359357e-301,5.712188010268238e-294,-3.0773772969896027e-15]],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",50,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[2,20],[1,110],[0,126]],"maybe-confusion":[[112,0,1,18,0,125]],"memory":[[-20175600,87420752]],"mixsample":[[0.22021484375,"ival-sub",1200],[0.00927734375,"ival-sub",4800],[3.4208984375,"adjust",800],[5.604736328125,"ival-div",0],[0.206787109375,"ival-mult",1200],[0.222900390625,"ival-sub",1600],[0.205322265625,"ival-assert",0],[2.64111328125,"ival-sub",0],[0.52880859375,"ival-sqrt",1200],[0.02294921875,"ival-sqrt",4800],[0.255615234375,"ival-sub",400],[4.117431640625,"ival-sqrt",0],[3.690185546875,"ival-add",0],[0.3017578125,"ival-mult",800],[0.297119140625,"ival-sub",800],[0.04296875,"ival-mult",1600],[0.1376953125,"adjust",2800],[0.02294921875,"ival-sqrt",3600],[0.0400390625,"ival-sub",4000],[0.376220703125,"ival-sqrt",400],[0.197265625,"ival-sqrt",2000],[0.535400390625,"ival-sqrt",800],[0.109130859375,"ival-sub",2000],[0.01220703125,"ival-mult",2000],[0.072021484375,"ival-sqrt",4000],[1.2734375,"adjust",2000],[0.1650390625,"ival-sub",2400],[0.364013671875,"ival-sqrt",1600],[12.517822265625,"ival-mult",0],[0.27685546875,"ival-mult",400],[0.53955078125,"ival-true",0],[0.297607421875,"ival-sqrt",2400],[0.008056640625,"ival-add",800],[0.5615234375,"exact",0],[2.296875,"ival-neg",0]],"outcomes":[[12.927490234375,1,"valid",72],[17.76220703125,2,"valid",74],[2.96923828125,3,"valid",10],[36.826416015625,0,"valid",356]],"time":170.843017578125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-3452464,22471968]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))"]],"symmetry":[[]],"time":389.321044921875,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.0859375,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",26.862336143160924,"binary64"]],"compiler":[[17,14]],"memory":[[366272,366272]],"time":0.909912109375,"type":"prune"},{"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",1]],"memory":[[2531280,10523008]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))) b)","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"time":196.008056640625,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.20312500000000003],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.0038745239653104],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",11.836419689749135],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.050340608307902]],"memory":[[771664,16538816]],"mixsample":[[0.121337890625,"ival-sub",1200],[0.006103515625,"ival-sub",4800],[1.902099609375,"adjust",800],[2.8544921875,"ival-div",0],[0.106201171875,"ival-mult",1200],[0.09716796875,"ival-sub",1600],[0.165771484375,"ival-assert",0],[2.053466796875,"ival-sub",0],[0.225341796875,"ival-sqrt",1200],[0.012939453125,"ival-sqrt",4800],[0.13037109375,"ival-sub",400],[2.019287109375,"ival-sqrt",0],[2.095703125,"ival-add",0],[0.18408203125,"ival-mult",800],[0.156494140625,"ival-sub",800],[0.022216796875,"ival-mult",1600],[0.07421875,"adjust",2800],[0.011962890625,"ival-sqrt",3600],[0.020263671875,"ival-sub",4000],[0.189208984375,"ival-sqrt",400],[0.10107421875,"ival-sqrt",2000],[0.27783203125,"ival-sqrt",800],[0.060546875,"ival-sub",2000],[0.0068359375,"ival-mult",2000],[0.035888671875,"ival-sqrt",4000],[0.80810546875,"adjust",2000],[0.084228515625,"ival-sub",2400],[0.17724609375,"ival-sqrt",1600],[6.811767578125,"ival-mult",0],[0.106201171875,"ival-mult",400],[0.214111328125,"ival-true",0],[0.204345703125,"ival-sqrt",2400],[0.005126953125,"ival-add",800],[0.357421875,"exact",0],[1.3017578125,"ival-neg",0]],"outcomes":[[6.64306640625,1,"valid",36],[9.57568359375,2,"valid",37],[1.616943359375,3,"valid",5],[19.928955078125,0,"valid",178]],"time":48.9189453125,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[-1067296,8157664]],"outputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[3.35595703125,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[2.19677734375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[1.615966796875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[1.51513671875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[7.18310546875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[2.992919921875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[2.93310546875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[2.943115234375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[2.010009765625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":28.925048828125,"type":"series"},{"count":[[98,0]],"inputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[2397616,10312976]],"method":["egg-herbie"],"outputs":[[]],"time":131.775146484375,"type":"simplify"},{"count":[[5,75]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[2361408,18414912]],"outputs":[["(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(+.f64 #s(literal 0 binary64) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)))","(+.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) #s(literal 0 binary64)) b)","(+.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (neg.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))))","(-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(-.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))))","(-.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) #s(literal 0 binary64)) b)","(-.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))))","(*.f64 (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64))","(*.f64 #s(literal 4 binary64) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)))","(neg.f64 (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 a) c))","(+.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b))))","(+.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (neg.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(-.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(-.f64 (/.f64 (*.f64 (*.f64 b b) b) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (/.f64 (*.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c)) (fma.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)))","(-.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)))","(*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(*.f64 #s(literal -16 binary64) (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(neg.f64 (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (*.f64 #s(literal 4 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(+.f64 (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) b))","(+.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))) (*.f64 b (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))))","(+.f64 (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) b) (*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)))","(+.f64 (*.f64 b (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))) (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 a #s(literal -2 binary64))) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","b","(neg.f64 b)","(+.f64 b #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b)","(-.f64 #s(literal 0 binary64) b)","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(*.f64 b #s(literal 4 binary64))","(*.f64 b #s(literal -16 binary64))","(*.f64 #s(literal 4 binary64) b)","(*.f64 #s(literal -16 binary64) b)","(*.f64 (*.f64 b b) (/.f64 #s(literal 4 binary64) b))","(*.f64 (*.f64 b b) (*.f64 b b))","(*.f64 (*.f64 (*.f64 b b) b) b)","(*.f64 b (*.f64 (*.f64 b b) b))","(neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) b)","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b b) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) #s(literal 0 binary64))","(+.f64 b (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(*.f64 (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))) (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c))))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (fma.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)) (*.f64 a c) (*.f64 (*.f64 b b) b)))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))"]],"time":490.991943359375,"type":"rewrite"},{"compiler":[[1755,261]],"memory":[[-1628640,7717456]],"time":10.72607421875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.89316112590472,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))) (*.f64 #s(literal 2 binary64) a))","fresh",62.61134333798538,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",62.060453670378365,"binary64"],["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",39.72236564943297,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","fresh",60.08144395594181,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",55.51925763893148,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",26.862336143160924,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","next",40.25383530233358,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","next",38.8484386741586,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","fresh",42.760927584430505,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.08038779870565,"binary64"],["(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","fresh",62.06901615329929,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","next",43.30408103332852,"binary64"],["(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","fresh",54.332111157413905,"binary64"],["(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","next",58.1170030191055,"binary64"]],"compiler":[[16,10],[40,19],[16,10],[18,15],[28,16],[22,12],[17,14],[16,13],[17,14],[16,13],[25,11],[18,12],[16,12],[17,13],[17,13],[16,10],[40,19],[16,10],[18,15],[28,16],[22,12],[16,13],[17,14],[16,13],[25,11],[18,12],[16,12],[17,13],[17,13]],"count":[[76,15]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,14],"picked":[1,1]}],"memory":[[1742080,9849808]],"min-error":[[19.396800478010586,"binary64"]],"time":12.421875,"type":"prune"},{"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))))","(neg.f64 b)","b","(sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))","#s(literal 4 binary64)","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","#s(literal -16 binary64)","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))","b","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(*.f64 b #s(literal -16 binary64))","cost-diff",0],["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",1],["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","cost-diff",1],["(+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","cost-diff",1],["(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","cost-diff",0],["(fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))","cost-diff",1],["(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","cost-diff",1],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","cost-diff",0],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","cost-diff",2],["(sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))))","cost-diff",1]],"memory":[[-2323056,14192336]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))))","(-.f64 (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))) b)","(neg.f64 b)","b","(sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))","#s(literal 4 binary64)","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (*.f64 #s(literal -2 binary64) b)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(fma.f64 (*.f64 a a) (*.f64 c c) (*.f64 #s(literal -2 binary64) b))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) (+.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 a c)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 #s(literal 16 binary64) (*.f64 (fma.f64 b (+.f64 b b) (*.f64 (neg.f64 a) c)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b (+.f64 b b) (*.f64 (neg.f64 a) c)) (*.f64 #s(literal 2 binary64) a)))","#s(literal -16 binary64)","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (fma.f64 b (+.f64 b b) (*.f64 (neg.f64 a) c)) (*.f64 #s(literal 2 binary64) a))","(fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))","(fma.f64 b (+.f64 b b) (*.f64 (neg.f64 a) c))","b","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b))) b)","(neg.f64 b)","b","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 b #s(literal -16 binary64) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(fma.f64 b #s(literal -16 binary64) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))))","(*.f64 b #s(literal -16 binary64))","b","#s(literal -16 binary64)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"time":507.618896484375,"type":"simplify"},{"compiler":[[369,37]],"locations":[["(*.f64 #s(literal 4 binary64) (*.f64 a c))","accuracy",0.03029252930532605],["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.1875],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.20312500000000003],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.050340608307902],["(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","accuracy",0.21093750000000003],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","accuracy",2.9905867259121757],["(+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","accuracy",11.857460327100378],["(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","accuracy",20.06139992528445],["(neg.f64 a)","accuracy",0.0],["(fma.f64 (neg.f64 a) c (*.f64 b b))","accuracy",0.0078125],["(/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","accuracy",0.5803711607075974],["(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.8029413065399336],["(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","accuracy",0.10546875],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","accuracy",3.83293474460853],["(fma.f64 (neg.f64 a) c (*.f64 b b))","accuracy",0.0078125],["(+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))))","accuracy",0.04296875],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","accuracy",0.1640625],["(sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))","accuracy",20.04814335209645]],"memory":[[-3422304,53577248]],"mixsample":[[7.5,"adjust",800],[13.130615234375,"ival-div",0],[0.006103515625,"ival-add",4800],[0.10009765625,"adjust",4000],[0.135498046875,"ival-assert",0],[0.011962890625,"ival-sqrt",4800],[1.505126953125,"ival-sub",0],[0.229736328125,"ival-sqrt",1200],[7.2109375,"ival-sqrt",0],[0.04443359375,"ival-sub",400],[12.180908203125,"ival-add",0],[0.050048828125,"ival-mult",800],[0.01611328125,"ival-sub",800],[0.585205078125,"ival-add",400],[0.65625,"adjust",2800],[0.010986328125,"ival-sqrt",3600],[0.1298828125,"ival-add",2400],[0.006103515625,"ival-sub",4000],[0.64306640625,"ival-sqrt",400],[0.20458984375,"ival-add",1200],[0.179443359375,"ival-sqrt",2000],[0.0087890625,"ival-sub",2000],[0.369873046875,"ival-sqrt",800],[0.0400390625,"ival-mult",2000],[0.055908203125,"ival-sqrt",4000],[0.038818359375,"ival-add",4000],[2.72119140625,"adjust",2000],[0.123779296875,"ival-add",1600],[0.177978515625,"ival-sqrt",1600],[17.749267578125,"ival-mult",0],[1.219970703125,"ival-mult",400],[0.16796875,"ival-add",2000],[0.318359375,"ival-true",0],[0.184326171875,"ival-sqrt",2400],[0.387939453125,"ival-add",800],[0.5146484375,"exact",0],[6.163330078125,"ival-neg",0],[0.006103515625,"ival-mult",4000]],"outcomes":[[33.16357421875,1,"valid",60],[30.287109375,2,"valid",41],[2.02587890625,4,"valid",2],[8.407470703125,3,"valid",9],[46.70556640625,0,"valid",144]],"time":158.340087890625,"type":"localize"},{"count":[[24,373]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))","(/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 b #s(literal -16 binary64))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(*.f64 #s(literal 4 binary64) (*.f64 a c))"]],"memory":[[2068192,26151376]],"outputs":[["(- (* 2 b) b)","(- (+ (* -1 (/ (* a c) b)) (* 2 b)) b)","(- (+ (* 2 b) (* a (+ (* -1 (/ c b)) (* -1/4 (/ (* a (pow c 2)) (pow b 3)))))) b)","(- (+ (* 2 b) (* a (+ (* -1 (/ c b)) (* a (+ (* -1/4 (/ (pow c 2) (pow b 3))) (* -1/8 (/ (* a (pow c 3)) (pow b 5)))))))) b)","(* 1/2 (/ (- (* 2 b) b) a))","(/ (+ (* -1/2 (/ (* a c) b)) (* 1/2 (- (* 2 b) b))) a)","(/ (+ (* 1/2 (- (* 2 b) b)) (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ (* 1/2 (- (* 2 b) b)) (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5)))))))) a)","(* 2 b)","(+ (* -1 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -1 (/ c b)) (* -1/4 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -1 (/ c b)) (* a (+ (* -1/4 (/ (pow c 2) (pow b 3))) (* -1/8 (/ (* a (pow c 3)) (pow b 5))))))))","(* -2 b)","(- (* (pow a 2) (pow c 2)) (* 2 b))","(* -1 (/ b a))","(/ (+ (* -1 b) (* 1/2 (* (pow a 2) (pow c 2)))) a)","(+ (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(/ 4 (* a (pow b 2)))","(/ (+ (* 2 (/ (* a c) (pow b 4))) (* 4 (/ 1 (pow b 2)))) a)","(/ (+ (* a (+ (* 2 (/ c (pow b 4))) (/ (* a (pow c 2)) (pow b 6)))) (* 4 (/ 1 (pow b 2)))) a)","(/ (+ (* a (+ (* 2 (/ c (pow b 4))) (* a (+ (* 1/2 (/ (* a (pow c 3)) (pow b 8))) (/ (pow c 2) (pow b 6)))))) (* 4 (/ 1 (pow b 2)))) a)","(* 2 (pow b 2))","(+ (* -1 (* a c)) (* 2 (pow b 2)))","(/ -4 (* a (pow b 2)))","(/ (- (* -2 (/ (* a c) (pow b 4))) (* 4 (/ 1 (pow b 2)))) a)","(/ (- (* a (- (* -1 (/ (* a (pow c 2)) (pow b 6))) (* 2 (/ c (pow b 4))))) (* 4 (/ 1 (pow b 2)))) a)","(/ (- (* a (- (* a (- (* -1/2 (/ (* a (pow c 3)) (pow b 8))) (/ (pow c 2) (pow b 6)))) (* 2 (/ c (pow b 4))))) (* 4 (/ 1 (pow b 2)))) a)","(* 4 (* a (pow b 2)))","(* a (+ (* -2 (* a c)) (* 4 (pow b 2))))","(* -1/2 (/ (* a c) b))","(* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5)))))))","(* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b 6))) (* 1/16 (/ (pow c 4) (pow b 6))))) b)) (* -1/16 (/ (pow c 3) (pow b 5)))))))))","(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1/4 (/ c b))","(+ (* -1/4 (/ c b)) (* -1/16 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1/4 (/ c b)) (* a (+ (* -1/16 (/ (pow c 2) (pow b 3))) (* -1/32 (/ (* a (pow c 3)) (pow b 5))))))","(+ (* -1/4 (/ c b)) (* a (+ (* -1/16 (/ (pow c 2) (pow b 3))) (* a (+ (* -1/4 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b 6))) (* 1/16 (/ (pow c 4) (pow b 6))))) b)) (* -1/32 (/ (pow c 3) (pow b 5))))))))","(+ b (* -16 b))","(+ b (+ (* -16 b) (* -2 (/ (* a c) b))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))))","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (+ b (* -16 b)) a))","(/ (+ (* -1 (/ (* a c) b)) (* 1/2 (+ b (* -16 b)))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* -1 a)","(+ b (* -1/2 (/ (* a c) b)))","(+ b (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5))))))))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* 4 (* a c))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))","(* a (- (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (/ b a)))","(* a (- (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/2 (/ b a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))))","(* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))))","(* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (* -1 (pow c 2))))","(* 1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (* 2 (/ b (pow a 2)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(/ -8 (* (pow a 2) c))","(/ (- (* -16 (/ (pow b 2) (* a (pow c 2)))) (* 8 (/ 1 c))) (pow a 2))","(/ (- (* -32 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 8 (/ 1 c)) (* 16 (/ (pow b 2) (* a (pow c 2)))))) (pow a 2))","(/ (- (* -64 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 8 (/ 1 c)) (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (* 32 (/ (pow b 4) (* (pow a 2) (pow c 3))))))) (pow a 2))","(* -1 (* a c))","(* a (+ (* -1 c) (* 2 (/ (pow b 2) a))))","(/ 8 (* (pow a 2) c))","(/ (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (* 8 (/ 1 c))) (pow a 2))","(/ (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (+ (* 32 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (* 8 (/ 1 c)))) (pow a 2))","(/ (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (+ (* 32 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 64 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (* 8 (/ 1 c))))) (pow a 2))","(* -2 (* (pow a 2) c))","(* (pow a 2) (+ (* -2 c) (* 4 (/ (pow b 2) a))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b a)))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -16 (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -16 (/ b a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -8 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))))","(* -1 (* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))))))","(* -1 (* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2)))))","(/ (- (* -1 (/ (- (* 32 (/ (pow b 4) (* a (pow c 3)))) (* -16 (/ (pow b 2) (pow c 2)))) a)) (* 8 (/ 1 c))) (pow a 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (* -64 (/ (pow b 6) (* a (pow c 4)))) (* 32 (/ (pow b 4) (pow c 3)))) a)) (* -16 (/ (pow b 2) (pow c 2)))) a)) (* 8 (/ 1 c))) (pow a 2))","(* -1 (* a (+ c (* -2 (/ (pow b 2) a)))))","(/ (+ (* -1 (/ (+ (* -32 (/ (pow b 4) (* a (pow c 3)))) (* -16 (/ (pow b 2) (pow c 2)))) a)) (* 8 (/ 1 c))) (pow a 2))","(/ (+ (* -1 (/ (+ (* -16 (/ (pow b 2) (pow c 2))) (* -1 (/ (+ (* 32 (/ (pow b 4) (pow c 3))) (* 64 (/ (pow b 6) (* a (pow c 4))))) a))) a)) (* 8 (/ 1 c))) (pow a 2))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (/ (+ (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1))))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* 16 (/ b a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -8 (/ b a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 8 b)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* 2 (* (sqrt (* a c)) (sqrt -1))))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* b (- (* (sqrt (/ 1 (* a c))) (/ b (sqrt -1))) 1)))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))) 1)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -1)))) (* 1/2 (/ 1 a)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (* 1/2 (/ 1 a)))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b)","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1))))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* (pow b 2) (+ (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(- (* -2 b) (* -1 (* (pow a 2) (pow c 2))))","(+ (* -1 (/ b a)) (* 1/2 (* a (pow c 2))))","(- (* -16 (/ (pow b 2) (* (pow a 3) (pow c 2)))) (* 8 (/ 1 (* (pow a 2) c))))","(- (* (pow b 2) (- (* -32 (/ (pow b 2) (* (pow a 4) (pow c 3)))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -64 (/ (pow b 2) (* (pow a 5) (pow c 4)))) (* 32 (/ 1 (* (pow a 4) (pow c 3)))))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* 16 (/ (pow b 2) (* (pow a 3) (pow c 2)))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* (pow b 2) (+ (* 32 (/ (pow b 2) (* (pow a 4) (pow c 3)))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* (pow b 2) (+ (* (pow b 2) (+ (* 64 (/ (pow b 2) (* (pow a 5) (pow c 4)))) (* 32 (/ 1 (* (pow a 4) (pow c 3)))))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* -2 (* (pow a 2) c)) (* 4 (* a (pow b 2))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -1)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (* 1/2 (/ 1 a)))))","(+ (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 8 (/ 1 a)))))","(* -16 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* 1/2 (/ b a))","(* b (+ (* -1/2 (/ c (pow b 2))) (* 1/2 (/ 1 a))))","(* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (* 1/2 (/ 1 a))))))","(* b (+ 2 (* -1 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* b (- (/ (* (pow a 2) (pow c 2)) b) 2))","(* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(/ (+ (* 2 (/ c (pow b 2))) (* 4 (/ 1 a))) (pow b 2))","(/ (+ (* 2 (/ c (pow b 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b 4)))) (pow b 2))","(/ (+ (* 1/2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 2 (/ c (pow b 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b 4))))) (pow b 2))","(* (pow b 2) (+ 2 (* -1 (/ (* a c) (pow b 2)))))","(/ (- (* -2 (/ c (pow b 2))) (* 4 (/ 1 a))) (pow b 2))","(/ (- (* -1 (/ (* a (pow c 2)) (pow b 4))) (+ (* 2 (/ c (pow b 2))) (* 4 (/ 1 a)))) (pow b 2))","(/ (- (* -1/2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 2 (/ c (pow b 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b 4))))) (pow b 2))","(* (pow b 2) (+ (* -2 (/ (* (pow a 2) c) (pow b 2))) (* 4 a)))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4)))))) b)","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(/ (+ (* -1/4 c) (* -1/16 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -1/4 c) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 2))) (* -1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4))))) b)","(/ (+ (* -1/4 c) (+ (* -1/4 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 2))) (* -1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4)))))) b)","(* -15 b)","(* b (- (* -2 (/ (* a c) (pow b 2))) 15))","(* b (- (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 15))","(* b (- (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))) 15))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -15/2 (/ b a))","(* b (- (* -1 (/ c (pow b 2))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4)))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4))))) (* 15/2 (/ 1 a))))","(* b (+ 1 (* -1/2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -3 b)","(* -1 (* b (+ 3 (* -1 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 3 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 3 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -3/2 (/ b a))","(* -1 (* b (+ (* -1/2 (/ c (pow b 2))) (* 3/2 (/ 1 a)))))","(* -1 (* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (* 3/2 (/ 1 a))))))","(* -1 (* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (* 3/2 (/ 1 a)))))))","(* -1 (* b (+ 2 (* -1 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b)))))","(* -1 (* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 2)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* -1 (* b (+ 2 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ (* -1/4 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1/4 (/ c (pow b 2))) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -1/4 (/ c (pow b 2))) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 4))) (+ (* -1/32 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (/ 1 a))))))","(* -17 b)","(* -1 (* b (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 17 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -17/2 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (* 17/2 (/ 1 a)))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a)))))))","(* -1 (* b (+ 1 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(- (+ (* 2 b) (* c (+ (* -1 (/ a b)) (* -1/4 (/ (* (pow a 2) c) (pow b 3)))))) b)","(- (+ (* 2 b) (* c (+ (* -1 (/ a b)) (* c (+ (* -1/4 (/ (pow a 2) (pow b 3))) (* -1/8 (/ (* (pow a 3) c) (pow b 5)))))))) b)","(+ (* -1/2 (/ c b)) (* 1/2 (/ (- (* 2 b) b) a)))","(+ (* 1/2 (/ (- (* 2 b) b) a)) (* c (- (* -1/8 (/ (* a c) (pow b 3))) (* 1/2 (/ 1 b)))))","(+ (* 1/2 (/ (- (* 2 b) b) a)) (* c (- (* c (+ (* -1/8 (/ a (pow b 3))) (* -1/16 (/ (* (pow a 2) c) (pow b 5))))) (* 1/2 (/ 1 b)))))","(+ (* 2 b) (* c (+ (* -1 (/ a b)) (* -1/4 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -1 (/ a b)) (* c (+ (* -1/4 (/ (pow a 2) (pow b 3))) (* -1/8 (/ (* (pow a 3) c) (pow b 5))))))))","(+ (* 2 (/ c (pow b 4))) (* 4 (/ 1 (* a (pow b 2)))))","(+ (* c (+ (* 2 (/ 1 (pow b 4))) (/ (* a c) (pow b 6)))) (* 4 (/ 1 (* a (pow b 2)))))","(+ (* c (+ (* c (+ (* 1/2 (/ (* (pow a 2) c) (pow b 8))) (/ a (pow b 6)))) (* 2 (/ 1 (pow b 4))))) (* 4 (/ 1 (* a (pow b 2)))))","(- (* -2 (/ c (pow b 4))) (* 4 (/ 1 (* a (pow b 2)))))","(- (* c (- (* -1 (/ (* a c) (pow b 6))) (* 2 (/ 1 (pow b 4))))) (* 4 (/ 1 (* a (pow b 2)))))","(- (* c (- (* c (- (* -1/2 (/ (* (pow a 2) c) (pow b 8))) (/ a (pow b 6)))) (* 2 (/ 1 (pow b 4))))) (* 4 (/ 1 (* a (pow b 2)))))","(* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5)))))))","(* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b 6))) (* 1/16 (/ (pow a 4) (pow b 6))))) b)) (* -1/16 (/ (pow a 3) (pow b 5)))))))))","(* c (- (* -1/16 (/ (* a c) (pow b 3))) (* 1/4 (/ 1 b))))","(* c (- (* c (+ (* -1/16 (/ a (pow b 3))) (* -1/32 (/ (* (pow a 2) c) (pow b 5))))) (* 1/4 (/ 1 b))))","(* c (- (* c (+ (* -1/16 (/ a (pow b 3))) (* c (+ (* -1/4 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b 6))) (* 1/16 (/ (pow a 4) (pow b 6))))) (* a b))) (* -1/32 (/ (pow a 2) (pow b 5))))))) (* 1/4 (/ 1 b))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))))","(+ (* -1 (/ c b)) (* 1/2 (/ (+ b (* -16 b)) a)))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))))","(+ b (* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))","(* c (- (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (/ b c)))","(* c (- (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1))))) (/ b c)))","(* c (+ (* -1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))))","(* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1))))))","(* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))))))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (* 1/2 a)))","(* (pow c 2) (+ (* -1 (pow a 2)) (* 2 (/ b (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(/ (- (* -16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c)","(/ (- (+ (* -32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c)))) (* 8 (/ 1 (pow a 2)))) c)","(/ (- (+ (* -64 (/ (pow b 6) (* (pow a 5) (pow c 3)))) (+ (* -32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c))))) (* 8 (/ 1 (pow a 2)))) c)","(* c (+ (* -1 a) (* 2 (/ (pow b 2) c))))","(/ (+ (* 16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c)","(/ (- (+ (* 32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* 8 (/ 1 (pow a 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c)))) c)","(/ (- (+ (* 64 (/ (pow b 6) (* (pow a 5) (pow c 3)))) (* 8 (/ 1 (pow a 2)))) (+ (* -32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c))))) c)","(* c (+ (* -2 (pow a 2)) (* 4 (/ (* a (pow b 2)) c))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b c)))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* c (+ (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -16 (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -16 (/ b c)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -8 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1))))))","(* -1 (* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1))))))))","(* -1 (/ (+ (* 16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -32 (/ (pow b 4) (* (pow a 4) c))) (* -16 (/ (pow b 2) (pow a 3)))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -16 (/ (pow b 2) (pow a 3))) (* -1 (/ (+ (* 32 (/ (pow b 4) (pow a 4))) (* 64 (/ (pow b 6) (* (pow a 5) c)))) c))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (* c (+ a (* -2 (/ (pow b 2) c)))))","(* -1 (/ (- (* -16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (- (* -1 (/ (- (* 32 (/ (pow b 4) (* (pow a 4) c))) (* -16 (/ (pow b 2) (pow a 3)))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -64 (/ (pow b 6) (* (pow a 5) c))) (* 32 (/ (pow b 4) (pow a 4)))) c)) (* -16 (/ (pow b 2) (pow a 3)))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (* c (+ (* -4 (/ (* a (pow b 2)) c)) (* 2 (pow a 2)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* 16 (/ b c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 8 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[6.458984375,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","c","-inf"],[7.516845703125,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","c","inf"],[5.785888671875,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","c","0"],[7.5859375,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","b","-inf"],[11.264892578125,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","b","inf"],[9.042236328125,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","b","0"],[8.576904296875,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","a","-inf"],[7.640869140625,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","a","inf"],[7.68408203125,"((+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (/ (+ (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b))))) (* 2 a)) (neg b) (sqrt (* 4 (+ (* (neg a) c) (* b b)))) (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (/ (neg (+ (+ (* (* (neg a) c) (* a c)) b) b)) (* 2 a)) (+ (+ (* (* (neg a) c) (* a c)) b) b) (+ (* (* (neg a) c) (* a c)) b) (neg (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)))) (+ (* b b) (+ (* (neg a) c) (* b b))) (/ -16 (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a))) (* (+ (* b b) (+ (* (neg a) c) (* b b))) (* 2 a)) (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (+ (* (neg a) c) (* b b)) (/ (+ (neg b) (sqrt (+ (* (neg a) c) (* b b)))) (* 2 a)) (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (* b -16) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (* b -16) (+ (* (neg a) c) (* b b)) (neg a) (sqrt (+ (* (neg a) c) (* b b))) (sqrt (- (* b b) (* 4 (* a c)))) (* 4 (* a c)))","a","0"]],"time":80.5400390625,"type":"series"},{"count":[[373,0]],"inputs":[["(- (* 2 b) b)","(- (+ (* -1 (/ (* a c) b)) (* 2 b)) b)","(- (+ (* 2 b) (* a (+ (* -1 (/ c b)) (* -1/4 (/ (* a (pow c 2)) (pow b 3)))))) b)","(- (+ (* 2 b) (* a (+ (* -1 (/ c b)) (* a (+ (* -1/4 (/ (pow c 2) (pow b 3))) (* -1/8 (/ (* a (pow c 3)) (pow b 5)))))))) b)","(* 1/2 (/ (- (* 2 b) b) a))","(/ (+ (* -1/2 (/ (* a c) b)) (* 1/2 (- (* 2 b) b))) a)","(/ (+ (* 1/2 (- (* 2 b) b)) (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ (* 1/2 (- (* 2 b) b)) (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5)))))))) a)","(* 2 b)","(+ (* -1 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -1 (/ c b)) (* -1/4 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -1 (/ c b)) (* a (+ (* -1/4 (/ (pow c 2) (pow b 3))) (* -1/8 (/ (* a (pow c 3)) (pow b 5))))))))","(* -2 b)","(- (* (pow a 2) (pow c 2)) (* 2 b))","(* -1 (/ b a))","(/ (+ (* -1 b) (* 1/2 (* (pow a 2) (pow c 2)))) a)","(+ (* -1 (* (pow a 2) (pow c 2))) (* 2 b))","b","(+ b (* -1 (* (pow a 2) (pow c 2))))","(/ 4 (* a (pow b 2)))","(/ (+ (* 2 (/ (* a c) (pow b 4))) (* 4 (/ 1 (pow b 2)))) a)","(/ (+ (* a (+ (* 2 (/ c (pow b 4))) (/ (* a (pow c 2)) (pow b 6)))) (* 4 (/ 1 (pow b 2)))) a)","(/ (+ (* a (+ (* 2 (/ c (pow b 4))) (* a (+ (* 1/2 (/ (* a (pow c 3)) (pow b 8))) (/ (pow c 2) (pow b 6)))))) (* 4 (/ 1 (pow b 2)))) a)","(* 2 (pow b 2))","(+ (* -1 (* a c)) (* 2 (pow b 2)))","(/ -4 (* a (pow b 2)))","(/ (- (* -2 (/ (* a c) (pow b 4))) (* 4 (/ 1 (pow b 2)))) a)","(/ (- (* a (- (* -1 (/ (* a (pow c 2)) (pow b 6))) (* 2 (/ c (pow b 4))))) (* 4 (/ 1 (pow b 2)))) a)","(/ (- (* a (- (* a (- (* -1/2 (/ (* a (pow c 3)) (pow b 8))) (/ (pow c 2) (pow b 6)))) (* 2 (/ c (pow b 4))))) (* 4 (/ 1 (pow b 2)))) a)","(* 4 (* a (pow b 2)))","(* a (+ (* -2 (* a c)) (* 4 (pow b 2))))","(* -1/2 (/ (* a c) b))","(* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5)))))))","(* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b 6))) (* 1/16 (/ (pow c 4) (pow b 6))))) b)) (* -1/16 (/ (pow c 3) (pow b 5)))))))))","(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1/4 (/ c b))","(+ (* -1/4 (/ c b)) (* -1/16 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1/4 (/ c b)) (* a (+ (* -1/16 (/ (pow c 2) (pow b 3))) (* -1/32 (/ (* a (pow c 3)) (pow b 5))))))","(+ (* -1/4 (/ c b)) (* a (+ (* -1/16 (/ (pow c 2) (pow b 3))) (* a (+ (* -1/4 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b 6))) (* 1/16 (/ (pow c 4) (pow b 6))))) b)) (* -1/32 (/ (pow c 3) (pow b 5))))))))","(+ b (* -16 b))","(+ b (+ (* -16 b) (* -2 (/ (* a c) b))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))))","(+ b (+ (* -16 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))))","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (/ (+ b (* -16 b)) a))","(/ (+ (* -1 (/ (* a c) b)) (* 1/2 (+ b (* -16 b)))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ (* 1/2 (+ b (* -16 b))) (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* -1 a)","(+ b (* -1/2 (/ (* a c) b)))","(+ b (* a (+ (* -1/2 (/ c b)) (* -1/8 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -1/2 (/ c b)) (* a (+ (* -1/8 (/ (pow c 2) (pow b 3))) (* -1/16 (/ (* a (pow c 3)) (pow b 5))))))))","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* 4 (* a c))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))","(* a (- (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (/ b a)))","(* a (- (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/2 (/ b a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))))","(* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1))))))","(* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (- (* -2 (/ b (pow a 2))) (* -1 (pow c 2))))","(* 1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ b (pow a 2))) (* 1/2 (pow c 2))))","(* -1 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* -1 (pow c 2)) (* 2 (/ b (pow a 2)))))","(* (pow a 2) (+ (* -1 (pow c 2)) (/ b (pow a 2))))","(/ -8 (* (pow a 2) c))","(/ (- (* -16 (/ (pow b 2) (* a (pow c 2)))) (* 8 (/ 1 c))) (pow a 2))","(/ (- (* -32 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 8 (/ 1 c)) (* 16 (/ (pow b 2) (* a (pow c 2)))))) (pow a 2))","(/ (- (* -64 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 8 (/ 1 c)) (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (* 32 (/ (pow b 4) (* (pow a 2) (pow c 3))))))) (pow a 2))","(* -1 (* a c))","(* a (+ (* -1 c) (* 2 (/ (pow b 2) a))))","(/ 8 (* (pow a 2) c))","(/ (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (* 8 (/ 1 c))) (pow a 2))","(/ (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (+ (* 32 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (* 8 (/ 1 c)))) (pow a 2))","(/ (+ (* 16 (/ (pow b 2) (* a (pow c 2)))) (+ (* 32 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 64 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (* 8 (/ 1 c))))) (pow a 2))","(* -2 (* (pow a 2) c))","(* (pow a 2) (+ (* -2 c) (* 4 (/ (pow b 2) a))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b a)))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -1)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -16 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -16 (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -16 (/ b a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -8 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -8 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -8 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))))","(* -1 (* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* a (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))))))","(* -1 (* a (+ (* -1/2 (pow c 2)) (/ b (pow a 2)))))","(/ (- (* -1 (/ (- (* 32 (/ (pow b 4) (* a (pow c 3)))) (* -16 (/ (pow b 2) (pow c 2)))) a)) (* 8 (/ 1 c))) (pow a 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (* -64 (/ (pow b 6) (* a (pow c 4)))) (* 32 (/ (pow b 4) (pow c 3)))) a)) (* -16 (/ (pow b 2) (pow c 2)))) a)) (* 8 (/ 1 c))) (pow a 2))","(* -1 (* a (+ c (* -2 (/ (pow b 2) a)))))","(/ (+ (* -1 (/ (+ (* -32 (/ (pow b 4) (* a (pow c 3)))) (* -16 (/ (pow b 2) (pow c 2)))) a)) (* 8 (/ 1 c))) (pow a 2))","(/ (+ (* -1 (/ (+ (* -16 (/ (pow b 2) (pow c 2))) (* -1 (/ (+ (* 32 (/ (pow b 4) (pow c 3))) (* 64 (/ (pow b 6) (* a (pow c 4))))) a))) a)) (* 8 (/ 1 c))) (pow a 2))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (/ (+ (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1))))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (* 16 (/ b a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -8 (/ b a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 8 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 8 b)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* 2 (* (sqrt (* a c)) (sqrt -1))))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* b (- (* (sqrt (/ 1 (* a c))) (/ b (sqrt -1))) 1)))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))) 1)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -1)))) (* 1/2 (/ 1 a)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (* 1/2 (/ 1 a)))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b)","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1))))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))))","(+ (* 2 (* (sqrt (* a c)) (sqrt -1))) (* (pow b 2) (+ (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(- (* -2 b) (* -1 (* (pow a 2) (pow c 2))))","(+ (* -1 (/ b a)) (* 1/2 (* a (pow c 2))))","(- (* -16 (/ (pow b 2) (* (pow a 3) (pow c 2)))) (* 8 (/ 1 (* (pow a 2) c))))","(- (* (pow b 2) (- (* -32 (/ (pow b 2) (* (pow a 4) (pow c 3)))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -64 (/ (pow b 2) (* (pow a 5) (pow c 4)))) (* 32 (/ 1 (* (pow a 4) (pow c 3)))))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* 16 (/ (pow b 2) (* (pow a 3) (pow c 2)))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* (pow b 2) (+ (* 32 (/ (pow b 2) (* (pow a 4) (pow c 3)))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* (pow b 2) (+ (* (pow b 2) (+ (* 64 (/ (pow b 2) (* (pow a 5) (pow c 4)))) (* 32 (/ 1 (* (pow a 4) (pow c 3)))))) (* 16 (/ 1 (* (pow a 3) (pow c 2)))))) (* 8 (/ 1 (* (pow a 2) c))))","(+ (* -2 (* (pow a 2) c)) (* 4 (* a (pow b 2))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -1)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -1))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (* 1/2 (/ 1 a)))))","(+ (* -16 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 16)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 8 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 8 (/ 1 a)))))","(* -16 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -1) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* 1/2 (/ b a))","(* b (+ (* -1/2 (/ c (pow b 2))) (* 1/2 (/ 1 a))))","(* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (* 1/2 (/ 1 a))))))","(* b (+ 2 (* -1 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* b (- (/ (* (pow a 2) (pow c 2)) b) 2))","(* b (- (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(* b (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))))","(/ (+ (* 2 (/ c (pow b 2))) (* 4 (/ 1 a))) (pow b 2))","(/ (+ (* 2 (/ c (pow b 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b 4)))) (pow b 2))","(/ (+ (* 1/2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 2 (/ c (pow b 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b 4))))) (pow b 2))","(* (pow b 2) (+ 2 (* -1 (/ (* a c) (pow b 2)))))","(/ (- (* -2 (/ c (pow b 2))) (* 4 (/ 1 a))) (pow b 2))","(/ (- (* -1 (/ (* a (pow c 2)) (pow b 4))) (+ (* 2 (/ c (pow b 2))) (* 4 (/ 1 a)))) (pow b 2))","(/ (- (* -1/2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* 2 (/ c (pow b 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b 4))))) (pow b 2))","(* (pow b 2) (+ (* -2 (/ (* (pow a 2) c) (pow b 2))) (* 4 a)))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 4)))))) b)","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(/ (+ (* -1/4 c) (* -1/16 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -1/4 c) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 2))) (* -1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4))))) b)","(/ (+ (* -1/4 c) (+ (* -1/4 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 2))) (* -1/32 (/ (* (pow a 2) (pow c 3)) (pow b 4)))))) b)","(* -15 b)","(* b (- (* -2 (/ (* a c) (pow b 2))) 15))","(* b (- (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 15))","(* b (- (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))) 15))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -15/2 (/ b a))","(* b (- (* -1 (/ c (pow b 2))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4)))) (* 15/2 (/ 1 a))))","(* b (- (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (* -1 (/ (* a (pow c 2)) (pow b 4))))) (* 15/2 (/ 1 a))))","(* b (+ 1 (* -1/2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -3 b)","(* -1 (* b (+ 3 (* -1 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 3 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 3 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -3/2 (/ b a))","(* -1 (* b (+ (* -1/2 (/ c (pow b 2))) (* 3/2 (/ 1 a)))))","(* -1 (* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (* 3/2 (/ 1 a))))))","(* -1 (* b (+ (* -1/2 (/ c (pow b 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (* 3/2 (/ 1 a)))))))","(* -1 (* b (+ 2 (* -1 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -1 (/ (* a c) (pow b 2))) (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ 2 (* -1 (/ (* (pow a 2) (pow c 2)) b)))))","(* -1 (* b (+ (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 2)))","(* -1 (* b (- (/ (* (pow a 2) (pow c 2)) b) 1)))","(* -1 (* b (+ 2 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ (* -1/4 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1/4 (/ c (pow b 2))) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -1/4 (/ c (pow b 2))) (+ (* -1/16 (/ (* a (pow c 2)) (pow b 4))) (+ (* -1/32 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (/ 1 a))))))","(* -17 b)","(* -1 (* b (+ 17 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 17 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 17 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -17/2 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (* 17/2 (/ 1 a)))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a))))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (* 17/2 (/ 1 a)))))))","(* -1 (* b (+ 1 (* -1/2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -1/2 (/ (* a c) (pow b 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b 6))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(- (+ (* 2 b) (* c (+ (* -1 (/ a b)) (* -1/4 (/ (* (pow a 2) c) (pow b 3)))))) b)","(- (+ (* 2 b) (* c (+ (* -1 (/ a b)) (* c (+ (* -1/4 (/ (pow a 2) (pow b 3))) (* -1/8 (/ (* (pow a 3) c) (pow b 5)))))))) b)","(+ (* -1/2 (/ c b)) (* 1/2 (/ (- (* 2 b) b) a)))","(+ (* 1/2 (/ (- (* 2 b) b) a)) (* c (- (* -1/8 (/ (* a c) (pow b 3))) (* 1/2 (/ 1 b)))))","(+ (* 1/2 (/ (- (* 2 b) b) a)) (* c (- (* c (+ (* -1/8 (/ a (pow b 3))) (* -1/16 (/ (* (pow a 2) c) (pow b 5))))) (* 1/2 (/ 1 b)))))","(+ (* 2 b) (* c (+ (* -1 (/ a b)) (* -1/4 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -1 (/ a b)) (* c (+ (* -1/4 (/ (pow a 2) (pow b 3))) (* -1/8 (/ (* (pow a 3) c) (pow b 5))))))))","(+ (* 2 (/ c (pow b 4))) (* 4 (/ 1 (* a (pow b 2)))))","(+ (* c (+ (* 2 (/ 1 (pow b 4))) (/ (* a c) (pow b 6)))) (* 4 (/ 1 (* a (pow b 2)))))","(+ (* c (+ (* c (+ (* 1/2 (/ (* (pow a 2) c) (pow b 8))) (/ a (pow b 6)))) (* 2 (/ 1 (pow b 4))))) (* 4 (/ 1 (* a (pow b 2)))))","(- (* -2 (/ c (pow b 4))) (* 4 (/ 1 (* a (pow b 2)))))","(- (* c (- (* -1 (/ (* a c) (pow b 6))) (* 2 (/ 1 (pow b 4))))) (* 4 (/ 1 (* a (pow b 2)))))","(- (* c (- (* c (- (* -1/2 (/ (* (pow a 2) c) (pow b 8))) (/ a (pow b 6)))) (* 2 (/ 1 (pow b 4))))) (* 4 (/ 1 (* a (pow b 2)))))","(* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5)))))))","(* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b 6))) (* 1/16 (/ (pow a 4) (pow b 6))))) b)) (* -1/16 (/ (pow a 3) (pow b 5)))))))))","(* c (- (* -1/16 (/ (* a c) (pow b 3))) (* 1/4 (/ 1 b))))","(* c (- (* c (+ (* -1/16 (/ a (pow b 3))) (* -1/32 (/ (* (pow a 2) c) (pow b 5))))) (* 1/4 (/ 1 b))))","(* c (- (* c (+ (* -1/16 (/ a (pow b 3))) (* c (+ (* -1/4 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b 6))) (* 1/16 (/ (pow a 4) (pow b 6))))) (* a b))) (* -1/32 (/ (pow a 2) (pow b 5))))))) (* 1/4 (/ 1 b))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))))","(+ b (+ (* -16 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))))","(+ (* -1 (/ c b)) (* 1/2 (/ (+ b (* -16 b)) a)))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))))","(+ (* 1/2 (/ (+ b (* -16 b)) a)) (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))))","(+ b (* c (+ (* -1/2 (/ a b)) (* -1/8 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -1/2 (/ a b)) (* c (+ (* -1/8 (/ (pow a 2) (pow b 3))) (* -1/16 (/ (* (pow a 3) c) (pow b 5))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))","(* c (- (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (/ b c)))","(* c (- (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1))))) (/ b c)))","(* c (+ (* -1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))))","(* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1))))))","(* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))))))","(* (pow c 2) (- (* -2 (/ b (pow c 2))) (* -1 (pow a 2))))","(* (pow c 2) (+ (* -1 (/ b (* a (pow c 2)))) (* 1/2 a)))","(* (pow c 2) (+ (* -1 (pow a 2)) (* 2 (/ b (pow c 2)))))","(* (pow c 2) (+ (* -1 (pow a 2)) (/ b (pow c 2))))","(/ (- (* -16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c)","(/ (- (+ (* -32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c)))) (* 8 (/ 1 (pow a 2)))) c)","(/ (- (+ (* -64 (/ (pow b 6) (* (pow a 5) (pow c 3)))) (+ (* -32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c))))) (* 8 (/ 1 (pow a 2)))) c)","(* c (+ (* -1 a) (* 2 (/ (pow b 2) c))))","(/ (+ (* 16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c)","(/ (- (+ (* 32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* 8 (/ 1 (pow a 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c)))) c)","(/ (- (+ (* 64 (/ (pow b 6) (* (pow a 5) (pow c 3)))) (* 8 (/ 1 (pow a 2)))) (+ (* -32 (/ (pow b 4) (* (pow a 4) (pow c 2)))) (* -16 (/ (pow b 2) (* (pow a 3) c))))) c)","(* c (+ (* -2 (pow a 2)) (* 4 (/ (* a (pow b 2)) c))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b c)))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* c (+ (* -16 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -16 (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -16 (/ b c)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -8 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -8 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -8 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1))))))","(* -1 (* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1))))))))","(* -1 (/ (+ (* 16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -32 (/ (pow b 4) (* (pow a 4) c))) (* -16 (/ (pow b 2) (pow a 3)))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -16 (/ (pow b 2) (pow a 3))) (* -1 (/ (+ (* 32 (/ (pow b 4) (pow a 4))) (* 64 (/ (pow b 6) (* (pow a 5) c)))) c))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (* c (+ a (* -2 (/ (pow b 2) c)))))","(* -1 (/ (- (* -16 (/ (pow b 2) (* (pow a 3) c))) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (- (* -1 (/ (- (* 32 (/ (pow b 4) (* (pow a 4) c))) (* -16 (/ (pow b 2) (pow a 3)))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -64 (/ (pow b 6) (* (pow a 5) c))) (* 32 (/ (pow b 4) (pow a 4)))) c)) (* -16 (/ (pow b 2) (pow a 3)))) c)) (* 8 (/ 1 (pow a 2)))) c))","(* -1 (* c (+ (* -4 (/ (* a (pow b 2)) c)) (* 2 (pow a 2)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (* 16 (/ b c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ (* -16 b) (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 8 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -8 (/ b a)) (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[5333008,13311216]],"method":["egg-herbie"],"outputs":[[]],"time":146.708984375,"type":"simplify"},{"count":[[24,360]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))","(/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 b #s(literal -16 binary64))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","(sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(*.f64 #s(literal 4 binary64) (*.f64 a c))"]],"memory":[[-5391056,19610336]],"outputs":[["#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)","#s(literal 4 binary64)","#s(literal 2 binary64)","#s(literal -16 binary64)","#s(literal 1/4 binary64)","#s(literal 3/4 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 9/2 binary64)","#s(literal 9 binary64)","#s(literal -4096 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal 65536 binary64)"]],"time":322.614990234375,"type":"rewrite"},{"compiler":[[75,34]],"memory":[[1474688,1474688]],"time":2.68701171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.89316112590472,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))) (*.f64 #s(literal 2 binary64) a))","fresh",62.61134333798538,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","next",62.060453670378365,"binary64"],["(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",39.72236564943297,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",55.51925763893148,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",26.862336143160924,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","done",40.25383530233358,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","done",38.8484386741586,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",42.760927584430505,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.08038779870565,"binary64"],["(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","next",62.06901615329929,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","done",43.30408103332852,"binary64"],["(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.08936146604137,"binary64"],["(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.32532809339034,"binary64"],["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","next",60.31889364351452,"binary64"],["(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.3236129200562,"binary64"],["(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",62.625551239763794,"binary64"],["(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","next",62.64315949945865,"binary64"],["(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","fresh",54.332111157413905,"binary64"],["(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","done",58.1170030191055,"binary64"]],"compiler":[[16,10],[40,19],[16,10],[18,15],[22,12],[17,14],[16,13],[17,14],[16,13],[25,11],[18,12],[16,12],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[17,13],[17,13],[16,10],[40,19],[16,10],[22,12],[16,13],[25,11],[18,12],[5,7],[5,7],[5,7],[5,7],[5,7],[5,7],[17,13]],"count":[[30,20]],"kept":[{"done":[1,1],"fresh":[9,8],"new":[15,6],"picked":[5,5]}],"memory":[[-245072,8045456]],"min-error":[[19.260926993354456,"binary64"]],"time":12.02001953125,"type":"prune"},{"inputs":[["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","#s(literal -4096 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","#s(literal 1/4 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","b","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(literal 4 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","cost-diff",0],["(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64))","cost-diff",0],["(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","cost-diff",2],["(*.f64 (neg.f64 a) c)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","cost-diff",0],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","cost-diff",2],["(*.f64 #s(literal 2 binary64) a)","cost-diff",0],["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(*.f64 #s(literal 2 binary64) a)","cost-diff",0],["(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","cost-diff",0],["(+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1]],"memory":[[3951760,12196512]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(+.f64 b (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))))","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","#s(literal -4096 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","#s(literal 1/4 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b b)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(fma.f64 (*.f64 a a) (*.f64 c c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b b)))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b b)) #s(literal 4 binary64))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b b))","b","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(fma.f64 (*.f64 a a) (*.f64 c c) b)","(*.f64 (neg.f64 a) c)","(neg.f64 a)","a","c","#s(literal 4 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"time":343.052001953125,"type":"simplify"},{"compiler":[[216,28]],"locations":[["(neg.f64 a)","accuracy",0.0],["(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","accuracy",0.00390625],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","accuracy",0.10546875],["(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","accuracy",3.828412097482301],["(neg.f64 a)","accuracy",0.0],["(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","accuracy",0.00390625],["(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","accuracy",0.10546875],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","accuracy",3.82902849460853],["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","accuracy",0.0],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","accuracy",0.0],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.20312500000000003],["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.972943981921959],["(+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",15.75252060519146],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.050340608307902]],"memory":[[-530928,33863408]],"mixsample":[[0.1943359375,"ival-sub",1200],[0.00390625,"ival-sub",4800],[4.106201171875,"adjust",800],[10.340087890625,"ival-div",0],[0.078125,"ival-mult",1200],[0.1220703125,"ival-sub",1600],[0.0068359375,"ival-div",400],[0.122802734375,"ival-assert",0],[0.012939453125,"ival-sqrt",4800],[1.34619140625,"ival-sub",0],[0.346435546875,"ival-sqrt",1200],[0.154052734375,"ival-sub",400],[1.98486328125,"ival-sqrt",0],[0.02294921875,"ival-sub",4400],[0.187744140625,"ival-mult",800],[5.946044921875,"ival-add",0],[0.26904296875,"ival-sub",800],[0.041015625,"ival-mult",1600],[0.004150390625,"ival-add",400],[0.2109375,"adjust",2800],[0.011962890625,"ival-sub",4000],[0.248291015625,"ival-sqrt",400],[0.14501953125,"ival-sqrt",2000],[0.007080078125,"ival-mult",2000],[0.511474609375,"ival-sqrt",800],[0.058349609375,"ival-sub",2000],[0.025146484375,"ival-sqrt",4000],[0.031982421875,"ival-sqrt",4400],[1.874267578125,"adjust",2000],[0.16943359375,"ival-sub",2400],[0.186279296875,"ival-sqrt",1600],[12.0166015625,"ival-mult",0],[0.202392578125,"ival-mult",400],[0.249755859375,"ival-true",0],[0.2431640625,"ival-sqrt",2400],[0.50537109375,"exact",0],[1.28955078125,"ival-neg",0]],"outcomes":[[15.5791015625,1,"valid",43],[20.756103515625,2,"valid",46],[2.89208984375,3,"valid",5],[37.429443359375,0,"valid",162]],"time":100.212890625,"type":"localize"},{"count":[[15,137]],"inputs":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(*.f64 (neg.f64 a) c)","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(neg.f64 a)"]],"memory":[[-5135632,11694912]],"outputs":[["(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ b a)","(/ (+ b (* -1 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ -2048 a)","(* 2 a)","(/ 1/8 a)","(+ b (* (pow a 2) (pow c 2)))","(/ (+ b (* 1/2 (* (pow a 2) (pow c 2)))) a)","(+ (* 2 b) (* (pow a 2) (pow c 2)))","(* -1 (* a c))","(* 4 (/ b a))","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","(* 8 b)","(+ (* 4 (* (pow a 2) (pow c 2))) (* 8 b))","(* -1 a)","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b (pow a 2)) (pow c 2)))","(* 1/2 (* a (pow c 2)))","(* a (+ (* 1/2 (pow c 2)) (/ b (pow a 2))))","(* (pow a 2) (+ (* 2 (/ b (pow a 2))) (pow c 2)))","(* 2 (* a (pow c 2)))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(* 4 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* 4 (pow c 2)) (* 8 (/ b (pow a 2)))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 b) (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1/2 b)) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* -1/2 (pow c 2)))))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 1/2 (* a (pow c 2))) (/ b a))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(* b (+ 8 (* 4 (/ (* (pow a 2) (pow c 2)) b))))","(/ c b)","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b))","(* 2 (/ (* a c) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1)))","(* -1 (* b (- (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 2)))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(* -1 (* b (- (* -4 (/ (* (pow a 2) (pow c 2)) b)) 8)))","(+ (* -1 (/ c b)) (/ b a))","(+ (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))) (/ b a))","(+ (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* (pow c 2) (+ (/ b (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* 1/2 a) (/ b (* a (pow c 2)))))","(* (pow c 2) (+ (* 2 (/ b (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(* (pow c 2) (+ (* 4 (pow a 2)) (* 8 (/ b (pow c 2)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[3.7958984375,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","c","-inf"],[3.134033203125,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","c","inf"],[2.037109375,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","c","0"],[2.302001953125,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","b","-inf"],[1.8291015625,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","b","inf"],[2.387939453125,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","b","0"],[3.10302734375,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","a","-inf"],[5.885986328125,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","a","inf"],[3.85400390625,"((- (* b b) (* 4 (* a c))) (/ (+ b (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ b (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ -4096 (* 2 a)) (* 2 a) (/ 1/4 (* 2 a)) (+ (* (* (neg a) c) (* (neg a) c)) b) (/ (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* 2 a)) (+ (+ (* (* (neg a) c) (* (neg a) c)) b) b) (* (neg a) c) (/ (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (* 2 a)) (* (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) 4) (+ b (+ (* (* (neg a) c) (* (neg a) c)) b)) (neg a))","a","0"]],"time":32.93798828125,"type":"series"},{"count":[[137,0]],"inputs":[["(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ b a)","(/ (+ b (* -1 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3)))))))) a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ -2048 a)","(* 2 a)","(/ 1/8 a)","(+ b (* (pow a 2) (pow c 2)))","(/ (+ b (* 1/2 (* (pow a 2) (pow c 2)))) a)","(+ (* 2 b) (* (pow a 2) (pow c 2)))","(* -1 (* a c))","(* 4 (/ b a))","(/ (+ (* 2 (* (pow a 2) (pow c 2))) (* 4 b)) a)","(* 8 b)","(+ (* 4 (* (pow a 2) (pow c 2))) (* 8 b))","(* -1 a)","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b (pow a 2)) (pow c 2)))","(* 1/2 (* a (pow c 2)))","(* a (+ (* 1/2 (pow c 2)) (/ b (pow a 2))))","(* (pow a 2) (+ (* 2 (/ b (pow a 2))) (pow c 2)))","(* 2 (* a (pow c 2)))","(* a (+ (* 2 (pow c 2)) (* 4 (/ b (pow a 2)))))","(* 4 (* (pow a 2) (pow c 2)))","(* (pow a 2) (+ (* 4 (pow c 2)) (* 8 (/ b (pow a 2)))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 b) (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1/2 b)) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b (pow a 2))) (* -1/2 (pow c 2)))))","(* -1 (* a (+ (* -4 (/ b (pow a 2))) (* -2 (pow c 2)))))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 1/2 (* a (pow c 2))) (/ b a))","(+ (* 2 (* a (pow c 2))) (* 4 (/ b a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ (* 1/2 (/ (* a (pow c 2)) b)) (/ 1 a)))","(* b (+ 2 (/ (* (pow a 2) (pow c 2)) b)))","(* b (+ (* 2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a))))","(* b (+ 8 (* 4 (/ (* (pow a 2) (pow c 2)) b))))","(/ c b)","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b))","(* 2 (/ (* a c) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 1)))","(* -1 (* b (- (* -1/2 (/ (* a (pow c 2)) b)) (/ 1 a))))","(* -1 (* b (- (* -1 (/ (* (pow a 2) (pow c 2)) b)) 2)))","(* -1 (* b (- (* -2 (/ (* a (pow c 2)) b)) (* 4 (/ 1 a)))))","(* -1 (* b (- (* -4 (/ (* (pow a 2) (pow c 2)) b)) 8)))","(+ (* -1 (/ c b)) (/ b a))","(+ (* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b))) (/ b a))","(+ (* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* (pow c 2) (+ (/ b (pow c 2)) (pow a 2)))","(* (pow c 2) (+ (* 1/2 a) (/ b (* a (pow c 2)))))","(* (pow c 2) (+ (* 2 (/ b (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (* 2 a) (* 4 (/ b (* a (pow c 2))))))","(* (pow c 2) (+ (* 4 (pow a 2)) (* 8 (/ b (pow c 2)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[2723504,10849872]],"method":["egg-herbie"],"outputs":[[]],"time":138.26318359375,"type":"simplify"},{"count":[[15,225]],"inputs":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b)","(*.f64 (neg.f64 a) c)","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64))","(+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))","(neg.f64 a)"]],"memory":[[-1845968,23282560]],"outputs":[["(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) (*.f64 b b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","(*.f64 a #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 2 binary64)) a)","(*.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 a (/.f64 #s(literal 4 binary64) #s(literal 2 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 4 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 4 binary64) #s(literal 2 binary64))))","(/.f64 a #s(literal 2 binary64))","(/.f64 #s(literal 2 binary64) a)","(/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","(*.f64 a #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 2 binary64)) a)","(*.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 a (/.f64 #s(literal 4 binary64) #s(literal 2 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 4 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 4 binary64) #s(literal 2 binary64))))","(/.f64 a #s(literal 2 binary64))","(/.f64 #s(literal 2 binary64) a)","(/.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 1/4 binary64) a) (/.f64 #s(literal 4 binary64) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) a)","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 a #s(literal 1/4 binary64)) #s(literal 2 binary64))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) a))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(*.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) (/.f64 a #s(literal 1/4 binary64)))","(*.f64 a (/.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) (*.f64 b b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) (*.f64 b b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","(neg.f64 (*.f64 a c))","(+.f64 (*.f64 a c) b)","(+.f64 b (*.f64 a c))","(+.f64 (neg.f64 b) (*.f64 a c))","(+.f64 (*.f64 c #s(literal 0 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 a c) (*.f64 (*.f64 b b) b))","(+.f64 (*.f64 a c) #s(literal 4 binary64))","(+.f64 (*.f64 a c) (neg.f64 b))","(+.f64 (*.f64 a c) (*.f64 b b))","(+.f64 (*.f64 a c) #s(literal 0 binary64))","(+.f64 (*.f64 b b) (*.f64 a c))","(+.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 a c))","(+.f64 (*.f64 (*.f64 b b) b) (*.f64 a c))","a","(neg.f64 a)","(+.f64 a #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) a)","(-.f64 #s(literal 0 binary64) a)","(-.f64 (/.f64 #s(literal 0 binary64) a) a)","(*.f64 a #s(literal 4 binary64))","(*.f64 #s(literal 4 binary64) a)","(*.f64 a a)","(*.f64 (*.f64 b b) a)","(*.f64 a (*.f64 b b))","(*.f64 b (*.f64 b a))","(*.f64 (pow.f64 a (/.f64 #s(literal 3 binary64) #s(literal 2 binary64))) (pow.f64 a (/.f64 #s(literal 3 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 (*.f64 b b) (*.f64 b b)) (*.f64 (*.f64 (*.f64 b b) (*.f64 b b)) a))","(/.f64 a #s(literal 4 binary64))"]],"time":687.392822265625,"type":"rewrite"},{"compiler":[[1724,347]],"memory":[[4573008,12179280]],"time":17.758056640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.89316112590472,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))) (*.f64 #s(literal 2 binary64) a))","fresh",62.61134333798538,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","done",62.060453670378365,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","next",55.51925763893148,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",26.862336143160924,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","done",40.25383530233358,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",42.760927584430505,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","fresh",63.34678889158777,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","fresh",63.37852513910256,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","fresh",60.22066509393017,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.08038779870565,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","done",43.30408103332852,"binary64"],["(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","next",60.08936146604137,"binary64"],["(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.32532809339034,"binary64"],["(/.f64 #s(literal 2 binary64) a)","fresh",60.3299930221069,"binary64"],["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","done",60.31889364351452,"binary64"],["(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.3236129200562,"binary64"],["(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",62.625551239763794,"binary64"],["(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","done",62.64315949945865,"binary64"],["(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","fresh",57.97322445529976,"binary64"],["(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","fresh",59.46549985177314,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","fresh",59.478662460679786,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","fresh",61.98120560733482,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","fresh",61.5706262616275,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","fresh",61.91155841085387,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","fresh",59.47358594692497,"binary64"],["(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","next",61.82419051100474,"binary64"],["(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","fresh",62.40413855415151,"binary64"],["(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","fresh",61.36755837725941,"binary64"],["(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","fresh",61.382135472085906,"binary64"],["(*.f64 (*.f64 #s(literal 2 binary64) a) a)","fresh",61.50813920576761,"binary64"],["(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","fresh",61.37647407856172,"binary64"],["(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","fresh",61.38182654257852,"binary64"],["(*.f64 a #s(literal 2 binary64))","next",61.38017356939374,"binary64"],["(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","done",58.1170030191055,"binary64"],["(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","next",59.707609913562614,"binary64"],["(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","fresh",62.703109562645984,"binary64"],["(neg.f64 (*.f64 #s(literal 2 binary64) a))","fresh",62.70546502171781,"binary64"]],"compiler":[[16,10],[40,19],[16,10],[22,12],[17,14],[16,13],[16,13],[13,11],[12,10],[11,10],[25,11],[16,12],[5,7],[5,7],[3,5],[5,7],[5,7],[5,7],[5,7],[13,10],[11,9],[11,7],[10,9],[9,8],[7,8],[7,8],[12,10],[11,9],[7,9],[5,7],[5,6],[5,7],[5,7],[3,5],[17,13],[6,7],[6,8],[4,6],[16,10],[40,19],[22,12],[13,11],[12,10],[11,10],[25,11],[5,7],[5,7],[3,5],[5,7],[5,7],[13,10],[11,9],[11,7],[10,9],[9,8],[7,8],[7,8],[12,10],[11,9],[7,9],[5,7],[5,6],[5,7],[5,7],[3,5],[6,7],[6,8],[4,6]],"count":[[140,38]],"kept":[{"done":[6,4],"fresh":[9,8],"new":[120,22],"picked":[5,4]}],"memory":[[407184,19079024]],"min-error":[[18.954726369329357,"binary64"]],"time":31.635009765625,"type":"prune"},{"inputs":[["(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(neg.f64 b)","b","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 a #s(literal 2 binary64))","a","#s(literal 2 binary64)","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 a c) #s(literal 2 binary64))","(*.f64 a c)","a","c","#s(literal 2 binary64)","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","#s(literal 65536 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(neg.f64 b)","b","(*.f64 (*.f64 a c) #s(literal 2 binary64))","(*.f64 a c)","c"]],"locations":[["(neg.f64 b)","cost-diff",0],["(*.f64 #s(literal 2 binary64) a)","cost-diff",0],["(*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","cost-diff",1],["(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","cost-diff",4],["(*.f64 #s(literal 2 binary64) a)","cost-diff",0],["(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(*.f64 a c)","cost-diff",0],["(*.f64 (*.f64 a c) #s(literal 2 binary64))","cost-diff",0],["(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","cost-diff",1],["(*.f64 a #s(literal 2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","cost-diff",1]],"memory":[[-4160960,12162832]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(fma.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) (neg.f64 b))","(neg.f64 b)","b","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)","a","c","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 a #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) a)","a","#s(literal 2 binary64)","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 a #s(literal -2 binary64)) c)","(*.f64 (*.f64 a c) #s(literal 2 binary64))","(*.f64 a c)","a","c","#s(literal 2 binary64)","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","#s(literal 65536 binary64)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","(*.f64 (*.f64 a #s(literal -2 binary64)) b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(neg.f64 b)","b","(*.f64 (*.f64 a c) #s(literal 2 binary64))","(*.f64 a c)","c"]],"time":275.791015625,"type":"simplify"},{"compiler":[[153,23]],"locations":[["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["(*.f64 (*.f64 a c) #s(literal 2 binary64))","accuracy",0.01953125],["(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","accuracy",0.2656229358302058],["(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","accuracy",0.0],["(*.f64 #s(literal 2 binary64) a)","accuracy",0.0],["(*.f64 a c)","accuracy",0.0],["(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","accuracy",0.0],["(*.f64 (*.f64 a c) #s(literal 2 binary64))","accuracy",0.01953125],["(*.f64 a #s(literal 2 binary64))","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(fma.f64 (neg.f64 a) c (*.f64 b b))","accuracy",0.0078125],["(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","accuracy",0.16796875],["(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.288758326993779]],"memory":[[-1302640,23238096]],"mixsample":[[3.9189453125,"ival-div",0],[0.271728515625,"ival-true",0],[3.93408203125,"ival-add",0],[17.81298828125,"ival-mult",0],[0.346435546875,"exact",0],[0.11962890625,"ival-assert",0],[3.765380859375,"ival-neg",0]],"outcomes":[[49.79345703125,0,"valid",256]],"time":69.842041015625,"type":"localize"},{"count":[[14,73]],"inputs":[["(+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 a c) #s(literal 2 binary64))","(*.f64 a c)","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)"]],"memory":[[1974864,9381296]],"outputs":[["(- (pow b 4) b)","(- (+ (* -2 (* a (* (pow b 2) c))) (pow b 4)) b)","(- (+ (* a (+ (* -2 (* (pow b 2) c)) (* a (pow c 2)))) (pow b 4)) b)","(* 1/2 (/ (- (pow b 4) b) a))","(/ (+ (* -1 (* a (* (pow b 2) c))) (* 1/2 (- (pow b 4) b))) a)","(/ (+ (* 1/2 (- (pow b 4) b)) (* a (+ (* -1 (* (pow b 2) c)) (* 1/2 (* a (pow c 2)))))) a)","(pow b 4)","(+ (* -2 (* a (* (pow b 2) c))) (pow b 4))","(+ (* a (+ (* -2 (* (pow b 2) c)) (* a (pow c 2)))) (pow b 4))","(* 2 a)","(* -2 (* a c))","(* 2 (* a c))","(* a c)","(/ 32768 a)","(* a (+ (* -2 b) (* 2 c)))","(* -2 (* a b))","(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1 a)","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* -2 (/ (* (pow b 2) c) a)) (pow c 2)))","(* (pow a 2) (- (+ (* -2 (/ (* (pow b 2) c) a)) (+ (/ (pow b 4) (pow a 2)) (pow c 2))) (/ b (pow a 2))))","(* 1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ (* (pow b 2) c) a)) (* 1/2 (pow c 2))))","(* a (+ (* -1 (/ (* (pow b 2) c) a)) (+ (* 1/2 (/ (- (pow b 4) b) (pow a 2))) (* 1/2 (pow c 2)))))","(* (pow a 2) (+ (* -2 (/ (* (pow b 2) c) a)) (+ (/ (pow b 4) (pow a 2)) (pow c 2))))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (- (pow b 4) b) a)) (* 2 (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1/2 (pow c 2)) (/ (* (pow b 2) c) a))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (* (pow b 2) c)) (* 1/2 (/ (- (pow b 4) b) a))) a)) (* -1/2 (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (pow b 4) a)) (* 2 (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -2 c) (* 2 b))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(+ (* -1 b) (* (pow a 2) (pow c 2)))","(+ (* b (- (* -2 (* a (* b c))) 1)) (* (pow a 2) (pow c 2)))","(+ (* b (- (* b (+ (* -2 (* a c)) (pow b 2))) 1)) (* (pow a 2) (pow c 2)))","(+ (* -1/2 (/ b a)) (* 1/2 (* a (pow c 2))))","(+ (* 1/2 (* a (pow c 2))) (* b (- (* -1 (* b c)) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* a (pow c 2))) (* b (- (* b (+ (* -1 c) (* 1/2 (/ (pow b 2) a)))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* -2 (* a (* (pow b 2) c))) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b 2) (+ (* -2 (* a c)) (pow b 2))))","(+ (* -2 (* a b)) (* 2 (* a c)))","(* (pow b 4) (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* (pow b 4) (- (+ 1 (* -2 (/ (* a c) (pow b 2)))) (/ 1 (pow b 3))))","(* (pow b 4) (- (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (/ 1 (pow b 3))))","(* 1/2 (/ (pow b 4) a))","(* (pow b 4) (+ (* -1 (/ c (pow b 2))) (* 1/2 (/ 1 a))))","(* (pow b 4) (- (+ (* -1 (/ c (pow b 2))) (* 1/2 (/ 1 a))) (/ 1/2 (* a (pow b 3)))))","(* (pow b 4) (- (+ (* -1 (/ c (pow b 2))) (+ (* 1/2 (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))) (* 1/2 (/ 1 (* a (pow b 3))))))","(* (pow b 4) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (/ (* (pow a 2) (pow c 2)) (pow b 4)))))","(* b (+ (* -2 a) (* 2 (/ (* a c) b))))","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* (pow b 4) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -1 (/ (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))) (pow b 3))))))","(* (pow b 4) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (pow c 2)) b)) (* 1/2 (/ 1 a))) (pow b 3))) (* 1/2 (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* a c) b)) (* 2 a))))","(- (+ (* c (+ (* -2 (* a (pow b 2))) (* (pow a 2) c))) (pow b 4)) b)","(+ (* -1 (* (pow b 2) c)) (* 1/2 (/ (- (pow b 4) b) a)))","(+ (* 1/2 (/ (- (pow b 4) b) a)) (* c (+ (* -1 (pow b 2)) (* 1/2 (* a c)))))","(+ (* c (+ (* -2 (* a (pow b 2))) (* (pow a 2) c))) (pow b 4))","(* (pow c 2) (+ (* -2 (/ (* a (pow b 2)) c)) (pow a 2)))","(* (pow c 2) (- (+ (* -2 (/ (* a (pow b 2)) c)) (+ (/ (pow b 4) (pow c 2)) (pow a 2))) (/ b (pow c 2))))","(* (pow c 2) (+ (* -1 (/ (pow b 2) c)) (* 1/2 a)))","(* (pow c 2) (+ (* -1 (/ (pow b 2) c)) (+ (* 1/2 a) (* 1/2 (/ (- (/ (pow b 4) a) (/ b a)) (pow c 2))))))","(* (pow c 2) (+ (* -2 (/ (* a (pow b 2)) c)) (+ (/ (pow b 4) (pow c 2)) (pow a 2))))","(* c (+ (* -2 (/ (* a b) c)) (* 2 a)))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (- (pow b 4) b) c)) (* 2 (* a (pow b 2)))) c)) (pow a 2)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1/2 (/ (- (/ (pow b 4) a) (/ b a)) c)) (pow b 2)) c)) (* 1/2 a)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (pow b 4) c)) (* 2 (* a (pow b 2)))) c)) (pow a 2)))","(* -1 (* c (+ (* -2 a) (* 2 (/ (* a b) c)))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))"]],"series":[[1.921875,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","c","-inf"],[4.183837890625,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","c","inf"],[1.93798828125,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","c","0"],[1.546875,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","b","-inf"],[1.9208984375,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","b","inf"],[2.046142578125,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","b","0"],[16.30810546875,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","a","-inf"],[3.26123046875,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","a","inf"],[2.787841796875,"((+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (/ (+ (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b)))) (* 2 a)) (neg b) (* (+ (* (neg a) c) (* b b)) (+ (* (neg a) c) (* b b))) (* a 2) (neg (* (* a c) 2)) (* (* a c) 2) (* a c) (/ 65536 (* 2 a)) (* 2 a) (+ (* (* 2 a) (neg b)) (* (* a c) 2)) (* (* 2 a) (neg b)) (+ (* (neg a) c) (* b b)) (neg a))","a","0"]],"time":38.06787109375,"type":"series"},{"count":[[73,0]],"inputs":[["(- (pow b 4) b)","(- (+ (* -2 (* a (* (pow b 2) c))) (pow b 4)) b)","(- (+ (* a (+ (* -2 (* (pow b 2) c)) (* a (pow c 2)))) (pow b 4)) b)","(* 1/2 (/ (- (pow b 4) b) a))","(/ (+ (* -1 (* a (* (pow b 2) c))) (* 1/2 (- (pow b 4) b))) a)","(/ (+ (* 1/2 (- (pow b 4) b)) (* a (+ (* -1 (* (pow b 2) c)) (* 1/2 (* a (pow c 2)))))) a)","(pow b 4)","(+ (* -2 (* a (* (pow b 2) c))) (pow b 4))","(+ (* a (+ (* -2 (* (pow b 2) c)) (* a (pow c 2)))) (pow b 4))","(* 2 a)","(* -2 (* a c))","(* 2 (* a c))","(* a c)","(/ 32768 a)","(* a (+ (* -2 b) (* 2 c)))","(* -2 (* a b))","(pow b 2)","(+ (* -1 (* a c)) (pow b 2))","(* -1 a)","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* -2 (/ (* (pow b 2) c) a)) (pow c 2)))","(* (pow a 2) (- (+ (* -2 (/ (* (pow b 2) c) a)) (+ (/ (pow b 4) (pow a 2)) (pow c 2))) (/ b (pow a 2))))","(* 1/2 (* a (pow c 2)))","(* a (+ (* -1 (/ (* (pow b 2) c) a)) (* 1/2 (pow c 2))))","(* a (+ (* -1 (/ (* (pow b 2) c) a)) (+ (* 1/2 (/ (- (pow b 4) b) (pow a 2))) (* 1/2 (pow c 2)))))","(* (pow a 2) (+ (* -2 (/ (* (pow b 2) c) a)) (+ (/ (pow b 4) (pow a 2)) (pow c 2))))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b 2) a)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (- (pow b 4) b) a)) (* 2 (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1/2 (pow c 2)) (/ (* (pow b 2) c) a))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (* (pow b 2) c)) (* 1/2 (/ (- (pow b 4) b) a))) a)) (* -1/2 (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (pow b 4) a)) (* 2 (* (pow b 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -2 c) (* 2 b))))","(* -1 (* a (+ c (* -1 (/ (pow b 2) a)))))","(+ (* -1 b) (* (pow a 2) (pow c 2)))","(+ (* b (- (* -2 (* a (* b c))) 1)) (* (pow a 2) (pow c 2)))","(+ (* b (- (* b (+ (* -2 (* a c)) (pow b 2))) 1)) (* (pow a 2) (pow c 2)))","(+ (* -1/2 (/ b a)) (* 1/2 (* a (pow c 2))))","(+ (* 1/2 (* a (pow c 2))) (* b (- (* -1 (* b c)) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* a (pow c 2))) (* b (- (* b (+ (* -1 c) (* 1/2 (/ (pow b 2) a)))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* -2 (* a (* (pow b 2) c))) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b 2) (+ (* -2 (* a c)) (pow b 2))))","(+ (* -2 (* a b)) (* 2 (* a c)))","(* (pow b 4) (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* (pow b 4) (- (+ 1 (* -2 (/ (* a c) (pow b 2)))) (/ 1 (pow b 3))))","(* (pow b 4) (- (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (/ 1 (pow b 3))))","(* 1/2 (/ (pow b 4) a))","(* (pow b 4) (+ (* -1 (/ c (pow b 2))) (* 1/2 (/ 1 a))))","(* (pow b 4) (- (+ (* -1 (/ c (pow b 2))) (* 1/2 (/ 1 a))) (/ 1/2 (* a (pow b 3)))))","(* (pow b 4) (- (+ (* -1 (/ c (pow b 2))) (+ (* 1/2 (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))) (* 1/2 (/ 1 (* a (pow b 3))))))","(* (pow b 4) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (/ (* (pow a 2) (pow c 2)) (pow b 4)))))","(* b (+ (* -2 a) (* 2 (/ (* a c) b))))","(* (pow b 2) (+ 1 (* -1 (/ (* a c) (pow b 2)))))","(* (pow b 4) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -1 (/ (+ 1 (* -1 (/ (* (pow a 2) (pow c 2)) b))) (pow b 3))))))","(* (pow b 4) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (pow c 2)) b)) (* 1/2 (/ 1 a))) (pow b 3))) (* 1/2 (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* a c) b)) (* 2 a))))","(- (+ (* c (+ (* -2 (* a (pow b 2))) (* (pow a 2) c))) (pow b 4)) b)","(+ (* -1 (* (pow b 2) c)) (* 1/2 (/ (- (pow b 4) b) a)))","(+ (* 1/2 (/ (- (pow b 4) b) a)) (* c (+ (* -1 (pow b 2)) (* 1/2 (* a c)))))","(+ (* c (+ (* -2 (* a (pow b 2))) (* (pow a 2) c))) (pow b 4))","(* (pow c 2) (+ (* -2 (/ (* a (pow b 2)) c)) (pow a 2)))","(* (pow c 2) (- (+ (* -2 (/ (* a (pow b 2)) c)) (+ (/ (pow b 4) (pow c 2)) (pow a 2))) (/ b (pow c 2))))","(* (pow c 2) (+ (* -1 (/ (pow b 2) c)) (* 1/2 a)))","(* (pow c 2) (+ (* -1 (/ (pow b 2) c)) (+ (* 1/2 a) (* 1/2 (/ (- (/ (pow b 4) a) (/ b a)) (pow c 2))))))","(* (pow c 2) (+ (* -2 (/ (* a (pow b 2)) c)) (+ (/ (pow b 4) (pow c 2)) (pow a 2))))","(* c (+ (* -2 (/ (* a b) c)) (* 2 a)))","(* c (+ (* -1 a) (/ (pow b 2) c)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (- (pow b 4) b) c)) (* 2 (* a (pow b 2)))) c)) (pow a 2)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1/2 (/ (- (/ (pow b 4) a) (/ b a)) c)) (pow b 2)) c)) (* 1/2 a)))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (pow b 4) c)) (* 2 (* a (pow b 2)))) c)) (pow a 2)))","(* -1 (* c (+ (* -2 a) (* 2 (/ (* a b) c)))))","(* -1 (* c (+ a (* -1 (/ (pow b 2) c)))))"]],"memory":[[2243584,10352800]],"method":["egg-herbie"],"outputs":[[]],"time":126.635986328125,"type":"simplify"},{"count":[[14,207]],"inputs":[["(+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 a c) #s(literal 2 binary64))","(*.f64 a c)","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) a)","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","(fma.f64 (neg.f64 a) c (*.f64 b b))","(neg.f64 a)"]],"memory":[[-503760,33125248]],"outputs":[["(neg.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b))","(+.f64 b (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) b)","(+.f64 (-.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) #s(literal 0 binary64)) b)","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) b) (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c)) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) b))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) b) (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c)))","(+.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b)) b))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b)) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) b))","(+.f64 (+.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) b) (*.f64 (*.f64 b b) (*.f64 b b))) (*.f64 (*.f64 a c) (*.f64 b b)))","(+.f64 (+.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) b) (*.f64 (*.f64 a c) (*.f64 b b))) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 c (*.f64 b a)) b (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) b)))","(+.f64 (*.f64 (*.f64 a c) (*.f64 b b)) (fma.f64 (*.f64 (*.f64 a c) c) a (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) b)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c)) b))","(+.f64 (/.f64 (*.f64 b b) (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (neg.f64 (/.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b)))) (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b))))","(neg.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b) (*.f64 #s(literal 2 binary64) a))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) b) (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b)))) (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) b))","(+.f64 (*.f64 b (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))) (*.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))) (*.f64 b (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) b)) (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c))) (*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) b)))","(+.f64 (*.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) b) (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))) (*.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c)) (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) b) (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))))","(-.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 a #s(literal -2 binary64))) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b) (*.f64 #s(literal 2 binary64) a)))","b","(neg.f64 b)","(+.f64 b #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b)","(-.f64 #s(literal 0 binary64) b)","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(*.f64 b #s(literal -1 binary64))","(*.f64 b #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) b)","(*.f64 #s(literal 1 binary64) b)","(*.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b))","(*.f64 (*.f64 (*.f64 b b) b) (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(/.f64 (*.f64 b b) b)","(/.f64 (*.f64 (*.f64 b b) b) (*.f64 b b))","(neg.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))))","(+.f64 (*.f64 (*.f64 b b) (*.f64 b b)) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c)) (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c)) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) #s(literal 0 binary64)))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) (*.f64 (*.f64 a c) (*.f64 b b))) (*.f64 (*.f64 b b) (*.f64 b b)))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b) (*.f64 (*.f64 a c) (*.f64 b b))) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b))) (*.f64 (*.f64 a c) (*.f64 b b)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 c (*.f64 b a)) b (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b))))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (-.f64 (*.f64 (*.f64 a c) (*.f64 b b)) (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b))))","(+.f64 (*.f64 (*.f64 a c) (*.f64 b b)) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b))))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b)) (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (*.f64 b b)) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) #s(literal 0 binary64)))","(neg.f64 (*.f64 a #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 a #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) a)","(*.f64 a #s(literal 2 binary64))","(*.f64 (neg.f64 a) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))","(*.f64 #s(literal -2 binary64) (neg.f64 a))","(*.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) (/.f64 a #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 a (/.f64 #s(literal 2 binary64) #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 a)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 a #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 c #s(literal -2 binary64)) a) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 c #s(literal -2 binary64)) a))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 (*.f64 a a) #s(literal 4 binary64)) (*.f64 c c))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) #s(literal 8 binary64)) (*.f64 (*.f64 (*.f64 a a) #s(literal 4 binary64)) (*.f64 c c))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 4 binary64)) (*.f64 c c)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))","(*.f64 (neg.f64 a) (*.f64 c #s(literal 2 binary64)))","(*.f64 (neg.f64 c) (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(*.f64 (*.f64 a #s(literal -2 binary64)) c)","(*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 c))","(*.f64 (*.f64 c #s(literal 2 binary64)) (neg.f64 a))","(*.f64 (*.f64 a c) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (*.f64 a c))","(*.f64 a (*.f64 c #s(literal -2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 a c) #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) c)","(*.f64 (*.f64 c #s(literal 2 binary64)) a)","(*.f64 #s(literal 2 binary64) (*.f64 a c))","(*.f64 a (*.f64 c #s(literal 2 binary64)))","(*.f64 c (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 c #s(literal -2 binary64)) a))","(/.f64 (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) #s(literal 8 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 4 binary64)) (*.f64 c c)) #s(literal 0 binary64))))","(fma.f64 (*.f64 #s(literal 2 binary64) a) c #s(literal 0 binary64))","(fma.f64 (*.f64 c #s(literal 2 binary64)) a #s(literal 0 binary64))","(fma.f64 (*.f64 a c) #s(literal 2 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 2 binary64) (*.f64 a c) #s(literal 0 binary64))","(fma.f64 a (*.f64 c #s(literal 2 binary64)) #s(literal 0 binary64))","(neg.f64 (*.f64 (neg.f64 a) c))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 a) c))","(*.f64 a c)","(*.f64 c a)","(*.f64 (neg.f64 a) (neg.f64 c))","(*.f64 (neg.f64 c) (neg.f64 a))","(*.f64 #s(literal 1 binary64) (*.f64 a c))","(*.f64 (neg.f64 (neg.f64 a)) c)","(*.f64 (neg.f64 (neg.f64 c)) a)","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 a) c))","(*.f64 a (neg.f64 (neg.f64 c)))","(*.f64 c (neg.f64 (neg.f64 a)))","(neg.f64 (/.f64 #s(literal 65536 binary64) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 65536 binary64) (*.f64 a #s(literal -2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 a #s(literal -2 binary64)) #s(literal -65536 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 a #s(literal -2 binary64))) (/.f64 #s(literal 65536 binary64) (*.f64 a #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal 65536 binary64) (*.f64 a #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -2 binary64)) (/.f64 #s(literal 65536 binary64) a))","(*.f64 (/.f64 #s(literal -65536 binary64) #s(literal -2 binary64)) (/.f64 #s(literal 1 binary64) a))","(*.f64 (/.f64 #s(literal 65536 binary64) a) (/.f64 #s(literal -1 binary64) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(literal 65536 binary64) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -65536 binary64) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 #s(literal 1 binary64) #s(literal 65536 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))) #s(literal 65536 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) a)) #s(literal -65536 binary64))","(*.f64 #s(literal 65536 binary64) (/.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (*.f64 a #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 a #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) a)","(*.f64 a #s(literal 2 binary64))","(*.f64 (neg.f64 a) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))","(*.f64 #s(literal -2 binary64) (neg.f64 a))","(*.f64 #s(literal -1 binary64) (*.f64 a #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) (/.f64 a #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 a (/.f64 #s(literal 2 binary64) #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 a)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 a #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b c)))","(neg.f64 (/.f64 (*.f64 #s(literal 8 binary64) (fma.f64 (*.f64 (*.f64 a a) (*.f64 b b)) (*.f64 b a) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)))) (neg.f64 (fma.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 4 binary64)) c) c (*.f64 (*.f64 (*.f64 b a) #s(literal 4 binary64)) (*.f64 a (-.f64 b c)))))))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(+.f64 (-.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (neg.f64 (*.f64 (*.f64 c #s(literal -2 binary64)) a)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) #s(literal 4 binary64)) (*.f64 b a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b c))) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b)))))","(-.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b c)))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) #s(literal 4 binary64)) (*.f64 b a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b c))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 4 binary64)) (*.f64 c c)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))) (/.f64 (*.f64 (*.f64 (*.f64 b a) #s(literal 4 binary64)) (*.f64 b a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b c))))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 c b))","(*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 b c))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 0 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(+.f64 (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) b))","(*.f64 (*.f64 #s(literal 2 binary64) a) b)","(*.f64 (neg.f64 a) (*.f64 b #s(literal -2 binary64)))","(*.f64 (*.f64 a #s(literal -2 binary64)) b)","(*.f64 (*.f64 b #s(literal -2 binary64)) a)","(*.f64 (*.f64 b #s(literal -2 binary64)) (neg.f64 a))","(*.f64 (*.f64 b a) #s(literal -2 binary64))","(*.f64 (*.f64 b a) #s(literal 2 binary64))","(*.f64 #s(literal -2 binary64) (*.f64 b a))","(*.f64 #s(literal 2 binary64) (*.f64 b a))","(*.f64 a (*.f64 b #s(literal -2 binary64)))","(neg.f64 (fma.f64 c a (*.f64 b b)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 a) c))","(+.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (neg.f64 a) c (*.f64 b b))) (neg.f64 (/.f64 (*.f64 (*.f64 b b) (*.f64 b b)) (fma.f64 c a (*.f64 b b)))))","(-.f64 (*.f64 b b) (*.f64 a c))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b b))","(-.f64 #s(literal 0 binary64) (-.f64 (*.f64 a c) (*.f64 b b)))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b b)))","(-.f64 (/.f64 (*.f64 (*.f64 b b) (*.f64 b b)) (fma.f64 c a (*.f64 b b))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b b))))","(-.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (neg.f64 a) c (*.f64 b b))) (/.f64 (*.f64 (*.f64 b b) (*.f64 b b)) (fma.f64 c a (*.f64 b b))))","(-.f64 (/.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (*.f64 a a) (*.f64 c c))) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))) (/.f64 (*.f64 (*.f64 b b) (*.f64 (*.f64 b b) (*.f64 b b))) (fma.f64 (fma.f64 c a (*.f64 b b)) (*.f64 a c) (*.f64 (*.f64 b b) (*.f64 b b)))))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b b)))","(*.f64 #s(literal -1 binary64) (-.f64 (*.f64 a c) (*.f64 b b)))","(*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b)))","(*.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b))) (/.f64 #s(literal 1 binary64) (fma.f64 c a (*.f64 b b))))","(neg.f64 a)","(+.f64 (neg.f64 a) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 a))","(-.f64 #s(literal 0 binary64) a)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 a a) a) (*.f64 a a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (*.f64 a a) a))","(*.f64 a #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) a)","(*.f64 (*.f64 (neg.f64 a) (*.f64 a a)) (/.f64 #s(literal 1 binary64) (*.f64 a a)))","(*.f64 (*.f64 a (neg.f64 a)) (/.f64 #s(literal 1 binary64) a))","(/.f64 (*.f64 a a) (neg.f64 a))","(/.f64 (*.f64 (neg.f64 a) (*.f64 a a)) (*.f64 a a))","(/.f64 (*.f64 a (neg.f64 a)) a)","(/.f64 (*.f64 a (neg.f64 a)) (-.f64 #s(literal 0 binary64) (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) (*.f64 a a))) (neg.f64 (*.f64 a a)))"]],"time":1696.613037109375,"type":"rewrite"},{"compiler":[[4980,716]],"memory":[[2902320,26649152]],"time":44.1171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.89316112590472,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))) (*.f64 #s(literal 2 binary64) a))","fresh",62.61134333798538,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","done",62.060453670378365,"binary64"],["(/.f64 (+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","fresh",62.47406409870776,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",26.862336143160924,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","done",40.25383530233358,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","done",42.760927584430505,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","fresh",63.34678889158777,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","fresh",63.37852513910256,"binary64"],["(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","fresh",60.22066509393017,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.08038779870565,"binary64"],["(/.f64 (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",61.75023403550781,"binary64"],["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","done",43.30408103332852,"binary64"],["(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","done",60.08936146604137,"binary64"],["(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.32532809339034,"binary64"],["(/.f64 #s(literal 2 binary64) a)","fresh",60.3299930221069,"binary64"],["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","done",60.31889364351452,"binary64"],["(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",60.3236129200562,"binary64"],["(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","fresh",62.625551239763794,"binary64"],["(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","done",62.64315949945865,"binary64"],["(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) #s(literal 4 binary64)) (*.f64 b a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b c))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))))","fresh",62.16475372444367,"binary64"],["(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","fresh",57.97322445529976,"binary64"],["(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","fresh",59.46549985177314,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","fresh",59.478662460679786,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","fresh",61.98120560733482,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","fresh",61.5706262616275,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","fresh",61.91155841085387,"binary64"],["(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","fresh",59.47358594692497,"binary64"],["(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","fresh",61.36755837725941,"binary64"],["(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","fresh",61.382135472085906,"binary64"],["(*.f64 (*.f64 c #s(literal -2 binary64)) a)","fresh",59.707609913562614,"binary64"],["(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","fresh",62.3961263322118,"binary64"],["(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","fresh",61.81645420643051,"binary64"],["(*.f64 (*.f64 #s(literal 2 binary64) a) a)","fresh",61.50813920576761,"binary64"],["(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","fresh",61.37647407856172,"binary64"],["(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","fresh",61.38182654257852,"binary64"],["(*.f64 a #s(literal 2 binary64))","done",61.38017356939374,"binary64"],["(neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 c #s(literal -2 binary64)) a)))","fresh",61.37229190704913,"binary64"],["(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","done",58.1170030191055,"binary64"],["(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","fresh",62.703109562645984,"binary64"],["(neg.f64 (*.f64 #s(literal 2 binary64) a))","fresh",62.70546502171781,"binary64"]],"compiler":[[615,151],[16,10],[40,19],[16,10],[20,12],[17,14],[16,13],[16,13],[13,11],[12,10],[11,10],[25,11],[20,12],[16,12],[5,7],[5,7],[3,5],[5,7],[5,7],[5,7],[5,7],[35,21],[13,10],[11,9],[11,7],[10,9],[9,8],[7,8],[7,8],[7,9],[5,7],[5,6],[7,7],[7,7],[5,6],[5,7],[5,7],[3,5],[16,13],[17,13],[6,8],[4,6]],"count":[[302,41]],"kept":[{"done":[8,8],"fresh":[25,24],"new":[264,7],"picked":[5,2]}],"memory":[[298256,27478528]],"min-error":[[18.954726369329357,"binary64"]],"time":38.052001953125,"type":"prune"},{"accuracy":[19.570183597301153],"baseline":[26.862336143160924],"branch":[["a",26.862336143160924,1,"binary64"],["b",19.570183597301153,3,"binary64"],["c",26.862336143160928,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",22.649498505628383,3,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[50,3]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 c #s(literal -2 binary64)) a)))","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b b) b) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (*.f64 (neg.f64 a) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) #s(literal 4 binary64)) (*.f64 b a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b c))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))))","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b b)) (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b))) (*.f64 (*.f64 b b) (fma.f64 b b (fma.f64 b b (*.f64 (neg.f64 a) (neg.f64 c)))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[490608,26206368]],"oracle":[64.0],"outputs":[["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))"]],"repr":["binary64"],"time":64.328857421875,"times":[[21.9609375,"a"],[12.283203125,"b"],[13.239013671875,"c"],[12.81689453125,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[23.779587967364616],"baseline":[38.8484386741586],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",31.183973015904353,5,"binary64"],["b",23.779587967364616,4,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[43,4]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 c #s(literal -2 binary64)) a)))","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-3038592,12881856]],"oracle":[64.0],"outputs":[["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":35.0009765625,"times":[[16.19482421875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[13.885986328125,"b"]],"type":"regimes"},{"accuracy":[23.97765281920595],"baseline":[40.25383530233358],"branch":[["c",35.59610125307257,4,"binary64"],["a",35.94579028582882,3,"binary64"],["b",23.97765281920595,4,"binary64"]],"compiler":[[1,3],[1,3],[1,3]],"count":[[42,4]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 c #s(literal -2 binary64)) a)))","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b b)) (fma.f64 (neg.f64 a) c (*.f64 b b)) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (*.f64 (fma.f64 c a (*.f64 b b)) (-.f64 (*.f64 a c) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[1036816,17979488]],"oracle":[64.0],"outputs":[["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":42.170166015625,"times":[[13.378173828125,"c"],[11.949951171875,"a"],[12.951904296875,"b"]],"type":"regimes"},{"accuracy":[32.96168275647382],"baseline":[40.25383530233358],"branch":[["b",32.96168275647382,3,"binary64"]],"compiler":[[1,3]],"count":[[39,3]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 c #s(literal -2 binary64)) a)))","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-255376,7325216]],"oracle":[64.0],"outputs":[["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))"]],"repr":["binary64"],"time":17.247802734375,"times":[[13.747802734375,"b"]],"type":"regimes"},{"accuracy":[37.09892690978637],"baseline":[43.30408103332852],"branch":[["c",43.3040810333285,1,"binary64"],["a",43.304081033328536,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",41.22061637505468,3,"binary64"],["b",37.09892690978637,3,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[38,3]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b) (/.f64 #s(literal 4 binary64) (*.f64 a #s(literal -2 binary64))))","(neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -4 binary64)) (*.f64 (*.f64 c #s(literal -2 binary64)) a)))","(/.f64 (*.f64 (+.f64 b (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-5149712,21330400]],"oracle":[64.0],"outputs":[["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))"]],"repr":["binary64"],"time":47.625,"times":[[9.52294921875,"c"],[12.697021484375,"a"],[11.333984375,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[10.912841796875,"b"]],"type":"regimes"},{"accuracy":[39.297443666414914],"baseline":[43.30408103332852],"branch":[["b",39.297443666414914,3,"binary64"]],"compiler":[[1,3]],"count":[[33,3]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) (neg.f64 b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[6335312,6335312]],"oracle":[64.0],"outputs":[["(/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":10.148193359375,"times":[[7.886962890625,"b"]],"type":"regimes"},{"accuracy":[53.33387962978066],"baseline":[57.97322445529976],"branch":[["a",57.97322445529975,1,"binary64"],["c",56.19494134771859,2,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",55.639268690802794,3,"binary64"],["b",53.33387962978066,3,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[30,3]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 b (sqrt.f64 (+.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[2466624,18204736]],"oracle":[63.7937377580883],"outputs":[["(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":59.22998046875,"times":[[15.904052734375,"a"],[16.525146484375,"c"],[12.444091796875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[9.72412109375,"b"]],"type":"regimes"},{"accuracy":[53.92718627692518],"baseline":[57.97322445529976],"branch":[["b",53.92718627692518,3,"binary64"]],"compiler":[[1,3]],"count":[[28,3]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))"]],"memory":[[-2512400,5697216]],"oracle":[63.41168348303753],"outputs":[["(+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":20.806884765625,"times":[[16.508056640625,"b"]],"type":"regimes"},{"accuracy":[55.29155562529784],"baseline":[59.46549985177314],"branch":[["c",57.33645595732773,2,"binary64"],["b",55.29155562529784,3,"binary64"]],"compiler":[[1,3],[1,3]],"count":[[27,3]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))"]],"memory":[[80576,9356112]],"oracle":[63.40787426066225],"outputs":[["(+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":23.261962890625,"times":[[7.7529296875,"c"],[12.465087890625,"b"]],"type":"regimes"},{"accuracy":[57.72870649509388],"baseline":[59.47358594692497],"branch":[["c",58.301742834578924,2,"binary64"],["a",59.473585946924935,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",59.47358594692497,1,"binary64"],["b",57.72870649509388,2,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[25,2]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (neg.f64 b) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 4 binary64) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))"]],"memory":[[27824,16110192]],"oracle":[63.38733387112859],"outputs":[["(/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":32.405029296875,"times":[[6.822021484375,"c"],[7.632080078125,"a"],[7.445068359375,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[7.238037109375,"b"]],"type":"regimes"},{"accuracy":[57.97485756510111],"baseline":[59.47358594692497],"branch":[["b",57.97485756510111,2,"binary64"]],"compiler":[[1,3]],"count":[[19,2]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-3886576,4321216]],"oracle":[63.369442076809996],"outputs":[["(/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":7.31201171875,"times":[[5.614990234375,"b"]],"type":"regimes"},{"accuracy":[57.97763191334507],"baseline":[59.47358594692497],"branch":[["b",57.97763191334507,2,"binary64"]],"compiler":[[1,3]],"count":[[18,2]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[4255088,4255088]],"oracle":[63.36936086012041],"outputs":[["(/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":7.153076171875,"times":[[5.200927734375,"b"]],"type":"regimes"},{"accuracy":[57.98210996708273],"baseline":[59.47358594692497],"branch":[["b",57.98210996708273,2,"binary64"]],"compiler":[[1,3]],"count":[[17,2]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 4 binary64))","(*.f64 (/.f64 #s(literal 1/4 binary64) #s(literal 2 binary64)) a)","(/.f64 #s(literal -4096 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/8 binary64) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-5902960,4041968]],"oracle":[63.36936086012041],"outputs":[["(/.f64 #s(literal 2 binary64) a)","(+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))"]],"repr":["binary64"],"time":10.77197265625,"times":[[8.340087890625,"b"]],"type":"regimes"},{"accuracy":[58.04008122367898],"baseline":[59.707609913562614],"branch":[["b",58.04008122367898,2,"binary64"]],"compiler":[[1,3]],"count":[[11,2]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(/.f64 #s(literal 2 binary64) a)","(neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64)))","(neg.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 c b))","(*.f64 (*.f64 a (+.f64 c b)) #s(literal 2 binary64))"]],"memory":[[3161664,3161664]],"oracle":[63.21807332117416],"outputs":[["(/.f64 #s(literal 2 binary64) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)"]],"repr":["binary64"],"time":4.866943359375,"times":[[3.572998046875,"b"]],"type":"regimes"},{"accuracy":[59.707609913562564],"baseline":[59.707609913562614],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",59.7076099135626,1,"binary64"],["a",59.707609913562585,1,"binary64"],["c",59.70760991356258,1,"binary64"],["b",59.707609913562564,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[6,1]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)","(*.f64 (*.f64 c #s(literal -2 binary64)) a)"]],"memory":[[-28256,8296960]],"oracle":[62.91184482925375],"outputs":[["(*.f64 (*.f64 c #s(literal -2 binary64)) a)"]],"repr":["binary64"],"time":12.18310546875,"times":[[2.505859375,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.773193359375,"a"],[2.35302734375,"c"],[3.088134765625,"b"]],"type":"regimes"},{"accuracy":[61.376474078561685],"baseline":[61.37647407856172],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",61.376474078561714,1,"binary64"],["a",61.37647407856171,1,"binary64"],["c",61.376474078561685,1,"binary64"],["b",61.37647407856171,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[5,1]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) a)"]],"memory":[[-395136,7935328]],"oracle":[62.85015033052469],"outputs":[["(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))"]],"repr":["binary64"],"time":10.453857421875,"times":[[2.02392578125,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.43603515625,"a"],[2.301025390625,"c"],[2.45703125,"b"]],"type":"regimes"},{"accuracy":[61.38017356939374],"baseline":[61.38017356939374],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",61.38017356939374,1,"binary64"],["a",61.38017356939375,1,"binary64"],["b",61.38017356939378,1,"binary64"],["c",61.380173569393754,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[3,1]],"inputs":[["(*.f64 a #s(literal 2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1/4 binary64))"]],"link":["."],"memory":[[-1230560,7051888]],"name":["quadp (p42, positive)"],"oracle":[62.81085070750407],"outputs":[["(*.f64 a #s(literal 2 binary64))"]],"repr":["binary64"],"time":8.463134765625,"times":[[2.00390625,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.114013671875,"a"],[1.485107421875,"b"],[1.714111328125,"c"]],"type":"regimes"},{"bstep":[[37.090087890625,1.694819650715518e+151,2.2960707376000196e+162],[36.9560546875,-2.5489113923458304e+154,-1.9359368240111297e+144]],"compiler":[[17,14],[17,15],[17,14],[17,15],[17,14],[17,15],[17,14],[17,15],[17,14],[17,15],[17,14],[17,15],[17,14],[17,15],[17,14],[17,15],[17,14],[17,15],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[17,15],[16,13],[19,17],[1,3]],"memory":[[1650032,18016192]],"method":["binary-search","binary-search"],"mixsample":[[3.2275390625,"adjust",800],[0.971435546875,"ival-sqrt",2000],[6.145263671875,"ival-div",0],[1.380615234375,"ival-sqrt",800],[0.459716796875,"ival-sub",2000],[0.173583984375,"ival-assert",0],[0.121337890625,"ival-sqrt",4000],[2.13916015625,"ival-sub",0],[3.82568359375,"ival-sqrt",0],[1.583251953125,"adjust",2000],[0.783447265625,"ival-mult",800],[3.697265625,"ival-add",0],[0.197265625,"ival-mult",400],[10.576171875,"ival-mult",0],[0.850341796875,"ival-sub",800],[0.006103515625,"ival-mult",1600],[0.136962890625,"adjust",2800],[0.4033203125,"ival-true",0],[0.046142578125,"ival-sub",4000],[0.514892578125,"exact",0],[2.2353515625,"ival-neg",0]],"outcomes":[[9.591064453125,1,"valid",50],[0.451171875,0,"invalid",3],[17.636474609375,2,"valid",81],[2.686767578125,3,"valid",8],[25.326171875,0,"valid",165]],"stop":[["predicate-same",1],["narrow-enough",1]],"time":81.7919921875,"type":"bsearch"},{"bstep":[[36.471923828125,1.31480504322001e+24,5.927655869213842e+29],[18.875,-1.618415484586949e-57,-4.091733967238215e-61],[1.219970703125,-2.5489113923458304e+154,-1.9359368240111297e+144]],"compiler":[[16,11],[17,15],[16,11],[17,15],[16,11],[17,15],[16,11],[17,15],[16,11],[17,15],[16,11],[17,15],[16,11],[17,15],[16,11],[17,15],[16,11],[17,15],[17,15],[16,14],[17,15],[16,14],[17,15],[16,14],[17,15],[16,14],[17,15],[16,14],[17,15],[16,14],[17,15],[16,14],[17,15],[16,14],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[19,17],[1,3]],"memory":[[1808880,17548800]],"method":["binary-search","binary-search","binary-search"],"mixsample":[[2.878173828125,"adjust",800],[3.856689453125,"ival-div",0],[0.340576171875,"ival-sub",1600],[0.14501953125,"ival-assert",0],[0.009765625,"ival-sub",3600],[1.905029296875,"ival-sub",0],[0.6337890625,"ival-sub",400],[2.441650390625,"ival-sqrt",0],[1.0703125,"adjust",2000],[2.905517578125,"ival-add",0],[0.029052734375,"ival-mult",800],[1.023681640625,"ival-mult",400],[0.547119140625,"ival-sqrt",1600],[8.00341796875,"ival-mult",0],[0.0771484375,"adjust",2800],[0.232177734375,"ival-true",0],[0.02490234375,"ival-sqrt",3600],[0.378662109375,"exact",0],[1.085693359375,"ival-sqrt",400],[2.19921875,"ival-neg",0]],"outcomes":[[11.02490234375,1,"valid",60],[3.460205078125,0,"invalid",33],[12.4482421875,2,"valid",50],[1.219970703125,3,"valid",5],[13.14453125,0,"valid",157]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":64.162841796875,"type":"bsearch"},{"bstep":[[1.073974609375,1.31480504322001e+24,5.927655869213842e+29],[20.734130859375,-1.985537354400534e-66,-6.017154964834652e-74],[1.4951171875,-2.5489113923458304e+154,-1.9359368240111297e+144]],"compiler":[[16,11],[16,14],[16,11],[16,14],[16,11],[16,14],[16,11],[16,14],[16,11],[16,14],[16,11],[16,14],[16,11],[16,14],[16,11],[16,14],[16,11],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[19,17],[1,3]],"memory":[[-428224,9227920]],"method":["binary-search","binary-search","binary-search"],"mixsample":[[1.130615234375,"ival-div",0],[0.84375,"ival-add",0],[4.2802734375,"ival-mult",0],[0.065673828125,"ival-assert",0],[0.812744140625,"ival-sub",0],[0.13916015625,"ival-true",0],[1.1357421875,"ival-sqrt",0],[0.15673828125,"exact",0],[0.782470703125,"ival-neg",0]],"outcomes":[[2.484130859375,0,"invalid",31],[11.24169921875,0,"valid",144]],"stop":[["narrow-enough",1],["narrow-enough",1],["narrow-enough",1]],"time":28.968017578125,"type":"bsearch"},{"bstep":[[29.802978515625,4.535668018383122e+142,1.694819650715518e+151],[1.2861328125,-2.5489113923458304e+154,-1.9359368240111297e+144]],"compiler":[[17,14],[16,14],[17,14],[16,14],[17,14],[16,14],[17,14],[16,14],[17,14],[16,14],[17,14],[16,14],[17,14],[16,14],[17,14],[16,14],[17,14],[16,14],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[16,14],[16,13],[19,17],[1,3]],"memory":[[3034528,11106800]],"method":["binary-search","binary-search"],"mixsample":[[0.60986328125,"ival-sqrt",2000],[2.563720703125,"ival-div",0],[2.4609375,"adjust",800],[0.01220703125,"ival-mult",2000],[1.1767578125,"ival-sqrt",800],[0.36669921875,"ival-sub",2000],[0.0595703125,"ival-assert",0],[0.144775390625,"ival-sqrt",4000],[0.71875,"ival-sub",0],[0.977294921875,"ival-sqrt",0],[1.054443359375,"adjust",2000],[0.482177734375,"ival-mult",800],[1.815673828125,"ival-add",0],[0.068359375,"ival-mult",400],[0.667724609375,"ival-sub",800],[3.5263671875,"ival-mult",0],[0.007080078125,"ival-mult",1600],[0.111572265625,"ival-true",0],[0.14794921875,"adjust",2800],[0.046875,"ival-sub",4000],[0.143310546875,"exact",0],[1.390869140625,"ival-neg",0]],"outcomes":[[8.233154296875,1,"valid",61],[0.081787109375,0,"invalid",1],[11.851318359375,2,"valid",63],[3.446044921875,3,"valid",11],[0.671875,0,"valid",9]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":35.920166015625,"type":"bsearch"},{"bstep":[[23.39306640625,1.31480504322001e+24,5.927655869213842e+29],[20.36376953125,-5.5674768864907e-143,-5.969693279507215e-147]],"compiler":[[16,11],[11,11],[16,11],[11,11],[16,11],[11,11],[16,11],[11,11],[16,11],[11,11],[16,11],[11,11],[16,11],[11,11],[16,11],[11,11],[16,11],[11,11],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[19,17],[1,3]],"memory":[[-583456,15412848]],"method":["binary-search","binary-search"],"mixsample":[[1.7470703125,"adjust",800],[3.6240234375,"ival-div",0],[0.142333984375,"ival-sub",1600],[0.1005859375,"ival-assert",0],[0.013916015625,"ival-sub",3600],[1.47412109375,"ival-sub",0],[2.22607421875,"ival-sqrt",0],[0.354248046875,"ival-sub",400],[0.463623046875,"adjust",2000],[2.0234375,"ival-add",0],[0.0244140625,"ival-mult",800],[7.283935546875,"ival-mult",0],[0.38427734375,"ival-mult",400],[0.27197265625,"ival-sqrt",1600],[0.041015625,"adjust",2800],[0.23095703125,"ival-true",0],[0.031982421875,"ival-sqrt",3600],[0.2998046875,"exact",0],[1.226318359375,"ival-sqrt",400],[1.427978515625,"ival-neg",0]],"outcomes":[[7.802734375,1,"valid",42],[5.58154296875,0,"invalid",65],[5.42041015625,2,"valid",28],[0.739013671875,3,"valid",3],[13.47119140625,0,"valid",167]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":50.247802734375,"type":"bsearch"},{"bstep":[[14.616943359375,1.31480504322001e+24,5.927655869213842e+29],[0.987060546875,-5.5674768864907e-143,-5.969693279507215e-147]],"compiler":[[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[11,11],[16,13],[19,17],[1,3]],"memory":[[-4317968,5320208]],"method":["binary-search","binary-search"],"mixsample":[[1.01513671875,"ival-div",0],[0.938232421875,"adjust",800],[0.13427734375,"ival-sub",1600],[0.030517578125,"ival-assert",0],[0.005126953125,"ival-sub",3600],[0.36572265625,"ival-sub",0],[0.486572265625,"ival-sqrt",0],[0.242919921875,"ival-sub",400],[1.4404296875,"adjust",2000],[0.68408203125,"ival-add",0],[0.020263671875,"ival-mult",800],[1.679931640625,"ival-mult",0],[0.229736328125,"ival-sqrt",1600],[0.227783203125,"ival-mult",400],[0.0048828125,"ival-add",2000],[0.06005859375,"adjust",2800],[0.05615234375,"ival-true",0],[0.010986328125,"ival-sqrt",3600],[0.007080078125,"ival-div",2000],[0.06787109375,"exact",0],[0.341796875,"ival-neg",0],[0.3828125,"ival-sqrt",400]],"outcomes":[[3.31591796875,1,"valid",20],[0.52001953125,0,"invalid",6],[5.048828125,2,"valid",20],[0.90283203125,3,"valid",4],[1.657470703125,0,"valid",20]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":17.93505859375,"type":"bsearch"},{"bstep":[[1.619140625,1.31480504322001e+24,5.927655869213842e+29],[15.123046875,-6.273968048720507e-13,-5.902284710120388e-15]],"compiler":[[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[7,9],[11,11],[11,11],[13,11],[11,11],[13,11],[11,11],[13,11],[11,11],[13,11],[11,11],[13,11],[11,11],[13,11],[11,11],[13,11],[19,17],[1,3]],"memory":[[-1753216,6326800]],"method":["binary-search","binary-search"],"mixsample":[[0.981689453125,"ival-div",0],[0.5771484375,"ival-add",0],[3.09521484375,"ival-mult",0],[0.04150390625,"ival-assert",0],[0.669921875,"ival-sub",0],[0.1240234375,"ival-true",0],[0.823974609375,"ival-sqrt",0],[0.1435546875,"exact",0],[0.5810546875,"ival-neg",0]],"outcomes":[[1.60595703125,0,"invalid",16],[8.95654296875,0,"valid",112]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":19.23193359375,"type":"bsearch"},{"bstep":[[20.691162109375,1.1658293765142531e-49,7.245769050662186e-48],[15.80908203125,-2.5489113923458304e+154,-1.9359368240111297e+144]],"compiler":[[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[5,8],[13,11],[19,17],[1,3]],"memory":[[5007680,12897424]],"method":["binary-search","binary-search"],"mixsample":[[1.032470703125,"adjust",800],[2.59814453125,"ival-div",0],[0.109619140625,"ival-sub",1600],[0.10498046875,"ival-assert",0],[1.400146484375,"ival-sub",0],[1.74755859375,"ival-sqrt",0],[0.234619140625,"ival-sub",400],[0.397216796875,"adjust",2000],[1.526611328125,"ival-add",0],[0.052001953125,"ival-mult",800],[6.448486328125,"ival-mult",0],[0.15576171875,"ival-sqrt",1600],[0.17138671875,"ival-mult",400],[0.19091796875,"ival-true",0],[0.263671875,"exact",0],[1.1259765625,"ival-sqrt",400],[1.20947265625,"ival-neg",0]],"outcomes":[[4.424560546875,1,"valid",32],[2.08642578125,0,"invalid",22],[4.9384765625,2,"valid",19],[15.52783203125,0,"valid",189]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":42.365234375,"type":"bsearch"},{"bstep":[[0.662841796875,1.1658293765142531e-49,7.245769050662186e-48],[16.2890625,-1.9359368240111297e+144,-6.069554465745815e+140]],"compiler":[[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[5,8],[11,10],[5,8],[11,10],[5,8],[11,10],[5,8],[11,10],[5,8],[11,10],[5,8],[11,10],[5,8],[11,10],[5,8],[11,10],[19,17],[1,3]],"memory":[[-1618832,6316080]],"method":["binary-search","binary-search"],"mixsample":[[0.935302734375,"ival-div",0],[0.6474609375,"ival-add",0],[3.106689453125,"ival-mult",0],[0.04833984375,"ival-assert",0],[0.643798828125,"ival-sub",0],[0.09814453125,"ival-true",0],[0.9482421875,"ival-sqrt",0],[0.239013671875,"exact",0],[0.73486328125,"ival-neg",0]],"outcomes":[[0.232177734375,0,"invalid",3],[11.22021484375,0,"valid",128]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":19.60400390625,"type":"bsearch"},{"bstep":[[0.72216796875,1.1658293765142531e-49,7.245769050662186e-48]],"compiler":[[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[19,17],[1,3]],"memory":[[557392,557392]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.2978515625,"type":"bsearch"},{"bstep":[[0.76806640625,1.1658293765142531e-49,7.245769050662186e-48]],"compiler":[[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[19,17],[1,3]],"memory":[[550992,550992]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.1640625,"type":"bsearch"},{"bstep":[[0.739013671875,1.1658293765142531e-49,7.245769050662186e-48]],"compiler":[[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[7,9],[5,8],[19,17],[1,3]],"memory":[[554464,554464]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.050048828125,"type":"bsearch"},{"bstep":[[0.676025390625,1.1658293765142531e-49,7.245769050662186e-48]],"compiler":[[7,9],[3,6],[7,9],[3,6],[7,9],[3,6],[7,9],[3,6],[7,9],[3,6],[7,9],[3,6],[7,9],[3,6],[19,17],[1,3]],"memory":[[526016,526016]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":0.9658203125,"type":"bsearch"},{"bstep":[[6.677001953125,1.31480504322001e+24,5.927655869213842e+29]],"compiler":[[5,7],[3,6],[5,7],[3,6],[5,7],[3,6],[5,7],[3,6],[5,7],[3,6],[5,7],[3,6],[5,7],[3,6],[5,7],[3,6],[5,7],[3,6],[19,17],[1,3]],"memory":[[-7351488,2523072]],"method":["binary-search"],"mixsample":[[0.535400390625,"adjust",800],[0.532958984375,"ival-div",0],[0.064208984375,"ival-sub",1600],[0.010986328125,"ival-assert",0],[0.00390625,"ival-sub",3600],[0.18359375,"ival-sub",0],[0.2119140625,"ival-sqrt",0],[0.148193359375,"ival-sub",400],[0.1796875,"adjust",2000],[0.007080078125,"ival-mult",800],[0.397705078125,"ival-add",0],[0.031982421875,"ival-mult",400],[0.111572265625,"ival-sqrt",1600],[0.78662109375,"ival-mult",0],[0.006103515625,"ival-add",2000],[0.02587890625,"ival-true",0],[0.044921875,"adjust",2800],[0.0068359375,"ival-div",2000],[0.010986328125,"ival-sqrt",3600],[0.03515625,"exact",0],[0.208984375,"ival-sqrt",400],[0.1484375,"ival-neg",0]],"outcomes":[[1.8818359375,1,"valid",14],[1.95849609375,2,"valid",10],[0.700927734375,3,"valid",3],[0.403076171875,0,"valid",5]],"stop":[["narrow-enough",1]],"time":8.80419921875,"type":"bsearch"},{"inputs":[["(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 10000000000000000369475456880582265409809179829842688451922778552150543659347219597216513109705408327446511753687232667314337003349573404171046192448274432 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3957737425103581/56539106072908298546665520023773392506479484700019806659891398441363832832 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3978585891278293/3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 16500000000000001228319625973381323161769571993509895587492110828093529949527369877967408673138236075540566761139480906389714446780566773906879123816448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))))","(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 2500000000000000226492416 binary64)) (/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal -3070091297427743/4951760157141521099596496896 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal -77000000000000003793921656420827799956727848268367421131919555364921645680487194948809805505583972816013176315281402734451943134932837122139831568171008 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal -1900000000000000131762249422712564540901893317345861888588242083967719090207325982086453362536358978844957532108658036087482827566652774644973568 binary64)) (+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 2 binary64) a) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 44000000000000001409286144 binary64)) (/.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 c #s(literal -2 binary64)) a))","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 a #s(literal 2 binary64))"]],"memory":[[4277632,20544592]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 10000000000000000369475456880582265409809179829842688451922778552150543659347219597216513109705408327446511753687232667314337003349573404171046192448274432 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 10000000000000000369475456880582265409809179829842688451922778552150543659347219597216513109705408327446511753687232667314337003349573404171046192448274432 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 #s(literal -16 binary64)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3957737425103581/56539106072908298546665520023773392506479484700019806659891398441363832832 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3957737425103581/56539106072908298546665520023773392506479484700019806659891398441363832832 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3978585891278293/3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3978585891278293/3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 16500000000000001228319625973381323161769571993509895587492110828093529949527369877967408673138236075540566761139480906389714446780566773906879123816448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (neg.f64 (/.f64 #s(literal -16 binary64) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))))","(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 16500000000000001228319625973381323161769571993509895587492110828093529949527369877967408673138236075540566761139480906389714446780566773906879123816448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 #s(literal -16 binary64)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))))","(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 2500000000000000226492416 binary64)) (/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 2500000000000000226492416 binary64)) (/.f64 (+.f64 b (sqrt.f64 (*.f64 (neg.f64 a) c))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))))","(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (neg.f64 (+.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (*.f64 (neg.f64 a) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))","(if (<=.f64 b #s(literal -3070091297427743/4951760157141521099596496896 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (neg.f64 (*.f64 a c)))) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal -3070091297427743/4951760157141521099596496896 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (*.f64 (neg.f64 a) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))","(if (<=.f64 b #s(literal -77000000000000003793921656420827799956727848268367421131919555364921645680487194948809805505583972816013176315281402734451943134932837122139831568171008 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal -77000000000000003793921656420827799956727848268367421131919555364921645680487194948809805505583972816013176315281402734451943134932837122139831568171008 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))","(if (<=.f64 b #s(literal -1900000000000000131762249422712564540901893317345861888588242083967719090207325982086453362536358978844957532108658036087482827566652774644973568 binary64)) (+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(if (<=.f64 b #s(literal -1900000000000000131762249422712564540901893317345861888588242083967719090207325982086453362536358978844957532108658036087482827566652774644973568 binary64)) (+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a)) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 2 binary64) a) (+.f64 (*.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 0 binary64)))","(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 a c) #s(literal 2 binary64)))","(if (<=.f64 b #s(literal 44000000000000001409286144 binary64)) (/.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 c #s(literal -2 binary64)) a))","(*.f64 (*.f64 c #s(literal -2 binary64)) a)","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))","(*.f64 a #s(literal 2 binary64))"]],"time":298.866943359375,"type":"simplify"},{"compiler":[[535,109]],"memory":[[-2173696,5913728]],"stop":[["fuel",1]],"time":25.488037109375,"type":"soundness"},{"compiler":[[535,109],[535,109],[105,28],[105,28],[17,14],[17,14]],"memory":[[8283600,71842416]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":134.52197265625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.012939453125,"type":"end"}]