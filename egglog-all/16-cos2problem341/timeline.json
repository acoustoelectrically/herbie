[{"memory":[[10384,10384]],"time":0.027099609375,"type":"start"},{"compiler":[[10,8]],"memory":[[448656,448656]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":1.8369140625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[18486736,299717408]],"mixsample":[[75.548583984375,"adjust",800],[129.20166015625,"ival-div",0],[515.082275390625,"ival-cos",1600],[0.008056640625,"ival-div",400],[0.031005859375,"ival-sub",2000],[0.005859375,"ival-mult",2000],[4.578125,"ival-assert",0],[114.82958984375,"ival-sub",0],[315.2373046875,"ival-cos",0],[0.0048828125,"ival-sub",400],[73.6396484375,"ival-cos",400],[41.091796875,"adjust",2000],[0.007080078125,"ival-mult",800],[0.0048828125,"ival-sub",800],[78.443115234375,"ival-mult",0],[0.006103515625,"ival-mult",400],[0.008056640625,"ival-div",800],[162.030029296875,"ival-cos",3600],[8.361572265625,"ival-true",0],[8.225341796875,"adjust",2800],[0.010009765625,"ival-div",2000],[7.341796875,"exact",0]],"outcomes":[[174.483154296875,1,"valid",1231],[843.77978515625,2,"valid",2247],[303.383056640625,3,"valid",591],[485.0146484375,0,"valid",4187]],"time":2232.256103515625,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[132,0,1,123]],"explanations":[["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","n/o",3,0,[["(*.f64 x x)","overflow",65]],[[]]],["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","u/u",57,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",57],["(*.f64 x x)","underflow",57]],[[]]],["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",73,0,[],[[1]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",73,0,false,0,false],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",61,0,false,1,[1.074329718302448e-158]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(*.f64 x x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,133],[0,123]],"maybe-confusion":[[132,0,0,1,0,123]],"memory":[[-7526192,44573312]],"mixsample":[[6.62939453125,"adjust",800],[9.850830078125,"ival-div",0],[0.0126953125,"ival-mult",400],[8.13623046875,"ival-mult",0],[0.014892578125,"ival-div",400],[53.737548828125,"ival-cos",1600],[0.510986328125,"ival-assert",0],[12.07666015625,"ival-cos",3600],[9.84814453125,"ival-sub",0],[0.558349609375,"adjust",2800],[1.078857421875,"ival-true",0],[28.492919921875,"ival-cos",0],[0.01025390625,"ival-sub",400],[5.095947265625,"ival-cos",400],[0.64013671875,"exact",0],[4.2724609375,"adjust",2000]],"outcomes":[[20.4267578125,1,"valid",82],[86.61376953125,2,"valid",136],[23.8095703125,3,"valid",32],[45.47998046875,0,"valid",262]],"time":258.844970703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"memory":[[4593280,20751696]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"symmetry":[["(abs x)"]],"time":329.953857421875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.086181640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","next",31.0299738762253,"binary64"]],"compiler":[[8,6]],"memory":[[295696,295696]],"time":0.679931640625,"type":"prune"},{"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","cost-diff",0]],"memory":[[2039040,9942192]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"time":196.532958984375,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(*.f64 x x)","accuracy",0.0],["(cos.f64 x)","accuracy",0.11556625976844202],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","accuracy",14.193221059065007],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",15.8279834646901]],"memory":[[-7016576,10755568]],"mixsample":[[2.1298828125,"adjust",800],[4.32177734375,"ival-div",0],[0.006103515625,"ival-mult",400],[2.0341796875,"ival-mult",0],[0.0068359375,"ival-div",400],[14.2431640625,"ival-cos",1600],[0.133544921875,"ival-assert",0],[4.697509765625,"ival-cos",3600],[3.447021484375,"ival-sub",0],[0.18603515625,"adjust",2800],[0.251708984375,"ival-true",0],[9.05029296875,"ival-cos",0],[0.0048828125,"ival-sub",400],[1.836181640625,"ival-cos",400],[0.2080078125,"exact",0],[1.196533203125,"adjust",2000]],"outcomes":[[5.55615234375,1,"valid",41],[25.43798828125,2,"valid",68],[8.4609375,3,"valid",16],[15.741455078125,0,"valid",131]],"time":65.4130859375,"type":"localize"},{"count":[[4,16]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[1305008,1305008]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"series":[[1.160888671875,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","-inf"],[0.882080078125,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","inf"],[0.93603515625,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","0"]],"time":3.31298828125,"type":"series"},{"count":[[16,0]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"memory":[[1557952,9496064]],"method":["egg-herbie"],"outputs":[[]],"time":124.072021484375,"type":"simplify"},{"count":[[4,51]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[-3359472,15468416]],"outputs":[["(neg.f64 (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x)))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(+.f64 (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x))))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (*.f64 x x)) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))))","(neg.f64 (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(*.f64 x x)","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 #s(literal 1 binary64) x) x)","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 (/.f64 x #s(literal 1 binary64)) (/.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x (/.f64 x #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 x)) x)","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))"]],"time":300.755859375,"type":"rewrite"},{"compiler":[[759,149]],"memory":[[4066896,4066896]],"time":6.593994140625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","next",31.049040512659975,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.0299738762253,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","fresh",31.63944554938064,"binary64"],["(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","next",31.741125629752172,"binary64"],["(-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (*.f64 x x)) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))))","fresh",56.73155801747794,"binary64"],["(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","next",55.061169135087525,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","fresh",31.261684322936087,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","fresh",30.745155529224206,"binary64"],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","next",30.587821412132232,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","next",31.068831425366334,"binary64"]],"compiler":[[28,12],[8,6],[19,13],[21,15],[78,17],[26,8],[27,13],[12,7],[15,8],[11,9],[28,12],[19,13],[21,15],[78,17],[26,8],[27,13],[12,7],[15,8],[11,9]],"count":[[52,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[51,9],"picked":[1,1]}],"memory":[[-2497136,5796496]],"min-error":[[30.2467661301876,"binary64"]],"time":10.85009765625,"type":"prune"},{"inputs":[["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x)))","(neg.f64 (cos.f64 x))","(cos.f64 x)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","#s(literal -1 binary64)","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 x x)","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","(/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","(/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x)))","(*.f64 (*.f64 x x) (cos.f64 x))","(cos.f64 x)","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","#s(literal -1 binary64)","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(neg.f64 (cos.f64 x))","(cos.f64 x)","(*.f64 x x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","#s(literal 3 binary64)","(*.f64 x x)"]],"locations":[["(fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","cost-diff",0],["(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","cost-diff",0],["(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","cost-diff",1],["(+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","cost-diff",2],["(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","cost-diff",2],["(*.f64 x x)","cost-diff",0],["(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","cost-diff",4],["(/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","cost-diff",6],["(/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x)))","cost-diff",8],["(*.f64 x x)","cost-diff",0],["(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","cost-diff",1],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","cost-diff",2],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x)))","cost-diff",2],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","cost-diff",5]],"memory":[[-3152896,13160848]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (cos.f64 x)) (*.f64 x x))","(neg.f64 (cos.f64 x))","(cos.f64 x)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x))","#s(literal -1 binary64)","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 x x)","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","x","(*.f64 (*.f64 x x) (*.f64 x x))","(/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x)))","(/.f64 (cos.f64 x) (*.f64 x x))","(*.f64 (*.f64 x x) (cos.f64 x))","(cos.f64 x)","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 x x)))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64))","#s(literal -1 binary64)","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","#s(literal 1 binary64)","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (cos.f64 x))","(neg.f64 (cos.f64 x))","(cos.f64 x)","(*.f64 x x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","#s(literal 3 binary64)","(*.f64 x x)"]],"time":472.887939453125,"type":"simplify"},{"compiler":[[347,39]],"locations":[["(pow.f64 (cos.f64 x) #s(literal 3 binary64))","accuracy",0.3360138672213042],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",0.4833838554056162],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","accuracy",14.193221059065007],["(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","accuracy",15.751816534094202],["(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","accuracy",0.4833838554056162],["(cos.f64 (+.f64 x x))","accuracy",0.6302223895426148],["(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","accuracy",14.193221059065007],["(+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","accuracy",16.05353411702897],["(cos.f64 x)","accuracy",0.11556625976844202],["(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","accuracy",29.91223359743874],["(/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","accuracy",43.89516191893821],["(/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x)))","accuracy",43.91099439296488],["(cos.f64 x)","accuracy",0.11556625976844202],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","accuracy",0.2649289668795287],["(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",13.994071255207459],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",15.8279834646901],["(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x)))","accuracy",0.1015625],["(cos.f64 x)","accuracy",0.11556625976844202],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",0.3716695741879471],["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","accuracy",29.91223359743874]],"memory":[[6653248,63826912]],"mixsample":[[23.843505859375,"ival-div",0],[12.185546875,"adjust",800],[0.94970703125,"ival-mult",1200],[0.109375,"ival-neg",2400],[1.852783203125,"ival-div",400],[2.025390625,"ival-pow",1600],[2.5869140625,"ival-div",1600],[0.166015625,"ival-assert",0],[0.259765625,"ival-neg",800],[7.517333984375,"ival-sub",0],[17.402587890625,"ival-cos",0],[0.005126953125,"ival-sub",400],[2.80126953125,"ival-cos",1200],[2.080322265625,"ival-cos",400],[0.00927734375,"ival-neg",400],[4.584228515625,"ival-pow",0],[0.427490234375,"ival-mult",3600],[1.155029296875,"ival-mult",800],[14.716552734375,"ival-add",0],[0.706787109375,"ival-cos",800],[0.193603515625,"ival-neg",1200],[2.634033203125,"ival-mult",1600],[1.95458984375,"ival-add",400],[1.28173828125,"adjust",2800],[0.899658203125,"ival-div",2000],[0.512939453125,"ival-mult",2400],[2.8984375,"ival-pow",400],[0.489013671875,"ival-div",2400],[25.45751953125,"ival-cos",1600],[1.003662109375,"ival-mult",2000],[0.233154296875,"ival-neg",1600],[4.84228515625,"ival-cos",2400],[0.63916015625,"ival-pow",3600],[0.22998046875,"ival-add",3600],[7.562744140625,"adjust",2000],[0.759033203125,"ival-div",1200],[1.36181640625,"ival-add",1600],[14.368896484375,"ival-mult",0],[1.685302734375,"ival-mult",400],[7.19384765625,"ival-cos",2000],[0.214599609375,"ival-neg",2000],[9.4921875,"ival-cos",3600],[1.1142578125,"ival-div",800],[0.4345703125,"ival-true",0],[0.396484375,"ival-div",3600],[0.824951171875,"exact",0],[0.005126953125,"ival-add",800],[3.731689453125,"ival-neg",0]],"outcomes":[[30.9267578125,1,"valid",42],[106.37109375,2,"valid",68],[38.69873046875,3,"valid",16],[57.856689453125,0,"valid",130]],"time":282.14208984375,"type":"localize"},{"count":[[23,77]],"inputs":[["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x)))","(/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 (+.f64 x x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(pow.f64 (cos.f64 x) #s(literal 3 binary64))"]],"memory":[[433904,7932368]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(/ -1 (pow x 2))","(/ (- (* 1/2 (pow x 2)) 1) (pow x 2))","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) (pow x 2))","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) (pow x 2))","(/ 1 (pow x 2))","(pow x 2)","-1/2","(- (* 1/24 (pow x 2)) 1/2)","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* -1 (pow x 2))","(* (pow x 2) (- (* 1/3 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* (pow x 2) (- (* 1/315 (pow x 2)) 2/45)))) 1))","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","1/3","(+ 1/3 (* 1/6 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 1/6 (* 1/24 (pow x 2)))))","(+ 1/3 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/24 (* 11/2160 (pow x 2)))))))","3","(+ 3 (* -3/2 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 3/8 (pow x 2)) 3/2)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 3/8 (* -11/240 (pow x 2)))) 3/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/3 (* -4/45 (pow x 2)))) 2)))","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -3/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (/ (cos x) (pow x 2)))","(/ (- 1 (cos x)) (pow x 2))","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/ (pow x 2) (- 1 (cos x)))","(/ (cos x) (pow x 2))","(* -1 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (+ 1 (cos x))))","(- (* 1/2 (cos (* 2 x))) 1/2)","(* -1 (+ 1 (cos x)))","(* -1 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (* (pow x 2) (+ 1 (cos x)))))","(/ (- (/ 1 (+ 1 (* (cos x) (+ 1 (cos x))))) (/ (pow (cos x) 3) (+ 1 (* (cos x) (+ 1 (cos x)))))) (pow x 2))","(- (/ 1 (+ 1 (* (cos x) (+ 1 (cos x))))) (/ (pow (cos x) 3) (+ 1 (* (cos x) (+ 1 (cos x))))))","(/ 1 (+ 1 (* (cos x) (+ 1 (cos x)))))","(+ 1 (* (cos x) (+ 1 (cos x))))","(cos x)","(- 1 (cos x))","(cos (* 2 x))","(+ 1 (cos x))","(pow (cos x) 3)","(* -1 (/ (- (* 1/2 (cos (neg (* -2 x)))) 1/2) (+ 1 (cos x))))","(- (* 1/2 (cos (neg (* -2 x)))) 1/2)","(* -1 (/ (- (* 1/2 (cos (neg (* -2 x)))) 1/2) (* (pow x 2) (+ 1 (cos x)))))","(cos (neg (* -2 x)))"]],"series":[[10.068115234375,"((+ (/ 1 (* x x)) (* (/ 1 (* x x)) (neg (cos x)))) (* (/ 1 (* x x)) (neg (cos x))) (/ 1 (* x x)) (* x x) (neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ -1 (/ (* x x) (- 1 (cos x)))) (/ (* x x) (- 1 (cos x))) (/ (* (* x x) (cos x)) (* (* x x) (* x x))) (/ (* x x) (* (* x x) (* x x))) (- (/ (* x x) (* (* x x) (* x x))) (/ (* (* x x) (cos x)) (* (* x x) (* x x)))) (* (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (/ 1 (+ (neg (cos x)) -1))) (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (+ (neg (cos x)) -1) (/ (* (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (/ 1 (+ (neg (cos x)) -1))) (* x x)) (/ (- (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (/ (pow (cos x) 3) (+ (* (+ (cos x) 1) (cos x)) 1))) (* x x)) (- (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (/ (pow (cos x) 3) (+ (* (+ (cos x) 1) (cos x)) 1))) (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (+ (* (+ (cos x) 1) (cos x)) 1) (cos x) (- 1 (cos x)) (cos (+ x x)) (+ (cos x) 1) (pow (cos x) 3))","x","-inf"],[11.1611328125,"((+ (/ 1 (* x x)) (* (/ 1 (* x x)) (neg (cos x)))) (* (/ 1 (* x x)) (neg (cos x))) (/ 1 (* x x)) (* x x) (neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ -1 (/ (* x x) (- 1 (cos x)))) (/ (* x x) (- 1 (cos x))) (/ (* (* x x) (cos x)) (* (* x x) (* x x))) (/ (* x x) (* (* x x) (* x x))) (- (/ (* x x) (* (* x x) (* x x))) (/ (* (* x x) (cos x)) (* (* x x) (* x x)))) (* (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (/ 1 (+ (neg (cos x)) -1))) (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (+ (neg (cos x)) -1) (/ (* (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (/ 1 (+ (neg (cos x)) -1))) (* x x)) (/ (- (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (/ (pow (cos x) 3) (+ (* (+ (cos x) 1) (cos x)) 1))) (* x x)) (- (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (/ (pow (cos x) 3) (+ (* (+ (cos x) 1) (cos x)) 1))) (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (+ (* (+ (cos x) 1) (cos x)) 1) (cos x) (- 1 (cos x)) (cos (+ x x)) (+ (cos x) 1) (pow (cos x) 3))","x","inf"],[4.516845703125,"((+ (/ 1 (* x x)) (* (/ 1 (* x x)) (neg (cos x)))) (* (/ 1 (* x x)) (neg (cos x))) (/ 1 (* x x)) (* x x) (neg (/ -1 (/ (* x x) (- 1 (cos x))))) (/ -1 (/ (* x x) (- 1 (cos x)))) (/ (* x x) (- 1 (cos x))) (/ (* (* x x) (cos x)) (* (* x x) (* x x))) (/ (* x x) (* (* x x) (* x x))) (- (/ (* x x) (* (* x x) (* x x))) (/ (* (* x x) (cos x)) (* (* x x) (* x x)))) (* (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (/ 1 (+ (neg (cos x)) -1))) (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (+ (neg (cos x)) -1) (/ (* (+ -1 (+ (* (cos (+ x x)) 1/2) 1/2)) (/ 1 (+ (neg (cos x)) -1))) (* x x)) (/ (- (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (/ (pow (cos x) 3) (+ (* (+ (cos x) 1) (cos x)) 1))) (* x x)) (- (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (/ (pow (cos x) 3) (+ (* (+ (cos x) 1) (cos x)) 1))) (/ 1 (+ (* (+ (cos x) 1) (cos x)) 1)) (+ (* (+ (cos x) 1) (cos x)) 1) (cos x) (- 1 (cos x)) (cos (+ x x)) (+ (cos x) 1) (pow (cos x) 3))","x","0"]],"time":27.81787109375,"type":"series"},{"count":[[77,0]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(/ -1 (pow x 2))","(/ (- (* 1/2 (pow x 2)) 1) (pow x 2))","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) (pow x 2))","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) (pow x 2))","(/ 1 (pow x 2))","(pow x 2)","-1/2","(- (* 1/24 (pow x 2)) 1/2)","(- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)","(- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* -1 (pow x 2))","(* (pow x 2) (- (* 1/3 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* (pow x 2) (- (* 1/315 (pow x 2)) 2/45)))) 1))","-2","(- (* 1/2 (pow x 2)) 2)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 2)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 2)","1/3","(+ 1/3 (* 1/6 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 1/6 (* 1/24 (pow x 2)))))","(+ 1/3 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/24 (* 11/2160 (pow x 2)))))))","3","(+ 3 (* -3/2 (pow x 2)))","(+ 3 (* (pow x 2) (- (* 3/8 (pow x 2)) 3/2)))","(+ 3 (* (pow x 2) (- (* (pow x 2) (+ 3/8 (* -11/240 (pow x 2)))) 3/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/3 (* -4/45 (pow x 2)))) 2)))","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -3/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (/ (cos x) (pow x 2)))","(/ (- 1 (cos x)) (pow x 2))","(* -1 (/ (- 1 (cos x)) (pow x 2)))","(/ (pow x 2) (- 1 (cos x)))","(/ (cos x) (pow x 2))","(* -1 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (+ 1 (cos x))))","(- (* 1/2 (cos (* 2 x))) 1/2)","(* -1 (+ 1 (cos x)))","(* -1 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (* (pow x 2) (+ 1 (cos x)))))","(/ (- (/ 1 (+ 1 (* (cos x) (+ 1 (cos x))))) (/ (pow (cos x) 3) (+ 1 (* (cos x) (+ 1 (cos x)))))) (pow x 2))","(- (/ 1 (+ 1 (* (cos x) (+ 1 (cos x))))) (/ (pow (cos x) 3) (+ 1 (* (cos x) (+ 1 (cos x))))))","(/ 1 (+ 1 (* (cos x) (+ 1 (cos x)))))","(+ 1 (* (cos x) (+ 1 (cos x))))","(cos x)","(- 1 (cos x))","(cos (* 2 x))","(+ 1 (cos x))","(pow (cos x) 3)","(* -1 (/ (- (* 1/2 (cos (neg (* -2 x)))) 1/2) (+ 1 (cos x))))","(- (* 1/2 (cos (neg (* -2 x)))) 1/2)","(* -1 (/ (- (* 1/2 (cos (neg (* -2 x)))) 1/2) (* (pow x 2) (+ 1 (cos x)))))","(cos (neg (* -2 x)))"]],"memory":[[685600,10321600]],"method":["egg-herbie"],"outputs":[[]],"time":139.254150390625,"type":"simplify"},{"count":[[23,345]],"inputs":[["(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x)))","(/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","(*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))","(fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 (+.f64 x x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(pow.f64 (cos.f64 x) #s(literal 3 binary64))"]],"memory":[[-4194672,19968528]],"outputs":[["#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 0 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -3/2 binary64)","#s(literal -4 binary64)","#s(literal -3 binary64)"]],"time":591.65283203125,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1295440,1295440]],"time":2.190185546875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","done",31.049040512659975,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.0299738762253,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","next",31.63944554938064,"binary64"],["(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","done",31.741125629752172,"binary64"],["(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","done",55.061169135087525,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","next",31.261684322936087,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","next",30.745155529224206,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","done",31.068831425366334,"binary64"],["#s(literal 1/2 binary64)","next",31.184489468532462,"binary64"],["#s(literal 0 binary64)","next",46.07625046718073,"binary64"]],"compiler":[[28,12],[8,6],[19,13],[21,15],[26,8],[27,13],[12,7],[11,9],[1,2],[1,2],[19,13],[27,13],[12,7],[1,2],[1,2]],"count":[[25,10]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[15,2],"picked":[5,4]}],"memory":[[3323376,3323376]],"min-error":[[0.3775908442716708,"binary64"]],"time":6.450927734375,"type":"prune"},{"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(/.f64 (cos.f64 x) (*.f64 x x))","(cos.f64 x)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","(*.f64 x x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(*.f64 x x)","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","#s(literal 1/2 binary64)"]],"locations":[["(+.f64 (cos.f64 x) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","cost-diff",0],["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","cost-diff",1],["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","cost-diff",2],["(/.f64 (cos.f64 x) (*.f64 x x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","cost-diff",0]],"memory":[[-6360432,12727440]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 x x)","x","(/.f64 (cos.f64 x) (*.f64 x x))","(cos.f64 x)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","(*.f64 x x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(+.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal -1/2 binary64) #s(literal -1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","#s(literal 1 binary64)","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","x","(*.f64 x x)","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","#s(literal 1/2 binary64)"]],"time":233.904052734375,"type":"simplify"},{"compiler":[[197,24]],"locations":[["(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","accuracy",0.36140492192706614],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",0.4833838554056162],["(cos.f64 (+.f64 x x))","accuracy",0.6302223895426148],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","accuracy",30.067868939962686],["(+.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",0.4833838554056162],["(cos.f64 (+.f64 x x))","accuracy",0.6302223895426148],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","accuracy",14.193221059065007],["(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","accuracy",15.929483570930625],["(cos.f64 x)","accuracy",0.11556625976844202],["(/.f64 #s(literal 1 binary64) (*.f64 x x))","accuracy",0.3716695741879471],["(/.f64 (cos.f64 x) (*.f64 x x))","accuracy",0.3897508288385089],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","accuracy",29.91223359743874]],"memory":[[2175840,34725040]],"mixsample":[[8.177490234375,"adjust",800],[13.835693359375,"ival-div",0],[0.78466796875,"ival-mult",1200],[0.11474609375,"ival-div",400],[0.184814453125,"ival-assert",0],[1.232666015625,"ival-div",1600],[6.482666015625,"ival-sub",0],[18.2490234375,"ival-cos",0],[5.241943359375,"ival-cos",1200],[0.08984375,"ival-cos",400],[0.6083984375,"ival-mult",800],[4.431396484375,"ival-add",0],[1.2861328125,"ival-cos",800],[0.73193359375,"ival-mult",1600],[0.0185546875,"ival-add",400],[1.26806640625,"ival-div",2000],[0.227783203125,"ival-add",2400],[0.407470703125,"ival-mult",2400],[0.71728515625,"ival-div",2400],[0.258544921875,"ival-add",1200],[10.44287109375,"ival-cos",1600],[0.775390625,"ival-mult",2000],[9.62841796875,"ival-cos",2400],[0.925048828125,"ival-div",1200],[9.1123046875,"ival-mult",0],[0.451416015625,"ival-add",1600],[0.04833984375,"ival-mult",400],[0.29541015625,"ival-add",2000],[15.337646484375,"ival-cos",2000],[0.884033203125,"ival-div",800],[0.330322265625,"ival-true",0],[0.28369140625,"ival-add",800],[0.56005859375,"exact",0]],"outcomes":[[101.09814453125,1,"valid",126],[42.5595703125,0,"valid",130]],"time":174.864990234375,"type":"localize"},{"count":[[15,60]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 (cos.f64 x) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","(cos.f64 (+.f64 x x))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))"]],"memory":[[-2181120,5290032]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(/ 1 (pow x 2))","(pow x 2)","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","(/ 1/2 (pow x 2))","(/ (+ 1/2 (* 1/8 (pow x 2))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2))))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2))))))) (pow x 2))","(* 2 (pow x 2))","(* (pow x 2) (+ 2 (* -1/2 (pow x 2))))","(* (pow x 2) (+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* (pow x 2) (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/3 (* -4/45 (pow x 2)))) 2)))","(/ (+ 1/2 (* -3/8 (pow x 2))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (- (* 1/16 (pow x 2)) 3/8))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/16 (* 1/640 (pow x 2)))) 3/8))) (pow x 2))","(/ (- 1 (cos x)) (pow x 2))","(/ (cos x) (pow x 2))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (* 2 x))))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (* (pow x 2) (+ 1 (cos x))))","(/ 1 (+ 1 (cos x)))","(/ (- (/ 1 (+ 1 (cos x))) (+ (* 1/2 (/ 1 (+ 1 (cos x)))) (* 1/2 (/ (cos (* 2 x)) (+ 1 (cos x)))))) (pow x 2))","(/ 1 (* (pow x 2) (+ 1 (cos x))))","(* (pow x 2) (+ 1 (cos x)))","(+ 1 (cos x))","(cos x)","(cos (* 2 x))","(/ (+ 1/2 (* 1/2 (cos (* 2 x)))) (* (pow x 2) (+ 1 (cos x))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (neg (* -2 x)))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (pow x 2) (+ 1 (cos x))))","(/ (- (/ 1 (+ 1 (cos x))) (+ (* 1/2 (/ 1 (+ 1 (cos x)))) (* 1/2 (/ (cos (neg (* -2 x))) (+ 1 (cos x)))))) (pow x 2))","(cos (neg (* -2 x)))","(/ (+ 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (pow x 2) (+ 1 (cos x))))"]],"series":[[8.01123046875,"((- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (* x x) (/ (cos x) (* x x)) (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (- 1/2 (* (cos (+ x x)) 1/2)) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (/ 1 (+ (cos x) 1)) (- (/ 1 (* (+ (cos x) 1) (* x x))) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (* x x)))) (/ 1 (* (+ (cos x) 1) (* x x))) (* (+ (cos x) 1) (* x x)) (+ (cos x) 1) (cos x) (cos (+ x x)) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (* x x))))","x","-inf"],[7.754150390625,"((- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (* x x) (/ (cos x) (* x x)) (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (- 1/2 (* (cos (+ x x)) 1/2)) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (/ 1 (+ (cos x) 1)) (- (/ 1 (* (+ (cos x) 1) (* x x))) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (* x x)))) (/ 1 (* (+ (cos x) 1) (* x x))) (* (+ (cos x) 1) (* x x)) (+ (cos x) 1) (cos x) (cos (+ x x)) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (* x x))))","x","inf"],[7.427001953125,"((- (/ 1 (* x x)) (/ (cos x) (* x x))) (/ 1 (* x x)) (* x x) (/ (cos x) (* x x)) (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (- 1/2 (* (cos (+ x x)) 1/2)) (/ (* (/ 1 (+ (cos x) 1)) (- 1/2 (* (cos (+ x x)) 1/2))) (* x x)) (/ 1 (+ (cos x) 1)) (- (/ 1 (* (+ (cos x) 1) (* x x))) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (* x x)))) (/ 1 (* (+ (cos x) 1) (* x x))) (* (+ (cos x) 1) (* x x)) (+ (cos x) 1) (cos x) (cos (+ x x)) (/ (+ (* (cos (+ x x)) 1/2) 1/2) (* (+ (cos x) 1) (* x x))))","x","0"]],"time":24.532958984375,"type":"series"},{"count":[[60,0]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(/ 1 (pow x 2))","(pow x 2)","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(+ 1/2 (* 1/8 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2)))))))","(/ 1/2 (pow x 2))","(/ (+ 1/2 (* 1/8 (pow x 2))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (+ 1/8 (* 1/48 (pow x 2))))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (+ 1/8 (* (pow x 2) (+ 1/48 (* 17/5760 (pow x 2))))))) (pow x 2))","(* 2 (pow x 2))","(* (pow x 2) (+ 2 (* -1/2 (pow x 2))))","(* (pow x 2) (+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* (pow x 2) (+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","2","(+ 2 (* -1/2 (pow x 2)))","(+ 2 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 2 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ 1 (* -2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 2/3 (pow x 2)) 2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/3 (* -4/45 (pow x 2)))) 2)))","(/ (+ 1/2 (* -3/8 (pow x 2))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (- (* 1/16 (pow x 2)) 3/8))) (pow x 2))","(/ (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/16 (* 1/640 (pow x 2)))) 3/8))) (pow x 2))","(/ (- 1 (cos x)) (pow x 2))","(/ (cos x) (pow x 2))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (* 2 x))))","(/ (- 1/2 (* 1/2 (cos (* 2 x)))) (* (pow x 2) (+ 1 (cos x))))","(/ 1 (+ 1 (cos x)))","(/ (- (/ 1 (+ 1 (cos x))) (+ (* 1/2 (/ 1 (+ 1 (cos x)))) (* 1/2 (/ (cos (* 2 x)) (+ 1 (cos x)))))) (pow x 2))","(/ 1 (* (pow x 2) (+ 1 (cos x))))","(* (pow x 2) (+ 1 (cos x)))","(+ 1 (cos x))","(cos x)","(cos (* 2 x))","(/ (+ 1/2 (* 1/2 (cos (* 2 x)))) (* (pow x 2) (+ 1 (cos x))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (+ 1 (cos x)))","(- 1/2 (* 1/2 (cos (neg (* -2 x)))))","(/ (- 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (pow x 2) (+ 1 (cos x))))","(/ (- (/ 1 (+ 1 (cos x))) (+ (* 1/2 (/ 1 (+ 1 (cos x)))) (* 1/2 (/ (cos (neg (* -2 x))) (+ 1 (cos x)))))) (pow x 2))","(cos (neg (* -2 x)))","(/ (+ 1/2 (* 1/2 (cos (neg (* -2 x))))) (* (pow x 2) (+ 1 (cos x))))"]],"memory":[[1646272,9898416]],"method":["egg-herbie"],"outputs":[[]],"time":133.070068359375,"type":"simplify"},{"count":[[15,225]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 (cos.f64 x) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64))))","(-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","(cos.f64 (+.f64 x x))","(/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))"]],"memory":[[-1052256,16404800]],"outputs":[["#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)","#s(literal 1 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 5/2 binary64)","#s(literal 6 binary64)","#s(literal 7/2 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal -3/2 binary64)"]],"time":447.427978515625,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1272336,1272336]],"time":1.931884765625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","done",31.049040512659975,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.0299738762253,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","done",31.63944554938064,"binary64"],["(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","done",31.741125629752172,"binary64"],["(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","done",55.061169135087525,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","done",31.261684322936087,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","done",30.745155529224206,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","done",31.068831425366334,"binary64"],["#s(literal 1/2 binary64)","done",31.184489468532462,"binary64"],["#s(literal 0 binary64)","done",46.07625046718073,"binary64"]],"compiler":[[247,56],[28,12],[8,6],[19,13],[21,15],[26,8],[27,13],[12,7],[11,9],[1,2],[1,2]],"count":[[25,10]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[15,0],"picked":[5,5]}],"memory":[[4296304,4296304]],"min-error":[[0.3775908442716708,"binary64"]],"time":7.197021484375,"type":"prune"},{"accuracy":[0.5096845583996185],"baseline":[30.587821412132232],"branch":[["x",0.5096845583996185,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",16.25115591098143,2,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[12,2]],"inputs":[["#s(literal 0 binary64)","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (*.f64 x x)))","(+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (cos.f64 x))))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 x x))))","(/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64)))) (*.f64 x x))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x)))) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (*.f64 x x)) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (*.f64 x x))))))"]],"memory":[[-2585136,5431360]],"oracle":[63.55180787338466],"outputs":[["#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"repr":["binary64"],"time":8.125,"times":[[3.4609375,"x"],[3.677978515625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[15.357152318385856],"baseline":[31.184489468532462],"branch":[["x",15.357152318385856,2,"binary64"]],"compiler":[[1,1]],"count":[[2,2]],"inputs":[["#s(literal 0 binary64)","#s(literal 1/2 binary64)"]],"memory":[[1782608,1782608]],"oracle":[61.90358761732724],"outputs":[["#s(literal 1/2 binary64)","#s(literal 0 binary64)"]],"repr":["binary64"],"time":1.593017578125,"times":[[1.306884765625,"x"]],"type":"regimes"},{"accuracy":[46.07625046718064],"baseline":[46.07625046718073],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",46.07625046718064,1,"binary64"],["x",46.07625046718083,1,"binary64"]],"compiler":[[8,6],[1,1]],"count":[[1,1]],"inputs":[["#s(literal 0 binary64)"]],"link":["."],"memory":[[-5461856,2803888]],"name":["cos2 (problem 3.4.1)"],"oracle":[46.07625046718073],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":2.676025390625,"times":[[1.220947265625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"],[1.05810546875,"x"]],"type":"regimes"},{"bstep":[[12.2470703125,1.403273492186923e-6,168.24181726425027]],"compiler":[[8,7],[1,3],[8,7],[1,3],[8,7],[1,3],[8,7],[1,3],[8,7],[1,3],[8,7],[1,3],[8,7],[1,3],[8,7],[1,3],[8,7],[1,3],[10,9],[1,1]],"memory":[[4192912,4192912]],"method":["binary-search"],"mixsample":[[0.757080078125,"ival-sub",0],[0.89501953125,"ival-div",0],[0.091796875,"ival-true",0],[1.723388671875,"ival-cos",0],[0.964599609375,"ival-mult",0],[0.092041015625,"exact",0],[0.052734375,"ival-assert",0]],"outcomes":[[7.379638671875,0,"valid",144]],"stop":[["narrow-enough",1]],"time":14.47607421875,"type":"bsearch"},{"bstep":[[21.919921875,1.1775328124020366e+70,3.3104329000353086e+77]],"compiler":[[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[1,3],[10,9],[1,1]],"memory":[[-4415232,4664032]],"method":["binary-search"],"mixsample":[[1.033447265625,"ival-sub",0],[1.010009765625,"ival-div",0],[0.149169921875,"ival-true",0],[7.49755859375,"ival-cos",0],[1.19189453125,"ival-mult",0],[0.12255859375,"exact",0],[0.094970703125,"ival-assert",0]],"outcomes":[[14.77880859375,0,"valid",144]],"stop":[["narrow-enough",1]],"time":23.8759765625,"type":"bsearch"},{"inputs":[["(if (<=.f64 x #s(literal 4242751136953197/36893488147419103232 binary64)) #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(if (<=.f64 x #s(literal 111999999999999994986331580283874830516910144784665608417822386580986248822784 binary64)) #s(literal 1/2 binary64) #s(literal 0 binary64))","#s(literal 0 binary64)"]],"memory":[[7293168,15503792]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x #s(literal 4242751136953197/36893488147419103232 binary64)) #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(if (<=.f64 x #s(literal 111999999999999994986331580283874830516910144784665608417822386580986248822784 binary64)) #s(literal 1/2 binary64) #s(literal 0 binary64))","#s(literal 0 binary64)"]],"time":148.9189453125,"type":"simplify"},{"compiler":[[20,14]],"memory":[[-7605328,725488]],"stop":[["done",1]],"time":2.10888671875,"type":"soundness"},{"compiler":[[20,14],[20,14],[8,6],[8,6],[13,10],[13,10]],"memory":[[6407872,13993888]],"remove-preprocessing":[[],[],[],[]],"time":27.2841796875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.014892578125,"type":"end"}]