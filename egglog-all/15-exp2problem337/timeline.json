[{"memory":[[13680,13680]],"time":0.0771484375,"type":"start"},{"compiler":[[13,11]],"memory":[[79024,79024]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.0,"valid":0.5040950775146484}],[0,{"invalid":0.0,"precondition":0.49590492248535156,"unknown":0.5040950775146484,"valid":0.0}]],"time":0.68994140625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.49590492248535156,"valid":0.5040950775146484}],"memory":[[13024288,474827808]],"mixsample":[[389.41748046875,"adjust",800],[231.9580078125,"ival-add",0],[360.60791015625,"ival-exp",0],[130.96435546875,"ival-fabs",0],[78.553466796875,"ival-sub",1600],[9.262451171875,"ival-assert",0],[0.040283203125,"ival-add",400],[109.5751953125,"ival-sub",0],[2500.251220703125,"ival-exp",1600],[1210.13916015625,"ival-exp",400],[107.9365234375,"ival-sub",400],[0.067138671875,"ival-add",800],[60.73046875,"ival-<=",0],[34.224853515625,"exact",0],[223.89453125,"adjust",2000],[70.8232421875,"ival-neg",0]],"outcomes":[[939.201904296875,1,"valid",2376],[5289.097900390625,2,"valid",5658],[35.36083984375,0,"valid",222]],"time":7091.326904296875,"type":"sample"},{"compiler":[[8,7],[23,9],[23,9]],"confusion":[[131,0,1,124]],"explanations":[["exp.f64","(exp.f64 (neg.f64 x))","sensitivity",1,0,[],[[2]]],["+.f64","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cancellation",131,0,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",130,1,[0.0862554821396638],0,false],["(-.f64 (exp.f64 x) #s(literal 2 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["(exp.f64 (neg.f64 x))",0,1,[421.9724085994667],0,false],["(neg.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,132],[0,124]],"maybe-confusion":[[131,0,0,1,0,124]],"memory":[[6636864,57445280]],"mixsample":[[17.585205078125,"adjust",800],[11.313232421875,"ival-add",0],[16.859619140625,"ival-exp",0],[3.36767578125,"ival-sub",1600],[0.398193359375,"ival-assert",0],[4.757568359375,"ival-sub",0],[1.00146484375,"ival-true",0],[128.1845703125,"ival-exp",1600],[54.39111328125,"ival-exp",400],[4.514404296875,"ival-sub",400],[0.702392578125,"exact",0],[10.08203125,"adjust",2000],[5.384033203125,"ival-neg",0]],"outcomes":[[41.09765625,1,"valid",138],[260.8896484375,2,"valid",356],[2.61376953125,0,"valid",18]],"time":411.011962890625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,7]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"memory":[[-3275536,21672640]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))"]],"symmetry":[["(abs x)"]],"time":421.85205078125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.1240234375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",29.85059947348534,"binary64"]],"compiler":[[8,7]],"memory":[[306128,306128]],"time":0.7900390625,"type":"prune"},{"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"locations":[["(exp.f64 (neg.f64 x))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0]],"memory":[[2080832,10032512]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"time":228.572021484375,"type":"simplify"},{"compiler":[[23,9]],"locations":[["(exp.f64 (neg.f64 x))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03515625],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",29.813102910906494]],"memory":[[-2025760,16045312]],"mixsample":[[7.69287109375,"adjust",800],[4.978515625,"ival-add",0],[8.415771484375,"ival-exp",0],[1.39599609375,"ival-sub",1600],[0.19091796875,"ival-assert",0],[2.281005859375,"ival-sub",0],[0.35546875,"ival-true",0],[55.34765625,"ival-exp",1600],[22.955322265625,"ival-exp",400],[2.18896484375,"ival-sub",400],[0.303955078125,"exact",0],[4.375244140625,"adjust",2000],[1.609130859375,"ival-neg",0]],"outcomes":[[16.631591796875,1,"valid",69],[116.125,2,"valid",178],[0.976318359375,0,"valid",9]],"time":148.466064453125,"type":"localize"},{"count":[[4,21]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[673184,673184]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"series":[[0.343017578125,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","-inf"],[0.38818359375,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","inf"],[1.052978515625,"((+ (- (exp x) 2) (exp (neg x))) (- (exp x) 2) (exp x) (exp (neg x)))","x","0"]],"time":2.141845703125,"type":"series"},{"count":[[21,0]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(- (+ (exp x) (exp (neg x))) 2)","(- (exp x) 2)","(exp x)","(exp (neg x))","(- (+ (exp x) (exp (* -1 x))) 2)","(exp (* -1 x))"]],"memory":[[2158016,9928864]],"method":["egg-herbie"],"outputs":[[]],"time":167.91015625,"type":"simplify"},{"count":[[4,49]],"inputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","(exp.f64 (neg.f64 x))"]],"memory":[[-1697216,16098688]],"outputs":[["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))) (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (+.f64 (exp.f64 x) #s(literal -2 binary64)))","(+.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal -2 binary64))","(+.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal -2 binary64)) (exp.f64 x))","(+.f64 #s(literal -2 binary64) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(+.f64 (exp.f64 x) (+.f64 (exp.f64 (neg.f64 x)) #s(literal -2 binary64)))","(+.f64 (/.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (/.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))))))","(-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 (neg.f64 x))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))))","(neg.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(+.f64 #s(literal -2 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 2 binary64) (exp.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal -2 binary64)))","(*.f64 (+.f64 (neg.f64 (exp.f64 (+.f64 x x))) #s(literal 4 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -2 binary64))))","(*.f64 (/.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (+.f64 (exp.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","(*.f64 (exp.f64 x) (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(exp.f64 x)","(exp.f64 (-.f64 x #s(literal 0 binary64)))","(neg.f64 (neg.f64 (exp.f64 (neg.f64 x))))","(*.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 x))))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) x))","(pow.f64 (exp.f64 #s(literal -1 binary64)) x)","(pow.f64 (exp.f64 x) #s(literal -1 binary64))"]],"time":647.972900390625,"type":"rewrite"},{"compiler":[[680,155]],"memory":[[-3373552,4420384]],"time":12.04296875,"type":"eval"},{"alts":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","fresh",29.868512913328097,"binary64"],["(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","next",29.844979545512402,"binary64"],["(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","fresh",30.115250488405607,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",29.784587619749196,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","next",29.817009160906494,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",29.85059947348534,"binary64"],["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","fresh",30.08378817039155,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","next",30.046271231705166,"binary64"],["(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","next",30.047870652122484,"binary64"]],"compiler":[[8,7],[8,7],[28,16],[11,8],[9,7],[8,7],[17,14],[23,16],[32,19],[8,7],[8,7],[28,16],[11,8],[9,7],[17,14],[23,16],[32,19]],"count":[[50,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[49,8],"picked":[1,1]}],"memory":[[-2176960,6088720]],"min-error":[[29.639227776161867,"binary64"]],"time":11.654052734375,"type":"prune"},{"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","#s(literal 1 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","#s(literal 2 binary64)","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(exp.f64 x)","x","(-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (exp.f64 x))","#s(literal 1 binary64)","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))","(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 x)","x","#s(literal -2 binary64)","#s(literal 2 binary64)","(exp.f64 (-.f64 (neg.f64 x) x))","(-.f64 (neg.f64 x) x)","(neg.f64 x)","(+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64))","(neg.f64 (exp.f64 x))","(exp.f64 (neg.f64 x))","(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 x)","x","#s(literal -2 binary64)","#s(literal 3 binary64)","(exp.f64 (*.f64 x #s(literal -3 binary64)))","(*.f64 x #s(literal -3 binary64))","#s(literal -3 binary64)","(neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))","(fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))","(-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))","(neg.f64 x)","(exp.f64 (-.f64 (neg.f64 x) x))","(-.f64 (neg.f64 x) x)"]],"locations":[["(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","cost-diff",0],["(+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))","cost-diff",0],["(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","cost-diff",0],["(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","cost-diff",2],["(-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","cost-diff",0],["(+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64))","cost-diff",1],["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","cost-diff",1],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (exp.f64 x))","cost-diff",1],["(exp.f64 (neg.f64 x))","cost-diff",0],["(-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","cost-diff",0],["(exp.f64 (neg.f64 x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))","cost-diff",0],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","cost-diff",3]],"memory":[[6515424,14742064]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(exp.f64 x)","#s(literal 1 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","#s(literal 2 binary64)","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 x)","x","(-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(exp.f64 (neg.f64 x))","#s(literal 1 binary64)","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 (exp.f64 (-.f64 (neg.f64 x) x)) (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal 2 binary64)) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (-.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal 2 binary64)) (exp.f64 x)))","(-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))","(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 x)","x","#s(literal -2 binary64)","#s(literal 2 binary64)","(exp.f64 (-.f64 (neg.f64 x) x))","(-.f64 (neg.f64 x) x)","(neg.f64 x)","(+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) #s(literal 2 binary64)) (exp.f64 x))","(+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64))","(-.f64 #s(literal 2 binary64) (exp.f64 x))","(neg.f64 (exp.f64 x))","(exp.f64 (neg.f64 x))","(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))","(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (fma.f64 (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 #s(literal 2 binary64) (exp.f64 x)) (neg.f64 (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 x)","x","#s(literal -2 binary64)","#s(literal 3 binary64)","(exp.f64 (*.f64 x #s(literal -3 binary64)))","(*.f64 x #s(literal -3 binary64))","#s(literal -3 binary64)","(neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))","(fma.f64 (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (-.f64 #s(literal 2 binary64) (exp.f64 x)) (neg.f64 (exp.f64 (-.f64 (neg.f64 x) x))))","(fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))","(-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))","(neg.f64 x)","(exp.f64 (-.f64 (neg.f64 x) x))","(-.f64 (neg.f64 x) x)"]],"time":737.5029296875,"type":"simplify"},{"compiler":[[340,39]],"locations":[["(exp.f64 (*.f64 x #s(literal -3 binary64)))","accuracy",0.04023128132182531],["(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","accuracy",0.04753876953688403],["(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","accuracy",0.3822077419519383],["(+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))","accuracy",29.815461857032503],["(+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64))","accuracy",0.03515625],["(+.f64 (exp.f64 x) #s(literal -2 binary64))","accuracy",0.03515625],["(/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","accuracy",0.26444515965963394],["(-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))","accuracy",29.807838297217792],["(exp.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (exp.f64 x))","accuracy",0.03515625],["(-.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.03515625],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","accuracy",29.813102910906494],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))","accuracy",0.01953125],["(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","accuracy",29.828502599796117],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","accuracy",0.02734375],["(-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))","accuracy",0.03515625],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",29.813102910906494]],"memory":[[562928,89116080]],"mixsample":[[18.068115234375,"ival-div",0],[35.123291015625,"adjust",800],[14.886962890625,"ival-exp",0],[0.01708984375,"ival-pow2",800],[3.4423828125,"ival-sub",1600],[3.9375,"ival-pow2",400],[5.8095703125,"ival-div",400],[7.21875,"ival-pow",1600],[4.950927734375,"ival-div",1600],[0.21240234375,"ival-assert",0],[0.010009765625,"ival-neg",800],[19.7275390625,"ival-sub",0],[60.030029296875,"ival-exp",400],[4.740966796875,"ival-sub",400],[24.380126953125,"adjust",2000],[8.920654296875,"ival-pow",0],[26.697021484375,"ival-add",0],[0.0400390625,"ival-sub",800],[1.286376953125,"ival-add",1600],[9.4306640625,"ival-mult",0],[3.111572265625,"ival-pow2",1600],[1.049072265625,"ival-exp",800],[0.037109375,"ival-div",800],[1.5341796875,"ival-add",400],[0.527587890625,"ival-true",0],[141.990234375,"ival-exp",1600],[8.28076171875,"ival-pow",400],[0.041015625,"ival-add",800],[1.01953125,"exact",0],[17.702880859375,"ival-neg",0],[4.05029296875,"ival-pow2",0]],"outcomes":[[76.10009765625,1,"valid",69],[433.155517578125,2,"valid",178],[3.86865234375,0,"valid",9]],"time":586.0771484375,"type":"localize"},{"count":[[20,67]],"inputs":[["(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))","(exp.f64 (neg.f64 x))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(exp.f64 x)","(-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))","(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 (*.f64 x #s(literal -3 binary64)))"]],"memory":[[-1311328,6341152]],"outputs":[["1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(+ 1 (* x (+ 1 (* -1/2 x))))","(+ 1 (* x (+ 1 (* x (- (* 1/6 x) 1/2)))))","(+ 1 (* x (- (* -1/2 x) 1)))","(+ 1 (* x (- (* x (- (* -1/6 x) 1/2)) 1)))","(* -1 (pow x 2))","(* (pow x 2) (- (* -1/12 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* -1/360 (pow x 2)) 1/12)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* (pow x 2) (- (* -1/20160 (pow x 2)) 1/360)) 1/12)) 1))","(* -2 (pow x 2))","(* (pow x 2) (- (* 2 x) 2))","(* (pow x 2) (- (* x (+ 2 (* -1/6 x))) 2))","(* (pow x 2) (- (* x (+ 2 (* x (- (* 1/2 x) 1/6)))) 2))","(* 3 (pow x 2))","(* (pow x 2) (+ 3 (* -6 x)))","(* (pow x 2) (+ 3 (* x (- (* 13/4 x) 6))))","(* (pow x 2) (+ 3 (* x (- (* x (+ 13/4 (* -3/2 x))) 6))))","(- (* 3 x) 1)","(- (* x (+ 3 (* -3/2 x))) 1)","(- (* x (+ 3 (* x (- (* -3/2 x) 3/2)))) 1)","(+ 1 (* -3 x))","(+ 1 (* x (- (* 9/2 x) 3)))","(+ 1 (* x (- (* x (+ 9/2 (* -9/2 x))) 3)))","(/ 1 (exp (neg x)))","(- (+ (exp (neg x)) (/ 1 (exp (neg x)))) 2)","(- (/ 1 (exp (neg x))) 2)","(exp (neg x))","(- (+ (exp x) (exp (neg x))) 2)","(exp x)","(- 2 (exp (neg x)))","(/ 1 (exp x))","(- (+ (exp x) (/ 1 (exp x))) 2)","(- (exp x) 2)","(- (/ (exp (neg (* 2 x))) (- (+ 2 (exp (neg x))) (exp x))) (/ (pow (- (exp x) 2) 2) (- (+ 2 (exp (neg x))) (exp x))))","(- 2 (exp x))","(/ (- (pow (- (exp x) 2) 2) (exp (neg (* 2 x)))) (- (+ 2 (exp (neg x))) (exp x)))","(- (pow (- (exp x) 2) 2) (exp (neg (* 2 x))))","(/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (neg (* 2 x))) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (neg x)))))))","(* -1 (/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (neg (* 2 x))) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (neg x))))))))","(+ (exp (* -3 x)) (pow (- (exp x) 2) 3))","(pow (- (exp x) 2) 3)","(exp (* -3 x))","(/ 1 (exp (* -1 x)))","(- (+ (exp (* -1 x)) (/ 1 (exp (* -1 x)))) 2)","(- (/ 1 (exp (* -1 x))) 2)","(exp (* -1 x))","(- (+ (exp x) (exp (* -1 x))) 2)","(- 2 (exp (* -1 x)))","(- (/ (exp (* -2 x)) (- (+ 2 (exp (* -1 x))) (exp x))) (/ (pow (- (exp x) 2) 2) (- (+ 2 (exp (* -1 x))) (exp x))))","(/ (- (pow (- (exp x) 2) 2) (exp (* -2 x))) (- (+ 2 (exp (* -1 x))) (exp x)))","(- (pow (- (exp x) 2) 2) (exp (* -2 x)))","(/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (* -2 x)) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (* -1 x)))))))","(* -1 (/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (* -2 x)) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (* -1 x))))))))"]],"series":[[11.072998046875,"((/ 1 (exp (neg x))) (+ (- (/ 1 (exp (neg x))) 2) (exp (neg x))) (- (/ 1 (exp (neg x))) 2) (exp (neg x)) (- (exp x) (- 2 (exp (neg x)))) (exp x) (- 2 (exp (neg x))) (/ 1 (exp x)) (+ (- (exp x) 2) (/ 1 (exp x))) (- (exp x) 2) (neg (/ (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (+ (+ (neg (exp x)) 2) (exp (neg x))))) (+ (neg (exp x)) 2) (/ (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (+ (+ (neg (exp x)) 2) (exp (neg x)))) (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (neg (/ (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (neg (+ (* (+ (exp x) -2) (- (+ (exp x) -2) (exp (neg x)))) (exp (- (neg x) x)))))) (/ (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (neg (+ (* (+ (exp x) -2) (- (+ (exp x) -2) (exp (neg x)))) (exp (- (neg x) x))))) (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (pow (+ (exp x) -2) 3) (+ (exp x) -2) (exp (* x -3)))","x","-inf"],[8.921142578125,"((/ 1 (exp (neg x))) (+ (- (/ 1 (exp (neg x))) 2) (exp (neg x))) (- (/ 1 (exp (neg x))) 2) (exp (neg x)) (- (exp x) (- 2 (exp (neg x)))) (exp x) (- 2 (exp (neg x))) (/ 1 (exp x)) (+ (- (exp x) 2) (/ 1 (exp x))) (- (exp x) 2) (neg (/ (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (+ (+ (neg (exp x)) 2) (exp (neg x))))) (+ (neg (exp x)) 2) (/ (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (+ (+ (neg (exp x)) 2) (exp (neg x)))) (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (neg (/ (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (neg (+ (* (+ (exp x) -2) (- (+ (exp x) -2) (exp (neg x)))) (exp (- (neg x) x)))))) (/ (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (neg (+ (* (+ (exp x) -2) (- (+ (exp x) -2) (exp (neg x)))) (exp (- (neg x) x))))) (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (pow (+ (exp x) -2) 3) (+ (exp x) -2) (exp (* x -3)))","x","inf"],[6.967041015625,"((/ 1 (exp (neg x))) (+ (- (/ 1 (exp (neg x))) 2) (exp (neg x))) (- (/ 1 (exp (neg x))) 2) (exp (neg x)) (- (exp x) (- 2 (exp (neg x)))) (exp x) (- 2 (exp (neg x))) (/ 1 (exp x)) (+ (- (exp x) 2) (/ 1 (exp x))) (- (exp x) 2) (neg (/ (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (+ (+ (neg (exp x)) 2) (exp (neg x))))) (+ (neg (exp x)) 2) (/ (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (+ (+ (neg (exp x)) 2) (exp (neg x)))) (- (pow (+ (exp x) -2) 2) (exp (- (neg x) x))) (neg (/ (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (neg (+ (* (+ (exp x) -2) (- (+ (exp x) -2) (exp (neg x)))) (exp (- (neg x) x)))))) (/ (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (neg (+ (* (+ (exp x) -2) (- (+ (exp x) -2) (exp (neg x)))) (exp (- (neg x) x))))) (+ (pow (+ (exp x) -2) 3) (exp (* x -3))) (pow (+ (exp x) -2) 3) (+ (exp x) -2) (exp (* x -3)))","x","0"]],"time":28.68603515625,"type":"series"},{"count":[[67,0]],"inputs":[["1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(+ 1 (* x (+ 1 (* -1/2 x))))","(+ 1 (* x (+ 1 (* x (- (* 1/6 x) 1/2)))))","(+ 1 (* x (- (* -1/2 x) 1)))","(+ 1 (* x (- (* x (- (* -1/6 x) 1/2)) 1)))","(* -1 (pow x 2))","(* (pow x 2) (- (* -1/12 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* -1/360 (pow x 2)) 1/12)) 1))","(* (pow x 2) (- (* (pow x 2) (- (* (pow x 2) (- (* -1/20160 (pow x 2)) 1/360)) 1/12)) 1))","(* -2 (pow x 2))","(* (pow x 2) (- (* 2 x) 2))","(* (pow x 2) (- (* x (+ 2 (* -1/6 x))) 2))","(* (pow x 2) (- (* x (+ 2 (* x (- (* 1/2 x) 1/6)))) 2))","(* 3 (pow x 2))","(* (pow x 2) (+ 3 (* -6 x)))","(* (pow x 2) (+ 3 (* x (- (* 13/4 x) 6))))","(* (pow x 2) (+ 3 (* x (- (* x (+ 13/4 (* -3/2 x))) 6))))","(- (* 3 x) 1)","(- (* x (+ 3 (* -3/2 x))) 1)","(- (* x (+ 3 (* x (- (* -3/2 x) 3/2)))) 1)","(+ 1 (* -3 x))","(+ 1 (* x (- (* 9/2 x) 3)))","(+ 1 (* x (- (* x (+ 9/2 (* -9/2 x))) 3)))","(/ 1 (exp (neg x)))","(- (+ (exp (neg x)) (/ 1 (exp (neg x)))) 2)","(- (/ 1 (exp (neg x))) 2)","(exp (neg x))","(- (+ (exp x) (exp (neg x))) 2)","(exp x)","(- 2 (exp (neg x)))","(/ 1 (exp x))","(- (+ (exp x) (/ 1 (exp x))) 2)","(- (exp x) 2)","(- (/ (exp (neg (* 2 x))) (- (+ 2 (exp (neg x))) (exp x))) (/ (pow (- (exp x) 2) 2) (- (+ 2 (exp (neg x))) (exp x))))","(- 2 (exp x))","(/ (- (pow (- (exp x) 2) 2) (exp (neg (* 2 x)))) (- (+ 2 (exp (neg x))) (exp x)))","(- (pow (- (exp x) 2) 2) (exp (neg (* 2 x))))","(/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (neg (* 2 x))) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (neg x)))))))","(* -1 (/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (neg (* 2 x))) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (neg x))))))))","(+ (exp (* -3 x)) (pow (- (exp x) 2) 3))","(pow (- (exp x) 2) 3)","(exp (* -3 x))","(/ 1 (exp (* -1 x)))","(- (+ (exp (* -1 x)) (/ 1 (exp (* -1 x)))) 2)","(- (/ 1 (exp (* -1 x))) 2)","(exp (* -1 x))","(- (+ (exp x) (exp (* -1 x))) 2)","(- 2 (exp (* -1 x)))","(- (/ (exp (* -2 x)) (- (+ 2 (exp (* -1 x))) (exp x))) (/ (pow (- (exp x) 2) 2) (- (+ 2 (exp (* -1 x))) (exp x))))","(/ (- (pow (- (exp x) 2) 2) (exp (* -2 x))) (- (+ 2 (exp (* -1 x))) (exp x)))","(- (pow (- (exp x) 2) 2) (exp (* -2 x)))","(/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (* -2 x)) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (* -1 x)))))))","(* -1 (/ (+ (exp (* -3 x)) (pow (- (exp x) 2) 3)) (+ (exp (* -2 x)) (* (- (exp x) 2) (- (exp x) (+ 2 (exp (* -1 x))))))))"]],"memory":[[-539056,9909904]],"method":["egg-herbie"],"outputs":[[]],"time":154.66796875,"type":"simplify"},{"count":[[20,300]],"inputs":[["(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64))","(exp.f64 (neg.f64 x))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(exp.f64 x)","(-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (exp.f64 x))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal 2 binary64))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x))))","(-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x)))","(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x)))))","(+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64))))","(pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64))","(+.f64 (exp.f64 x) #s(literal -2 binary64))","(exp.f64 (*.f64 x #s(literal -3 binary64)))"]],"memory":[[3627376,18769280]],"outputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -2 binary64)","#s(literal 3 binary64)","#s(literal -3 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -6 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -4 binary64)","#s(literal 9 binary64)","#s(literal -9 binary64)","#s(literal -8 binary64)"]],"time":477.266845703125,"type":"rewrite"},{"compiler":[[105,48]],"memory":[[1513200,1513200]],"time":3.238037109375,"type":"eval"},{"alts":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","next",29.868512913328097,"binary64"],["(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","done",29.844979545512402,"binary64"],["(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","fresh",30.115250488405607,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",29.784587619749196,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","done",29.817009160906494,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",29.85059947348534,"binary64"],["(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",61.18264134322868,"binary64"],["(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",61.16362835022934,"binary64"],["(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",61.181940958716496,"binary64"],["(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","next",32.00598753907921,"binary64"],["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","fresh",30.08378817039155,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","done",30.046271231705166,"binary64"],["(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","done",30.047870652122484,"binary64"]],"compiler":[[8,7],[8,7],[28,16],[11,8],[9,7],[8,7],[7,7],[7,7],[7,6],[7,7],[17,14],[23,16],[32,19],[8,7],[28,16],[7,7],[7,7],[7,6],[7,7],[17,14]],"count":[[24,13]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[15,4],"picked":[5,5]}],"memory":[[-3902672,4405888]],"min-error":[[29.367736913399742,"binary64"]],"time":9.5029296875,"type":"prune"},{"inputs":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(exp.f64 x)","#s(literal 2 binary64)","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 1 binary64) #s(literal 2 binary64))","#s(literal 1 binary64)","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 2 binary64) #s(literal 2 binary64))","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 3 binary64) #s(literal 2 binary64))","#s(literal 3 binary64)","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 9 binary64) #s(literal 2 binary64))","#s(literal 9 binary64)","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x"]],"locations":[["(neg.f64 x)","cost-diff",0],["(exp.f64 (neg.f64 x))","cost-diff",0],["(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0],["(-.f64 #s(literal 9 binary64) #s(literal 2 binary64))","cost-diff",2],["(neg.f64 x)","cost-diff",0],["(exp.f64 (neg.f64 x))","cost-diff",0],["(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0],["(-.f64 #s(literal 3 binary64) #s(literal 2 binary64))","cost-diff",2],["(neg.f64 x)","cost-diff",0],["(exp.f64 (neg.f64 x))","cost-diff",0],["(-.f64 #s(literal 2 binary64) #s(literal 2 binary64))","cost-diff",2],["(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",2],["(neg.f64 x)","cost-diff",0],["(exp.f64 (neg.f64 x))","cost-diff",0],["(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","cost-diff",0],["(-.f64 #s(literal 1 binary64) #s(literal 2 binary64))","cost-diff",2],["(neg.f64 x)","cost-diff",0],["(exp.f64 (neg.f64 x))","cost-diff",0],["(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","cost-diff",0],["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","cost-diff",0]],"memory":[[1604752,11674192]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(+.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(exp.f64 x)","#s(literal 2 binary64)","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 1 binary64) #s(literal 2 binary64))","#s(literal -1 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))","(-.f64 #s(literal 2 binary64) #s(literal 2 binary64))","#s(literal 0 binary64)","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 3 binary64) #s(literal 2 binary64))","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 #s(literal 7 binary64) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 9 binary64) #s(literal 2 binary64))","#s(literal 7 binary64)","#s(literal 9 binary64)","#s(literal 2 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","x"]],"time":286.401123046875,"type":"simplify"},{"compiler":[[96,20]],"locations":[["(-.f64 #s(literal 9 binary64) #s(literal 2 binary64))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",0.00390625],["(-.f64 #s(literal 3 binary64) #s(literal 2 binary64))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",0.01953125],["(-.f64 #s(literal 2 binary64) #s(literal 2 binary64))","accuracy",0.0],["(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(-.f64 #s(literal 1 binary64) #s(literal 2 binary64))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","accuracy",57.54317742394544],["(exp.f64 (neg.f64 x))","accuracy",0.0],["(exp.f64 x)","accuracy",0.0],["(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","accuracy",0.01171875],["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","accuracy",29.864439037869566]],"memory":[[-3071200,37300896]],"mixsample":[[19.314697265625,"adjust",800],[16.519287109375,"ival-add",0],[5.982421875,"ival-exp",0],[1.125,"ival-add",1600],[0.1572265625,"ival-assert",0],[10.77587890625,"ival-sub",0],[1.54443359375,"ival-add",400],[0.31982421875,"ival-true",0],[48.8916015625,"ival-exp",1600],[20.932861328125,"ival-exp",400],[0.6640625,"exact",0],[12.78125,"adjust",2000],[1.839599609375,"ival-neg",0]],"outcomes":[[26.935791015625,1,"valid",69],[155.121337890625,2,"valid",178],[1.5400390625,0,"valid",9]],"time":209.389892578125,"type":"localize"},{"count":[[13,39]],"inputs":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(exp.f64 (neg.f64 x))","(neg.f64 x)","(-.f64 #s(literal 1 binary64) #s(literal 2 binary64))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 2 binary64) #s(literal 2 binary64))","(-.f64 #s(literal 3 binary64) #s(literal 2 binary64))","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 9 binary64) #s(literal 2 binary64))","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 x)"]],"memory":[[1216352,1216352]],"outputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","2","(+ 2 (pow x 2))","(+ 2 (* (pow x 2) (+ 1 (* 1/12 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2)))))))","1","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(+ 2 (* -1 x))","(+ 2 (* x (- (* 1/2 x) 1)))","(+ 2 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","8","(+ 8 (* -1 x))","(+ 8 (* x (- (* 1/2 x) 1)))","(+ 8 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (+ (exp x) (exp (neg x))) 2)","(+ (exp x) (exp (neg x)))","(exp (neg x))","(- (exp (neg x)) 1)","(+ 1 (exp (neg x)))","(+ 7 (exp (neg x)))","(exp x)","(- (+ (exp x) (exp (* -1 x))) 2)","(+ (exp x) (exp (* -1 x)))","(exp (* -1 x))","(- (exp (* -1 x)) 1)","(+ 1 (exp (* -1 x)))","(+ 7 (exp (* -1 x)))"]],"series":[[0.682861328125,"((- (+ (exp (neg x)) (exp x)) 2) (+ (exp (neg x)) (exp x)) (exp (neg x)) (neg x) (- 1 2) (+ (- 1 2) (exp (neg x))) (+ (- 2 2) (exp (neg x))) (- 2 2) (- 3 2) (+ (- 3 2) (exp (neg x))) (- 9 2) (+ (- 9 2) (exp (neg x))) (exp x))","x","-inf"],[0.887939453125,"((- (+ (exp (neg x)) (exp x)) 2) (+ (exp (neg x)) (exp x)) (exp (neg x)) (neg x) (- 1 2) (+ (- 1 2) (exp (neg x))) (+ (- 2 2) (exp (neg x))) (- 2 2) (- 3 2) (+ (- 3 2) (exp (neg x))) (- 9 2) (+ (- 9 2) (exp (neg x))) (exp x))","x","inf"],[3.785888671875,"((- (+ (exp (neg x)) (exp x)) 2) (+ (exp (neg x)) (exp x)) (exp (neg x)) (neg x) (- 1 2) (+ (- 1 2) (exp (neg x))) (+ (- 2 2) (exp (neg x))) (- 2 2) (- 3 2) (+ (- 3 2) (exp (neg x))) (- 9 2) (+ (- 9 2) (exp (neg x))) (exp x))","x","0"]],"time":6.10009765625,"type":"series"},{"count":[[39,0]],"inputs":[["(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","2","(+ 2 (pow x 2))","(+ 2 (* (pow x 2) (+ 1 (* 1/12 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2)))))))","1","(+ 1 (* -1 x))","(+ 1 (* x (- (* 1/2 x) 1)))","(+ 1 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(+ 2 (* -1 x))","(+ 2 (* x (- (* 1/2 x) 1)))","(+ 2 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","8","(+ 8 (* -1 x))","(+ 8 (* x (- (* 1/2 x) 1)))","(+ 8 (* x (- (* x (+ 1/2 (* -1/6 x))) 1)))","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (+ (exp x) (exp (neg x))) 2)","(+ (exp x) (exp (neg x)))","(exp (neg x))","(- (exp (neg x)) 1)","(+ 1 (exp (neg x)))","(+ 7 (exp (neg x)))","(exp x)","(- (+ (exp x) (exp (* -1 x))) 2)","(+ (exp x) (exp (* -1 x)))","(exp (* -1 x))","(- (exp (* -1 x)) 1)","(+ 1 (exp (* -1 x)))","(+ 7 (exp (* -1 x)))"]],"memory":[[1674368,9819520]],"method":["egg-herbie"],"outputs":[[]],"time":150.25,"type":"simplify"},{"count":[[13,195]],"inputs":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(exp.f64 (neg.f64 x))","(neg.f64 x)","(-.f64 #s(literal 1 binary64) #s(literal 2 binary64))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 2 binary64) #s(literal 2 binary64))","(-.f64 #s(literal 3 binary64) #s(literal 2 binary64))","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 #s(literal 9 binary64) #s(literal 2 binary64))","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(exp.f64 x)"]],"memory":[[-4105424,15942912]],"outputs":[["#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal 9 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal 11 binary64)","#s(literal 10 binary64)","#s(literal 7 binary64)","#s(literal 8 binary64)","#s(literal -3 binary64)"]],"time":463.781982421875,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1286512,1286512]],"time":2.14697265625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","done",29.868512913328097,"binary64"],["(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","done",29.844979545512402,"binary64"],["(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","next",30.115250488405607,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",29.784587619749196,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","done",29.817009160906494,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",29.85059947348534,"binary64"],["(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",61.181940958716496,"binary64"],["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","next",30.08378817039155,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","done",30.046271231705166,"binary64"],["(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","done",30.047870652122484,"binary64"],["#s(literal 11 binary64)","next",61.18283226654761,"binary64"],["#s(literal 1 binary64)","next",61.13944257376729,"binary64"],["#s(literal 0 binary64)","next",31.931746197155995,"binary64"]],"compiler":[[8,7],[8,7],[28,16],[11,8],[9,7],[8,7],[7,6],[17,14],[23,16],[32,19],[1,2],[1,2],[1,2],[28,16],[17,14],[1,2],[1,2],[1,2]],"count":[[28,13]],"kept":[{"done":[6,6],"fresh":[2,2],"new":[15,3],"picked":[5,2]}],"memory":[[3904784,3904784]],"min-error":[[29.367736913399742,"binary64"]],"time":6.887939453125,"type":"prune"},{"inputs":[["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","#s(literal 1 binary64)","(+.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))","(exp.f64 (+.f64 x x))","(+.f64 x x)","#s(literal -4 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 11 binary64)","(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(exp.f64 (*.f64 x #s(literal 3 binary64)))","(*.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","(fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))","(+.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","#s(literal 2 binary64)","#s(literal 4 binary64)","(/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","#s(literal 8 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"locations":[["(exp.f64 (*.f64 x #s(literal 3 binary64)))","cost-diff",0],["(/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","cost-diff",0],["(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","cost-diff",0],["(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","cost-diff",0],["(+.f64 (exp.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","cost-diff",0],["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","cost-diff",2]],"memory":[[-4501184,11804032]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","(+.f64 (/.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (exp.f64 (neg.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","(/.f64 (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","#s(literal 1 binary64)","(+.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","x","#s(literal 2 binary64)","(+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))","(exp.f64 (+.f64 x x))","(+.f64 x x)","#s(literal -4 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 11 binary64)","(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(+.f64 (+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal -8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(exp.f64 (*.f64 x #s(literal 3 binary64)))","(*.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","(fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))","(+.f64 (exp.f64 x) #s(literal 2 binary64))","(exp.f64 x)","#s(literal 2 binary64)","#s(literal 4 binary64)","(/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","#s(literal 8 binary64)","(exp.f64 (neg.f64 x))","(neg.f64 x)"]],"time":239.083984375,"type":"simplify"},{"compiler":[[182,29]],"locations":[["(exp.f64 (*.f64 x #s(literal 3 binary64)))","accuracy",0.03179512247030779],["(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","accuracy",0.0390625],["(/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","accuracy",0.2566394406970715],["(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","accuracy",29.813102910906494],["(+.f64 (exp.f64 x) #s(literal 2 binary64))","accuracy",0.015625],["(+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))","accuracy",0.01953125],["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","accuracy",0.26444515965963394],["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","accuracy",29.813102910906494]],"memory":[[3571056,51973664]],"mixsample":[[16.81201171875,"adjust",800],[5.902099609375,"ival-div",0],[11.988037109375,"ival-exp",0],[6.3232421875,"ival-div",400],[1.06689453125,"ival-sub",1600],[5.072021484375,"ival-div",1600],[0.17236328125,"ival-assert",0],[1.44677734375,"ival-sub",0],[31.782470703125,"ival-exp",400],[1.5107421875,"ival-sub",400],[11.349609375,"adjust",2000],[13.17236328125,"ival-add",0],[3.174072265625,"ival-add",1600],[4.52880859375,"ival-mult",400],[5.4599609375,"ival-mult",0],[0.05615234375,"ival-exp",800],[3.48779296875,"ival-mult",1600],[4.98974609375,"ival-add",400],[0.338623046875,"ival-true",0],[71.008056640625,"ival-exp",1600],[0.008056640625,"ival-add",800],[1.132568359375,"exact",0],[1.28125,"ival-neg",0]],"outcomes":[[37.50341796875,1,"valid",69],[205.363037109375,2,"valid",178],[2.513916015625,0,"valid",9]],"time":282.662109375,"type":"localize"},{"count":[[9,41]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(+.f64 (exp.f64 x) #s(literal 2 binary64))","(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(exp.f64 (*.f64 x #s(literal 3 binary64)))","(+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))"]],"memory":[[-3156944,4168112]],"outputs":[["-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","1/3","(+ 1/3 (* -1/9 x))","(+ 1/3 (* x (- (* -1/54 x) 1/9)))","(+ 1/3 (* x (- (* x (- (* 1/162 x) 1/54)) 1/9)))","3","(+ 3 x)","(+ 3 (* x (+ 1 (* 1/2 x))))","(+ 3 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1/7","(+ 1/7 (* 17/49 x))","(+ 1/7 (* x (+ 17/49 (* 263/686 x))))","(+ 1/7 (* x (+ 17/49 (* x (+ 263/686 (* 3473/14406 x))))))","1","(+ 1 (* 3 x))","(+ 1 (* x (+ 3 (* 9/2 x))))","(+ 1 (* x (+ 3 (* x (+ 9/2 (* 9/2 x))))))","-3","(- (* 2 x) 3)","(- (* x (+ 2 (* 2 x))) 3)","(- (* x (+ 2 (* x (+ 2 (* 4/3 x))))) 3)","(/ (- (exp (* 2 x)) 4) (+ 2 (exp x)))","(- (+ (exp (neg x)) (/ (exp (* 2 x)) (+ 2 (exp x)))) (* 4 (/ 1 (+ 2 (exp x)))))","(/ 1 (+ 2 (exp x)))","(+ 2 (exp x))","(- (+ (exp (neg x)) (/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x)))))) (* 8 (/ 1 (+ 4 (* (exp x) (+ 2 (exp x)))))))","(- (/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x))))) (* 8 (/ 1 (+ 4 (* (exp x) (+ 2 (exp x)))))))","(/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x)))))","(exp (* 3 x))","(- (exp (* 2 x)) 4)","(/ (- (exp (neg (* -2 x))) 4) (+ 2 (exp x)))","(- (+ (exp (* -1 x)) (/ (exp (neg (* -2 x))) (+ 2 (exp x)))) (* 4 (/ 1 (+ 2 (exp x)))))","(- (+ (exp (* -1 x)) (/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x)))))) (* 8 (/ 1 (+ 4 (* (exp x) (+ 2 (exp x)))))))","(- (exp (neg (* -2 x))) 4)"]],"series":[[7.0390625,"((* (/ 1 (+ (exp x) 2)) (+ (exp (+ x x)) -4)) (+ (* (/ 1 (+ (exp x) 2)) (+ (exp (+ x x)) -4)) (exp (neg x))) (/ 1 (+ (exp x) 2)) (+ (exp x) 2) (+ (- (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (/ 8 (+ (* (+ (exp x) 2) (exp x)) 4))) (exp (neg x))) (- (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (/ 8 (+ (* (+ (exp x) 2) (exp x)) 4))) (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (exp (* x 3)) (+ (exp (+ x x)) -4))","x","-inf"],[5.06005859375,"((* (/ 1 (+ (exp x) 2)) (+ (exp (+ x x)) -4)) (+ (* (/ 1 (+ (exp x) 2)) (+ (exp (+ x x)) -4)) (exp (neg x))) (/ 1 (+ (exp x) 2)) (+ (exp x) 2) (+ (- (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (/ 8 (+ (* (+ (exp x) 2) (exp x)) 4))) (exp (neg x))) (- (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (/ 8 (+ (* (+ (exp x) 2) (exp x)) 4))) (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (exp (* x 3)) (+ (exp (+ x x)) -4))","x","inf"],[2.81396484375,"((* (/ 1 (+ (exp x) 2)) (+ (exp (+ x x)) -4)) (+ (* (/ 1 (+ (exp x) 2)) (+ (exp (+ x x)) -4)) (exp (neg x))) (/ 1 (+ (exp x) 2)) (+ (exp x) 2) (+ (- (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (/ 8 (+ (* (+ (exp x) 2) (exp x)) 4))) (exp (neg x))) (- (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (/ 8 (+ (* (+ (exp x) 2) (exp x)) 4))) (/ (exp (* x 3)) (+ (* (+ (exp x) 2) (exp x)) 4)) (exp (* x 3)) (+ (exp (+ x x)) -4))","x","0"]],"time":15.865966796875,"type":"series"},{"count":[[41,0]],"inputs":[["-1","(- x 1)","(- (* x (+ 1 (* 1/2 x))) 1)","(- (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))) 1)","(pow x 2)","(* (pow x 2) (+ 1 (* 1/12 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* 1/360 (pow x 2))))))","(* (pow x 2) (+ 1 (* (pow x 2) (+ 1/12 (* (pow x 2) (+ 1/360 (* 1/20160 (pow x 2))))))))","1/3","(+ 1/3 (* -1/9 x))","(+ 1/3 (* x (- (* -1/54 x) 1/9)))","(+ 1/3 (* x (- (* x (- (* 1/162 x) 1/54)) 1/9)))","3","(+ 3 x)","(+ 3 (* x (+ 1 (* 1/2 x))))","(+ 3 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1/7","(+ 1/7 (* 17/49 x))","(+ 1/7 (* x (+ 17/49 (* 263/686 x))))","(+ 1/7 (* x (+ 17/49 (* x (+ 263/686 (* 3473/14406 x))))))","1","(+ 1 (* 3 x))","(+ 1 (* x (+ 3 (* 9/2 x))))","(+ 1 (* x (+ 3 (* x (+ 9/2 (* 9/2 x))))))","-3","(- (* 2 x) 3)","(- (* x (+ 2 (* 2 x))) 3)","(- (* x (+ 2 (* x (+ 2 (* 4/3 x))))) 3)","(/ (- (exp (* 2 x)) 4) (+ 2 (exp x)))","(- (+ (exp (neg x)) (/ (exp (* 2 x)) (+ 2 (exp x)))) (* 4 (/ 1 (+ 2 (exp x)))))","(/ 1 (+ 2 (exp x)))","(+ 2 (exp x))","(- (+ (exp (neg x)) (/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x)))))) (* 8 (/ 1 (+ 4 (* (exp x) (+ 2 (exp x)))))))","(- (/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x))))) (* 8 (/ 1 (+ 4 (* (exp x) (+ 2 (exp x)))))))","(/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x)))))","(exp (* 3 x))","(- (exp (* 2 x)) 4)","(/ (- (exp (neg (* -2 x))) 4) (+ 2 (exp x)))","(- (+ (exp (* -1 x)) (/ (exp (neg (* -2 x))) (+ 2 (exp x)))) (* 4 (/ 1 (+ 2 (exp x)))))","(- (+ (exp (* -1 x)) (/ (exp (* 3 x)) (+ 4 (* (exp x) (+ 2 (exp x)))))) (* 8 (/ 1 (+ 4 (* (exp x) (+ 2 (exp x)))))))","(- (exp (neg (* -2 x))) 4)"]],"memory":[[1615104,9917648]],"method":["egg-herbie"],"outputs":[[]],"time":151.012939453125,"type":"simplify"},{"count":[[9,135]],"inputs":[["(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64)))","(+.f64 (exp.f64 x) #s(literal 2 binary64))","(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))","(exp.f64 (*.f64 x #s(literal 3 binary64)))","(+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))"]],"memory":[[-2372432,15515088]],"outputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal -4 binary64)","#s(literal 3 binary64)","#s(literal 4 binary64)","#s(literal 8 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 9 binary64)","#s(literal 7 binary64)","#s(literal -8 binary64)","#s(literal -3 binary64)","#s(literal -5 binary64)","#s(literal 5 binary64)"]],"time":373.608154296875,"type":"rewrite"},{"compiler":[[75,33]],"memory":[[1417056,1417056]],"time":2.14697265625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","done",29.868512913328097,"binary64"],["(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","done",29.844979545512402,"binary64"],["(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","done",30.115250488405607,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",29.784587619749196,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","done",29.817009160906494,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","done",29.85059947348534,"binary64"],["(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","done",30.08378817039155,"binary64"],["(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 x)))","fresh",61.181940958716496,"binary64"],["(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","done",30.046271231705166,"binary64"],["(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))","done",30.047870652122484,"binary64"],["#s(literal 11 binary64)","done",61.18283226654761,"binary64"],["#s(literal 1 binary64)","done",61.13944257376729,"binary64"],["#s(literal 0 binary64)","done",31.931746197155995,"binary64"]],"compiler":[[180,68],[8,7],[8,7],[28,16],[11,8],[9,7],[8,7],[17,14],[5,5],[23,16],[32,19],[1,2],[1,2],[1,2]],"count":[[28,13]],"kept":[{"done":[8,7],"fresh":[0,0],"new":[15,1],"picked":[5,5]}],"memory":[[5261392,5261392]],"min-error":[[29.367736913399742,"binary64"]],"time":9.001953125,"type":"prune"},{"accuracy":[29.784587619749182],"baseline":[29.784587619749196],"branch":[["x",29.784587619749182,1,"binary64"],["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",29.784587619749196,1,"binary64"]],"compiler":[[1,1],[8,7]],"count":[[17,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 11 binary64)","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 2 binary64))) (+.f64 (exp.f64 (+.f64 x x)) #s(literal -4 binary64))) (exp.f64 (neg.f64 x)))","(neg.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 2 binary64)) (exp.f64 (-.f64 (neg.f64 x) x))) (+.f64 (+.f64 (neg.f64 (exp.f64 x)) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))))","(+.f64 (-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64))) (/.f64 #s(literal 8 binary64) (fma.f64 (+.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x) #s(literal 4 binary64)))) (exp.f64 (neg.f64 x)))","(neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)) (exp.f64 (*.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (+.f64 (exp.f64 x) #s(literal -2 binary64)) (exp.f64 (neg.f64 x))) (exp.f64 (-.f64 (neg.f64 x) x))))))"]],"memory":[[-1533120,6391968]],"oracle":[61.87790626798531],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"repr":["binary64"],"time":15.203125,"times":[[7.10205078125,"x"],[6.364013671875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"type":"regimes"},{"accuracy":[29.817009160906487],"baseline":[29.817009160906494],"branch":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",29.817009160906498,1,"binary64"],["x",29.817009160906487,1,"binary64"]],"compiler":[[8,7],[1,1]],"count":[[12,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 11 binary64)","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))"]],"memory":[[-2975856,5203056]],"oracle":[61.87138754527408],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))"]],"repr":["binary64"],"time":10.284912109375,"times":[[4.076171875,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"],[4.9189453125,"x"]],"type":"regimes"},{"accuracy":[29.84497954551239],"baseline":[29.844979545512402],"branch":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",29.8449795455124,1,"binary64"],["x",29.84497954551239,1,"binary64"]],"compiler":[[8,7],[1,1]],"count":[[11,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 11 binary64)","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(-.f64 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) #s(literal 2 binary64))"]],"memory":[[5009584,5009584]],"oracle":[61.87138754527408],"outputs":[["(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))"]],"repr":["binary64"],"time":10.992919921875,"times":[[4.81689453125,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"],[4.807861328125,"x"]],"type":"regimes"},{"accuracy":[29.850599473485328],"baseline":[29.85059947348534],"branch":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",29.85059947348534,1,"binary64"],["x",29.850599473485328,1,"binary64"]],"compiler":[[8,7],[1,1]],"count":[[9,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 11 binary64)","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"memory":[[-3659984,4599888]],"oracle":[61.87138754527408],"outputs":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"repr":["binary64"],"time":8.0361328125,"times":[[3.31396484375,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"],[3.614990234375,"x"]],"type":"regimes"},{"accuracy":[31.931746197155988],"baseline":[31.931746197155995],"branch":[["(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))",31.931746197156,1,"binary64"],["x",31.931746197155988,1,"binary64"]],"compiler":[[8,7],[1,1]],"count":[[8,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal 11 binary64)","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 1 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 2 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 3 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 #s(literal 9 binary64) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"]],"link":["."],"memory":[[4296720,4296720]],"name":["exp2 (problem 3.3.7)"],"oracle":[61.87138754527408],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":7.3349609375,"times":[[3.18994140625,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"],[2.93212890625,"x"]],"type":"regimes"},{"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","#s(literal 0 binary64)"]],"memory":[[-12721856,15628240]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))","(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","#s(literal 0 binary64)"]],"time":181.427001953125,"type":"simplify"},{"compiler":[[37,16]],"memory":[[866496,866496]],"stop":[["fuel",1]],"time":1.9580078125,"type":"soundness"},{"compiler":[[37,16],[37,16],[11,7],[11,7],[8,7],[8,7],[11,8],[11,8],[11,8],[11,8]],"memory":[[22880,23979728]],"remove-preprocessing":[[],[],[],[],[],[]],"time":42.883056640625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.017822265625,"type":"end"}]