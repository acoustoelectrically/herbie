[{"memory":[[9552,9552]],"time":0.02880859375,"type":"start"},{"compiler":[[9,6]],"memory":[[67760,67760]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0,"valid":0.49951171875}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":0.336181640625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[9225024,162060976]],"mixsample":[[96.4501953125,"ival-fabs",0],[9.9404296875,"exact",0],[41.6552734375,"ival-<=",0],[126.952880859375,"ival-expm1",0],[6.240234375,"ival-assert",0]],"outcomes":[[517.988525390625,0,"valid",8256]],"time":859.7490234375,"type":"sample"},{"compiler":[[4,4],[10,6],[10,6]],"confusion":[[255,0,0,1]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",255,0,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",255,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,0,1]],"memory":[[-1961568,24642848]],"mixsample":[[0.651611328125,"ival-true",0],[9.18896484375,"ival-exp",0],[5.94140625,"ival-expm1",0],[0.44384765625,"exact",0],[0.274658203125,"ival-assert",0]],"outcomes":[[32.06201171875,0,"valid",512]],"time":81.787841796875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[4,4]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[3905664,20071424]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)"]],"symmetry":[[]],"time":405.657958984375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.14404296875,"type":"eval"},{"alts":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","next",58.28815308508581,"binary64"]],"compiler":[[4,4]],"memory":[[300944,300944]],"time":0.735107421875,"type":"prune"},{"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[-7266144,10113568]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)","x","#s(literal 1 binary64)"]],"time":202.875,"type":"simplify"},{"compiler":[[10,6]],"locations":[["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",58.28815308508581]],"memory":[[5318928,5318928]],"mixsample":[[0.39453125,"ival-true",0],[4.254638671875,"ival-exp",0],[3.605712890625,"ival-expm1",0],[0.24267578125,"exact",0],[0.14794921875,"ival-assert",0]],"outcomes":[[16.963134765625,0,"valid",256]],"time":26.037841796875,"type":"localize"},{"count":[[2,10]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[289584,289584]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"series":[[0.212158203125,"((- (exp x) 1) (exp x))","x","-inf"],[0.2119140625,"((- (exp x) 1) (exp x))","x","inf"],[1.058837890625,"((- (exp x) 1) (exp x))","x","0"]],"time":1.9580078125,"type":"series"},{"count":[[10,0]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"memory":[[1526880,9522848]],"method":["egg-herbie"],"outputs":[[]],"time":200.6669921875,"type":"simplify"},{"count":[[2,18]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[-2438192,13809024]],"outputs":[["(neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (+.f64 x x)))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(exp.f64 x)"]],"time":322.739013671875,"type":"rewrite"},{"compiler":[[195,51]],"memory":[[1722592,1722592]],"time":3.572021484375,"type":"eval"},{"alts":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","done",58.28815308508581,"binary64"],["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","next",0.0,"binary64"]],"compiler":[[4,4],[4,4]],"count":[[19,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[18,1],"picked":[1,1]}],"memory":[[1421696,1421696]],"min-error":[[0.0,"binary64"]],"time":2.528076171875,"type":"prune"},{"inputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","#s(literal 1 binary64)","(expm1.f64 x)","x"]],"locations":[["(expm1.f64 x)","cost-diff",0],["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","cost-diff",2]],"memory":[[-7407168,9939312]],"method":["egg-herbie"],"outputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(expm1.f64 x)","#s(literal 1 binary64)","(expm1.f64 x)","x"]],"time":240.820068359375,"type":"simplify"},{"compiler":[[14,6]],"locations":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","accuracy",0.0],["(expm1.f64 x)","accuracy",0.0]],"memory":[[5228016,5228016]],"mixsample":[[0.2958984375,"ival-true",0],[2.751953125,"ival-mult",0],[0.233154296875,"exact",0],[3.539794921875,"ival-expm1",0],[0.169189453125,"ival-assert",0]],"outcomes":[[14.348876953125,0,"valid",256]],"time":20.991943359375,"type":"localize"},{"count":[[2,5]],"inputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(expm1.f64 x)"]],"memory":[[187376,187376]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(- (exp x) 1)"]],"series":[[0.10107421875,"((* 1 (- (exp x) 1)) (- (exp x) 1))","x","-inf"],[0.110107421875,"((* 1 (- (exp x) 1)) (- (exp x) 1))","x","inf"],[0.208984375,"((* 1 (- (exp x) 1)) (- (exp x) 1))","x","0"]],"time":0.64306640625,"type":"series"},{"count":[[5,0]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(- (exp x) 1)"]],"memory":[[1486416,9501152]],"method":["egg-herbie"],"outputs":[[]],"time":181.5029296875,"type":"simplify"},{"count":[[2,30]],"inputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(expm1.f64 x)"]],"memory":[[-5165360,13945312]],"outputs":[["(neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)) (expm1.f64 x))","(neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (+.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (neg.f64 (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64)))))","(+.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x))))))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(-.f64 (+.f64 (exp.f64 x) #s(literal 0 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(-.f64 (/.f64 (exp.f64 (+.f64 x x)) (+.f64 (exp.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (exp.f64 (*.f64 x #s(literal 3 binary64))) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)) (exp.f64 (+.f64 x x)))))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(*.f64 (/.f64 #s(literal 1 binary64) #s(literal 1 binary64)) (expm1.f64 x))"]],"time":345.468994140625,"type":"rewrite"},{"compiler":[[174,48]],"memory":[[1475552,1475552]],"time":2.5380859375,"type":"eval"},{"alts":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","done",58.28815308508581,"binary64"],["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","done",0.0,"binary64"]],"compiler":[[8,6],[4,4],[4,4]],"count":[[17,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,0],"picked":[1,1]}],"memory":[[1557200,1557200]],"min-error":[[0.0,"binary64"]],"time":2.539794921875,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["x",0.0,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.0,1,"binary64"],["(exp.f64 x)",0.0,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[2,1]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))"]],"memory":[[-3991328,3899584]],"oracle":[58.28815308508581],"outputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))"]],"repr":["binary64"],"time":6.275146484375,"times":[[1.77392578125,"x"],[1.625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[2.259033203125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[58.2881530850858],"baseline":[58.28815308508581],"branch":[["x",58.28815308508581,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",58.2881530850858,1,"binary64"],["(exp.f64 x)",58.2881530850858,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[1,1]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"link":["."],"memory":[[3735616,3735616]],"name":["expm1 (example 3.7)"],"oracle":[58.28815308508581],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"repr":["binary64"],"time":5.533935546875,"times":[[1.955078125,"x"],[1.433837890625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.18310546875,"(exp.f64 x)"]],"type":"regimes"},{"inputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[-1284800,15279600]],"method":["egg-herbie"],"outputs":[["(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(expm1.f64 x)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 (exp.f64 x) #s(literal -1 binary64))"]],"time":221.405029296875,"type":"simplify"},{"compiler":[[6,5]],"memory":[[343056,343056]],"stop":[["done",1]],"time":0.947998046875,"type":"soundness"},{"compiler":[[6,5],[6,5],[2,2],[2,2],[4,4],[4,4]],"memory":[[-1818960,14782320]],"remove-preprocessing":[[],[],[]],"time":35.080078125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02197265625,"type":"end"}]