[{"memory":[[15120,15120]],"time":0.05078125,"type":"start"},{"compiler":[[15,11]],"memory":[[569136,569136]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":4.522216796875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[22085904,388275776]],"mixsample":[[0.5458984375,"ival-cbrt",1600],[170.704833984375,"adjust",800],[4.07177734375,"ival-assert",0],[98.585693359375,"ival-sub",0],[14.751220703125,"ival-and",0],[0.051513671875,"ival-sub",400],[73.241455078125,"ival-cbrt",400],[144.656494140625,"const",0],[27.2626953125,"ival-cbrt",2000],[78.22802734375,"ival-cbrt",800],[29.887451171875,"adjust",2000],[55.72509765625,"ival-add",0],[0.115234375,"ival-sub",800],[129.476318359375,"ival-cbrt",0],[5.347900390625,"ival-add",2000],[24.3828125,"ival-add",400],[30.72265625,"ival->",0],[8.971923828125,"exact",0],[24.47998046875,"ival-add",800],[21.965087890625,"ival-<",0]],"outcomes":[[879.415283203125,1,"valid",6325],[332.379150390625,2,"valid",1681],[19.0869140625,0,"valid",250]],"time":1591.787841796875,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[254,1,0,1]],"explanations":[["-.f64","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cancellation",254,0,[],[[]]]],"fperrors":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",255,0,false,1,[9.78558673385419]],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(cbrt.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,254],[0,2]],"maybe-confusion":[[254,0,1,0,0,1]],"memory":[[-12369712,46495680]],"mixsample":[[9.091796875,"adjust",800],[2.877685546875,"ival-add",0],[0.301513671875,"ival-add",2000],[7.460205078125,"ival-cbrt",0],[0.269775390625,"ival-assert",0],[1.44775390625,"ival-add",400],[5.317626953125,"ival-sub",0],[0.52392578125,"ival-true",0],[5.26904296875,"ival-cbrt",400],[1.542724609375,"ival-cbrt",2000],[4.3203125,"ival-cbrt",800],[1.2080078125,"ival-add",800],[0.312744140625,"exact",0],[1.53759765625,"adjust",2000]],"outcomes":[[42.7177734375,1,"valid",388],[17.835693359375,2,"valid",110],[0.695068359375,0,"valid",14]],"time":114.865966796875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"memory":[[3607280,19810704]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"symmetry":[[]],"time":291.386962890625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.115234375,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","next",59.570970692016225,"binary64"]],"compiler":[[7,6]],"memory":[[311552,311552]],"time":0.7109375,"type":"prune"},{"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"locations":[["(cbrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","cost-diff",0]],"memory":[[758432,10204560]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(cbrt.f64 x)"]],"time":146.052001953125,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(cbrt.f64 x)","accuracy",0.09375],["(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.1015625],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","accuracy",59.565360638971825]],"memory":[[-4291456,11843632]],"mixsample":[[4.303466796875,"adjust",800],[1.52978515625,"ival-add",0],[0.15478515625,"ival-add",2000],[3.56591796875,"ival-cbrt",0],[0.1767578125,"ival-assert",0],[0.860107421875,"ival-add",400],[2.77880859375,"ival-sub",0],[0.184326171875,"ival-true",0],[2.084716796875,"ival-cbrt",400],[0.722412109375,"ival-cbrt",2000],[2.202392578125,"ival-cbrt",800],[0.635009765625,"ival-add",800],[0.190185546875,"exact",0],[0.802001953125,"adjust",2000]],"outcomes":[[20.778076171875,1,"valid",194],[9.083740234375,2,"valid",55],[0.328857421875,0,"valid",7]],"time":38.991943359375,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[-251424,7363632]],"outputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"series":[[8.490966796875,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","-inf"],[4.885009765625,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","inf"],[2.364990234375,"((- (cbrt (+ x 1)) (cbrt x)) (cbrt (+ x 1)) (+ x 1) (cbrt x))","x","0"]],"time":16.33203125,"type":"series"},{"count":[[27,0]],"inputs":[["(- 1 (cbrt x))","(- (+ 1 (* 1/3 x)) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* -1/9 x)))) (cbrt x))","(- (+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9))))) (cbrt x))","1","(+ 1 (* 1/3 x))","(+ 1 (* x (+ 1/3 (* -1/9 x))))","(+ 1 (* x (+ 1/3 (* x (- (* 5/81 x) 1/9)))))","(+ 1 x)","(cbrt x)","(* 1/3 (cbrt (/ 1 (pow x 2))))","(/ (+ (* -1/9 (cbrt x)) (* 1/3 (cbrt (pow x 4)))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4))))) (pow x 2))","(/ (+ (* -1/9 (cbrt x)) (+ (* -10/243 (cbrt (/ 1 (pow x 5)))) (+ (* 5/81 (cbrt (/ 1 (pow x 2)))) (* 1/3 (cbrt (pow x 4)))))) (pow x 2))","(* x (+ (cbrt (/ 1 (pow x 2))) (* 1/3 (cbrt (/ 1 (pow x 5))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (* 1/3 (cbrt (/ 1 (pow x 5)))))))","(* x (+ (cbrt (/ 1 (pow x 2))) (+ (* -1/9 (cbrt (/ 1 (pow x 8)))) (+ (* 5/81 (cbrt (/ 1 (pow x 11)))) (* 1/3 (cbrt (/ 1 (pow x 5))))))))","x","(* x (+ 1 (/ 1 x)))","(* 1/3 (* (cbrt (/ 1 (pow x 2))) (/ 1 (pow (cbrt -1) 2))))","(/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 10/243 (* (cbrt (pow x 13)) (/ 1 (pow (cbrt -1) 11)))) (* 5/81 (* (cbrt (pow x 16)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 2))","(* -1 (* (cbrt x) (cbrt -1)))","(* -1 (* x (+ (* -1/3 (* (cbrt (/ 1 (pow x 5))) (/ 1 (pow (cbrt -1) 2)))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* 1/9 (* (cbrt x) (/ 1 (pow (cbrt -1) 5)))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))","(* -1 (* x (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/9 (* (cbrt (pow x 10)) (/ 1 (pow (cbrt -1) 5)))) (* -5/81 (* (cbrt (pow x 7)) (/ 1 (pow (cbrt -1) 8))))) (pow x 3))) (* 1/3 (* (cbrt (pow x 4)) (/ 1 (pow (cbrt -1) 2))))) (pow x 3))) (* (cbrt (/ 1 (pow x 2))) (cbrt -1)))))"]],"memory":[[538704,9855456]],"method":["egg-herbie"],"outputs":[[]],"time":118.720947265625,"type":"simplify"},{"count":[[4,60]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","(cbrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(cbrt.f64 x)"]],"memory":[[-1769376,14249040]],"outputs":[["(neg.f64 (+.f64 (+.f64 x #s(literal -1 binary64)) x))","(+.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (+.f64 x x))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (-.f64 x (+.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(+.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) x)","(+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 x x))","(+.f64 (+.f64 (+.f64 x x) x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (+.f64 x x)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 x x) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(neg.f64 (+.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(+.f64 (+.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (+.f64 x x)))","(+.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) x)","(-.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(-.f64 (+.f64 x x) (+.f64 x #s(literal -1 binary64)))","(neg.f64 (+.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(+.f64 (+.f64 x x) (+.f64 x #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (+.f64 x x)))","(+.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (+.f64 (+.f64 x x) x))","(+.f64 (+.f64 (+.f64 x x) x) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) x)","(-.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x x))","(-.f64 (+.f64 x x) (+.f64 x #s(literal -1 binary64)))","x","(neg.f64 (neg.f64 x))","(*.f64 x #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) x)","(*.f64 x x)","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)) x)","(*.f64 #s(literal -1 binary64) (neg.f64 x))","(*.f64 x (pow.f64 #s(literal 1 binary64) #s(literal 1/3 binary64)))","(*.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) x)","(*.f64 (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))) (pow.f64 x (/.f64 #s(literal 1 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64))) x)","(*.f64 x (pow.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 x (/.f64 (/.f64 #s(literal 3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 x (/.f64 (/.f64 #s(literal 3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))))","(*.f64 (pow.f64 x (/.f64 (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 x (/.f64 (/.f64 #s(literal 1/3 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))))"]],"time":257.97705078125,"type":"rewrite"},{"compiler":[[423,103]],"memory":[[4562928,4562928]],"time":5.328857421875,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.570970692016225,"binary64"],["(+.f64 (+.f64 x x) #s(literal 1 binary64))","next",61.23715731197436,"binary64"],["(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","next",61.07593865028781,"binary64"],["(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","next",59.92371012999893,"binary64"]],"compiler":[[7,6],[5,4],[6,5],[6,5]],"count":[[46,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[45,3],"picked":[1,1]}],"memory":[[2758608,2758608]],"min-error":[[58.28664541938784,"binary64"]],"time":3.037109375,"type":"prune"},{"inputs":[["(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","#s(literal 1 binary64)","(+.f64 (neg.f64 x) x)","(neg.f64 x)","x","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(neg.f64 x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x x)","x","#s(literal 1 binary64)"]],"locations":[["(+.f64 x x)","cost-diff",0],["(+.f64 (+.f64 x x) #s(literal 1 binary64))","cost-diff",0],["(neg.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","cost-diff",5],["(neg.f64 x)","cost-diff",0],["(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","cost-diff",2],["(+.f64 (neg.f64 x) x)","cost-diff",3]],"memory":[[-8010560,9923200]],"method":["egg-herbie"],"outputs":[["(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","#s(literal 1 binary64)","#s(literal 1 binary64)","(+.f64 (neg.f64 x) x)","#s(literal 0 binary64)","(neg.f64 x)","x","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(neg.f64 x)","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x x)","x","#s(literal 1 binary64)"]],"time":153.027099609375,"type":"simplify"},{"compiler":[[39,11]],"locations":[["(+.f64 (+.f64 x x) #s(literal 1 binary64))","accuracy",0.0],["(+.f64 x x)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0],["(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","accuracy",59.09240650335075],["(+.f64 (neg.f64 x) x)","accuracy",0.0],["(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","accuracy",0.0],["(neg.f64 x)","accuracy",0.0]],"memory":[[5670448,13650496]],"mixsample":[[0.481689453125,"ival-add",1200],[7.607177734375,"adjust",800],[8.15966796875,"ival-add",0],[0.035888671875,"ival-add",1600],[0.11328125,"ival-assert",0],[0.146484375,"ival-add",400],[0.20458984375,"ival-true",0],[0.185546875,"exact",0],[0.611083984375,"ival-add",800],[1.302978515625,"ival-neg",0]],"outcomes":[[30.27783203125,1,"valid",230],[1.579833984375,0,"valid",26]],"time":40.351806640625,"type":"localize"},{"count":[[7,9]],"inputs":[["(+.f64 (neg.f64 x) x)","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(neg.f64 x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x x)"]],"memory":[[937984,937984]],"outputs":[["0","1","(* -1 x)","(+ 1 x)","(+ 1 (* 2 x))","(* 2 x)","x","(* x (+ 1 (/ 1 x)))","(* x (+ 2 (/ 1 x)))"]],"series":[[0.4619140625,"((+ (neg x) x) (+ 1 (+ (neg x) x)) (neg x) (+ (+ x 1) (neg x)) (+ x 1) (+ (+ x x) 1) (+ x x))","x","-inf"],[0.637939453125,"((+ (neg x) x) (+ 1 (+ (neg x) x)) (neg x) (+ (+ x 1) (neg x)) (+ x 1) (+ (+ x x) 1) (+ x x))","x","inf"],[0.47607421875,"((+ (neg x) x) (+ 1 (+ (neg x) x)) (neg x) (+ (+ x 1) (neg x)) (+ x 1) (+ (+ x x) 1) (+ x x))","x","0"]],"time":1.833984375,"type":"series"},{"count":[[9,0]],"inputs":[["0","1","(* -1 x)","(+ 1 x)","(+ 1 (* 2 x))","(* 2 x)","x","(* x (+ 1 (/ 1 x)))","(* x (+ 2 (/ 1 x)))"]],"memory":[[1967696,9828240]],"method":["egg-herbie"],"outputs":[[]],"time":118.7861328125,"type":"simplify"},{"count":[[7,105]],"inputs":[["(+.f64 (neg.f64 x) x)","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(neg.f64 x)","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 x x)"]],"memory":[[-3895568,13796064]],"outputs":[["#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 0 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)"]],"time":235.4638671875,"type":"rewrite"},{"compiler":[[45,31]],"memory":[[1409728,1409728]],"time":2.12109375,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.570970692016225,"binary64"],["(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))","next",59.92371012999893,"binary64"],["(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","next",61.365953538844145,"binary64"]],"compiler":[[7,6],[3,4],[3,4]],"count":[[19,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,2],"picked":[3,0]}],"memory":[[1246896,1246896]],"min-error":[[58.28664541938784,"binary64"]],"time":1.7451171875,"type":"prune"},{"inputs":[["(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","#s(literal 1 binary64)","#s(literal -1 binary64)","(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))","#s(literal 1 binary64)","#s(literal 0 binary64)"]],"locations":[["(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))","cost-diff",2],["(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","cost-diff",2]],"memory":[[-6289280,9575088]],"method":["egg-herbie"],"outputs":[["(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","#s(literal 0 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))","#s(literal 1 binary64)","#s(literal 1 binary64)","#s(literal 0 binary64)"]],"time":152.093994140625,"type":"simplify"},{"compiler":[[12,8]],"locations":[["(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))","accuracy",0.0],["(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","accuracy",0.0]],"memory":[[5943200,5943200]],"mixsample":[[0.23291015625,"ival-true",0],[3.34521484375,"ival-add",0],[0.40087890625,"exact",0],[0.138916015625,"ival-assert",0]],"outcomes":[[11.02392578125,0,"valid",256]],"time":17.3740234375,"type":"localize"},{"count":[[2,0]],"inputs":[["(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))"]],"memory":[[53616,53616]],"outputs":[[]],"series":[[0.0068359375,"((+ 1 -1) (+ 1 0))","x","-inf"],[0.010986328125,"((+ 1 -1) (+ 1 0))","x","inf"],[0.070068359375,"((+ 1 -1) (+ 1 0))","x","0"]],"time":0.212890625,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[1441088,9450176]],"method":["egg-herbie"],"outputs":[[]],"time":136.031005859375,"type":"simplify"},{"count":[[2,30]],"inputs":[["(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))"]],"memory":[[-5283856,12407888]],"outputs":[["#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 3 binary64)","#s(literal 2 binary64)","#s(literal 6 binary64)","#s(literal 5 binary64)","#s(literal 4 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 7 binary64)","#s(literal 12 binary64)","#s(literal 11 binary64)"]],"time":199.1669921875,"type":"rewrite"},{"compiler":[[15,16]],"memory":[[1321456,1321456]],"time":1.635986328125,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.570970692016225,"binary64"],["#s(literal 1 binary64)","next",59.92371012999893,"binary64"],["#s(literal 0 binary64)","next",61.365953538844145,"binary64"]],"compiler":[[7,6],[1,2],[1,2]],"count":[[18,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,2],"picked":[2,0]}],"memory":[[1215392,1215392]],"min-error":[[58.28664541938784,"binary64"]],"time":1.283935546875,"type":"prune"},{"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"memory":[[1761616,9649520]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)"]],"time":134.240966796875,"type":"simplify"},{"compiler":[[4,5]],"memory":[[-4671664,3582976]],"mixsample":[[0.180419921875,"ival-true",0],[0.2109375,"exact",0],[0.085205078125,"ival-assert",0]],"outcomes":[[4.294921875,0,"valid",256]],"time":7.125,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28720,28720]],"outputs":[[]],"series":[[0.001953125,"()","x","-inf"],[0.005859375,"()","x","inf"],[0.025146484375,"()","x","0"]],"time":0.088134765625,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[-35200,9226864]],"method":["egg-herbie"],"outputs":[[]],"time":125.715087890625,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[4144192,12323632]],"outputs":[[]],"time":154.65283203125,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[43696,43696]],"time":0.1669921875,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","done",59.570970692016225,"binary64"],["#s(literal 1 binary64)","done",59.92371012999893,"binary64"],["#s(literal 0 binary64)","done",61.365953538844145,"binary64"]],"compiler":[[32,16],[7,6],[1,2],[1,2]],"count":[[3,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[0,0],"picked":[2,2]}],"memory":[[-6478032,1571248]],"min-error":[[58.28664541938784,"binary64"]],"time":3.43603515625,"type":"prune"},{"accuracy":[58.418742171727324],"baseline":[59.570970692016225],"branch":[["x",58.418742171727324,2,"binary64"],["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",58.418742171727345,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[8,2]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"memory":[[4343248,4343248]],"oracle":[62.00064185318402],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))","#s(literal 1 binary64)"]],"repr":["binary64"],"time":6.153076171875,"times":[[2.796142578125,"x"],[2.31396484375,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"]],"type":"regimes"},{"accuracy":[59.923710129998916],"baseline":[59.92371012999893],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",59.92371012999892,1,"binary64"],["x",59.923710129998916,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[7,1]],"inputs":[["#s(literal 0 binary64)","#s(literal 1 binary64)","(+.f64 #s(literal 1 binary64) #s(literal -1 binary64))","(+.f64 #s(literal 1 binary64) #s(literal 0 binary64))","(+.f64 (+.f64 x x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (+.f64 (neg.f64 x) x))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))"]],"memory":[[-4177728,4083280]],"oracle":[62.00064185318402],"outputs":[["#s(literal 1 binary64)"]],"repr":["binary64"],"time":6.43603515625,"times":[[2.471923828125,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[2.822998046875,"x"]],"type":"regimes"},{"accuracy":[61.36595353884414],"baseline":[61.365953538844145],"branch":[["(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))",61.36595353884414,1,"binary64"],["x",61.365953538844145,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[1,1]],"inputs":[["#s(literal 0 binary64)"]],"link":["."],"memory":[[2698208,2698208]],"name":["2cbrt (problem 3.3.4)"],"oracle":[61.365953538844145],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":3.876953125,"times":[[1.804931640625,"(-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x))"],[1.23291015625,"x"]],"type":"regimes"},{"bstep":[[16.5439453125,710554701275.0425,22334624554935812.0]],"compiler":[[1,3],[7,7],[1,3],[7,7],[1,3],[7,7],[1,3],[7,7],[1,3],[7,7],[1,3],[7,7],[1,3],[7,7],[1,3],[7,7],[9,9],[1,1]],"memory":[[5053312,5053312]],"method":["binary-search"],"mixsample":[[2.129150390625,"adjust",800],[1.2890625,"ival-sub",0],[0.101806640625,"ival-true",0],[0.724609375,"ival-add",0],[0.080078125,"exact",0],[0.049072265625,"ival-assert",0],[3.540771484375,"ival-cbrt",0]],"outcomes":[[11.57568359375,1,"valid",128]],"stop":[["narrow-enough",1]],"time":19.304931640625,"type":"bsearch"},{"inputs":[["(if (<=.f64 x #s(literal 6500000000000000 binary64)) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 0 binary64)"]],"memory":[[-1896912,15540256]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x #s(literal 6500000000000000 binary64)) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x)) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(literal 0 binary64)"]],"time":146.458984375,"type":"simplify"},{"compiler":[[14,10]],"memory":[[874288,874288]],"stop":[["done",1]],"time":2.10400390625,"type":"soundness"},{"compiler":[[14,10],[14,10],[25,11],[25,11],[7,6],[7,6]],"memory":[[-3481120,20777408]],"remove-preprocessing":[[],[],[],[]],"time":35.505126953125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.016845703125,"type":"end"}]