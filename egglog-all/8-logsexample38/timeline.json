[{"memory":[[18576,18576]],"time":0.0859375,"type":"start"},{"compiler":[[19,12]],"memory":[[84912,84912]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.0,"valid":0.23718019938635493}],[0,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.23718019938635493,"valid":0.0}]],"time":0.97802734375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7628198006136451,"valid":0.23718019938635493}],"memory":[[25617040,474554752]],"mixsample":[[41.342529296875,"ival-sub",1200],[25.071533203125,"ival-add",1200],[712.836181640625,"adjust",800],[67.830078125,"ival-mult",1200],[297.37158203125,"ival-log",2800],[333.5791015625,"ival-log1p",2800],[81.396240234375,"ival-mult",2000],[64.240478515625,"ival-mult",2800],[13.49072265625,"ival-assert",0],[383.2373046875,"ival-sub",0],[361.0400390625,"ival-log1p",1600],[248.058837890625,"ival-log",1600],[19.50732421875,"ival-sub",400],[219.779296875,"ival-log1p",1200],[283.912841796875,"ival-log",2000],[172.5966796875,"ival-log",1200],[132.828125,"ival-add",0],[34.815673828125,"ival-add",1600],[313.561279296875,"ival-mult",0],[183.435791015625,"ival-sub",800],[324.77587890625,"ival-log1p",2000],[73.9072265625,"ival-mult",1600],[20.155517578125,"ival-add",2800],[29.1767578125,"ival-add",2000],[369.47119140625,"ival-log1p",2400],[268.21826171875,"ival-log",0],[379.31982421875,"ival-log1p",0],[28.344482421875,"ival-add",2400],[80.36865234375,"ival-mult",2400],[74.714599609375,"ival->",0],[34.72314453125,"exact",0],[343.142578125,"ival-log",2400]],"outcomes":[[6845.8212890625,1,"valid",8256]],"time":7828.0029296875,"type":"sample"},{"compiler":[[15,9],[53,11],[53,11]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","nan-rescue",5,0,[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","overflow",5],["(*.f64 n (log.f64 n))","overflow",5]],[[1]]],["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cancellation",251,0,[],[[1]]]],"fperrors":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",256,0,false,0,false],["n",0,0,false,0,false],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(+.f64 n #s(literal 1 binary64))",0,0,false,0,false],["(log.f64 n)",0,0,false,0,false],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0,0,false,0,false],["(*.f64 n (log.f64 n))",0,0,false,0,false],["(log.f64 (+.f64 n #s(literal 1 binary64)))",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-1416160,78939952]],"mixsample":[[1.806640625,"ival-sub",1200],[1.7353515625,"ival-add",1200],[36.46484375,"adjust",800],[3.5986328125,"ival-mult",1200],[17.721435546875,"ival-log",2800],[17.4423828125,"ival-log1p",2800],[4.2021484375,"ival-mult",2000],[4.26220703125,"ival-mult",2800],[0.55126953125,"ival-assert",0],[28.2470703125,"ival-sub",0],[19.453369140625,"ival-log1p",1600],[13.569091796875,"ival-log",1600],[1.059814453125,"ival-sub",400],[10.041259765625,"ival-log1p",1200],[20.1337890625,"ival-log",2000],[12.241455078125,"ival-log",1200],[6.77294921875,"ival-add",0],[2.4169921875,"ival-add",1600],[31.621337890625,"ival-mult",0],[1.997802734375,"ival-sub",800],[17.692138671875,"ival-log1p",2000],[4.965087890625,"ival-mult",1600],[0.995849609375,"ival-add",2800],[1.468505859375,"ival-add",2000],[20.856689453125,"ival-log1p",2400],[18.927001953125,"ival-log",0],[1.60302734375,"ival-true",0],[19.2236328125,"ival-log1p",0],[1.597900390625,"ival-add",2400],[4.512939453125,"ival-mult",2400],[0.86767578125,"exact",0],[21.162109375,"ival-log",2400]],"outcomes":[[420.626953125,1,"valid",512]],"time":642.2470703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,9]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"]],"memory":[[-6040544,19632000]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal -1 binary64)))"]],"symmetry":[[]],"time":744.380859375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.213134765625,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","next",63.023819862188006,"binary64"]],"compiler":[[15,9]],"memory":[[345632,345632]],"time":2.492919921875,"type":"prune"},{"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(+.f64 n #s(literal 1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"locations":[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cost-diff",0],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","cost-diff",1],["(log.f64 (+.f64 n #s(literal 1 binary64)))","cost-diff",2]],"memory":[[2760352,10747232]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal -1 binary64)))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","(+.f64 n #s(literal 1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(log1p.f64 n)","(*.f64 n (log.f64 n))","(log.f64 n)"]],"time":396.4140625,"type":"simplify"},{"compiler":[[53,11]],"locations":[["(log.f64 n)","accuracy",0.0],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","accuracy",0.2578125],["(*.f64 n (log.f64 n))","accuracy",0.2578125],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","accuracy",62.00969950305651]],"memory":[[1409344,17395632]],"mixsample":[[0.8271484375,"ival-sub",1200],[0.591796875,"ival-add",1200],[14.644775390625,"adjust",800],[1.327880859375,"ival-mult",1200],[7.618896484375,"ival-log",2800],[8.5771484375,"ival-log1p",2800],[1.6279296875,"ival-mult",2000],[1.3115234375,"ival-mult",2800],[0.23291015625,"ival-assert",0],[7.490478515625,"ival-sub",0],[6.21142578125,"ival-log1p",1600],[5.137451171875,"ival-log",1600],[0.51416015625,"ival-sub",400],[4.4287109375,"ival-log1p",1200],[7.42041015625,"ival-log",2000],[3.908447265625,"ival-log",1200],[3.39013671875,"ival-add",0],[0.503662109375,"ival-add",1600],[6.724609375,"ival-mult",0],[0.884033203125,"ival-sub",800],[8.14501953125,"ival-log1p",2000],[1.357177734375,"ival-mult",1600],[0.484130859375,"ival-add",2800],[0.75,"ival-add",2000],[9.72705078125,"ival-log1p",2400],[6.325927734375,"ival-log",0],[0.44482421875,"ival-true",0],[8.759765625,"ival-log1p",0],[0.71728515625,"ival-add",2400],[1.798828125,"ival-mult",2400],[0.459228515625,"exact",0],[8.968017578125,"ival-log",2400]],"outcomes":[[156.862060546875,1,"valid",256]],"time":178.7890625,"type":"localize"},{"count":[[6,47]],"inputs":[["(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"memory":[[3012736,26561600]],"outputs":[["n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"series":[[40.35302734375,"((log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (* (+ n 1) (log (+ n 1))) (* n (log n)) (log n))","n","-inf"],[32.69580078125,"((log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (* (+ n 1) (log (+ n 1))) (* n (log n)) (log n))","n","inf"],[98.827880859375,"((log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (* (+ n 1) (log (+ n 1))) (* n (log n)) (log n))","n","0"]],"time":174.015869140625,"type":"series"},{"count":[[47,0]],"inputs":[["n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"memory":[[-25433424,9947104]],"method":["egg-herbie"],"outputs":[[]],"time":278.130126953125,"type":"simplify"},{"count":[[6,76]],"inputs":[["(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"memory":[[4347120,20492400]],"outputs":[["(neg.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 n #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (neg.f64 (log.f64 (+.f64 n #s(literal -1 binary64)))))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (neg.f64 (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64))))))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 n) n)) (log1p.f64 (neg.f64 n)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 n #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64)))))","(-.f64 (log.f64 (neg.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))))","(*.f64 (log1p.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 n))","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64)))) (*.f64 (log.f64 (+.f64 n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))))) (+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 (*.f64 n n) n))) (*.f64 (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64)))) (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64)))))) (+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 n (+.f64 n #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (+.f64 n #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (log.f64 (+.f64 n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))) (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64)))))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64)))))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal 1 binary64)))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal -1 binary64)))","(+.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal -1 binary64))","(+.f64 (+.f64 #s(literal -1 binary64) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 n) n) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 2 binary64))) (neg.f64 (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 n (log.f64 n)) (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 3 binary64)))) (fma.f64 (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 n (log.f64 n)) (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 2 binary64))) (pow.f64 (*.f64 n (log.f64 n)) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(+.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) (log1p.f64 n)) (*.f64 (log1p.f64 n) n))","(+.f64 (*.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (log1p.f64 n) n)) (log1p.f64 n))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 n (log.f64 n))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n))","(+.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","(*.f64 (log1p.f64 n) (+.f64 n #s(literal 1 binary64)))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (*.f64 n n) n #s(literal -1 binary64))) (fma.f64 (+.f64 n #s(literal 1 binary64)) n #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 n #s(literal 1 binary64)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)) (log1p.f64 n)))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 #s(literal 1 binary64) n)) (-.f64 #s(literal 1 binary64) n) (*.f64 (*.f64 n n) (*.f64 (*.f64 n n) (*.f64 n n))))) (fma.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)) (*.f64 (*.f64 n n) (*.f64 n n))))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (*.f64 (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))) (log1p.f64 n)))","(/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (+.f64 n #s(literal -1 binary64)))","(*.f64 n (log.f64 n))","(*.f64 (log.f64 n) n)","(*.f64 (*.f64 n (log.f64 n)) #s(literal 1 binary64))","(*.f64 (*.f64 (log.f64 n) #s(literal 1 binary64)) n)","(*.f64 #s(literal 1 binary64) (*.f64 n (log.f64 n)))","(*.f64 n (*.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 n (*.f64 #s(literal 1 binary64) (log.f64 n)))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(log.f64 n)","(fma.f64 #s(literal 0 binary64) #s(literal 2 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 3 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 1 binary64) (log.f64 n))","(fma.f64 #s(literal 0 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 3 binary64) #s(literal 0 binary64) (log.f64 n))","(fma.f64 #s(literal 2 binary64) #s(literal 0 binary64) (log.f64 n))"]],"time":1349.22998046875,"type":"rewrite"},{"compiler":[[1632,332]],"memory":[[185152,8107216]],"time":20.431884765625,"type":"eval"},{"alts":[["(-.f64 (-.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (+.f64 n #s(literal -1 binary64))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","fresh",62.193769771239616,"binary64"],["(-.f64 (-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","next",63.15847908335535,"binary64"],["(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","next",62.196833960556006,"binary64"],["(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)) (log1p.f64 n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","fresh",62.151025246029384,"binary64"],["(-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (*.f64 n n) n #s(literal -1 binary64))) (fma.f64 (+.f64 n #s(literal 1 binary64)) n #s(literal 1 binary64))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","fresh",63.335535433020475,"binary64"],["(-.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","fresh",63.14973284173125,"binary64"],["(-.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","next",62.2150893517411,"binary64"],["(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal -1 binary64))","fresh",61.95361457165272,"binary64"],["(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","next",62.048998780223414,"binary64"],["(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","next",1.25,"binary64"]],"compiler":[[18,12],[23,14],[18,12],[20,13],[28,16],[25,15],[20,13],[13,10],[13,10],[13,8],[18,12],[23,14],[18,12],[20,13],[28,16],[25,15],[20,13],[13,10],[13,10],[13,8]],"count":[[77,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[76,10],"picked":[1,0]}],"memory":[[-1796768,7715648]],"min-error":[[1.2106782741287725,"binary64"]],"time":17.10791015625,"type":"prune"},{"inputs":[["(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(log1p.f64 n)","n","(-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","(*.f64 (log1p.f64 n) n)","(fma.f64 (log.f64 n) n #s(literal 1 binary64))","(log.f64 n)","#s(literal 1 binary64)","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))","(neg.f64 n)","n","(log.f64 n)","#s(literal -1 binary64)","(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","(+.f64 n #s(literal 1 binary64))","#s(literal 1 binary64)","(log1p.f64 n)","(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","(fma.f64 n n #s(literal -1 binary64))","n","#s(literal -1 binary64)","(/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))","(log1p.f64 n)","(+.f64 n #s(literal -1 binary64))","(*.f64 n (log.f64 n))","(log.f64 n)","#s(literal 1 binary64)","(-.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n)))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","(*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))","(log1p.f64 n)","n","(fma.f64 n n #s(literal -1 binary64))","#s(literal -1 binary64)","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))","(-.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","(*.f64 n (log.f64 n))","(log.f64 n)","(-.f64 (-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 n n) n #s(literal 1 binary64))","(*.f64 n n)","n","#s(literal 1 binary64)","(/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(log1p.f64 n)","(fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(+.f64 n #s(literal -1 binary64))","#s(literal -1 binary64)","(*.f64 n (log.f64 n))","(log.f64 n)"]],"locations":[["(fma.f64 (*.f64 n n) n #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cost-diff",0],["(-.f64 (-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","cost-diff",1],["(*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))","cost-diff",0],["(-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n)))","cost-diff",0],["(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","cost-diff",1],["(-.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","cost-diff",1],["(fma.f64 n n #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","cost-diff",0],["(-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n)))","cost-diff",0],["(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","cost-diff",1],["(log.f64 n)","cost-diff",0],["(neg.f64 n)","cost-diff",0],["(fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))","cost-diff",0],["(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","cost-diff",1],["(fma.f64 (log.f64 n) n #s(literal 1 binary64))","cost-diff",0],["(*.f64 (log1p.f64 n) n)","cost-diff",0],["(log1p.f64 n)","cost-diff",0],["(-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","cost-diff",2]],"memory":[[-1701520,14540832]],"method":["egg-herbie"],"outputs":[["(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal -1 binary64)))","(log1p.f64 n)","n","(-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n #s(literal -1 binary64))","(*.f64 (log1p.f64 n) n)","(fma.f64 (log.f64 n) n #s(literal 1 binary64))","(log.f64 n)","#s(literal 1 binary64)","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n) #s(literal -1 binary64)))","(fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))","(neg.f64 n)","n","(log.f64 n)","#s(literal -1 binary64)","(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","(+.f64 n #s(literal 1 binary64))","#s(literal 1 binary64)","(log1p.f64 n)","(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n)))","(fma.f64 (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","(/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (+.f64 n #s(literal -1 binary64)))","(fma.f64 n n #s(literal -1 binary64))","n","#s(literal -1 binary64)","(/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))","(log1p.f64 n)","(+.f64 n #s(literal -1 binary64))","(*.f64 n (log.f64 n))","(log.f64 n)","#s(literal 1 binary64)","(-.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (/.f64 (neg.f64 (log1p.f64 n)) (-.f64 #s(literal 1 binary64) n)) (fma.f64 n n #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n)))","(fma.f64 (/.f64 (neg.f64 (log1p.f64 n)) (-.f64 #s(literal 1 binary64) n)) (fma.f64 n n #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","(/.f64 (*.f64 (neg.f64 (log1p.f64 n)) (fma.f64 n n #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) n))","(*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))","(log1p.f64 n)","n","(fma.f64 n n #s(literal -1 binary64))","#s(literal -1 binary64)","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))","(-.f64 #s(literal 1 binary64) n)","#s(literal 1 binary64)","(*.f64 n (log.f64 n))","(log.f64 n)","(-.f64 (-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(fma.f64 (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (*.f64 n n) n #s(literal 1 binary64))","(*.f64 n n)","n","#s(literal 1 binary64)","(/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","(log1p.f64 n)","(fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))","(+.f64 n #s(literal -1 binary64))","#s(literal -1 binary64)","(*.f64 n (log.f64 n))","(log.f64 n)"]],"time":672.89013671875,"type":"simplify"},{"compiler":[[394,40]],"locations":[["(*.f64 n (log.f64 n))","accuracy",0.2578125],["(/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))","accuracy",0.9741149219852224],["(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","accuracy",43.96354545254338],["(-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","accuracy",62.00969950305651],["(*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))","accuracy",0.13671875],["(*.f64 n (log.f64 n))","accuracy",0.2578125],["(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","accuracy",32.043383956355854],["(-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n)))","accuracy",62.00969950305651],["(*.f64 n (log.f64 n))","accuracy",0.2578125],["(/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))","accuracy",0.29296875],["(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","accuracy",31.727055341592006],["(-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n)))","accuracy",62.00969950305651],["(log.f64 n)","accuracy",0.0],["(fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))","accuracy",0.2578125],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","accuracy",0.2578125],["(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","accuracy",62.009690936703116],["(log.f64 n)","accuracy",0.0],["(fma.f64 (log.f64 n) n #s(literal 1 binary64))","accuracy",0.2578125],["(*.f64 (log1p.f64 n) n)","accuracy",0.2578125],["(-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","accuracy",60.53512509915941]],"memory":[[3418880,75111744]],"mixsample":[[3.30029296875,"ival-sub",1200],[8.60400390625,"ival-div",0],[48.852783203125,"adjust",800],[6.85400390625,"ival-mult",1200],[0.3720703125,"ival-sub",1600],[7.09619140625,"ival-log",2800],[2.195556640625,"ival-div",1600],[0.225830078125,"ival-assert",0],[21.40771484375,"ival-sub",0],[4.804931640625,"ival-log",1600],[1.4580078125,"ival-sub",400],[0.723876953125,"ival-log1p",400],[4.560302734375,"ival-log1p",1200],[3.338134765625,"ival-log",1200],[20.6318359375,"ival-add",0],[2.10205078125,"ival-mult",800],[2.984130859375,"ival-sub",800],[5.042236328125,"ival-mult",1600],[0.477783203125,"ival-add",400],[9.162109375,"ival-log1p",0],[2.958984375,"ival-div",2000],[1.944580078125,"ival-add",2400],[5.940673828125,"ival-mult",2400],[8.09765625,"ival-log",2400],[3.001708984375,"ival-div",2400],[3.159423828125,"ival-add",1200],[5.80029296875,"ival-mult",2000],[0.39794921875,"ival-sub",2000],[8.363525390625,"ival-log1p",2800],[4.5888671875,"ival-mult",2800],[5.810791015625,"ival-log1p",1600],[6.4326171875,"ival-log",2000],[2.173828125,"ival-div",2800],[0.363037109375,"ival-sub",2400],[2.049072265625,"ival-div",1200],[1.944091796875,"ival-add",1600],[0.8642578125,"ival-mult",400],[30.19482421875,"ival-mult",0],[0.542724609375,"ival-log",400],[7.567138671875,"ival-log1p",2000],[1.4638671875,"ival-add",2800],[2.094482421875,"ival-add",2000],[9.385986328125,"ival-log1p",2400],[5.19287109375,"ival-log",0],[0.55078125,"ival-true",0],[0.2890625,"ival-sub",2800],[0.55908203125,"exact",0],[1.47412109375,"ival-add",800],[1.928955078125,"ival-neg",0]],"outcomes":[[355.623046875,1,"valid",256]],"time":431.035888671875,"type":"localize"},{"count":[[24,153]],"inputs":[["(-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","(log1p.f64 n)","(*.f64 (log1p.f64 n) n)","(fma.f64 (log.f64 n) n #s(literal 1 binary64))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))","(neg.f64 n)","(log.f64 n)","(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","(fma.f64 n n #s(literal -1 binary64))","(-.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","(-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n)))","(*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))","(-.f64 (-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 n n) n #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","(/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))","(*.f64 n (log.f64 n))","(/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))"]],"memory":[[-1153616,26293200]],"outputs":[["-1","(- (* -1 (* n (log n))) 1)","(- (* n (- n (log n))) 1)","(- (* n (- (* n (+ 1 (* -1/2 n))) (log n))) 1)","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","(pow n 2)","(* (pow n 2) (+ 1 (* -1/2 n)))","(* (pow n 2) (+ 1 (* n (- (* 1/3 n) 1/2))))","(* (pow n 2) (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","1","(+ 1 (* n (log n)))","(- (* n (+ 1 (* -1 (log n)))) 1)","(- (* n (+ 1 (+ (* -1 (log n)) (* 1/2 n)))) 1)","(- (* n (+ 1 (+ (* -1 (log n)) (* n (+ 1/2 (* -1/6 n)))))) 1)","(* -1 n)","(log n)","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(- (pow n 2) 1)","(* n (- (* 1/2 n) 1))","(* n (- (* n (+ 1/2 (* 2/3 n))) 1))","(* n (- (* n (+ 1/2 (* n (+ 2/3 (* -1/4 n))))) 1))","(+ 1 (pow n 3))","(* n (- (* -1/2 n) 1))","(* n (- (* n (- (* -5/6 n) 1/2)) 1))","(* n (- (* n (- (* n (- (* -7/12 n) 5/6)) 1/2)) 1))","(* n (log n))","(* n (+ 1 (* n (+ 1/2 (* n (- (* -11/12 n) 1/6))))))","(/ -1/2 n)","(/ (- (* 1/3 (/ 1 n)) 1/2) n)","(/ (- (* 1/3 (/ 1 n)) (+ 1/2 (/ 1/4 (pow n 2)))) n)","(/ (- (+ (* 1/3 (/ 1 n)) (* 1/5 (/ 1 (pow n 3)))) (+ 1/2 (/ 1/4 (pow n 2)))) n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (/ 1 n)))","(* n (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2))))","(* n (+ (log (/ 1 n)) (* -1 (log (/ 1 n)))))","(* n (+ (log (/ 1 n)) (+ (* -1 (log (/ 1 n))) (* -1 (/ (log (/ 1 n)) n)))))","(* n (+ (log (/ 1 n)) (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1/2 (pow n 2))))))","(* n (- (+ (log (/ 1 n)) (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1/2 (pow n 2))))) (* 1/6 (/ 1 (pow n 3)))))","(* n (log (/ 1 n)))","(* n (- (log (/ 1 n)) (/ 1 n)))","(- (/ (log (/ 1 n)) n) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ (* -1 (/ (+ 2/3 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 2))) (/ (log (/ 1 n)) n)) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ (* -1 (/ (+ 5/12 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 3))) (/ (log (/ 1 n)) n)) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (+ (/ 2/3 (pow n 2)) (* 1/2 (/ 1 n)))))))","(- 1 (log (/ 1 n)))","(- (+ 1 (/ (log (/ 1 n)) n)) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ 1 (+ (* -1 (/ (+ 2/3 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 2))) (/ (log (/ 1 n)) n))) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ 1 (+ (* -1 (/ (+ 5/12 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 3))) (/ (log (/ 1 n)) n))) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (+ (/ 2/3 (pow n 2)) (* 1/2 (/ 1 n)))))))","(* n (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ (log (/ 1 n)) n)))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2)))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (/ 1/2 (pow n 2)) (/ (log (/ 1 n)) n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 2/3 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 3))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2))))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (/ 1/2 (pow n 2)) (/ (log (/ 1 n)) n)))))","(* (pow n 2) (- 1 (/ 1 (pow n 2))))","(+ (* -1 (log (/ 1 n))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)))","(+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n))))","(+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 3))) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)) (* 1/4 (/ 1 (pow n 3)))))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) (pow n 2))) (/ 1 n)))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 3))) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) (pow n 2))) (/ 1 n))))))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)))))","(+ 1 (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 3))) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)) (* 1/4 (/ 1 (pow n 3))))))))","(* -1 (* (pow n 2) (log (/ 1 n))))","(* (pow n 2) (+ (* -1 (log (/ 1 n))) (/ 1 n)))","(* (pow n 2) (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2)))) (/ 1/2 (pow n 2))))","(* (pow n 2) (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2)))) (+ (/ 1/2 (pow n 2)) (* 2/3 (/ 1 (pow n 3))))))","(- (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) n)) (log (/ 1 n)))","(- (/ (log (/ 1 n)) (pow n 2)) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))","(- (+ (* 3/4 (/ 1 (pow n 3))) (/ (log (/ 1 n)) (pow n 2))) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- (log (/ 1 n)) (+ 7/6 (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))))","(- (+ 1 (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) n))) (log (/ 1 n)))","(- (+ 1 (/ (log (/ 1 n)) (pow n 2))) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))","(- (+ 1 (+ (* 3/4 (/ 1 (pow n 3))) (/ (log (/ 1 n)) (pow n 2)))) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- (log (/ 1 n)) (+ 7/6 (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (/ 1 n))) (/ (log (/ 1 n)) n)))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 3)))) (+ (* -1 (/ (log (/ 1 n)) (pow n 2))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 3))) (+ (/ 1/2 (pow n 2)) (+ (* 7/6 (/ 1 (pow n 3))) (/ (log (/ 1 n)) n))))))))","(pow n 3)","(* (pow n 3) (+ 1 (/ 1 (pow n 3))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(* -1 (/ (log (/ 1 n)) n))","(/ (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ (log (/ 1 n)) n)) n)","(/ (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/2 (* -1 (- 1 (log (/ 1 n))))) (pow n 2))) (/ 1 n))) (/ (log (/ 1 n)) n)) n)","(/ (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/6 (* -1 (- 1 (log (/ 1 n))))) (pow n 3))) (/ 1 n))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (/ 1/2 (pow n 2)) (/ (log (/ 1 n)) n)))) n)","(* -1 (/ (log (/ 1 n)) (pow n 2)))","(/ (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ (log (/ 1 n)) n)) (pow n 2))","(/ (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (/ 1 n))) (/ (log (/ 1 n)) n)) (pow n 2))","(/ (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 3)))) (+ (* -1 (/ (log (/ 1 n)) (pow n 2))) (+ (* -1 (/ (log (/ 1 n)) (pow n 3))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 3))) (+ (/ 1/2 (pow n 2)) (+ (* 7/6 (/ 1 (pow n 3))) (/ (log (/ 1 n)) n)))))))) (pow n 2))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 n))) n))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 n))) n))) n))","(* -1 (/ (+ 1/2 (* -1 (/ (+ 1/3 (* -1 (/ (- 1/4 (* 1/5 (/ 1 n))) n))) n))) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (/ 1 n))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- 1 (* 1/2 (/ 1 n))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 n))) n))) n)))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))) n)))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))) n)))))))","(* -1 (* n (+ (log -1) (* -1 (log (/ -1 n))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))))","(- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 7/6 (/ 1 n)))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (* -1 (/ (- (+ (* -1 (- (+ 7/6 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 11/12 (/ 1 n)))) n))) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(- (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/2 (/ 1 n))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 7/6 (/ 1 n)))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (* -1 (/ (- (+ (* -1 (- (+ 7/6 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 11/12 (/ 1 n)))) n))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/2 (/ 1 n)))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 7/6 (/ 1 n)))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) n))))) n)))))","(* (pow n 2) (+ (log -1) (* -1 (log (/ -1 n)))))","(* (pow n 2) (+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n))))","(* (pow n 2) (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) 1/2) n)) 1) n)))))","(* (pow n 2) (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* 2/3 (/ 1 n)))) n)) 1) n)))))","(- (* 1/2 (/ 1 n)) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) 1/6) n)) 1/2) n)) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ (* -1 (/ (log (/ -1 n)) n)) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)) (+ (* 1/12 (/ 1 n)) (/ (log -1) n))))))) 1/6) n)) 1/2) n)) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- 1 (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (+ 1 (* 1/2 (/ 1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (+ 1 (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) 1/6) n)) 1/2) n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (+ 1 (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ (* -1 (/ (log (/ -1 n)) n)) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)) (+ (* 1/12 (/ 1 n)) (/ (log -1) n))))))) 1/6) n)) 1/2) n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- 1 (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- (+ 1 (* 1/2 (/ 1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- (+ 1 (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) 1/6) n)) 1/2) n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))","(/ (+ (log -1) (* -1 (log (/ -1 n)))) n)","(* -1 (/ (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n))) n))","(* -1 (/ (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))) n))))) n))) n))","(* -1 (/ (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ 1/2 (+ (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))) (* -1 (/ (+ 1/3 (* -1 (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) n)))) n))))) n))) n))","(/ (+ (log -1) (* -1 (log (/ -1 n)))) (pow n 2))","(/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (/ (log (/ -1 n)) n)) (+ (/ 1 n) (/ (log -1) n))))) (pow n 2))","(/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (/ (log (/ -1 n)) n)) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (+ (* 1/2 (/ 1 n)) (/ (log -1) n)))) (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))) (pow n 2))","(/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (+ 1/2 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) n)) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/3 (/ 1 n)))) (+ 1/2 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))))))) n)) (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))) (pow n 2))"]],"series":[[20.177001953125,"((- (* (log (+ 1 n)) n) (+ (* (log n) n) 1)) (log (+ 1 n)) (* (log (+ 1 n)) n) (+ (* (log n) n) 1) (+ (+ (* (neg n) (log n)) -1) (* (+ n 1) (log (+ 1 n)))) (+ (* (neg n) (log n)) -1) (neg n) (log n) (- (- (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (* n (log n))) 1) (- (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (* n (log n))) (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (+ (* n n) -1) (- (- (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (* n (log n))) 1) (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (- (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (* n (log n))) (* (log (+ 1 n)) (+ (* n n) -1)) (- (- (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (* n (log n))) 1) (- (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (* n (log n))) (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (+ (* (* n n) n) 1) (* (+ n 1) (log (+ 1 n))) (/ (log (+ 1 n)) (+ n -1)) (* n (log n)) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1)))","n","-inf"],[22.80517578125,"((- (* (log (+ 1 n)) n) (+ (* (log n) n) 1)) (log (+ 1 n)) (* (log (+ 1 n)) n) (+ (* (log n) n) 1) (+ (+ (* (neg n) (log n)) -1) (* (+ n 1) (log (+ 1 n)))) (+ (* (neg n) (log n)) -1) (neg n) (log n) (- (- (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (* n (log n))) 1) (- (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (* n (log n))) (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (+ (* n n) -1) (- (- (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (* n (log n))) 1) (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (- (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (* n (log n))) (* (log (+ 1 n)) (+ (* n n) -1)) (- (- (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (* n (log n))) 1) (- (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (* n (log n))) (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (+ (* (* n n) n) 1) (* (+ n 1) (log (+ 1 n))) (/ (log (+ 1 n)) (+ n -1)) (* n (log n)) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1)))","n","inf"],[28.10107421875,"((- (* (log (+ 1 n)) n) (+ (* (log n) n) 1)) (log (+ 1 n)) (* (log (+ 1 n)) n) (+ (* (log n) n) 1) (+ (+ (* (neg n) (log n)) -1) (* (+ n 1) (log (+ 1 n)))) (+ (* (neg n) (log n)) -1) (neg n) (log n) (- (- (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (* n (log n))) 1) (- (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (* n (log n))) (* (+ (* n n) -1) (/ (log (+ 1 n)) (+ n -1))) (+ (* n n) -1) (- (- (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (* n (log n))) 1) (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (- (* (* (log (+ 1 n)) (+ (* n n) -1)) (/ -1 (- 1 n))) (* n (log n))) (* (log (+ 1 n)) (+ (* n n) -1)) (- (- (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (* n (log n))) 1) (- (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (* n (log n))) (* (+ (* (* n n) n) 1) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1))) (+ (* (* n n) n) 1) (* (+ n 1) (log (+ 1 n))) (/ (log (+ 1 n)) (+ n -1)) (* n (log n)) (/ (log (+ 1 n)) (+ (* n (+ n -1)) 1)))","n","0"]],"time":77.094970703125,"type":"series"},{"count":[[153,0]],"inputs":[["-1","(- (* -1 (* n (log n))) 1)","(- (* n (- n (log n))) 1)","(- (* n (- (* n (+ 1 (* -1/2 n))) (log n))) 1)","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","(pow n 2)","(* (pow n 2) (+ 1 (* -1/2 n)))","(* (pow n 2) (+ 1 (* n (- (* 1/3 n) 1/2))))","(* (pow n 2) (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","1","(+ 1 (* n (log n)))","(- (* n (+ 1 (* -1 (log n)))) 1)","(- (* n (+ 1 (+ (* -1 (log n)) (* 1/2 n)))) 1)","(- (* n (+ 1 (+ (* -1 (log n)) (* n (+ 1/2 (* -1/6 n)))))) 1)","(* -1 n)","(log n)","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(- (pow n 2) 1)","(* n (- (* 1/2 n) 1))","(* n (- (* n (+ 1/2 (* 2/3 n))) 1))","(* n (- (* n (+ 1/2 (* n (+ 2/3 (* -1/4 n))))) 1))","(+ 1 (pow n 3))","(* n (- (* -1/2 n) 1))","(* n (- (* n (- (* -5/6 n) 1/2)) 1))","(* n (- (* n (- (* n (- (* -7/12 n) 5/6)) 1/2)) 1))","(* n (log n))","(* n (+ 1 (* n (+ 1/2 (* n (- (* -11/12 n) 1/6))))))","(/ -1/2 n)","(/ (- (* 1/3 (/ 1 n)) 1/2) n)","(/ (- (* 1/3 (/ 1 n)) (+ 1/2 (/ 1/4 (pow n 2)))) n)","(/ (- (+ (* 1/3 (/ 1 n)) (* 1/5 (/ 1 (pow n 3)))) (+ 1/2 (/ 1/4 (pow n 2)))) n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (/ 1 n)))","(* n (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2))))","(* n (+ (log (/ 1 n)) (* -1 (log (/ 1 n)))))","(* n (+ (log (/ 1 n)) (+ (* -1 (log (/ 1 n))) (* -1 (/ (log (/ 1 n)) n)))))","(* n (+ (log (/ 1 n)) (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1/2 (pow n 2))))))","(* n (- (+ (log (/ 1 n)) (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1/2 (pow n 2))))) (* 1/6 (/ 1 (pow n 3)))))","(* n (log (/ 1 n)))","(* n (- (log (/ 1 n)) (/ 1 n)))","(- (/ (log (/ 1 n)) n) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ (* -1 (/ (+ 2/3 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 2))) (/ (log (/ 1 n)) n)) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ (* -1 (/ (+ 5/12 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 3))) (/ (log (/ 1 n)) n)) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (+ (/ 2/3 (pow n 2)) (* 1/2 (/ 1 n)))))))","(- 1 (log (/ 1 n)))","(- (+ 1 (/ (log (/ 1 n)) n)) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ 1 (+ (* -1 (/ (+ 2/3 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 2))) (/ (log (/ 1 n)) n))) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (* 1/2 (/ 1 n)))))","(- (+ 1 (+ (* -1 (/ (+ 5/12 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 3))) (/ (log (/ 1 n)) n))) (+ (log (/ 1 n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (+ (/ 2/3 (pow n 2)) (* 1/2 (/ 1 n)))))))","(* n (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ (log (/ 1 n)) n)))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2)))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (/ 1/2 (pow n 2)) (/ (log (/ 1 n)) n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 2/3 (* -1 (- (log (/ 1 n)) (+ 1/2 (* -1 (- 1 (log (/ 1 n)))))))) (pow n 3))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2))))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (/ 1/2 (pow n 2)) (/ (log (/ 1 n)) n)))))","(* (pow n 2) (- 1 (/ 1 (pow n 2))))","(+ (* -1 (log (/ 1 n))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)))","(+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n))))","(+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 3))) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)) (* 1/4 (/ 1 (pow n 3)))))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) (pow n 2))) (/ 1 n)))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 3))) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) (pow n 2))) (/ 1 n))))))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)))))","(+ 1 (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 2))) (+ (* -1 (/ (- 2/3 (* -1 (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))))) (pow n 3))) (+ (* -1 (/ (- (* -1 (- (log (/ 1 n)) 1/2)) (+ 1 (* -1 (log (/ 1 n))))) n)) (* 1/4 (/ 1 (pow n 3))))))))","(* -1 (* (pow n 2) (log (/ 1 n))))","(* (pow n 2) (+ (* -1 (log (/ 1 n))) (/ 1 n)))","(* (pow n 2) (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2)))) (/ 1/2 (pow n 2))))","(* (pow n 2) (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 2)))) (+ (/ 1/2 (pow n 2)) (* 2/3 (/ 1 (pow n 3))))))","(- (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) n)) (log (/ 1 n)))","(- (/ (log (/ 1 n)) (pow n 2)) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))","(- (+ (* 3/4 (/ 1 (pow n 3))) (/ (log (/ 1 n)) (pow n 2))) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- (log (/ 1 n)) (+ 7/6 (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))))","(- (+ 1 (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) n))) (log (/ 1 n)))","(- (+ 1 (/ (log (/ 1 n)) (pow n 2))) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))","(- (+ 1 (+ (* 3/4 (/ 1 (pow n 3))) (/ (log (/ 1 n)) (pow n 2)))) (+ (log (/ 1 n)) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* -1 (/ (- 1 (log (/ 1 n))) n)) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- (log (/ 1 n)) (+ 7/6 (* -1 (- 1 (log (/ 1 n)))))) (pow n 3))) (+ (* 1/2 (/ 1 n)) (/ 7/6 (pow n 2))))))))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (/ 1 n))) (/ (log (/ 1 n)) n)))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 3)))) (+ (* -1 (/ (log (/ 1 n)) (pow n 2))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 3))) (+ (/ 1/2 (pow n 2)) (+ (* 7/6 (/ 1 (pow n 3))) (/ (log (/ 1 n)) n))))))))","(pow n 3)","(* (pow n 3) (+ 1 (/ 1 (pow n 3))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(* -1 (/ (log (/ 1 n)) n))","(/ (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ (log (/ 1 n)) n)) n)","(/ (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/2 (* -1 (- 1 (log (/ 1 n))))) (pow n 2))) (/ 1 n))) (/ (log (/ 1 n)) n)) n)","(/ (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/6 (* -1 (- 1 (log (/ 1 n))))) (pow n 3))) (/ 1 n))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (/ 1/2 (pow n 2)) (/ (log (/ 1 n)) n)))) n)","(* -1 (/ (log (/ 1 n)) (pow n 2)))","(/ (- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ (log (/ 1 n)) n)) (pow n 2))","(/ (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (+ 1/2 (+ (* -1 (log (/ 1 n))) (* -1 (- 1 (log (/ 1 n)))))) (pow n 2))) (/ 1 n))) (/ (log (/ 1 n)) n)) (pow n 2))","(/ (- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (/ (log (/ 1 n)) (pow n 3)))) (+ (* -1 (/ (log (/ 1 n)) (pow n 2))) (+ (* -1 (/ (log (/ 1 n)) (pow n 3))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 2))) (+ (* -1 (/ (- 1 (log (/ 1 n))) (pow n 3))) (+ (/ 1/2 (pow n 2)) (+ (* 7/6 (/ 1 (pow n 3))) (/ (log (/ 1 n)) n)))))))) (pow n 2))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 n))) n))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 n))) n))) n))","(* -1 (/ (+ 1/2 (* -1 (/ (+ 1/3 (* -1 (/ (- 1/4 (* 1/5 (/ 1 n))) n))) n))) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (/ 1 n))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- 1 (* 1/2 (/ 1 n))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 n))) n))) n)))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))) n)))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))) n)))))))","(* -1 (* n (+ (log -1) (* -1 (log (/ -1 n))))))","(* -1 (* n (+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))))","(- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 7/6 (/ 1 n)))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (* -1 (/ (- (+ (* -1 (- (+ 7/6 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 11/12 (/ 1 n)))) n))) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(- (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/2 (/ 1 n))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 7/6 (/ 1 n)))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (* -1 (/ (- (+ (* -1 (- (+ 7/6 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 11/12 (/ 1 n)))) n))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/2 (/ 1 n)))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 7/6 (/ 1 n)))) (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n))) n))))) n)))))","(* (pow n 2) (+ (log -1) (* -1 (log (/ -1 n)))))","(* (pow n 2) (+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n))))","(* (pow n 2) (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) 1/2) n)) 1) n)))))","(* (pow n 2) (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ 1/2 (* 2/3 (/ 1 n)))) n)) 1) n)))))","(- (* 1/2 (/ 1 n)) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) 1/6) n)) 1/2) n)) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ (* -1 (/ (log (/ -1 n)) n)) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)) (+ (* 1/12 (/ 1 n)) (/ (log -1) n))))))) 1/6) n)) 1/2) n)) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- 1 (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (+ 1 (* 1/2 (/ 1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (+ 1 (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) 1/6) n)) 1/2) n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(- (+ 1 (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (+ (* -1 (/ (log (/ -1 n)) n)) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 n)))) n)) (+ (* 1/12 (/ 1 n)) (/ (log -1) n))))))) 1/6) n)) 1/2) n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- 1 (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- (+ 1 (* 1/2 (/ 1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (- (+ 1 (* -1 (/ (- (* -1 (/ (- (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n))))))) 1/6) n)) 1/2) n))) (* -1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))","(/ (+ (log -1) (* -1 (log (/ -1 n)))) n)","(* -1 (/ (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n))) n))","(* -1 (/ (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))) n))))) n))) n))","(* -1 (/ (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (+ 1/2 (+ (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))) (* -1 (/ (+ 1/3 (* -1 (+ 1/2 (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) n)))) n))))) n))) n))","(/ (+ (log -1) (* -1 (log (/ -1 n)))) (pow n 2))","(/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (+ (* -1 (/ (log (/ -1 n)) n)) (+ (/ 1 n) (/ (log -1) n))))) (pow n 2))","(/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (+ (* -1 (/ (log (/ -1 n)) n)) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (+ (* 1/2 (/ 1 n)) (/ (log -1) n)))) (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))) (pow n 2))","(/ (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (+ 1/2 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))))))) n)) (+ (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)) (* 1/3 (/ 1 n)))) (+ 1/2 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))))))) n)) (+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))) n)))) (pow n 2))"]],"memory":[[3450480,11537920]],"method":["egg-herbie"],"outputs":[[]],"time":274.7431640625,"type":"simplify"},{"count":[[24,360]],"inputs":[["(-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","(log1p.f64 n)","(*.f64 (log1p.f64 n) n)","(fma.f64 (log.f64 n) n #s(literal 1 binary64))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))","(neg.f64 n)","(log.f64 n)","(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64))))","(fma.f64 n n #s(literal -1 binary64))","(-.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)))","(-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n)))","(*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))","(-.f64 (-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 n n) n #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))","(/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))","(*.f64 n (log.f64 n))","(/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))"]],"memory":[[-5082160,21074032]],"outputs":[["#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)","#s(literal 1 binary64)","#s(literal -1 binary64)","#s(literal 2 binary64)","#s(literal 3 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal -2 binary64)","#s(literal 9 binary64)","#s(literal -3 binary64)","#s(literal 8 binary64)","#s(literal 27 binary64)","#s(literal 7 binary64)","#s(literal 11 binary64)"]],"time":574.10400390625,"type":"rewrite"},{"compiler":[[60,32]],"memory":[[1306352,1306352]],"time":5.75,"type":"eval"},{"alts":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","next",0.0,"binary64"]],"compiler":[[4,4]],"count":[[25,1]],"kept":[{"done":[0,0],"fresh":[5,0],"new":[15,1],"picked":[5,0]}],"memory":[[934304,934304]],"min-error":[[0.0,"binary64"]],"time":1.992919921875,"type":"prune"},{"inputs":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","(log1p.f64 n)","n","#s(literal 0 binary64)"]],"locations":[["(log1p.f64 n)","cost-diff",0],["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","cost-diff",2]],"memory":[[1681040,9921840]],"method":["egg-herbie"],"outputs":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","(log1p.f64 n)","(log1p.f64 n)","n","#s(literal 0 binary64)"]],"time":250.953125,"type":"simplify"},{"compiler":[[14,6]],"locations":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","accuracy",0.0],["(log1p.f64 n)","accuracy",0.0]],"memory":[[-4062896,5119472]],"mixsample":[[0.47216796875,"ival-true",0],[3.57373046875,"ival-add",0],[10.684326171875,"ival-log1p",0],[0.455322265625,"exact",0],[0.35205078125,"ival-assert",0]],"outcomes":[[30.116455078125,0,"valid",256]],"time":45.242919921875,"type":"localize"},{"count":[[2,12]],"inputs":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","(log1p.f64 n)"]],"memory":[[237872,237872]],"outputs":[["n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))"]],"series":[[0.291015625,"((+ (log (+ 1 n)) 0) (log (+ 1 n)))","n","-inf"],[0.308837890625,"((+ (log (+ 1 n)) 0) (log (+ 1 n)))","n","inf"],[0.44189453125,"((+ (log (+ 1 n)) 0) (log (+ 1 n)))","n","0"]],"time":1.699951171875,"type":"series"},{"count":[[12,0]],"inputs":[["n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))"]],"memory":[[1779072,9912560]],"method":["egg-herbie"],"outputs":[[]],"time":193.34814453125,"type":"simplify"},{"count":[[2,30]],"inputs":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","(log1p.f64 n)"]],"memory":[[-2096288,13973904]],"outputs":[["#s(literal 0 binary64)","(neg.f64 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) #s(literal 0 binary64))","(+.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) n))))","(+.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (neg.f64 (log1p.f64 (neg.f64 n))))","(+.f64 (-.f64 #s(literal 0 binary64) (log1p.f64 (*.f64 (*.f64 n n) n))) (log1p.f64 (*.f64 (+.f64 n #s(literal -1 binary64)) n)))","(+.f64 (-.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n)))) (log1p.f64 (neg.f64 n)))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (neg.f64 (log1p.f64 (*.f64 (+.f64 n #s(literal -1 binary64)) n))))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 n #s(literal -1 binary64)) n #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) #s(literal 0 binary64))","(-.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 (*.f64 n n) n)))","(-.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))))","(-.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (*.f64 (*.f64 n n) n))) (log1p.f64 (*.f64 (+.f64 n #s(literal -1 binary64)) n)))","(-.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (log1p.f64 (neg.f64 n)))","(-.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (-.f64 (log1p.f64 (neg.f64 n)) #s(literal 0 binary64)))","#s(literal 0 binary64)","(neg.f64 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) #s(literal 0 binary64))","(+.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) n))))","(+.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (neg.f64 (log1p.f64 (neg.f64 n))))","(+.f64 (-.f64 #s(literal 0 binary64) (log1p.f64 (*.f64 (*.f64 n n) n))) (log1p.f64 (*.f64 (+.f64 n #s(literal -1 binary64)) n)))","(+.f64 (-.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n)))) (log1p.f64 (neg.f64 n)))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (neg.f64 (log1p.f64 (*.f64 (+.f64 n #s(literal -1 binary64)) n))))","(+.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 n #s(literal -1 binary64)) n #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) #s(literal 0 binary64))","(-.f64 (log1p.f64 (*.f64 (*.f64 n n) n)) (log1p.f64 (*.f64 (*.f64 n n) n)))","(-.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (+.f64 n #s(literal -1 binary64))))","(-.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (*.f64 (*.f64 n n) n))) (log1p.f64 (*.f64 (+.f64 n #s(literal -1 binary64)) n)))","(-.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (log1p.f64 (neg.f64 n)))","(-.f64 (+.f64 #s(literal 0 binary64) (log1p.f64 (neg.f64 n))) (-.f64 (log1p.f64 (neg.f64 n)) #s(literal 0 binary64)))"]],"time":338.494873046875,"type":"rewrite"},{"compiler":[[145,42]],"memory":[[1048208,1048208]],"time":3.326904296875,"type":"eval"},{"alts":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","done",0.0,"binary64"],["#s(literal 0 binary64)","next",62.01016586229322,"binary64"]],"compiler":[[4,4],[1,2]],"count":[[16,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[15,1],"picked":[1,1]}],"memory":[[1083040,1083040]],"min-error":[[0.0,"binary64"]],"time":1.55419921875,"type":"prune"},{"inputs":[["#s(literal 0 binary64)"]],"memory":[[169520,9629056]],"method":["egg-herbie"],"outputs":[["#s(literal 0 binary64)"]],"time":176.7548828125,"type":"simplify"},{"compiler":[[3,4]],"memory":[[3222160,3222160]],"mixsample":[[0.273681640625,"ival-true",0],[0.213134765625,"exact",0],[0.17138671875,"ival-assert",0]],"outcomes":[[6.513427734375,0,"valid",256]],"time":11.302978515625,"type":"localize"},{"count":[[0,0]],"inputs":[[]],"memory":[[28976,28976]],"outputs":[[]],"series":[[0.00390625,"()","n","-inf"],[0.004150390625,"()","n","inf"],[0.031982421875,"()","n","0"]],"time":0.137939453125,"type":"series"},{"count":[[0,0]],"inputs":[[]],"memory":[[1734208,9608336]],"method":["egg-herbie"],"outputs":[[]],"time":165.967041015625,"type":"simplify"},{"count":[[0,0]],"inputs":[[]],"memory":[[-4129760,12164272]],"outputs":[[]],"time":226.56103515625,"type":"rewrite"},{"compiler":[[0,1]],"memory":[[43344,43344]],"time":0.23095703125,"type":"eval"},{"alts":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","done",0.0,"binary64"],["#s(literal 0 binary64)","done",62.01016586229322,"binary64"]],"compiler":[[211,61],[4,4],[1,2]],"count":[[2,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"memory":[[2621280,2621280]],"min-error":[[0.0,"binary64"]],"time":5.907958984375,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["n",0.0,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0.0,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",0.0,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[13,1]],"inputs":[["#s(literal 0 binary64)","(+.f64 (log1p.f64 n) #s(literal 0 binary64))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n)))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (+.f64 n #s(literal 1 binary64)) (log1p.f64 n))) #s(literal -1 binary64))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (/.f64 (log1p.f64 n) (+.f64 n #s(literal -1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (-.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (+.f64 n #s(literal -1 binary64))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (-.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) n)) (log1p.f64 n))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (-.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (/.f64 (log1p.f64 n) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 n n) n #s(literal 1 binary64)) (log1p.f64 n)) (/.f64 #s(literal 1 binary64) (fma.f64 n (+.f64 n #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (*.f64 n n) n #s(literal -1 binary64))) (fma.f64 (+.f64 n #s(literal 1 binary64)) n #s(literal 1 binary64))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))"]],"memory":[[-1817552,7537248]],"oracle":[63.628245551033395],"outputs":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))"]],"repr":["binary64"],"time":27.1611328125,"times":[[8.041015625,"n"],[10.050048828125,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[6.091064453125,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"accuracy":[62.01016586229322],"baseline":[62.01016586229322],"branch":[["n",62.01016586229325,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",62.01016586229322,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",62.01016586229322,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[1,1]],"inputs":[["#s(literal 0 binary64)"]],"link":["."],"memory":[[-4592128,3748992]],"name":["logs (example 3.8)"],"oracle":[62.01016586229322],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":8.572021484375,"times":[[2.68212890625,"n"],[2.056884765625,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[2.114990234375,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"inputs":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","#s(literal 0 binary64)"]],"memory":[[7264096,15534544]],"method":["egg-herbie"],"outputs":[["(+.f64 (log1p.f64 n) #s(literal 0 binary64))","(log1p.f64 n)","#s(literal 0 binary64)"]],"time":246.572998046875,"type":"simplify"},{"compiler":[[3,3]],"memory":[[491920,491920]],"stop":[["done",1]],"time":1.494873046875,"type":"soundness"},{"compiler":[[3,3],[3,3],[24,17],[24,17],[15,9],[15,9]],"memory":[[-6074144,18292416]],"remove-preprocessing":[[],[],[]],"time":51.85498046875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01708984375,"type":"end"}]