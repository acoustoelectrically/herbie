[{"memory":[[16672,16672]],"time":0.050048828125,"type":"start"},{"compiler":[[15,12]],"memory":[[-8263056,37428224]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":187.4638671875,"type":"analyze"},{"bogosity":[{"infinite":0.06592706901830558,"invalid":0.25597941597986645,"precondition":0.0014641286106780171,"valid":0.67662938639115}],"memory":[[19168848,379284608]],"mixsample":[[8.383544921875,"ival-sub",1200],[69.818603515625,"adjust",800],[140.432861328125,"ival-div",0],[0.150390625,"ival-sub",4800],[7.221435546875,"ival-mult",1200],[0.02587890625,"ival-div",400],[2.794189453125,"ival-sub",1600],[4.75,"ival-assert",0],[0.041748046875,"ival-sub",3600],[104.70166015625,"ival-sub",0],[13.7890625,"ival-sqrt",1200],[0.39599609375,"ival-sqrt",4800],[103.25244140625,"ival-sqrt",0],[4.41064453125,"ival-sub",400],[0.478759765625,"ival-sub",4400],[88.307373046875,"ival-add",0],[5.979248046875,"ival-mult",800],[5.782470703125,"ival-sub",800],[3.083984375,"ival-mult",1600],[0.016845703125,"ival-add",400],[2.990478515625,"adjust",2800],[0.01318359375,"ival-div",2000],[0.065185546875,"ival-sqrt",3600],[0.242919921875,"ival-sub",4000],[7.712646484375,"ival-sqrt",400],[5.576171875,"ival-sqrt",2000],[0.123046875,"ival-mult",2000],[9.70458984375,"ival-sqrt",800],[3.283203125,"ival-sub",2000],[0.61865234375,"ival-sqrt",4000],[0.0048828125,"ival-sub",6800],[0.01611328125,"ival-sqrt",6800],[1.23681640625,"ival-sqrt",4400],[25.1572265625,"adjust",2000],[3.87158203125,"ival-sub",2400],[166.909912109375,"ival-mult",0],[5.135009765625,"ival-sqrt",1600],[5.990966796875,"ival-mult",400],[0.0107421875,"ival-add",2000],[0.013916015625,"ival-div",800],[7.234619140625,"ival-sqrt",2400],[10.243896484375,"ival-true",0],[0.008056640625,"ival-add",800],[59.9453125,"ival-neg",0]],"outcomes":[[276.153076171875,1,"valid",1322],[300.799072265625,2,"valid",1203],[111.98388671875,0,"invalid",1171],[54.29345703125,3,"valid",176],[559.2470703125,0,"valid",5555]],"time":1826.608154296875,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[120,0,22,114]],"explanations":[["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",3,0,[["(*.f64 b_2 b_2)","underflow",38],["(*.f64 a c)","underflow",28],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[1,2]]],["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",3,0,[["(*.f64 b_2 b_2)","overflow",76],["(*.f64 a c)","overflow",18]],[[1,2,1]]],["/.f64","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",16,0,[["(*.f64 b_2 b_2)","underflow",38],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",28],["(*.f64 a c)","underflow",28],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",3]],[[]]],["+.f64","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",59,1,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",87,0,[["(*.f64 b_2 b_2)","overflow",76],["(*.f64 a c)","overflow",18],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",87]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",3,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",90,0,false,0,false],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",59,0,false,0,false],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",17,0,false,1,[-2.2933654765407336e-119,3.3705206169524925e-40,9.022498681115465e-233]],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,1],[2,24],[1,117],[0,114]],"maybe-confusion":[[120,0,0,22,1,113]],"memory":[[-1250256,66309888]],"mixsample":[[0.294189453125,"ival-sub",1200],[4.144775390625,"adjust",800],[6.72265625,"ival-div",0],[0.0087890625,"ival-sub",4800],[0.170166015625,"ival-mult",1200],[0.252685546875,"ival-sub",1600],[0.258544921875,"ival-assert",0],[0.641845703125,"ival-sqrt",1200],[2.881591796875,"ival-sub",0],[0.024169921875,"ival-sqrt",4800],[4.53271484375,"ival-sqrt",0],[0.293212890625,"ival-sub",400],[4.23779296875,"ival-add",0],[0.462890625,"ival-mult",800],[0.06689453125,"ival-sub",4400],[0.42431640625,"ival-sub",800],[0.06884765625,"ival-mult",1600],[0.30029296875,"adjust",2800],[0.02685546875,"ival-sub",4000],[0.49072265625,"ival-sqrt",400],[0.242431640625,"ival-sqrt",2000],[0.13623046875,"ival-sub",2000],[0.757080078125,"ival-sqrt",800],[0.06689453125,"ival-sqrt",4000],[0.077392578125,"ival-sqrt",4400],[1.52294921875,"adjust",2000],[0.138671875,"ival-sub",2400],[8.08935546875,"ival-mult",0],[0.422119140625,"ival-mult",400],[0.663818359375,"ival-sqrt",1600],[0.68505859375,"ival-true",0],[0.30126953125,"ival-sqrt",2400],[2.784912109375,"ival-neg",0]],"outcomes":[[14.782470703125,1,"valid",80],[18.346435546875,2,"valid",76],[4.4140625,3,"valid",16],[32.48974609375,0,"valid",340]],"time":165.1728515625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[5801920,22062144]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2) a)"]],"symmetry":[[]],"time":336.55712890625,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50880,50880]],"time":0.087890625,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",28.678957412114354,"binary64"]],"compiler":[[13,10]],"memory":[[338608,338608]],"time":0.68603515625,"type":"prune"},{"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",1]],"memory":[[-6932448,10626160]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"time":161.81689453125,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",3.762734509296831],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",13.544194098639203],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412]],"memory":[[5424880,13404832]],"mixsample":[[0.30322265625,"ival-sub",1200],[2.06201171875,"adjust",800],[3.224365234375,"ival-div",0],[0.012939453125,"ival-sub",4800],[0.0947265625,"ival-mult",1200],[0.134033203125,"ival-sub",1600],[0.12353515625,"ival-assert",0],[0.44482421875,"ival-sqrt",1200],[1.53564453125,"ival-sub",0],[0.022216796875,"ival-sqrt",4800],[2.153564453125,"ival-sqrt",0],[0.166015625,"ival-sub",400],[2.170654296875,"ival-add",0],[0.198486328125,"ival-mult",800],[0.025146484375,"ival-sub",4400],[0.166259765625,"ival-sub",800],[0.091796875,"ival-mult",1600],[0.135986328125,"adjust",2800],[0.01806640625,"ival-sub",4000],[0.257080078125,"ival-sqrt",400],[0.20556640625,"ival-sqrt",2000],[0.091064453125,"ival-sub",2000],[0.27392578125,"ival-sqrt",800],[0.06298828125,"ival-sqrt",4000],[0.14599609375,"ival-sqrt",4400],[0.881591796875,"adjust",2000],[0.093017578125,"ival-sub",2400],[6.026123046875,"ival-mult",0],[0.23583984375,"ival-mult",400],[0.291015625,"ival-sqrt",1600],[0.27392578125,"ival-true",0],[0.240966796875,"ival-sqrt",2400],[1.406494140625,"ival-neg",0]],"outcomes":[[6.81640625,1,"valid",40],[9.90283203125,2,"valid",38],[3.5185546875,3,"valid",8],[17.717529296875,0,"valid",170]],"time":48.987060546875,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-683168,7143248]],"outputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[2.6689453125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[2.932861328125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[2.384033203125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[1.169921875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[3.491943359375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[1.751953125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[2.880126953125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[2.317138671875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[1.508056640625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":23.006103515625,"type":"series"},{"count":[[98,0]],"inputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[188448,10318032]],"method":["egg-herbie"],"outputs":[[]],"time":124.001953125,"type":"simplify"},{"count":[[5,75]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[1778832,17751168]],"outputs":[["(neg.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(+.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(+.f64 #s(literal 0 binary64) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(-.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64)) b_2)","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(-.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(neg.f64 (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (/.f64 #s(literal 16 binary64) a) b_2))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (/.f64 #s(literal 16 binary64) a)) (*.f64 b_2 (/.f64 #s(literal 16 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) b_2) (*.f64 (/.f64 #s(literal 16 binary64) a) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (*.f64 b_2 (/.f64 #s(literal 16 binary64) a)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (/.f64 #s(literal 16 binary64) a)))","(-.f64 (/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) a) (/.f64 b_2 a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a)))","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","b_2","(neg.f64 b_2)","(+.f64 b_2 #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 16 binary64))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 16 binary64) b_2)","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 16 binary64) b_2))","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 b_2 (*.f64 (*.f64 b_2 b_2) b_2))","(neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(+.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)) (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c) (*.f64 (*.f64 b_2 b_2) b_2)))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (neg.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2))))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)) (/.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 #s(literal 16 binary64) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))"]],"time":464.532958984375,"type":"rewrite"},{"compiler":[[1427,255]],"memory":[[-502112,7263280]],"time":10.067138671875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","fresh",57.77272069036344,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","fresh",62.935080920221004,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","next",61.76405774016938,"binary64"],["(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",42.23580022737288,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","fresh",60.46896864294337,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) a)","fresh",55.16381131418348,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",47.456835676830984,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",28.678957412114354,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)))) a)","fresh",45.66849911798944,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","fresh",43.57452240767065,"binary64"],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","fresh",42.67833923804912,"binary64"],["(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","next",55.401811505033244,"binary64"],["(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","fresh",61.76638690872936,"binary64"],["(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","next",57.77272069036344,"binary64"],["(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","fresh",61.76638690872936,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","next",58.97716790392457,"binary64"]],"compiler":[[12,8],[34,16],[12,8],[18,11],[26,14],[18,9],[31,16],[13,10],[25,12],[15,11],[12,9],[21,8],[14,10],[14,10],[14,10],[15,11],[12,8],[34,16],[12,8],[18,11],[26,14],[18,9],[31,16],[25,12],[15,11],[12,9],[21,8],[14,10],[14,10],[14,10],[15,11]],"count":[[76,16]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[75,15],"picked":[1,1]}],"memory":[[44288,9788016]],"min-error":[[22.43235578019839,"binary64"]],"time":15.123779296875,"type":"prune"},{"inputs":[["(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) b_2)","(*.f64 b_2 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 a c)","a","c","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","b_2","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","b_2","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))","#s(literal -1 binary64)","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)","(fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","b_2","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","b_2","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)"]],"locations":[["(fma.f64 c a (*.f64 b_2 b_2))","cost-diff",0],["(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","cost-diff",0],["(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","cost-diff",0],["(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","cost-diff",1],["(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))","cost-diff",0],["(fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","cost-diff",1],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","cost-diff",1],["(*.f64 a a)","cost-diff",0],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","cost-diff",0],["(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","cost-diff",1],["(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","cost-diff",2],["(*.f64 a a)","cost-diff",0],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","cost-diff",0],["(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","cost-diff",0],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","cost-diff",0],["(*.f64 (*.f64 b_2 b_2) b_2)","cost-diff",0],["(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","cost-diff",0],["(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",1]],"memory":[[-3595760,12717360]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)","(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) b_2)","(*.f64 b_2 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 a c)","a","c","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2)) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","b_2","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 a) a) (*.f64 c c))) a)","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 (*.f64 (neg.f64 a) a) (*.f64 c c))","b_2","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","a","(*.f64 c c)","c","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 (neg.f64 a) c)) a))","(/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))","(/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 (neg.f64 a) c)) a))","#s(literal -1 binary64)","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)","(*.f64 (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 (neg.f64 a) c)) a)","(fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","b_2","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(/.f64 (*.f64 (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c)) (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c))) a)","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c)) (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c)))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c))","b_2","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)"]],"time":341.80712890625,"type":"simplify"},{"compiler":[[310,35]],"locations":[["(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","accuracy",0.00390625],["(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",0.17578125],["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.2539034976055602],["(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","accuracy",5.018896580711692],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))","accuracy",0.22740868713985646],["(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)","accuracy",5.728135522904712],["(*.f64 a a)","accuracy",0.0],["(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","accuracy",6.931458525658978],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","accuracy",14.212436208977326],["(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","accuracy",17.908691461236053],["(*.f64 a a)","accuracy",0.0],["(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","accuracy",0.015625],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","accuracy",3.5790525197398466],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","accuracy",14.212436208977326],["(*.f64 (*.f64 b_2 b_2) b_2)","accuracy",0.09765625],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",2.469775259804325],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412]],"memory":[[-207424,48377664]],"mixsample":[[0.221435546875,"ival-add",1200],[11.6171875,"adjust",800],[13.559326171875,"ival-div",0],[0.007080078125,"ival-add",4800],[0.057861328125,"ival-mult",1200],[0.0068359375,"ival-div",400],[0.01904296875,"ival-mult",2000],[0.14990234375,"ival-assert",0],[4.934814453125,"ival-sub",0],[0.005126953125,"ival-sub",400],[2.96875,"ival-sqrt",0],[0.020263671875,"ival-add",3600],[0.043212890625,"ival-add",4000],[6.81005859375,"adjust",2000],[0.46826171875,"ival-mult",800],[11.5478515625,"ival-add",0],[0.443603515625,"ival-add",1600],[0.62939453125,"ival-mult",400],[25.923583984375,"ival-mult",0],[0.076171875,"ival-mult",1600],[0.195556640625,"ival-add",2000],[0.27001953125,"ival-add",400],[1.45458984375,"adjust",2800],[0.333984375,"ival-true",0],[0.108154296875,"ival-add",2400],[0.251708984375,"ival-add",800],[0.255859375,"exact",0],[0.0361328125,"ival-add",4400],[2.59619140625,"ival-neg",0]],"outcomes":[[28.017578125,1,"valid",55],[55.14013671875,2,"valid",78],[19.136962890625,3,"valid",21],[29.9248046875,0,"valid",102]],"time":169.31201171875,"type":"localize"},{"count":[[21,230]],"inputs":[["(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) b_2)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 c a (*.f64 b_2 b_2))","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(neg.f64 a)"]],"memory":[[4671648,20176544]],"outputs":[["(+ b_2 (pow b_2 4))","(+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 4)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 4)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 4)))","(/ (+ b_2 (pow b_2 4)) a)","(/ (+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 4))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 4))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 4))) a)","(* 2 (/ b_2 a))","(/ (+ (* 2 b_2) (* (pow a 2) (pow c 2))) a)","(* 2 b_2)","(+ (* 2 b_2) (* (pow a 2) (pow c 2)))","b_2","(+ b_2 (* (pow a 2) (pow c 2)))","(pow a 2)","(* -1 (* (pow a 2) (pow c 2)))","(* a (pow c 2))","(/ 1/2 (* a (pow b_2 2)))","(/ (+ (* 1/4 (/ (* a c) (pow b_2 4))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (+ (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 6))) (* -1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (+ (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 8))) (* -1/8 (/ (pow c 2) (pow b_2 6))))) (* -1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(* 2 (pow b_2 2))","(+ (* -1 (* a c)) (* 2 (pow b_2 2)))","(/ -1/2 (* a (pow b_2 2)))","(/ (- (* -1/4 (/ (* a c) (pow b_2 4))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (- (* a (- (* -1/8 (/ (* a (pow c 2)) (pow b_2 6))) (* 1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (- (* a (- (* a (- (* -1/16 (/ (* a (pow c 3)) (pow b_2 8))) (* 1/8 (/ (pow c 2) (pow b_2 6))))) (* 1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(* 2 (* a (pow b_2 2)))","(* a (+ (* -1 (* a c)) (* 2 (pow b_2 2))))","(+ (* 2 (pow b_2 2)) (* a c))","(* 4 (/ (pow b_2 4) a))","(/ (+ (* 4 (* a (* (pow b_2 2) c))) (* 4 (pow b_2 4))) a)","(/ (+ (* 4 (pow b_2 4)) (* a (+ (* 4 (* (pow b_2 2) c)) (* a (pow c 2))))) a)","(* 4 (pow b_2 4))","(+ (* 4 (* a (* (pow b_2 2) c))) (* 4 (pow b_2 4)))","(+ (* 4 (pow b_2 4)) (* a (+ (* 4 (* (pow b_2 2) c)) (* a (pow c 2)))))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 a)","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))))","(* a (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(/ -1 (* (pow a 2) c))","(/ (- (* -2 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) (pow a 2))","(/ (- (* -4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c))) (pow a 2))","(/ (- (* -8 (/ (pow b_2 6) (* (pow a 3) (pow c 4)))) (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (+ (* 4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (/ 1 c)))) (pow a 2))","(* -1 (* a c))","(* a (+ (* -1 c) (* 2 (/ (pow b_2 2) a))))","(/ 1 (* (pow a 2) c))","(/ (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) (pow a 2))","(/ (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (+ (* 4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (/ 1 c))) (pow a 2))","(/ (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (+ (* 4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (+ (* 8 (/ (pow b_2 6) (* (pow a 3) (pow c 4)))) (/ 1 c)))) (pow a 2))","(* -1 (* (pow a 2) c))","(* (pow a 2) (+ (* -1 c) (* 2 (/ (pow b_2 2) a))))","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* a (+ (* 4 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* a (+ (* 4 (/ (* (pow b_2 2) c) a)) (+ (* 4 (/ (pow b_2 4) (pow a 2))) (pow c 2))))","(* (pow a 2) (+ (* 4 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* (pow a 2) (+ (* 4 (/ (* (pow b_2 2) c) a)) (+ (* 4 (/ (pow b_2 4) (pow a 2))) (pow c 2))))","(* a (+ c (/ (pow b_2 2) a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ (pow b_2 4) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ (pow b_2 4) a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (pow b_2 4)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a)) (* -1 (pow b_2 4))) a)))","(* -1 (* a (+ (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2)))))","(/ (- (* -1 (/ (+ (* 2 (/ (pow b_2 2) (pow c 2))) (* 4 (/ (pow b_2 4) (* a (pow c 3))))) a)) (/ 1 c)) (pow a 2))","(/ (- (* -1 (/ (+ (* -1 (/ (+ (* -8 (/ (pow b_2 6) (* a (pow c 4)))) (* -4 (/ (pow b_2 4) (pow c 3)))) a)) (* 2 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(* -1 (* a (+ c (* -2 (/ (pow b_2 2) a)))))","(/ (+ (* -1 (/ (- (* -4 (/ (pow b_2 4) (* a (pow c 3)))) (* 2 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (* 8 (/ (pow b_2 6) (* a (pow c 4)))) (* -4 (/ (pow b_2 4) (pow c 3)))) a)) (* 2 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -4 (/ (* (pow b_2 2) c) a)) (* -1 (pow c 2)))))","(* -1 (* a (+ (* -1 (/ (+ (* 4 (* (pow b_2 2) c)) (* 4 (/ (pow b_2 4) a))) a)) (* -1 (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -4 (* (pow b_2 2) c)) (* -4 (/ (pow b_2 4) a))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ 1 (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ 1 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5))))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (/ 1 a))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (/ 1 a)))))))","(pow b_2 4)","(pow b_2 3)","(+ (* 2 (/ b_2 a)) (* a (pow c 2)))","(- (* -2 (/ (pow b_2 2) (* (pow a 3) (pow c 2)))) (/ 1 (* (pow a 2) c)))","(- (* (pow b_2 2) (- (* -4 (/ (pow b_2 2) (* (pow a 4) (pow c 3)))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- (* -8 (/ (pow b_2 2) (* (pow a 5) (pow c 4)))) (* 4 (/ 1 (* (pow a 4) (pow c 3)))))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(+ (* 2 (/ (pow b_2 2) (* (pow a 3) (pow c 2)))) (/ 1 (* (pow a 2) c)))","(+ (* (pow b_2 2) (+ (* 4 (/ (pow b_2 2) (* (pow a 4) (pow c 3)))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(+ (* (pow b_2 2) (+ (* (pow b_2 2) (+ (* 8 (/ (pow b_2 2) (* (pow a 5) (pow c 4)))) (* 4 (/ 1 (* (pow a 4) (pow c 3)))))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(+ (* -1 (* (pow a 2) c)) (* 2 (* a (pow b_2 2))))","(+ (* 4 (* (pow b_2 2) c)) (* a (pow c 2)))","(+ (* a (pow c 2)) (* (pow b_2 2) (+ (* 4 c) (* 4 (/ (pow b_2 2) a)))))","(+ (* 4 (* a (* (pow b_2 2) c))) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b_2 2) (+ (* 4 (* a c)) (* 4 (pow b_2 2)))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* (pow b_2 4) (+ 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 5))) (/ 1 (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 5))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 7))) (/ 1 (pow b_2 3))))))","(/ (pow b_2 4) a)","(* (pow b_2 4) (+ (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (+ (* -1/2 (/ c (pow b_2 5))) (+ (/ 1 a) (/ 1 (* a (pow b_2 3))))))","(* (pow b_2 4) (+ (* -1/2 (/ c (pow b_2 5))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 7))) (+ (/ 1 a) (/ 1 (* a (pow b_2 3)))))))","(* b_2 (+ (* 2 (/ 1 a)) (/ (* a (pow c 2)) b_2)))","(* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(/ (+ (* 1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a))) (pow b_2 2))","(/ (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ 1 a))) (* -1/4 (/ c (pow b_2 2)))) (pow b_2 2))","(/ (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 1/2 (/ 1 a))) (+ (* -1/4 (/ c (pow b_2 2))) (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))))) (pow b_2 2))","(* (pow b_2 2) (+ 2 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (- (* -1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a))) (pow b_2 2))","(/ (- (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a)))) (pow b_2 2))","(/ (- (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a))))) (pow b_2 2))","(* (pow b_2 2) (+ (* -1 (/ (* (pow a 2) c) (pow b_2 2))) (* 2 a)))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* (pow b_2 4) (+ (* 4 (/ c (pow b_2 2))) (* 4 (/ 1 a))))","(* (pow b_2 4) (+ (* 4 (/ c (pow b_2 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b_2 4)))))","(* (pow b_2 4) (+ 4 (* 4 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (+ 4 (+ (* 4 (/ (* a c) (pow b_2 2))) (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (- 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (+ 1 (* -1 (/ (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))) (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (* -1 (/ (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))) (pow b_2 3)))))","(* (pow b_2 4) (- (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a)) (pow b_2 3))) (/ 1 a)))","(* (pow b_2 4) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a))) (pow b_2 3))) (/ 1 a)))","(* -1 (* b_2 (- (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))) (pow b_2 4)))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))) (pow b_2 4)))","(+ (* -1/2 (/ c b_2)) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* 1/4 (/ c (pow b_2 4))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(+ (* c (+ (* 1/8 (/ (* a c) (pow b_2 6))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(+ (* c (+ (* c (- (* 1/16 (/ (* (pow a 2) c) (pow b_2 8))) (* -1/8 (/ a (pow b_2 6))))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(- (* -1/4 (/ c (pow b_2 4))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(- (* c (- (* -1/8 (/ (* a c) (pow b_2 6))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(- (* c (- (* c (- (* -1/16 (/ (* (pow a 2) c) (pow b_2 8))) (* 1/8 (/ a (pow b_2 6))))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(+ (* 4 (* (pow b_2 2) c)) (* 4 (/ (pow b_2 4) a)))","(+ (* 4 (/ (pow b_2 4) a)) (* c (+ (* 4 (pow b_2 2)) (* a c))))","(+ (* 4 (pow b_2 4)) (* c (+ (* 4 (* a (pow b_2 2))) (* (pow a 2) c))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 4) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 4) c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 4) c)))))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 4) (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 4) (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 4) (* a c))))))","(* (pow c 2) (+ a (* 2 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ (* 2 (/ b_2 (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(/ (- (* -2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c)","(/ (- (* -4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2)))) c)","(/ (- (* -8 (/ (pow b_2 6) (* (pow a 5) (pow c 3)))) (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (+ (* 4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (/ 1 (pow a 2))))) c)","(* c (+ (* -1 a) (* 2 (/ (pow b_2 2) c))))","(/ (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c)","(/ (- (+ (* 4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (/ 1 (pow a 2))) (* -2 (/ (pow b_2 2) (* (pow a 3) c)))) c)","(/ (- (+ (* 8 (/ (pow b_2 6) (* (pow a 5) (pow c 3)))) (/ 1 (pow a 2))) (+ (* -4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (* -2 (/ (pow b_2 2) (* (pow a 3) c))))) c)","(* c (+ (* -1 (pow a 2)) (* 2 (/ (* a (pow b_2 2)) c))))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (* 4 (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (+ (* 4 (/ (pow b_2 2) c)) (* 4 (/ (pow b_2 4) (* a (pow c 2)))))))","(* (pow c 2) (+ (* 4 (/ (* a (pow b_2 2)) c)) (pow a 2)))","(* (pow c 2) (+ (* 4 (/ (* a (pow b_2 2)) c)) (+ (* 4 (/ (pow b_2 4) (pow c 2))) (pow a 2))))","(* c (+ a (/ (pow b_2 2) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (/ (pow b_2 4) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (pow b_2 4) (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ (pow b_2 4) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (- (* -4 (/ (pow b_2 4) (* (pow a 4) c))) (* 2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 8 (/ (pow b_2 6) (* (pow a 5) c))) (* -4 (/ (pow b_2 4) (pow a 4)))) c)) (* 2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (* c (+ a (* -2 (/ (pow b_2 2) c)))))","(* -1 (/ (- (* -2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))","(* -1 (/ (- (* -1 (/ (- (* 4 (/ (pow b_2 4) (* (pow a 4) c))) (* -2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -8 (/ (pow b_2 6) (* (pow a 5) c))) (* 4 (/ (pow b_2 4) (pow a 4)))) c)) (* -2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (* c (+ (* -2 (/ (* a (pow b_2 2)) c)) (pow a 2))))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(* (pow c 2) (+ a (* -1 (/ (+ (* -4 (/ (pow b_2 4) (* a c))) (* -4 (pow b_2 2))) c))))","(* (pow c 2) (+ (* -1 (/ (+ (* -4 (* a (pow b_2 2))) (* -4 (/ (pow b_2 4) c))) c)) (pow a 2)))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[8.451171875,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","c","-inf"],[7.368896484375,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","c","inf"],[3.7451171875,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","c","0"],[4.072021484375,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","b_2","-inf"],[5.166015625,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","b_2","inf"],[7.364013671875,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","b_2","0"],[7.0419921875,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","a","-inf"],[9.078857421875,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","a","inf"],[4.893798828125,"((+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* (* (* b_2 b_2) b_2) b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (* (* b_2 b_2) b_2) b_2) (* (* b_2 b_2) b_2) (/ (+ (+ (* (* a a) (* c c)) b_2) b_2) a) (+ (+ (* (* a a) (* c c)) b_2) b_2) (+ (* (* a a) (* c c)) b_2) (* a a) (- b_2 (+ (* (* a a) (* c c)) b_2)) (* (- b_2 (+ (* (* a a) (* c c)) b_2)) (/ -1 a)) (neg (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a))) (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) (/ -1 (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a)) (* (+ (* b_2 b_2) (+ (* (neg a) c) (* b_2 b_2))) a) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) a) (* (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (neg a))","a","0"]],"time":61.743896484375,"type":"series"},{"count":[[230,0]],"inputs":[["(+ b_2 (pow b_2 4))","(+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 4)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 4)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 4)))","(/ (+ b_2 (pow b_2 4)) a)","(/ (+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 4))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 4))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 4))) a)","(* 2 (/ b_2 a))","(/ (+ (* 2 b_2) (* (pow a 2) (pow c 2))) a)","(* 2 b_2)","(+ (* 2 b_2) (* (pow a 2) (pow c 2)))","b_2","(+ b_2 (* (pow a 2) (pow c 2)))","(pow a 2)","(* -1 (* (pow a 2) (pow c 2)))","(* a (pow c 2))","(/ 1/2 (* a (pow b_2 2)))","(/ (+ (* 1/4 (/ (* a c) (pow b_2 4))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (+ (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 6))) (* -1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (+ (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 8))) (* -1/8 (/ (pow c 2) (pow b_2 6))))) (* -1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(* 2 (pow b_2 2))","(+ (* -1 (* a c)) (* 2 (pow b_2 2)))","(/ -1/2 (* a (pow b_2 2)))","(/ (- (* -1/4 (/ (* a c) (pow b_2 4))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (- (* a (- (* -1/8 (/ (* a (pow c 2)) (pow b_2 6))) (* 1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(/ (- (* a (- (* a (- (* -1/16 (/ (* a (pow c 3)) (pow b_2 8))) (* 1/8 (/ (pow c 2) (pow b_2 6))))) (* 1/4 (/ c (pow b_2 4))))) (* 1/2 (/ 1 (pow b_2 2)))) a)","(* 2 (* a (pow b_2 2)))","(* a (+ (* -1 (* a c)) (* 2 (pow b_2 2))))","(+ (* 2 (pow b_2 2)) (* a c))","(* 4 (/ (pow b_2 4) a))","(/ (+ (* 4 (* a (* (pow b_2 2) c))) (* 4 (pow b_2 4))) a)","(/ (+ (* 4 (pow b_2 4)) (* a (+ (* 4 (* (pow b_2 2) c)) (* a (pow c 2))))) a)","(* 4 (pow b_2 4))","(+ (* 4 (* a (* (pow b_2 2) c))) (* 4 (pow b_2 4)))","(+ (* 4 (pow b_2 4)) (* a (+ (* 4 (* (pow b_2 2) c)) (* a (pow c 2)))))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 a)","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 4) a))))","(* a (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* 2 (/ b_2 (pow a 2))) (pow c 2)))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(/ -1 (* (pow a 2) c))","(/ (- (* -2 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) (pow a 2))","(/ (- (* -4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c))) (pow a 2))","(/ (- (* -8 (/ (pow b_2 6) (* (pow a 3) (pow c 4)))) (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (+ (* 4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (/ 1 c)))) (pow a 2))","(* -1 (* a c))","(* a (+ (* -1 c) (* 2 (/ (pow b_2 2) a))))","(/ 1 (* (pow a 2) c))","(/ (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) (pow a 2))","(/ (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (+ (* 4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (/ 1 c))) (pow a 2))","(/ (+ (* 2 (/ (pow b_2 2) (* a (pow c 2)))) (+ (* 4 (/ (pow b_2 4) (* (pow a 2) (pow c 3)))) (+ (* 8 (/ (pow b_2 6) (* (pow a 3) (pow c 4)))) (/ 1 c)))) (pow a 2))","(* -1 (* (pow a 2) c))","(* (pow a 2) (+ (* -1 c) (* 2 (/ (pow b_2 2) a))))","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* a (+ (* 4 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* a (+ (* 4 (/ (* (pow b_2 2) c) a)) (+ (* 4 (/ (pow b_2 4) (pow a 2))) (pow c 2))))","(* (pow a 2) (+ (* 4 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* (pow a 2) (+ (* 4 (/ (* (pow b_2 2) c) a)) (+ (* 4 (/ (pow b_2 4) (pow a 2))) (pow c 2))))","(* a (+ c (/ (pow b_2 2) a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ (pow b_2 4) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (pow b_2 4)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ (pow b_2 4) a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (pow b_2 4)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a)) (* -1 (pow b_2 4))) a)))","(* -1 (* a (+ (* -2 (/ b_2 (pow a 2))) (* -1 (pow c 2)))))","(/ (- (* -1 (/ (+ (* 2 (/ (pow b_2 2) (pow c 2))) (* 4 (/ (pow b_2 4) (* a (pow c 3))))) a)) (/ 1 c)) (pow a 2))","(/ (- (* -1 (/ (+ (* -1 (/ (+ (* -8 (/ (pow b_2 6) (* a (pow c 4)))) (* -4 (/ (pow b_2 4) (pow c 3)))) a)) (* 2 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(* -1 (* a (+ c (* -2 (/ (pow b_2 2) a)))))","(/ (+ (* -1 (/ (- (* -4 (/ (pow b_2 4) (* a (pow c 3)))) (* 2 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(/ (+ (* -1 (/ (- (* -1 (/ (- (* 8 (/ (pow b_2 6) (* a (pow c 4)))) (* -4 (/ (pow b_2 4) (pow c 3)))) a)) (* 2 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -4 (/ (* (pow b_2 2) c) a)) (* -1 (pow c 2)))))","(* -1 (* a (+ (* -1 (/ (+ (* 4 (* (pow b_2 2) c)) (* 4 (/ (pow b_2 4) a))) a)) (* -1 (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -4 (* (pow b_2 2) c)) (* -4 (/ (pow b_2 4) a))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ 1 (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ 1 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5))))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (/ 1 a))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (/ 1 a)))))))","(pow b_2 4)","(pow b_2 3)","(+ (* 2 (/ b_2 a)) (* a (pow c 2)))","(- (* -2 (/ (pow b_2 2) (* (pow a 3) (pow c 2)))) (/ 1 (* (pow a 2) c)))","(- (* (pow b_2 2) (- (* -4 (/ (pow b_2 2) (* (pow a 4) (pow c 3)))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- (* -8 (/ (pow b_2 2) (* (pow a 5) (pow c 4)))) (* 4 (/ 1 (* (pow a 4) (pow c 3)))))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(+ (* 2 (/ (pow b_2 2) (* (pow a 3) (pow c 2)))) (/ 1 (* (pow a 2) c)))","(+ (* (pow b_2 2) (+ (* 4 (/ (pow b_2 2) (* (pow a 4) (pow c 3)))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(+ (* (pow b_2 2) (+ (* (pow b_2 2) (+ (* 8 (/ (pow b_2 2) (* (pow a 5) (pow c 4)))) (* 4 (/ 1 (* (pow a 4) (pow c 3)))))) (* 2 (/ 1 (* (pow a 3) (pow c 2)))))) (/ 1 (* (pow a 2) c)))","(+ (* -1 (* (pow a 2) c)) (* 2 (* a (pow b_2 2))))","(+ (* 4 (* (pow b_2 2) c)) (* a (pow c 2)))","(+ (* a (pow c 2)) (* (pow b_2 2) (+ (* 4 c) (* 4 (/ (pow b_2 2) a)))))","(+ (* 4 (* a (* (pow b_2 2) c))) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b_2 2) (+ (* 4 (* a c)) (* 4 (pow b_2 2)))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* (pow b_2 4) (+ 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 5))) (/ 1 (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 5))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 7))) (/ 1 (pow b_2 3))))))","(/ (pow b_2 4) a)","(* (pow b_2 4) (+ (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (+ (* -1/2 (/ c (pow b_2 5))) (+ (/ 1 a) (/ 1 (* a (pow b_2 3))))))","(* (pow b_2 4) (+ (* -1/2 (/ c (pow b_2 5))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 7))) (+ (/ 1 a) (/ 1 (* a (pow b_2 3)))))))","(* b_2 (+ (* 2 (/ 1 a)) (/ (* a (pow c 2)) b_2)))","(* b_2 (+ 2 (/ (* (pow a 2) (pow c 2)) b_2)))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(/ (+ (* 1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a))) (pow b_2 2))","(/ (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ 1 a))) (* -1/4 (/ c (pow b_2 2)))) (pow b_2 2))","(/ (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 1/2 (/ 1 a))) (+ (* -1/4 (/ c (pow b_2 2))) (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))))) (pow b_2 2))","(* (pow b_2 2) (+ 2 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (- (* -1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a))) (pow b_2 2))","(/ (- (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a)))) (pow b_2 2))","(/ (- (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* 1/4 (/ c (pow b_2 2))) (* 1/2 (/ 1 a))))) (pow b_2 2))","(* (pow b_2 2) (+ (* -1 (/ (* (pow a 2) c) (pow b_2 2))) (* 2 a)))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* (pow b_2 4) (+ (* 4 (/ c (pow b_2 2))) (* 4 (/ 1 a))))","(* (pow b_2 4) (+ (* 4 (/ c (pow b_2 2))) (+ (* 4 (/ 1 a)) (/ (* a (pow c 2)) (pow b_2 4)))))","(* (pow b_2 4) (+ 4 (* 4 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (+ 4 (+ (* 4 (/ (* a c) (pow b_2 2))) (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (- 1 (/ 1 (pow b_2 3))))","(* (pow b_2 4) (+ 1 (* -1 (/ (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))) (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (* -1 (/ (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))) (pow b_2 3)))))","(* (pow b_2 4) (- (/ 1 a) (/ 1 (* a (pow b_2 3)))))","(* (pow b_2 4) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a)) (pow b_2 3))) (/ 1 a)))","(* (pow b_2 4) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a))) (pow b_2 3))) (/ 1 a)))","(* -1 (* b_2 (- (* -1 (/ (* a (pow c 2)) b_2)) (* 2 (/ 1 a)))))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))) (pow b_2 4)))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))) (pow b_2 4)))","(+ (* -1/2 (/ c b_2)) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* 1/4 (/ c (pow b_2 4))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(+ (* c (+ (* 1/8 (/ (* a c) (pow b_2 6))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(+ (* c (+ (* c (- (* 1/16 (/ (* (pow a 2) c) (pow b_2 8))) (* -1/8 (/ a (pow b_2 6))))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(- (* -1/4 (/ c (pow b_2 4))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(- (* c (- (* -1/8 (/ (* a c) (pow b_2 6))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(- (* c (- (* c (- (* -1/16 (/ (* (pow a 2) c) (pow b_2 8))) (* 1/8 (/ a (pow b_2 6))))) (* 1/4 (/ 1 (pow b_2 4))))) (* 1/2 (/ 1 (* a (pow b_2 2)))))","(+ (* 4 (* (pow b_2 2) c)) (* 4 (/ (pow b_2 4) a)))","(+ (* 4 (/ (pow b_2 4) a)) (* c (+ (* 4 (pow b_2 2)) (* a c))))","(+ (* 4 (pow b_2 4)) (* c (+ (* 4 (* a (pow b_2 2))) (* (pow a 2) c))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 4) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 4) c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 4) c)))))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 4) (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 4) (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 4) (* a c))))))","(* (pow c 2) (+ a (* 2 (/ b_2 (* a (pow c 2))))))","(* (pow c 2) (+ (* 2 (/ b_2 (pow c 2))) (pow a 2)))","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(/ (- (* -2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c)","(/ (- (* -4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2)))) c)","(/ (- (* -8 (/ (pow b_2 6) (* (pow a 5) (pow c 3)))) (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (+ (* 4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (/ 1 (pow a 2))))) c)","(* c (+ (* -1 a) (* 2 (/ (pow b_2 2) c))))","(/ (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c)","(/ (- (+ (* 4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (/ 1 (pow a 2))) (* -2 (/ (pow b_2 2) (* (pow a 3) c)))) c)","(/ (- (+ (* 8 (/ (pow b_2 6) (* (pow a 5) (pow c 3)))) (/ 1 (pow a 2))) (+ (* -4 (/ (pow b_2 4) (* (pow a 4) (pow c 2)))) (* -2 (/ (pow b_2 2) (* (pow a 3) c))))) c)","(* c (+ (* -1 (pow a 2)) (* 2 (/ (* a (pow b_2 2)) c))))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (* 4 (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (+ (* 4 (/ (pow b_2 2) c)) (* 4 (/ (pow b_2 4) (* a (pow c 2)))))))","(* (pow c 2) (+ (* 4 (/ (* a (pow b_2 2)) c)) (pow a 2)))","(* (pow c 2) (+ (* 4 (/ (* a (pow b_2 2)) c)) (+ (* 4 (/ (pow b_2 4) (pow c 2))) (pow a 2))))","(* c (+ a (/ (pow b_2 2) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (/ (pow b_2 4) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (pow b_2 4)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (pow b_2 4) (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ (pow b_2 4) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ (pow b_2 4) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (- (* -4 (/ (pow b_2 4) (* (pow a 4) c))) (* 2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 8 (/ (pow b_2 6) (* (pow a 5) c))) (* -4 (/ (pow b_2 4) (pow a 4)))) c)) (* 2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (* c (+ a (* -2 (/ (pow b_2 2) c)))))","(* -1 (/ (- (* -2 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))","(* -1 (/ (- (* -1 (/ (- (* 4 (/ (pow b_2 4) (* (pow a 4) c))) (* -2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* -8 (/ (pow b_2 6) (* (pow a 5) c))) (* 4 (/ (pow b_2 4) (pow a 4)))) c)) (* -2 (/ (pow b_2 2) (pow a 3)))) c)) (/ 1 (pow a 2))) c))","(* -1 (* c (+ (* -2 (/ (* a (pow b_2 2)) c)) (pow a 2))))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(* (pow c 2) (+ a (* -1 (/ (+ (* -4 (/ (pow b_2 4) (* a c))) (* -4 (pow b_2 2))) c))))","(* (pow c 2) (+ (* -1 (/ (+ (* -4 (* a (pow b_2 2))) (* -4 (/ (pow b_2 4) c))) c)) (pow a 2)))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[4108336,11622288]],"method":["egg-herbie"],"outputs":[[]],"time":137.625,"type":"simplify"},{"count":[[21,303]],"inputs":[["(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2)","(*.f64 (*.f64 b_2 b_2) b_2)","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2)","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","(-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 c a (*.f64 b_2 b_2))","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(neg.f64 a)"]],"memory":[[-8776576,18664720]],"outputs":[["#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","(*.f64 b_2 b_2)","(*.f64 (*.f64 b_2 b_2) b_2)","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 b_2 (*.f64 b_2 b_2))","(*.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)))","(exp.f64 (log.f64 (*.f64 b_2 b_2)))","(pow.f64 b_2 #s(literal -1 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))","(pow.f64 (exp.f64 (log.f64 b_2)) #s(literal -1 binary64))","(*.f64 b_2 b_2)","(*.f64 (*.f64 b_2 b_2) b_2)","(*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))","(*.f64 b_2 (*.f64 b_2 b_2))","(*.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)))","(exp.f64 (log.f64 (*.f64 b_2 b_2)))","(pow.f64 b_2 #s(literal -1 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))","(pow.f64 (exp.f64 (log.f64 b_2)) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal -1/2 binary64)","#s(literal 1/8 binary64)","#s(literal 1/4 binary64)","#s(literal 28 binary64)","#s(literal 9/2 binary64)","#s(literal 3/4 binary64)","#s(literal 27 binary64)","#s(literal 1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 16 binary64)","#s(literal 12 binary64)","#s(literal 18 binary64)","#s(literal -3 binary64)","#s(literal -2 binary64)"]],"time":386.916015625,"type":"rewrite"},{"compiler":[[189,66]],"memory":[[2368336,2368336]],"time":3.239990234375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","fresh",57.77272069036344,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","next",62.935080920221004,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","done",61.76405774016938,"binary64"],["(/.f64 (+.f64 (pow.f64 b_2 #s(literal -1 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","fresh",52.39771626689566,"binary64"],["(/.f64 (+.f64 (*.f64 (*.f64 b_2 b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","fresh",49.077410306374155,"binary64"],["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",41.79409447514234,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","fresh",60.46896864294337,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) a)","fresh",55.16381131418348,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",47.456835676830984,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",28.678957412114354,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","fresh",43.57452240767065,"binary64"],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",42.67833923804912,"binary64"],["(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","done",55.401811505033244,"binary64"],["(/.f64 #s(literal 28 binary64) a)","next",60.58115090088185,"binary64"],["(/.f64 #s(literal 12 binary64) a)","fresh",60.575801558191245,"binary64"],["(/.f64 #s(literal 1/8 binary64) a)","fresh",60.613174341269435,"binary64"],["(/.f64 #s(literal -1/2 binary64) a)","fresh",62.57821644244857,"binary64"],["(/.f64 #s(literal -3 binary64) a)","next",62.581754901395286,"binary64"],["(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","fresh",61.76638690872936,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","done",58.97716790392457,"binary64"]],"compiler":[[12,8],[34,16],[12,8],[14,11],[16,10],[14,9],[26,14],[18,9],[31,16],[13,10],[15,11],[12,9],[21,8],[3,5],[3,5],[3,5],[3,5],[3,5],[14,10],[15,11],[12,8],[34,16],[14,11],[16,10],[14,9],[26,14],[18,9],[31,16],[15,11],[12,9],[3,5],[3,5],[3,5],[3,5],[3,5],[14,10]],"count":[[40,20]],"kept":[{"done":[1,1],"fresh":[10,8],"new":[24,8],"picked":[5,3]}],"memory":[[236624,8499296]],"min-error":[[22.258193960555616,"binary64"]],"time":13.64404296875,"type":"prune"},{"inputs":[["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(*.f64 b_2 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 a c)","a","c","(/.f64 #s(literal -3 binary64) a)","#s(literal -3 binary64)","a","(/.f64 #s(literal 28 binary64) a)","#s(literal 28 binary64)","a","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","b_2","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","(*.f64 c c)","(*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))"]],"locations":[["(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","cost-diff",0],["(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","cost-diff",0],["(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","cost-diff",1],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","cost-diff",0],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(/.f64 #s(literal 28 binary64) a)","cost-diff",0],["(/.f64 #s(literal -3 binary64) a)","cost-diff",0],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(*.f64 b_2 b_2)","cost-diff",0],["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",1]],"memory":[[3190064,12306784]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)","(+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 b_2 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 a c)","a","c","(/.f64 #s(literal -3 binary64) a)","#s(literal -3 binary64)","a","(/.f64 #s(literal 28 binary64) a)","#s(literal 28 binary64)","a","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)","(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 (fma.f64 (neg.f64 (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c))) (*.f64 b_2 b_2) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2)))) a)","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c))) (*.f64 b_2 b_2) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2))))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2)))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","b_2","(+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) (+.f64 b_2 b_2))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 a a)","(*.f64 c c)","(*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c)))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 b_2 (+.f64 b_2 b_2) (*.f64 a c))","(fma.f64 c a (*.f64 b_2 b_2))"]],"time":272.178955078125,"type":"simplify"},{"compiler":[[277,32]],"locations":[["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","accuracy",3.397094267923084],["(*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",3.643871231002537],["(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","accuracy",14.212436208977326],["(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","accuracy",25.425643965232506],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",2.9291171925642243],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",15.775165141019793],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412],["(/.f64 #s(literal 28 binary64) a)","accuracy",0.0],["(/.f64 #s(literal -3 binary64) a)","accuracy",0.0],["(+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",0.01171875],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.5976562500000001],["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",3.6377918797778745],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.029241595900412]],"memory":[[-1407696,39039584]],"mixsample":[[0.319091796875,"ival-sub",1200],[16.172119140625,"ival-div",0],[7.544677734375,"adjust",800],[0.34130859375,"ival-sqrt",2000],[0.197509765625,"ival-sub",1600],[0.43017578125,"ival-sqrt",800],[0.197021484375,"ival-sub",2000],[0.14208984375,"ival-assert",0],[0.02001953125,"ival-sqrt",4000],[0.010009765625,"ival-sub",3600],[3.267578125,"ival-sub",0],[0.572021484375,"ival-sqrt",1200],[0.164794921875,"ival-sub",400],[2.39453125,"ival-sqrt",0],[0.039306640625,"ival-sqrt",4400],[4.10009765625,"adjust",2000],[0.218505859375,"ival-sub",2400],[0.02783203125,"ival-sub",4400],[0.08203125,"ival-mult",800],[14.158203125,"ival-add",0],[0.13623046875,"ival-sqrt",1600],[0.2177734375,"ival-mult",400],[0.302978515625,"ival-sub",800],[16.274658203125,"ival-mult",0],[0.513916015625,"adjust",2800],[0.32177734375,"ival-true",0],[0.39013671875,"ival-sqrt",2400],[0.01513671875,"ival-sqrt",3600],[0.01416015625,"ival-sub",4000],[0.36474609375,"exact",0],[0.248779296875,"ival-sqrt",400],[1.31640625,"ival-neg",0]],"outcomes":[[22.189453125,1,"valid",42],[33.39599609375,2,"valid",46],[5.82275390625,3,"valid",5],[42.76416015625,0,"valid",163]],"time":133.801025390625,"type":"localize"},{"count":[[15,261]],"inputs":[["(+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(*.f64 b_2 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))"]],"memory":[[-1605392,13815376]],"outputs":[["(+ b_2 (pow b_2 2))","(+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 2)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 2)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 2)))","(/ (+ b_2 (pow b_2 2)) a)","(/ (+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 2))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 2))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 2))) a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ -3 a)","(/ 28 a)","(* 2 (/ b_2 a))","(/ (+ (* -1/2 (/ (* a c) b_2)) (* 2 b_2)) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))) a)","(* 2 b_2)","(+ (* -1/2 (/ (* a c) b_2)) (* 2 b_2))","(+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* 2 (pow b_2 2))","(+ (* 2 (pow b_2 2)) (* a c))","(/ (- (* 1/2 b_2) (* 2 (pow b_2 4))) a)","(/ (- (+ (* 1/2 b_2) (* a (- (* -1/2 (/ c b_2)) (* (pow b_2 2) c)))) (* 2 (pow b_2 4))) a)","(/ (- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* -1/4 (* a (pow c 2)))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4))) a)","(/ (- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/4 (pow c 2)) (* 1/4 (/ (* a (pow c 3)) (pow b_2 2)))))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4))) a)","(- (* 1/2 b_2) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* a (- (* -1/2 (/ c b_2)) (* (pow b_2 2) c)))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* -1/4 (* a (pow c 2)))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* a (- (* 1/4 (/ (* a (pow c 3)) (pow b_2 2))) (* 1/4 (pow c 2))))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4)))","(* 1/2 b_2)","(+ (* -1/2 (/ (* a c) b_2)) (* 1/2 b_2))","(+ (* 1/2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/4 (* a (pow c 2))))))","(+ (* 1/2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (- (* 1/4 (/ (* a (pow c 3)) (pow b_2 2))) (* 1/4 (pow c 2)))))))","(+ b_2 (* (pow a 2) (pow c 2)))","(* 2 (pow b_2 4))","(+ (* 2 (pow b_2 4)) (* a (* (pow b_2 2) c)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* -1 (* (pow b_2 2) c))","(+ (* -2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c)))","(- (+ (* -2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c))) (/ 1 (* (pow a 2) c)))","(- (+ (* -2 (/ (pow b_2 4) a)) (+ (* -1 (* (pow b_2 2) c)) (/ (pow b_2 2) (* (pow a 3) (pow c 2))))) (/ 1 (* (pow a 2) c)))","(* -1 (* a (* (pow b_2 2) c)))","(* a (- (* -2 (/ (pow b_2 4) a)) (* (pow b_2 2) c)))","(* a (- (* -1 (/ (+ (* 2 (pow b_2 4)) (/ 1 (* a c))) a)) (* (pow b_2 2) c)))","(* a (- (/ (pow b_2 2) (* (pow a 3) (pow c 2))) (+ (* 2 (/ (pow b_2 4) a)) (+ (* (pow b_2 2) c) (/ 1 (* (pow a 2) c))))))","(/ -1 (* a c))","(/ (- (/ (pow b_2 2) (* a (pow c 2))) (/ 1 c)) a)","(/ (- (+ (* 2 (/ b_2 (* (pow a 2) (pow c 3)))) (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) a)","(/ (- (+ (* -2 (/ (pow b_2 3) (* (pow a 3) (pow c 4)))) (/ (pow b_2 2) (* a (pow c 2)))) (+ (* -2 (/ b_2 (* (pow a 2) (pow c 3)))) (/ 1 c))) a)","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* a (* (pow b_2 2) c))","(* a (+ (* 2 (/ (pow b_2 4) a)) (* (pow b_2 2) c)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ (pow b_2 2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (pow b_2 2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ (pow b_2 2) a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (pow b_2 2)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a)) (* -1 (pow b_2 2))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (pow b_2 2) c)) (* -1 (/ (+ (* 2 (pow b_2 4)) (/ 1 (* a c))) a)))","(+ (* -1 (* (pow b_2 2) c)) (* -1 (/ (+ (* -1 (/ (- (/ (pow b_2 2) (* a (pow c 2))) (/ 1 c)) a)) (* 2 (pow b_2 4))) a)))","(* -1 (* a (- (* 2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c)))))","(* -1 (* a (- (+ (* 2 (/ (pow b_2 4) a)) (/ 1 (* (pow a 2) c))) (* -1 (* (pow b_2 2) c)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) a)) (* 2 (pow b_2 4))) a)) (* -1 (* (pow b_2 2) c)))))","(* -1 (/ (+ (* -1 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) a))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (/ b_2 (* a (pow c 3)))) (/ (pow b_2 2) (pow c 2))) a)) (/ 1 c)) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 2 (/ (pow b_2 3) (* a (pow c 4)))) (* 2 (/ b_2 (pow c 3)))) a)) (/ (pow b_2 2) (pow c 2))) a)) (/ 1 c)) a))","(* -1 (* a (+ (* -2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c)))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ 1 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ 1 (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5))))))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (/ 1 a))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (/ 1 a)))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))) (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* b_2 (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (+ (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ b_2 (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (+ 1 (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))) (* (sqrt (* a c)) (sqrt -1)))","(- (pow b_2 2) (* a c))","(/ -1 (* (pow a 2) c))","(- (* 2 (/ b_2 (* (pow a 4) (pow c 3)))) (/ 1 (* (pow a 2) c)))","(- (* b_2 (+ (* b_2 (- (/ 1 (* (pow a 3) (pow c 2))) (+ c (* 4 (/ 1 (* (pow a 6) (pow c 5))))))) (* 2 (/ 1 (* (pow a 4) (pow c 3)))))) (/ 1 (* (pow a 2) c)))","(- (* b_2 (+ (* b_2 (- (+ (* b_2 (- (* 8 (/ 1 (* (pow a 8) (pow c 7)))) (* 2 (/ 1 (* (pow a 5) (pow c 4)))))) (/ 1 (* (pow a 3) (pow c 2)))) (+ c (* 4 (/ 1 (* (pow a 6) (pow c 5))))))) (* 2 (/ 1 (* (pow a 4) (pow c 3)))))) (/ 1 (* (pow a 2) c)))","(- (* 2 (/ b_2 (* (pow a 3) (pow c 3)))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (/ 1 (* (pow a 2) (pow c 2))) (+ (* 4 (/ 1 (* (pow a 5) (pow c 5)))) (* a c)))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (+ (* b_2 (- (* 8 (/ 1 (* (pow a 7) (pow c 7)))) (* 2 (/ 1 (* (pow a 4) (pow c 4)))))) (/ 1 (* (pow a 2) (pow c 2)))) (+ (* 4 (/ 1 (* (pow a 5) (pow c 5)))) (* a c)))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (/ 1 (* (pow a 2) (pow c 2))) (* 4 (/ 1 (* (pow a 5) (pow c 5)))))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (+ (* -2 (/ (* b_2 (- (/ 1 (* (pow a 2) (pow c 2))) (* 4 (/ 1 (* (pow a 5) (pow c 5)))))) (* (pow a 2) (pow c 2)))) (/ 1 (* (pow a 2) (pow c 2)))) (* 4 (/ 1 (* (pow a 5) (pow c 5)))))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(* (pow b_2 2) (+ (* 2 (pow b_2 2)) (* a c)))","(* (pow b_2 2) (+ 1 (/ 1 b_2)))","(* (pow b_2 2) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 3))) (/ 1 b_2))))","(* (pow b_2 2) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 3))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 5))) (/ 1 b_2)))))","(/ (pow b_2 2) a)","(* (pow b_2 2) (+ (/ 1 a) (/ 1 (* a b_2))))","(* (pow b_2 2) (+ (* -1/2 (/ c (pow b_2 3))) (+ (/ 1 a) (/ 1 (* a b_2)))))","(* (pow b_2 2) (+ (* -1/2 (/ c (pow b_2 3))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 5))) (+ (/ 1 a) (/ 1 (* a b_2))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a)))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a))))))","(* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* -2 (/ (pow b_2 4) a))","(* (pow b_2 4) (- (* -1 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* (pow b_2 4) (- (+ (* -1 (/ c (pow b_2 2))) (/ 1/2 (* a (pow b_2 3)))) (* 2 (/ 1 a))))","(* (pow b_2 4) (- (+ (* -1 (/ c (pow b_2 2))) (+ (* -1/4 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ 1 (* a (pow b_2 3)))))) (* 2 (/ 1 a))))","(* -2 (pow b_2 4))","(* (pow b_2 4) (- (* -1 (/ (* a c) (pow b_2 2))) 2))","(* (pow b_2 4) (- (/ 1/2 (pow b_2 3)) (+ 2 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (- (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (/ 1/2 (pow b_2 3))) (+ 2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1/2 (* -1/4 (/ (* (pow a 2) (pow c 2)) b_2))))","(* b_2 (- (+ 1/2 (* -1/2 (/ (* a c) (pow b_2 2)))) (+ (* -1/8 (/ (* (pow a 4) (pow c 4)) (pow b_2 2))) (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)))))","(* b_2 (- (+ 1/2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (* (pow a 2) (* (pow c 2) (- (* -1/2 (* a c)) (* -1/8 (* (pow a 4) (pow c 4)))))) (pow b_2 3))))) (+ (* -1/8 (/ (* (pow a 4) (pow c 4)) (pow b_2 2))) (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)))))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* (pow b_2 4) (+ 2 (/ (* a c) (pow b_2 2))))","(* (pow b_2 2) (- 1 (/ 1 b_2)))","(* (pow b_2 2) (+ 1 (* -1 (/ (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))) b_2))))","(* (pow b_2 2) (+ 1 (* -1 (/ (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))) b_2))))","(* (pow b_2 2) (- (/ 1 a) (/ 1 (* a b_2))))","(* (pow b_2 2) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a)) b_2)) (/ 1 a)))","(* (pow b_2 2) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a))) b_2)) (/ 1 a)))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* 1/2 (/ c b_2))","(* -1 (/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2))","(* 1/2 (/ (* a c) b_2))","(* -1 (/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2))","(* -1 (/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2))","(* -1 (/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* (pow b_2 4) (- (+ (* -1 (/ c (pow b_2 2))) (* -1 (/ (- (* 1/4 (/ (* a (pow c 2)) b_2)) (* 1/2 (/ 1 a))) (pow b_2 3)))) (* 2 (/ 1 a))))","(* (pow b_2 4) (- (* -1 (/ (- (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)) 1/2) (pow b_2 3))) (+ 2 (/ (* a c) (pow b_2 2)))))","(* -1 (* b_2 (- (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)) 1/2)))","(* -1 (* b_2 (- (* -1 (/ (- (* -1 (/ (- (* 1/2 (* a c)) (* 1/8 (* (pow a 4) (pow c 4)))) b_2)) (* 1/4 (* (pow a 2) (pow c 2)))) b_2)) 1/2)))","(* -1 (* b_2 (- (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (* (pow a 2) (* (pow c 2) (- (* 1/2 (* a c)) (* 1/8 (* (pow a 4) (pow c 4)))))) b_2)) (* 1/2 (* a c))) (* 1/8 (* (pow a 4) (pow c 4)))) b_2)) (* 1/4 (* (pow a 2) (pow c 2)))) b_2)) 1/2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))) (pow b_2 2)))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))) (pow b_2 2)))","(+ (* -1/2 (/ c b_2)) (+ (/ b_2 a) (/ (pow b_2 2) a)))","(+ (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 2) a)))","(+ (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 2) a)))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* -1/2 (/ c b_2)) (* 2 (/ b_2 a)))","(+ (* 2 (/ b_2 a)) (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* 2 (/ b_2 a)) (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))))","(+ (* 2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ (* 2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(- (+ (* -1 (* c (+ (* 1/2 (/ 1 b_2)) (pow b_2 2)))) (* 1/2 (/ b_2 a))) (* 2 (/ (pow b_2 4) a)))","(- (+ (* 1/2 (/ b_2 a)) (* c (- (* -1/4 (* a c)) (+ (* 1/2 (/ 1 b_2)) (pow b_2 2))))) (* 2 (/ (pow b_2 4) a)))","(- (+ (* 1/2 (/ b_2 a)) (* c (- (* c (+ (* -1/4 a) (* 1/4 (/ (* (pow a 2) c) (pow b_2 2))))) (+ (* 1/2 (/ 1 b_2)) (pow b_2 2))))) (* 2 (/ (pow b_2 4) a)))","(- (+ (* 1/2 b_2) (* c (- (* -1/2 (/ a b_2)) (* a (pow b_2 2))))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* c (- (+ (* -1/2 (/ a b_2)) (* -1/4 (* (pow a 2) c))) (* a (pow b_2 2))))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* c (- (+ (* -1/2 (/ a b_2)) (* c (- (* 1/4 (/ (* (pow a 3) c) (pow b_2 2))) (* 1/4 (pow a 2))))) (* a (pow b_2 2))))) (* 2 (pow b_2 4)))","(+ (* 1/2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* -1/4 (* (pow a 2) c)))))","(+ (* 1/2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* c (- (* 1/4 (/ (* (pow a 3) c) (pow b_2 2))) (* 1/4 (pow a 2)))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 2) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 2) c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 2) c)))))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 2) (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 2) (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 2) (* a c))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(* c (+ (* -2 (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))))","(* c (- (+ (* -2 (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) (/ 1 (* (pow a 2) (pow c 2)))))","(* c (- (+ (* -2 (/ (pow b_2 4) (* a c))) (+ (* -1 (pow b_2 2)) (/ (pow b_2 2) (* (pow a 3) (pow c 3))))) (/ 1 (* (pow a 2) (pow c 2)))))","(* c (- (* -2 (/ (pow b_2 4) c)) (* a (pow b_2 2))))","(* c (- (* -1 (/ (+ (* 2 (pow b_2 4)) (/ 1 (* a c))) c)) (* a (pow b_2 2))))","(* c (- (/ (pow b_2 2) (* (pow a 2) (pow c 3))) (+ (* 2 (/ (pow b_2 4) c)) (+ (* a (pow b_2 2)) (/ 1 (* a (pow c 2)))))))","(/ (- (/ (pow b_2 2) (* (pow a 2) c)) (/ 1 a)) c)","(/ (- (+ (* 2 (/ b_2 (* (pow a 3) (pow c 2)))) (/ (pow b_2 2) (* (pow a 2) c))) (/ 1 a)) c)","(/ (- (+ (* -2 (/ (pow b_2 3) (* (pow a 4) (pow c 3)))) (/ (pow b_2 2) (* (pow a 2) c))) (+ (* -2 (/ b_2 (* (pow a 3) (pow c 2)))) (/ 1 a))) c)","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* c (+ (* 2 (/ (pow b_2 4) c)) (* a (pow b_2 2))))","(* -1 (* c (+ (* -1 (/ (pow b_2 2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (pow b_2 2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (pow b_2 2) (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ (pow b_2 2) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ (pow b_2 2) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* 2 (/ (pow b_2 4) (* a c))) (pow b_2 2))))","(* -1 (* c (+ (* -1 (/ (- (* -2 (/ (pow b_2 4) a)) (/ 1 (* (pow a 2) c))) c)) (pow b_2 2))))","(* -1 (* c (+ (* -1 (/ (+ (* -2 (/ (pow b_2 4) a)) (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))) c)) (pow b_2 2))))","(* -1 (* c (- (* 2 (/ (pow b_2 4) c)) (* -1 (* a (pow b_2 2))))))","(* -1 (* c (- (+ (* 2 (/ (pow b_2 4) c)) (/ 1 (* a (pow c 2)))) (* -1 (* a (pow b_2 2))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 2) c))) (/ 1 a)) c)) (* 2 (pow b_2 4))) c)) (* -1 (* a (pow b_2 2))))))","(* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 2) c))) (/ 1 a)) c))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (/ b_2 (* (pow a 3) c))) (/ (pow b_2 2) (pow a 2))) c)) (/ 1 a)) c))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 2 (/ (pow b_2 3) (* (pow a 4) c))) (* 2 (/ b_2 (pow a 3)))) c)) (/ (pow b_2 2) (pow a 2))) c)) (/ 1 a)) c))","(* -1 (* c (+ (* -2 (/ (pow b_2 4) c)) (* -1 (* a (pow b_2 2))))))"]],"series":[[3.64697265625,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","c","-inf"],[3.573974609375,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","c","inf"],[2.369873046875,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","c","0"],[3.1669921875,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","b_2","-inf"],[3.81201171875,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","b_2","inf"],[4.577880859375,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","b_2","0"],[6.998046875,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","a","-inf"],[4.203125,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","a","inf"],[3.406005859375,"((+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ -3 a) (/ 28 a) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (/ (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) a) (- (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))))) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ b_2 (+ (* (* a a) (* c c)) b_2))) (+ (* (* a a) (* c c)) b_2) (* (* b_2 b_2) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2)))))","a","0"]],"time":42.93701171875,"type":"series"},{"count":[[261,0]],"inputs":[["(+ b_2 (pow b_2 2))","(+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 2)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 2)))","(+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 2)))","(/ (+ b_2 (pow b_2 2)) a)","(/ (+ b_2 (+ (* -1/2 (/ (* a c) b_2)) (pow b_2 2))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))) (pow b_2 2))) a)","(/ (+ b_2 (+ (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))) (pow b_2 2))) a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ -3 a)","(/ 28 a)","(* 2 (/ b_2 a))","(/ (+ (* -1/2 (/ (* a c) b_2)) (* 2 b_2)) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))) a)","(* 2 b_2)","(+ (* -1/2 (/ (* a c) b_2)) (* 2 b_2))","(+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* 2 (pow b_2 2))","(+ (* 2 (pow b_2 2)) (* a c))","(/ (- (* 1/2 b_2) (* 2 (pow b_2 4))) a)","(/ (- (+ (* 1/2 b_2) (* a (- (* -1/2 (/ c b_2)) (* (pow b_2 2) c)))) (* 2 (pow b_2 4))) a)","(/ (- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* -1/4 (* a (pow c 2)))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4))) a)","(/ (- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/4 (pow c 2)) (* 1/4 (/ (* a (pow c 3)) (pow b_2 2)))))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4))) a)","(- (* 1/2 b_2) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* a (- (* -1/2 (/ c b_2)) (* (pow b_2 2) c)))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* -1/4 (* a (pow c 2)))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* a (- (+ (* -1/2 (/ c b_2)) (* a (- (* 1/4 (/ (* a (pow c 3)) (pow b_2 2))) (* 1/4 (pow c 2))))) (* (pow b_2 2) c)))) (* 2 (pow b_2 4)))","(* 1/2 b_2)","(+ (* -1/2 (/ (* a c) b_2)) (* 1/2 b_2))","(+ (* 1/2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/4 (* a (pow c 2))))))","(+ (* 1/2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (- (* 1/4 (/ (* a (pow c 3)) (pow b_2 2))) (* 1/4 (pow c 2)))))))","(+ b_2 (* (pow a 2) (pow c 2)))","(* 2 (pow b_2 4))","(+ (* 2 (pow b_2 4)) (* a (* (pow b_2 2) c)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ (pow b_2 2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* -1 (* (pow b_2 2) c))","(+ (* -2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c)))","(- (+ (* -2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c))) (/ 1 (* (pow a 2) c)))","(- (+ (* -2 (/ (pow b_2 4) a)) (+ (* -1 (* (pow b_2 2) c)) (/ (pow b_2 2) (* (pow a 3) (pow c 2))))) (/ 1 (* (pow a 2) c)))","(* -1 (* a (* (pow b_2 2) c)))","(* a (- (* -2 (/ (pow b_2 4) a)) (* (pow b_2 2) c)))","(* a (- (* -1 (/ (+ (* 2 (pow b_2 4)) (/ 1 (* a c))) a)) (* (pow b_2 2) c)))","(* a (- (/ (pow b_2 2) (* (pow a 3) (pow c 2))) (+ (* 2 (/ (pow b_2 4) a)) (+ (* (pow b_2 2) c) (/ 1 (* (pow a 2) c))))))","(/ -1 (* a c))","(/ (- (/ (pow b_2 2) (* a (pow c 2))) (/ 1 c)) a)","(/ (- (+ (* 2 (/ b_2 (* (pow a 2) (pow c 3)))) (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) a)","(/ (- (+ (* -2 (/ (pow b_2 3) (* (pow a 3) (pow c 4)))) (/ (pow b_2 2) (* a (pow c 2)))) (+ (* -2 (/ b_2 (* (pow a 2) (pow c 3)))) (/ 1 c))) a)","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (/ b_2 (pow a 2)) (pow c 2)))","(* a (* (pow b_2 2) c))","(* a (+ (* 2 (/ (pow b_2 4) a)) (* (pow b_2 2) c)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ (pow b_2 2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) (pow b_2 2)) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ (pow b_2 2) a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (pow b_2 2)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a)) (* -1 (pow b_2 2))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (pow b_2 2) c)) (* -1 (/ (+ (* 2 (pow b_2 4)) (/ 1 (* a c))) a)))","(+ (* -1 (* (pow b_2 2) c)) (* -1 (/ (+ (* -1 (/ (- (/ (pow b_2 2) (* a (pow c 2))) (/ 1 c)) a)) (* 2 (pow b_2 4))) a)))","(* -1 (* a (- (* 2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c)))))","(* -1 (* a (- (+ (* 2 (/ (pow b_2 4) a)) (/ 1 (* (pow a 2) c))) (* -1 (* (pow b_2 2) c)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) a)) (* 2 (pow b_2 4))) a)) (* -1 (* (pow b_2 2) c)))))","(* -1 (/ (+ (* -1 (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) a))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (/ b_2 (* a (pow c 3)))) (/ (pow b_2 2) (pow c 2))) a)) (/ 1 c)) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 2 (/ (pow b_2 3) (* a (pow c 4)))) (* 2 (/ b_2 (pow c 3)))) a)) (/ (pow b_2 2) (pow c 2))) a)) (/ 1 c)) a))","(* -1 (* a (+ (* -2 (/ (pow b_2 4) a)) (* -1 (* (pow b_2 2) c)))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ 1 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ 1 (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5))))))))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (/ 1 a))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (/ 1 a)))))","(+ (* (sqrt (/ c a)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))) (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* b_2 (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (+ (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ b_2 (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (+ 1 (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))) (* (sqrt (* a c)) (sqrt -1)))","(- (pow b_2 2) (* a c))","(/ -1 (* (pow a 2) c))","(- (* 2 (/ b_2 (* (pow a 4) (pow c 3)))) (/ 1 (* (pow a 2) c)))","(- (* b_2 (+ (* b_2 (- (/ 1 (* (pow a 3) (pow c 2))) (+ c (* 4 (/ 1 (* (pow a 6) (pow c 5))))))) (* 2 (/ 1 (* (pow a 4) (pow c 3)))))) (/ 1 (* (pow a 2) c)))","(- (* b_2 (+ (* b_2 (- (+ (* b_2 (- (* 8 (/ 1 (* (pow a 8) (pow c 7)))) (* 2 (/ 1 (* (pow a 5) (pow c 4)))))) (/ 1 (* (pow a 3) (pow c 2)))) (+ c (* 4 (/ 1 (* (pow a 6) (pow c 5))))))) (* 2 (/ 1 (* (pow a 4) (pow c 3)))))) (/ 1 (* (pow a 2) c)))","(- (* 2 (/ b_2 (* (pow a 3) (pow c 3)))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (/ 1 (* (pow a 2) (pow c 2))) (+ (* 4 (/ 1 (* (pow a 5) (pow c 5)))) (* a c)))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (+ (* b_2 (- (* 8 (/ 1 (* (pow a 7) (pow c 7)))) (* 2 (/ 1 (* (pow a 4) (pow c 4)))))) (/ 1 (* (pow a 2) (pow c 2)))) (+ (* 4 (/ 1 (* (pow a 5) (pow c 5)))) (* a c)))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (/ 1 (* (pow a 2) (pow c 2))) (* 4 (/ 1 (* (pow a 5) (pow c 5)))))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(- (* b_2 (+ (* b_2 (- (+ (* -2 (/ (* b_2 (- (/ 1 (* (pow a 2) (pow c 2))) (* 4 (/ 1 (* (pow a 5) (pow c 5)))))) (* (pow a 2) (pow c 2)))) (/ 1 (* (pow a 2) (pow c 2)))) (* 4 (/ 1 (* (pow a 5) (pow c 5)))))) (* 2 (/ 1 (* (pow a 3) (pow c 3)))))) (/ 1 (* a c)))","(* (pow b_2 2) (+ (* 2 (pow b_2 2)) (* a c)))","(* (pow b_2 2) (+ 1 (/ 1 b_2)))","(* (pow b_2 2) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 3))) (/ 1 b_2))))","(* (pow b_2 2) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 3))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 5))) (/ 1 b_2)))))","(/ (pow b_2 2) a)","(* (pow b_2 2) (+ (/ 1 a) (/ 1 (* a b_2))))","(* (pow b_2 2) (+ (* -1/2 (/ c (pow b_2 3))) (+ (/ 1 a) (/ 1 (* a b_2)))))","(* (pow b_2 2) (+ (* -1/2 (/ c (pow b_2 3))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 5))) (+ (/ 1 a) (/ 1 (* a b_2))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a)))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a))))))","(* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* -2 (/ (pow b_2 4) a))","(* (pow b_2 4) (- (* -1 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* (pow b_2 4) (- (+ (* -1 (/ c (pow b_2 2))) (/ 1/2 (* a (pow b_2 3)))) (* 2 (/ 1 a))))","(* (pow b_2 4) (- (+ (* -1 (/ c (pow b_2 2))) (+ (* -1/4 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ 1 (* a (pow b_2 3)))))) (* 2 (/ 1 a))))","(* -2 (pow b_2 4))","(* (pow b_2 4) (- (* -1 (/ (* a c) (pow b_2 2))) 2))","(* (pow b_2 4) (- (/ 1/2 (pow b_2 3)) (+ 2 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (- (+ (* -1/4 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (/ 1/2 (pow b_2 3))) (+ 2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1/2 (* -1/4 (/ (* (pow a 2) (pow c 2)) b_2))))","(* b_2 (- (+ 1/2 (* -1/2 (/ (* a c) (pow b_2 2)))) (+ (* -1/8 (/ (* (pow a 4) (pow c 4)) (pow b_2 2))) (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)))))","(* b_2 (- (+ 1/2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/2 (/ (* (pow a 2) (* (pow c 2) (- (* -1/2 (* a c)) (* -1/8 (* (pow a 4) (pow c 4)))))) (pow b_2 3))))) (+ (* -1/8 (/ (* (pow a 4) (pow c 4)) (pow b_2 2))) (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)))))","(* b_2 (+ 1 (/ (* (pow a 2) (pow c 2)) b_2)))","(* (pow b_2 4) (+ 2 (/ (* a c) (pow b_2 2))))","(* (pow b_2 2) (- 1 (/ 1 b_2)))","(* (pow b_2 2) (+ 1 (* -1 (/ (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))) b_2))))","(* (pow b_2 2) (+ 1 (* -1 (/ (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))) b_2))))","(* (pow b_2 2) (- (/ 1 a) (/ 1 (* a b_2))))","(* (pow b_2 2) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (/ 1 a)) b_2)) (/ 1 a)))","(* (pow b_2 2) (+ (* -1 (/ (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (/ 1 a))) b_2)) (/ 1 a)))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* 1/2 (/ c b_2))","(* -1 (/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2))","(* 1/2 (/ (* a c) b_2))","(* -1 (/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2))","(* -1 (/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2))","(* -1 (/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* (pow b_2 4) (- (+ (* -1 (/ c (pow b_2 2))) (* -1 (/ (- (* 1/4 (/ (* a (pow c 2)) b_2)) (* 1/2 (/ 1 a))) (pow b_2 3)))) (* 2 (/ 1 a))))","(* (pow b_2 4) (- (* -1 (/ (- (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)) 1/2) (pow b_2 3))) (+ 2 (/ (* a c) (pow b_2 2)))))","(* -1 (* b_2 (- (* 1/4 (/ (* (pow a 2) (pow c 2)) b_2)) 1/2)))","(* -1 (* b_2 (- (* -1 (/ (- (* -1 (/ (- (* 1/2 (* a c)) (* 1/8 (* (pow a 4) (pow c 4)))) b_2)) (* 1/4 (* (pow a 2) (pow c 2)))) b_2)) 1/2)))","(* -1 (* b_2 (- (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (* (pow a 2) (* (pow c 2) (- (* 1/2 (* a c)) (* 1/8 (* (pow a 4) (pow c 4)))))) b_2)) (* 1/2 (* a c))) (* 1/8 (* (pow a 4) (pow c 4)))) b_2)) (* 1/4 (* (pow a 2) (pow c 2)))) b_2)) 1/2)))","(* -1 (* b_2 (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1)))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))) (pow b_2 2)))","(+ b_2 (+ (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))) (pow b_2 2)))","(+ (* -1/2 (/ c b_2)) (+ (/ b_2 a) (/ (pow b_2 2) a)))","(+ (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 2) a)))","(+ (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))) (+ (/ b_2 a) (/ (pow b_2 2) a)))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ (* -1/2 (/ c b_2)) (* 2 (/ b_2 a)))","(+ (* 2 (/ b_2 a)) (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* 2 (/ b_2 a)) (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))))","(+ (* 2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ (* 2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(- (+ (* -1 (* c (+ (* 1/2 (/ 1 b_2)) (pow b_2 2)))) (* 1/2 (/ b_2 a))) (* 2 (/ (pow b_2 4) a)))","(- (+ (* 1/2 (/ b_2 a)) (* c (- (* -1/4 (* a c)) (+ (* 1/2 (/ 1 b_2)) (pow b_2 2))))) (* 2 (/ (pow b_2 4) a)))","(- (+ (* 1/2 (/ b_2 a)) (* c (- (* c (+ (* -1/4 a) (* 1/4 (/ (* (pow a 2) c) (pow b_2 2))))) (+ (* 1/2 (/ 1 b_2)) (pow b_2 2))))) (* 2 (/ (pow b_2 4) a)))","(- (+ (* 1/2 b_2) (* c (- (* -1/2 (/ a b_2)) (* a (pow b_2 2))))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* c (- (+ (* -1/2 (/ a b_2)) (* -1/4 (* (pow a 2) c))) (* a (pow b_2 2))))) (* 2 (pow b_2 4)))","(- (+ (* 1/2 b_2) (* c (- (+ (* -1/2 (/ a b_2)) (* c (- (* 1/4 (/ (* (pow a 3) c) (pow b_2 2))) (* 1/4 (pow a 2))))) (* a (pow b_2 2))))) (* 2 (pow b_2 4)))","(+ (* 1/2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* -1/4 (* (pow a 2) c)))))","(+ (* 1/2 b_2) (* c (+ (* -1/2 (/ a b_2)) (* c (- (* 1/4 (/ (* (pow a 3) c) (pow b_2 2))) (* 1/4 (pow a 2)))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 2) c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 2) c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ (pow b_2 2) c)))))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 2) (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 2) (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ (pow b_2 2) (* a c))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (- (/ (pow b_2 2) c) a))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(* c (+ (* -2 (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))))","(* c (- (+ (* -2 (/ (pow b_2 4) (* a c))) (* -1 (pow b_2 2))) (/ 1 (* (pow a 2) (pow c 2)))))","(* c (- (+ (* -2 (/ (pow b_2 4) (* a c))) (+ (* -1 (pow b_2 2)) (/ (pow b_2 2) (* (pow a 3) (pow c 3))))) (/ 1 (* (pow a 2) (pow c 2)))))","(* c (- (* -2 (/ (pow b_2 4) c)) (* a (pow b_2 2))))","(* c (- (* -1 (/ (+ (* 2 (pow b_2 4)) (/ 1 (* a c))) c)) (* a (pow b_2 2))))","(* c (- (/ (pow b_2 2) (* (pow a 2) (pow c 3))) (+ (* 2 (/ (pow b_2 4) c)) (+ (* a (pow b_2 2)) (/ 1 (* a (pow c 2)))))))","(/ (- (/ (pow b_2 2) (* (pow a 2) c)) (/ 1 a)) c)","(/ (- (+ (* 2 (/ b_2 (* (pow a 3) (pow c 2)))) (/ (pow b_2 2) (* (pow a 2) c))) (/ 1 a)) c)","(/ (- (+ (* -2 (/ (pow b_2 3) (* (pow a 4) (pow c 3)))) (/ (pow b_2 2) (* (pow a 2) c))) (+ (* -2 (/ b_2 (* (pow a 3) (pow c 2)))) (/ 1 a))) c)","(* (pow c 2) (+ (/ b_2 (pow c 2)) (pow a 2)))","(* c (+ (* 2 (/ (pow b_2 4) c)) (* a (pow b_2 2))))","(* -1 (* c (+ (* -1 (/ (pow b_2 2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (pow b_2 2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) (pow b_2 2)) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (pow b_2 2) (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ (pow b_2 2) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ (pow b_2 2) a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* 2 (/ (pow b_2 4) (* a c))) (pow b_2 2))))","(* -1 (* c (+ (* -1 (/ (- (* -2 (/ (pow b_2 4) a)) (/ 1 (* (pow a 2) c))) c)) (pow b_2 2))))","(* -1 (* c (+ (* -1 (/ (+ (* -2 (/ (pow b_2 4) a)) (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))) c)) (pow b_2 2))))","(* -1 (* c (- (* 2 (/ (pow b_2 4) c)) (* -1 (* a (pow b_2 2))))))","(* -1 (* c (- (+ (* 2 (/ (pow b_2 4) c)) (/ 1 (* a (pow c 2)))) (* -1 (* a (pow b_2 2))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 2) c))) (/ 1 a)) c)) (* 2 (pow b_2 4))) c)) (* -1 (* a (pow b_2 2))))))","(* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 2) c))) (/ 1 a)) c))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (/ b_2 (* (pow a 3) c))) (/ (pow b_2 2) (pow a 2))) c)) (/ 1 a)) c))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 2 (/ (pow b_2 3) (* (pow a 4) c))) (* 2 (/ b_2 (pow a 3)))) c)) (/ (pow b_2 2) (pow a 2))) c)) (/ 1 a)) c))","(* -1 (* c (+ (* -2 (/ (pow b_2 4) c)) (* -1 (* a (pow b_2 2))))))"]],"memory":[[2217776,11615088]],"method":["egg-herbie"],"outputs":[[]],"time":140.693115234375,"type":"simplify"},{"count":[[15,222]],"inputs":[["(+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(*.f64 b_2 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(fma.f64 (*.f64 a a) (*.f64 c c) b_2)","(*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))"]],"memory":[[-11066464,69964176]],"outputs":[["(neg.f64 (neg.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(neg.f64 (/.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(+.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(+.f64 (neg.f64 (*.f64 (neg.f64 b_2) b_2)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 (*.f64 (neg.f64 b_2) b_2)))","(+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 b_2 b_2))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 b_2 b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (/.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) #s(literal 16 binary64))","(*.f64 (neg.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (/.f64 #s(literal 16 binary64) #s(literal -1 binary64)))","(*.f64 #s(literal 16 binary64) (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(neg.f64 (/.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a)))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a))))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (*.f64 (/.f64 #s(literal 16 binary64) a) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (/.f64 #s(literal 16 binary64) a)) (/.f64 (*.f64 b_2 b_2) a))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) (*.f64 b_2 b_2)) (*.f64 (/.f64 #s(literal 16 binary64) a) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (*.f64 b_2 b_2) a) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (/.f64 #s(literal 16 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) a) (/.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (-.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)))","(*.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (/.f64 #s(literal 16 binary64) a))","(*.f64 (neg.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 (fma.f64 b_2 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))))","(*.f64 b_2 b_2)","(*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (*.f64 b_2 b_2))","(*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) b_2)","(*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)))","(*.f64 b_2 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)))","(*.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)))","(exp.f64 (log.f64 (*.f64 b_2 b_2)))","(pow.f64 b_2 #s(literal 8 binary64))","(pow.f64 (*.f64 b_2 b_2) #s(literal 16 binary64))","(pow.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) #s(literal 8 binary64))","(pow.f64 (exp.f64 (log.f64 b_2)) #s(literal 8 binary64))","(neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(+.f64 (*.f64 (*.f64 a c) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))) (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))) (*.f64 (*.f64 a c) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","(+.f64 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 (neg.f64 b_2) b_2)) (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 a c)))","(+.f64 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 a c)) (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 (neg.f64 b_2) b_2)))","(+.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) #s(literal -1 binary64)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(neg.f64 (/.f64 #s(literal 6 binary64) a))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal -3 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal 6 binary64) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(literal 6 binary64) a))","(*.f64 (/.f64 #s(literal -3 binary64) #s(literal 16 binary64)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -3 binary64) a))","(*.f64 (/.f64 #s(literal -3 binary64) a) #s(literal 16 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(literal -3 binary64) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) #s(literal 6 binary64))","(*.f64 #s(literal -3 binary64) (/.f64 #s(literal 16 binary64) a))","(*.f64 #s(literal 6 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal 16 binary64) (/.f64 #s(literal -3 binary64) a))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 6 binary64) a))","(neg.f64 (/.f64 #s(literal -28 binary64) a))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal -28 binary64) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -28 binary64) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(literal -28 binary64) a))","(*.f64 (/.f64 #s(literal 28 binary64) #s(literal 16 binary64)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) #s(literal -1 binary64)) (/.f64 #s(literal 28 binary64) a))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(literal 28 binary64) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -28 binary64))","(*.f64 #s(literal 28 binary64) (/.f64 #s(literal 16 binary64) a))","(*.f64 #s(literal -28 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal 16 binary64) (/.f64 #s(literal 28 binary64) a))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -28 binary64) a))","(neg.f64 (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a)))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (*.f64 (/.f64 #s(literal 16 binary64) a) b_2))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (/.f64 #s(literal 16 binary64) a)) (*.f64 b_2 (/.f64 #s(literal 16 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) b_2) (*.f64 (/.f64 #s(literal 16 binary64) a) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(+.f64 (*.f64 b_2 (/.f64 #s(literal 16 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (/.f64 #s(literal 16 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) a) (/.f64 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)) a))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)))","(*.f64 (/.f64 (/.f64 (*.f64 a c) a) (*.f64 a c)) (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(*.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(neg.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2))","(neg.f64 (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)","(+.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (neg.f64 (neg.f64 b_2)))","(+.f64 (neg.f64 (neg.f64 b_2)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(+.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2))))","(-.f64 #s(literal 0 binary64) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2))","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal -1 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) #s(literal 16 binary64))","(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal 16 binary64) #s(literal -1 binary64)))","(neg.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (neg.f64 (*.f64 (neg.f64 b_2) b_2)) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) #s(literal 16 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal 16 binary64)))","(+.f64 (*.f64 #s(literal 16 binary64) (*.f64 (neg.f64 a) c)) (*.f64 #s(literal 16 binary64) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (neg.f64 a) c) (neg.f64 (*.f64 (neg.f64 b_2) b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 a) c) #s(literal 16 binary64)))","(+.f64 (*.f64 #s(literal 16 binary64) (*.f64 b_2 b_2)) (*.f64 #s(literal 16 binary64) (*.f64 (neg.f64 a) c)))","(+.f64 (/.f64 (*.f64 (*.f64 (neg.f64 a) a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (*.f64 a a) (*.f64 c c))))","(+.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a c)) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) b_2)))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (*.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(+.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(+.f64 (*.f64 (*.f64 a c) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(neg.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))))","(+.f64 (*.f64 b_2 #s(literal 16 binary64)) (*.f64 a c))","(+.f64 (*.f64 a c) (*.f64 b_2 #s(literal 16 binary64)))","(+.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2)) (*.f64 a c)) (neg.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) c))))","(-.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 a c)) (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 a c)))","(-.f64 (fma.f64 b_2 b_2 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2)) (*.f64 a c)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) c)))","(-.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))) (-.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))) (*.f64 b_2 b_2)))","(*.f64 #s(literal 16 binary64) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))","(*.f64 (*.f64 (*.f64 (neg.f64 a) c) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 #s(literal -1 binary64) (*.f64 a c)))","(*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 a c)) (/.f64 #s(literal 16 binary64) (*.f64 a c)))","(*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 (*.f64 (neg.f64 a) c) (/.f64 #s(literal -1 binary64) (*.f64 a c))))","(*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c)))","(neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) a))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (fma.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (*.f64 b_2 b_2) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))))))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) a) (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(+.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(+.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)))","(+.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (/.f64 #s(literal 16 binary64) a) (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))))","(+.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 #s(literal 16 binary64) (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a))))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)))","(-.f64 (/.f64 (/.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) a) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 a a)) (/.f64 (*.f64 (*.f64 (*.f64 a b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (*.f64 a a)))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) (/.f64 b_2 a) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))) (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) (*.f64 a a)) (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) (/.f64 b_2 a) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))))","(-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))) a) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) a))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) a)) (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) (*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) a))","(neg.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))))","(neg.f64 (/.f64 (fma.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (*.f64 b_2 b_2) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))","(+.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))))","(+.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))) (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (+.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2)))","(+.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) b_2) b_2 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))))","(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2)) (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))))","(+.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2)))","(+.f64 (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))) (neg.f64 (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))))))","(+.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))) (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))) (neg.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 (*.f64 b_2 b_2) b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) (fma.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) b_2 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))))))","(-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))))","(-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))","(-.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(-.f64 (fma.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (*.f64 b_2 b_2) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (/.f64 (*.f64 a c) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))","(neg.f64 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))","(neg.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) #s(literal 16 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (neg.f64 a) c)) (*.f64 (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 b_2 b_2)) (*.f64 (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))","(+.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (neg.f64 (/.f64 (*.f64 a c) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))))","(+.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 (neg.f64 a) c) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (*.f64 (*.f64 a a) (*.f64 c c)))) b_2) (*.f64 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (*.f64 (*.f64 a a) (*.f64 c c)))) (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))))","(+.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (*.f64 (*.f64 a a) (*.f64 c c))))) (*.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)) (*.f64 (*.f64 a a) (*.f64 c c))))))","(+.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 b_2 b_2)) (*.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64)))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))) (*.f64 (*.f64 b_2 b_2) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))))","(+.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))) (*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (fma.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 0 binary64)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (/.f64 (*.f64 a c) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))))","(neg.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) b_2)","(+.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 (*.f64 b_2 b_2) b_2)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c))))","(+.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) (*.f64 (*.f64 b_2 b_2) b_2)))","(+.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (*.f64 a a) (*.f64 c c))))","(+.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (*.f64 a a) (*.f64 c c))) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (*.f64 (*.f64 (*.f64 (*.f64 a a) a) (*.f64 (*.f64 c c) c)) (fma.f64 (*.f64 a a) (*.f64 c c) b_2)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 c c) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) (neg.f64 b_2))) (neg.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) (neg.f64 b_2)))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 c c) (*.f64 c c))) (fma.f64 (*.f64 a a) (*.f64 c c) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 a a) (*.f64 c c) (neg.f64 b_2))))","(-.f64 b_2 (*.f64 (*.f64 (neg.f64 a) a) (*.f64 c c)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 a a)) (*.f64 (*.f64 c c) (*.f64 c c))) (-.f64 b_2 (*.f64 (*.f64 a a) (*.f64 c c)))))","(neg.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))))","(+.f64 (fma.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))) (*.f64 (*.f64 a c) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) (*.f64 b_2 b_2)) (*.f64 (*.f64 a c) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 a c) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 #s(literal 16 binary64))))","(+.f64 (*.f64 (*.f64 a c) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 #s(literal 16 binary64)) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 a c) (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))))","(+.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 #s(literal 16 binary64))) (*.f64 (*.f64 a c) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) #s(literal 16 binary64)))","(+.f64 (*.f64 #s(literal 16 binary64) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))))","(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) #s(literal 16 binary64)))","(+.f64 (*.f64 #s(literal 16 binary64) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2))) (*.f64 #s(literal 16 binary64) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))","(+.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2))))","(+.f64 (neg.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2))) (neg.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))"]],"time":6358.60986328125,"type":"rewrite"},{"compiler":[[9561,1070]],"memory":[[-582016,30867840]],"time":54.0400390625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","fresh",57.77272069036344,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","fresh",61.269567052256775,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) a)","fresh",57.880714020620246,"binary64"],["(/.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2))) a)","fresh",48.88433162877544,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","done",61.76405774016938,"binary64"],["(/.f64 (+.f64 (pow.f64 b_2 #s(literal -1 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","fresh",52.39771626689566,"binary64"],["(/.f64 (+.f64 (*.f64 b_2 b_2) (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","fresh",55.32886069719248,"binary64"],["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) b_2) (*.f64 a c)))) a)","fresh",49.47048525321028,"binary64"],["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",41.79409447514234,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) a)","fresh",55.16381131418348,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",28.678957412114354,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","fresh",43.57452240767065,"binary64"],["(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","next",55.41847559950129,"binary64"],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",42.67833923804912,"binary64"],["(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","done",55.401811505033244,"binary64"],["(/.f64 #s(literal 28 binary64) a)","done",60.58115090088185,"binary64"],["(/.f64 #s(literal 12 binary64) a)","fresh",60.575801558191245,"binary64"],["(/.f64 #s(literal 1/8 binary64) a)","fresh",60.613174341269435,"binary64"],["(/.f64 #s(literal -1/2 binary64) a)","next",62.57821644244857,"binary64"],["(/.f64 #s(literal -3 binary64) a)","done",62.581754901395286,"binary64"],["(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)))","fresh",51.304283541532484,"binary64"],["(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","next",58.031404559351174,"binary64"],["(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","next",60.56891582794567,"binary64"],["(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","fresh",60.56891582794567,"binary64"],["(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","fresh",62.586882935073056,"binary64"],["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","next",42.66298556253777,"binary64"],["(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","fresh",61.76638690872936,"binary64"],["(neg.f64 (/.f64 #s(literal 6 binary64) a))","fresh",62.583078024174775,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","fresh",42.69425999253023,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","fresh",58.57280750756569,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","done",58.97716790392457,"binary64"],["(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","fresh",62.58810344224484,"binary64"]],"compiler":[[12,8],[40,18],[29,16],[34,13],[12,8],[14,11],[21,10],[20,11],[14,9],[18,9],[13,10],[15,11],[19,9],[12,9],[21,8],[3,5],[3,5],[3,5],[3,5],[3,5],[37,12],[36,20],[5,7],[5,7],[5,7],[15,12],[14,10],[4,6],[15,12],[19,12],[15,11],[6,8],[12,8],[40,18],[29,16],[34,13],[14,11],[21,10],[20,11],[18,9],[15,11],[19,9],[3,5],[3,5],[3,5],[37,12],[36,20],[5,7],[5,7],[5,7],[15,12],[14,10],[4,6],[15,12],[19,12],[6,8]],"count":[[332,32]],"kept":[{"done":[4,4],"fresh":[11,8],"new":[312,16],"picked":[5,4]}],"memory":[[-204144,24387280]],"min-error":[[20.58023878077181,"binary64"]],"time":31.80908203125,"type":"prune"},{"inputs":[["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","(neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","b_2","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","(/.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(/.f64 #s(literal 28 binary64) a)","#s(literal 28 binary64)","a","#s(literal 16 binary64)","(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","(+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","b_2","(*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","(fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))","(neg.f64 b_2)","(*.f64 a c)","a","c","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","b_2","(fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)","(*.f64 c c)","(*.f64 (*.f64 a a) a)","(*.f64 a a)","#s(literal 16 binary64)","(*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64))","(*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a))","(neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))","(fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))","(*.f64 a c)","(/.f64 (*.f64 b_2 b_2) a)"]],"locations":[["(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","cost-diff",0],["(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64))","cost-diff",0],["(*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64))","cost-diff",1],["(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","cost-diff",2],["(fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))","cost-diff",0],["(*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","cost-diff",0],["(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","cost-diff",0],["(+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","cost-diff",1],["(/.f64 #s(literal 28 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","cost-diff",2],["(/.f64 #s(literal -1/2 binary64) a)","cost-diff",0],["(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","cost-diff",0],["(neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","cost-diff",0],["(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","cost-diff",0],["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","cost-diff",1]],"memory":[[-4439888,13481392]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(/.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))) a)","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","b_2","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","(/.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(/.f64 #s(literal 448 binary64) a)","(/.f64 #s(literal 28 binary64) a)","#s(literal 28 binary64)","a","#s(literal 16 binary64)","(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","(/.f64 (fma.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) b_2) a)","(+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","(fma.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) b_2)","b_2","(*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","(fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))","(neg.f64 b_2)","(*.f64 a c)","a","c","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) b_2) (neg.f64 (/.f64 b_2 a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) #s(literal 16 binary64))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64))","(/.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) #s(literal 16 binary64)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(neg.f64 a)","a","c","(*.f64 b_2 b_2)","b_2","(fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)","(*.f64 c c)","(*.f64 (*.f64 a a) a)","(*.f64 a a)","#s(literal 16 binary64)","(*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64))","(*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)) #s(literal -16 binary64))","(*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 #s(literal -16 binary64))) (/.f64 (*.f64 b_2 b_2) a))","(neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))","(fma.f64 (neg.f64 a) c (*.f64 b_2 #s(literal -16 binary64)))","(fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))","(*.f64 a c)","(/.f64 (*.f64 b_2 b_2) a)"]],"time":519.492919921875,"type":"simplify"},{"compiler":[[331,42]],"locations":[["(/.f64 (*.f64 b_2 b_2) a)","accuracy",4.966100759692754],["(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","accuracy",6.648410665792676],["(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","accuracy",13.033801324990558],["(fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)","accuracy",14.524405793980643],["(+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","accuracy",0.00390625],["(*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","accuracy",0.1796875],["(fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))","accuracy",0.7499917428166807],["(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","accuracy",3.605988693227708],["(/.f64 #s(literal 28 binary64) a)","accuracy",0.0],["(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","accuracy",0.0],["(/.f64 #s(literal -1/2 binary64) a)","accuracy",0.0],["(neg.f64 a)","accuracy",0.0],["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","accuracy",2.9916171925642243],["(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","accuracy",15.775165141019793],["(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","accuracy",21.029241595900412]],"memory":[[8616224,49880976]],"mixsample":[[5.7568359375,"adjust",800],[13.3427734375,"ival-div",0],[0.08447265625,"ival-neg",2400],[0.110595703125,"ival-assert",0],[0.15185546875,"ival-neg",800],[0.402099609375,"ival-sqrt",1200],[2.019287109375,"ival-sub",0],[2.020751953125,"ival-sqrt",0],[0.069580078125,"ival-neg",400],[9.99169921875,"ival-add",0],[0.135498046875,"ival-neg",1200],[0.123291015625,"ival-add",400],[0.231201171875,"adjust",2800],[0.010986328125,"ival-sqrt",3600],[0.162841796875,"ival-add",2400],[0.005126953125,"ival-neg",4000],[0.1611328125,"ival-sqrt",400],[0.275390625,"ival-add",1200],[0.281005859375,"ival-sqrt",2000],[0.003173828125,"ival-neg",3600],[0.43701171875,"ival-sqrt",800],[0.012939453125,"ival-sqrt",4000],[0.047119140625,"ival-neg",1600],[0.029052734375,"ival-sqrt",4400],[0.0048828125,"ival-add",4000],[0.005859375,"ival-add",3600],[2.777099609375,"adjust",2000],[26.701904296875,"ival-mult",0],[0.117919921875,"ival-sqrt",1600],[0.079833984375,"ival-add",1600],[0.0087890625,"ival-neg",4400],[0.720947265625,"ival-add",2000],[0.095703125,"ival-neg",2000],[0.3203125,"ival-sqrt",2400],[0.261474609375,"ival-true",0],[0.654541015625,"exact",0],[0.26806640625,"ival-add",800],[0.01318359375,"ival-add",4400],[7.835205078125,"ival-neg",0]],"outcomes":[[20.773193359375,1,"valid",42],[35.4794921875,2,"valid",46],[4.044189453125,3,"valid",5],[47.00634765625,0,"valid",163]],"time":140.444091796875,"type":"localize"},{"count":[[18,260]],"inputs":[["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","(neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(/.f64 #s(literal -1/2 binary64) a)","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(/.f64 #s(literal 28 binary64) a)","(+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","(*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","(fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","(*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","(neg.f64 a)","(fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)","(/.f64 (*.f64 b_2 b_2) a)"]],"memory":[[-5668288,18739840]],"outputs":[["(* 2 (/ b_2 a))","(/ (+ (* -1/2 (/ (* a c) b_2)) (* 2 b_2)) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* -1 b_2)","(- (* 1/2 (/ (* a c) b_2)) b_2)","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) b_2)","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) b_2)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ -1/2 a)","(/ 448 a)","(/ 28 a)","(+ b_2 (pow b_2 4))","(+ b_2 (+ (* -2 (* a (* (pow b_2 2) c))) (pow b_2 4)))","(+ b_2 (+ (* a (+ (* -2 (* (pow b_2 2) c)) (* a (pow c 2)))) (pow b_2 4)))","(/ (+ b_2 (pow b_2 4)) a)","(/ (+ b_2 (+ (* -2 (* a (* (pow b_2 2) c))) (pow b_2 4))) a)","(/ (+ b_2 (+ (* a (+ (* -2 (* (pow b_2 2) c)) (* a (pow c 2)))) (pow b_2 4))) a)","(pow b_2 4)","(+ (* -2 (* a (* (pow b_2 2) c))) (pow b_2 4))","(+ (* a (+ (* -2 (* (pow b_2 2) c)) (* a (pow c 2)))) (pow b_2 4))","(* -1 (pow b_2 2))","(+ (* -1 (pow b_2 2)) (* a c))","(/ (+ (* -256 (pow b_2 3)) (* 16 (pow b_2 2))) a)","(/ (+ (* -256 (pow b_2 3)) (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (* -16 (* (pow b_2 2) c)))))) a)","(/ (+ (* -256 (pow b_2 3)) (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (+ (* -16 (* a (* (pow b_2 2) (pow c 2)))) (* -16 (* (pow b_2 2) c))))))) a)","(/ (+ (* -256 (pow b_2 3)) (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (+ (* -16 (* (pow b_2 2) c)) (* a (+ (* -16 (* (pow b_2 2) (pow c 2))) (* 16 (* a (pow c 3)))))))))) a)","(* -256 (/ (pow b_2 3) a))","(/ (+ (* -256 (pow b_2 3)) (* -16 (* a (* (pow b_2 2) c)))) a)","(* 16 (/ (pow b_2 2) a))","(/ (+ (* -16 (* a c)) (* 16 (pow b_2 2))) a)","(/ (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (* -16 (* a (* (pow b_2 2) (pow c 2))))))) a)","(/ (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (* a (+ (* -16 (* (pow b_2 2) (pow c 2))) (* 16 (* a (pow c 3)))))))) a)","(/ (pow b_2 2) a)","(/ (+ (* -1 (* a c)) (pow b_2 2)) a)","(/ (+ (* a (+ (* -1 c) (* -1 (* a (* (pow b_2 2) (pow c 2)))))) (pow b_2 2)) a)","(/ (+ (* a (+ (* -1 c) (* a (- (* a (pow c 3)) (* (pow b_2 2) (pow c 2)))))) (pow b_2 2)) a)","(* -1 a)","a","(* a (+ 1 (* (pow a 2) (pow c 2))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* -2 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* (pow a 2) (+ (* -2 (/ (* (pow b_2 2) c) a)) (+ (/ b_2 (pow a 2)) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2)))))","(* a (pow c 2))","(* a (+ (* -2 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* a (+ (* -2 (/ (* (pow b_2 2) c) a)) (+ (/ b_2 (pow a 2)) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2)))))","(* (pow a 2) (+ (* -2 (/ (* (pow b_2 2) c) a)) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2))))","(* a c)","(* a (+ c (* -1 (/ (pow b_2 2) a))))","(* -16 (* (pow b_2 2) c))","(+ (* -256 (/ (pow b_2 3) a)) (* -16 (* (pow b_2 2) c)))","(- (+ (* -256 (/ (pow b_2 3) a)) (* -16 (* (pow b_2 2) c))) (/ 16 (* (pow a 2) c)))","(- (+ (* -256 (/ (pow b_2 3) a)) (+ (* -16 (* (pow b_2 2) c)) (* 16 (/ (pow b_2 2) (* (pow a 3) (pow c 2)))))) (* 16 (/ 1 (* (pow a 2) c))))","(/ -16 (* (pow a 2) c))","(/ (- (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (* 16 (/ 1 c))) (pow a 2))","(/ (- (+ (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (/ 16 (* (pow a 2) (pow c 3)))) (* 16 (/ 1 c))) (pow a 2))","(/ (- (+ (* -16 (/ (pow b_2 2) (* (pow a 3) (pow c 4)))) (+ (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (* 16 (/ 1 (* (pow a 2) (pow c 3)))))) (* 16 (/ 1 c))) (pow a 2))","(/ -1 (* (pow a 2) c))","(/ (- (/ (pow b_2 2) (* a (pow c 2))) (/ 1 c)) (pow a 2))","(/ (- (+ (/ 1 (* (pow a 2) (pow c 3))) (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) (pow a 2))","(/ (- (+ (* -1 (/ (pow b_2 2) (* (pow a 3) (pow c 4)))) (+ (/ 1 (* (pow a 2) (pow c 3))) (/ (pow b_2 2) (* a (pow c 2))))) (/ 1 c)) (pow a 2))","(* (pow a 3) (pow c 2))","(* (pow a 3) (+ (/ 1 (pow a 2)) (pow c 2)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (+ b_2 (pow b_2 4)) a)) (* 2 (* (pow b_2 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 (pow c 2)) (* 2 (/ (* (pow b_2 2) c) a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -2 (* (pow b_2 2) c)) (+ (/ b_2 a) (/ (pow b_2 4) a))) a)) (* -1 (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (pow b_2 4) a)) (* 2 (* (pow b_2 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 c) (/ (pow b_2 2) a))))","(+ (* -16 (* (pow b_2 2) c)) (* -1 (/ (+ (* 256 (pow b_2 3)) (* 16 (/ 1 (* a c)))) a)))","(+ (* -16 (* (pow b_2 2) c)) (* -1 (/ (+ (* -1 (/ (- (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (* 16 (/ 1 c))) a)) (* 256 (pow b_2 3))) a)))","(/ (- (* -1 (/ (- (* -16 (/ (pow b_2 2) (pow c 2))) (* 16 (/ 1 (* a (pow c 3))))) a)) (* 16 (/ 1 c))) (pow a 2))","(/ (- (* -1 (/ (+ (* -16 (/ (pow b_2 2) (pow c 2))) (* -1 (/ (+ (* -16 (/ (pow b_2 2) (* a (pow c 4)))) (* 16 (/ 1 (pow c 3)))) a))) a)) (* 16 (/ 1 c))) (pow a 2))","(/ (- (* -1 (/ (- (* -1 (/ (pow b_2 2) (pow c 2))) (/ 1 (* a (pow c 3)))) a)) (/ 1 c)) (pow a 2))","(/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* a (pow c 4)))) (/ 1 (pow c 3))) a)) (* -1 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(* -1 (* (pow a 3) (- (* -1 (pow c 2)) (/ 1 (pow a 2)))))","(+ (* b_2 (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (+ (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ b_2 (* (pow a 2) (pow c 2)))","(+ (* b_2 (+ 1 (* -2 (* a (* b_2 c))))) (* (pow a 2) (pow c 2)))","(+ (* b_2 (+ 1 (* b_2 (+ (* -2 (* a c)) (pow b_2 2))))) (* (pow a 2) (pow c 2)))","(+ (* a (pow c 2)) (/ b_2 a))","(+ (* a (pow c 2)) (* b_2 (+ (* -2 (* b_2 c)) (/ 1 a))))","(+ (* a (pow c 2)) (* b_2 (+ (* b_2 (+ (* -2 c) (/ (pow b_2 2) a))) (/ 1 a))))","(+ (* -2 (* a (* (pow b_2 2) c))) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b_2 2) (+ (* -2 (* a c)) (pow b_2 2))))","(* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2)))))","(+ (* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (* (pow b_2 2) (+ (* -16 c) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2))))))))","(+ (* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (* (pow b_2 2) (+ (* -256 (/ b_2 a)) (+ (* -16 c) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2)))))))))","(* (pow b_2 2) (+ (* -256 (/ b_2 a)) (* -16 c)))","(+ (* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (* 16 (/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2))))))","(* -1 (/ (* a c) (+ a (* (pow a 3) (pow c 2)))))","(+ (* -1 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a)))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 4) (+ 1 (* -2 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (/ 1 (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (+ (/ 1 (pow b_2 3)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(/ (pow b_2 4) a)","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (/ 1 a)))","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (+ (/ 1 a) (/ 1 (* a (pow b_2 3))))))","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (+ (/ 1 a) (+ (/ 1 (* a (pow b_2 3))) (/ (* a (pow c 2)) (pow b_2 4))))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))","(* (pow b_2 2) (- (/ (* a c) (pow b_2 2)) 1))","(* (pow b_2 3) (- (+ (* -16 (/ c b_2)) (/ 16 (* b_2 (+ a (* (pow a 3) (pow c 2)))))) (* 256 (/ 1 a))))","(* (pow b_2 3) (- (+ (* -16 (/ c b_2)) (+ (* -16 (/ (* a c) (* (pow b_2 3) (+ a (* (pow a 3) (pow c 2)))))) (/ 16 (* b_2 (+ a (* (pow a 3) (pow c 2))))))) (* 256 (/ 1 a))))","(* (pow b_2 3) (- (* -16 (/ c b_2)) (* 256 (/ 1 a))))","(* 16 (/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))","(* (pow b_2 2) (+ (* -16 (/ (* a c) (* (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2)))))))","(/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2))))","(* (pow b_2 2) (+ (* -1 (/ (* a c) (* (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))) (/ 1 (+ a (* (pow a 3) (pow c 2))))))","(* 1/2 (/ c b_2))","(* -1 (/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))))","(* -1 (* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (* -1 (/ (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1) (pow b_2 3))))))","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (+ (* -1 (/ (- (* -1 (/ (* a (pow c 2)) b_2)) (/ 1 a)) (pow b_2 3))) (/ 1 a))))","(* -1 (* (pow b_2 3) (+ (* -1 (/ (+ (* -16 c) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2)))))) b_2)) (* 256 (/ 1 a)))))","(* -1 (* (pow b_2 3) (+ (* -1 (/ (+ (* -16 c) (+ (* -16 (/ (* a c) (* (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2))))))) b_2)) (* 256 (/ 1 a)))))","(* -1 (* (pow b_2 3) (+ (* 16 (/ c b_2)) (* 256 (/ 1 a)))))","(+ (* -1/2 (/ c b_2)) (* 2 (/ b_2 a)))","(+ (* 2 (/ b_2 a)) (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* 2 (/ b_2 a)) (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) b_2)","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ b_2 (+ (* c (+ (* -2 (* a (pow b_2 2))) (* (pow a 2) c))) (pow b_2 4)))","(+ (* -2 (* (pow b_2 2) c)) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (+ (* -2 (pow b_2 2)) (* a c))) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (+ (* -2 (* a (pow b_2 2))) (* (pow a 2) c))) (pow b_2 4))","(+ (* -256 (/ (pow b_2 3) a)) (* 16 (/ (pow b_2 2) a)))","(+ (* -256 (/ (pow b_2 3) a)) (+ (* 16 (/ (pow b_2 2) a)) (* c (- (* -16 (pow b_2 2)) 16))))","(+ (* -256 (/ (pow b_2 3) a)) (+ (* 16 (/ (pow b_2 2) a)) (* c (- (+ (* -16 (* a (* (pow b_2 2) c))) (* -16 (pow b_2 2))) 16))))","(+ (* -256 (/ (pow b_2 3) a)) (+ (* 16 (/ (pow b_2 2) a)) (* c (- (+ (* -16 (pow b_2 2)) (* c (+ (* -16 (* a (pow b_2 2))) (* 16 (* (pow a 2) c))))) 16))))","(+ (* -16 c) (* 16 (/ (pow b_2 2) a)))","(+ (* 16 (/ (pow b_2 2) a)) (* c (- (* -16 (* a (* (pow b_2 2) c))) 16)))","(+ (* 16 (/ (pow b_2 2) a)) (* c (- (* c (+ (* -16 (* a (pow b_2 2))) (* 16 (* (pow a 2) c)))) 16)))","(+ (* -1 c) (/ (pow b_2 2) a))","(+ (* c (- (* -1 (* a (* (pow b_2 2) c))) 1)) (/ (pow b_2 2) a))","(+ (* c (- (* c (- (* (pow a 2) c) (* a (pow b_2 2)))) 1)) (/ (pow b_2 2) a))","(+ a (* (pow a 3) (pow c 2)))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* -2 (/ (* a (pow b_2 2)) c)) (pow a 2)))","(* (pow c 2) (+ (* -2 (/ (* a (pow b_2 2)) c)) (+ (/ b_2 (pow c 2)) (+ (/ (pow b_2 4) (pow c 2)) (pow a 2)))))","(* (pow c 2) (+ a (* -2 (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (+ (* -2 (/ (pow b_2 2) c)) (+ (/ b_2 (* a (pow c 2))) (/ (pow b_2 4) (* a (pow c 2)))))))","(* (pow c 2) (+ (* -2 (/ (* a (pow b_2 2)) c)) (+ (/ (pow b_2 4) (pow c 2)) (pow a 2))))","(* c (+ a (* -1 (/ (pow b_2 2) c))))","(* c (+ (* -256 (/ (pow b_2 3) (* a c))) (* -16 (pow b_2 2))))","(* c (- (+ (* -256 (/ (pow b_2 3) (* a c))) (* -16 (pow b_2 2))) (/ 16 (* (pow a 2) (pow c 2)))))","(* c (- (+ (* -256 (/ (pow b_2 3) (* a c))) (+ (* -16 (pow b_2 2)) (* 16 (/ (pow b_2 2) (* (pow a 3) (pow c 3)))))) (* 16 (/ 1 (* (pow a 2) (pow c 2))))))","(/ (- (* 16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (pow a 2)))) c)","(/ (- (+ (* 16 (/ (pow b_2 2) (* (pow a 3) c))) (/ 16 (* (pow a 4) (pow c 2)))) (* 16 (/ 1 (pow a 2)))) c)","(/ (- (+ (* -16 (/ (pow b_2 2) (* (pow a 5) (pow c 3)))) (+ (* 16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (* (pow a 4) (pow c 2)))))) (* 16 (/ 1 (pow a 2)))) c)","(/ (- (/ (pow b_2 2) (* (pow a 3) c)) (/ 1 (pow a 2))) c)","(/ (- (+ (/ 1 (* (pow a 4) (pow c 2))) (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c)","(/ (- (+ (* -1 (/ (pow b_2 2) (* (pow a 5) (pow c 3)))) (+ (/ 1 (* (pow a 4) (pow c 2))) (/ (pow b_2 2) (* (pow a 3) c)))) (/ 1 (pow a 2))) c)","(* (pow c 2) (+ (/ a (pow c 2)) (pow a 3)))","(* -1 (* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (+ b_2 (pow b_2 4)) c)) (* 2 (* a (pow b_2 2)))) c)) (pow a 2)))","(* (pow c 2) (+ a (* -1 (/ (+ (* -1 (/ (+ (/ b_2 a) (/ (pow b_2 4) a)) c)) (* 2 (pow b_2 2))) c))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (pow b_2 4) c)) (* 2 (* a (pow b_2 2)))) c)) (pow a 2)))","(* -1 (* c (+ (* -1 a) (/ (pow b_2 2) c))))","(* -1 (* c (+ (* 16 (pow b_2 2)) (* 256 (/ (pow b_2 3) (* a c))))))","(* -1 (* c (+ (* -1 (/ (- (* -256 (/ (pow b_2 3) a)) (* 16 (/ 1 (* (pow a 2) c)))) c)) (* 16 (pow b_2 2)))))","(* -1 (* c (+ (* -1 (/ (+ (* -256 (/ (pow b_2 3) a)) (* -1 (/ (+ (* -16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (pow a 2)))) c))) c)) (* 16 (pow b_2 2)))))","(* -1 (/ (+ (* -16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* 16 (/ (pow b_2 2) (pow a 3))) (* 16 (/ 1 (* (pow a 4) c)))) c)) (* 16 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 16 (/ (pow b_2 2) (* (pow a 5) c))) (* 16 (/ 1 (pow a 4)))) c)) (* 16 (/ (pow b_2 2) (pow a 3)))) c)) (* 16 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (+ (/ 1 (* (pow a 4) c)) (/ (pow b_2 2) (pow a 3))) c)) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (/ (pow b_2 2) (* (pow a 5) c)) (/ 1 (pow a 4))) c)) (/ (pow b_2 2) (pow a 3))) c)) (/ 1 (pow a 2))) c))"]],"series":[[5.4580078125,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","c","-inf"],[4.02197265625,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","c","inf"],[13.093017578125,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","c","0"],[4.114013671875,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","b_2","-inf"],[7.43017578125,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","b_2","inf"],[6.277099609375,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","b_2","0"],[5.842041015625,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","a","-inf"],[5.39794921875,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","a","inf"],[4.60498046875,"((* (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (/ -1 a)) (- (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) b_2) (neg (sqrt (+ (* (neg a) c) (* b_2 b_2)))) (sqrt (+ (* (neg a) c) (* b_2 b_2))) (/ -1/2 a) (* (/ 28 a) 16) (/ 28 a) (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) (/ (+ b_2 (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c)))) a) (* (+ (* (neg b_2) b_2) (* a c)) (+ (* (neg b_2) b_2) (* a c))) (+ (* (neg b_2) b_2) (* a c)) (+ (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16)) (* (* (neg (+ (* b_2 16) (* a c))) (/ (* b_2 b_2) a)) 16) (* (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) 16) (/ (+ (* (neg a) c) (* b_2 b_2)) (+ (* (* c c) (* (* a a) a)) a)) (neg a) (+ (* (* c c) (* (* a a) a)) a) (/ (* b_2 b_2) a))","a","0"]],"time":62.79296875,"type":"series"},{"count":[[260,0]],"inputs":[["(* 2 (/ b_2 a))","(/ (+ (* -1/2 (/ (* a c) b_2)) (* 2 b_2)) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))) a)","(/ (+ (* 2 b_2) (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* -1 b_2)","(- (* 1/2 (/ (* a c) b_2)) b_2)","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) b_2)","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) b_2)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ -1/2 a)","(/ 448 a)","(/ 28 a)","(+ b_2 (pow b_2 4))","(+ b_2 (+ (* -2 (* a (* (pow b_2 2) c))) (pow b_2 4)))","(+ b_2 (+ (* a (+ (* -2 (* (pow b_2 2) c)) (* a (pow c 2)))) (pow b_2 4)))","(/ (+ b_2 (pow b_2 4)) a)","(/ (+ b_2 (+ (* -2 (* a (* (pow b_2 2) c))) (pow b_2 4))) a)","(/ (+ b_2 (+ (* a (+ (* -2 (* (pow b_2 2) c)) (* a (pow c 2)))) (pow b_2 4))) a)","(pow b_2 4)","(+ (* -2 (* a (* (pow b_2 2) c))) (pow b_2 4))","(+ (* a (+ (* -2 (* (pow b_2 2) c)) (* a (pow c 2)))) (pow b_2 4))","(* -1 (pow b_2 2))","(+ (* -1 (pow b_2 2)) (* a c))","(/ (+ (* -256 (pow b_2 3)) (* 16 (pow b_2 2))) a)","(/ (+ (* -256 (pow b_2 3)) (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (* -16 (* (pow b_2 2) c)))))) a)","(/ (+ (* -256 (pow b_2 3)) (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (+ (* -16 (* a (* (pow b_2 2) (pow c 2)))) (* -16 (* (pow b_2 2) c))))))) a)","(/ (+ (* -256 (pow b_2 3)) (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (+ (* -16 (* (pow b_2 2) c)) (* a (+ (* -16 (* (pow b_2 2) (pow c 2))) (* 16 (* a (pow c 3)))))))))) a)","(* -256 (/ (pow b_2 3) a))","(/ (+ (* -256 (pow b_2 3)) (* -16 (* a (* (pow b_2 2) c)))) a)","(* 16 (/ (pow b_2 2) a))","(/ (+ (* -16 (* a c)) (* 16 (pow b_2 2))) a)","(/ (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (* -16 (* a (* (pow b_2 2) (pow c 2))))))) a)","(/ (+ (* 16 (pow b_2 2)) (* a (+ (* -16 c) (* a (+ (* -16 (* (pow b_2 2) (pow c 2))) (* 16 (* a (pow c 3)))))))) a)","(/ (pow b_2 2) a)","(/ (+ (* -1 (* a c)) (pow b_2 2)) a)","(/ (+ (* a (+ (* -1 c) (* -1 (* a (* (pow b_2 2) (pow c 2)))))) (pow b_2 2)) a)","(/ (+ (* a (+ (* -1 c) (* a (- (* a (pow c 3)) (* (pow b_2 2) (pow c 2)))))) (pow b_2 2)) a)","(* -1 a)","a","(* a (+ 1 (* (pow a 2) (pow c 2))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (pow a 2) (pow c 2))","(* (pow a 2) (+ (* -2 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* (pow a 2) (+ (* -2 (/ (* (pow b_2 2) c) a)) (+ (/ b_2 (pow a 2)) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2)))))","(* a (pow c 2))","(* a (+ (* -2 (/ (* (pow b_2 2) c) a)) (pow c 2)))","(* a (+ (* -2 (/ (* (pow b_2 2) c) a)) (+ (/ b_2 (pow a 2)) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2)))))","(* (pow a 2) (+ (* -2 (/ (* (pow b_2 2) c) a)) (+ (/ (pow b_2 4) (pow a 2)) (pow c 2))))","(* a c)","(* a (+ c (* -1 (/ (pow b_2 2) a))))","(* -16 (* (pow b_2 2) c))","(+ (* -256 (/ (pow b_2 3) a)) (* -16 (* (pow b_2 2) c)))","(- (+ (* -256 (/ (pow b_2 3) a)) (* -16 (* (pow b_2 2) c))) (/ 16 (* (pow a 2) c)))","(- (+ (* -256 (/ (pow b_2 3) a)) (+ (* -16 (* (pow b_2 2) c)) (* 16 (/ (pow b_2 2) (* (pow a 3) (pow c 2)))))) (* 16 (/ 1 (* (pow a 2) c))))","(/ -16 (* (pow a 2) c))","(/ (- (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (* 16 (/ 1 c))) (pow a 2))","(/ (- (+ (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (/ 16 (* (pow a 2) (pow c 3)))) (* 16 (/ 1 c))) (pow a 2))","(/ (- (+ (* -16 (/ (pow b_2 2) (* (pow a 3) (pow c 4)))) (+ (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (* 16 (/ 1 (* (pow a 2) (pow c 3)))))) (* 16 (/ 1 c))) (pow a 2))","(/ -1 (* (pow a 2) c))","(/ (- (/ (pow b_2 2) (* a (pow c 2))) (/ 1 c)) (pow a 2))","(/ (- (+ (/ 1 (* (pow a 2) (pow c 3))) (/ (pow b_2 2) (* a (pow c 2)))) (/ 1 c)) (pow a 2))","(/ (- (+ (* -1 (/ (pow b_2 2) (* (pow a 3) (pow c 4)))) (+ (/ 1 (* (pow a 2) (pow c 3))) (/ (pow b_2 2) (* a (pow c 2))))) (/ 1 c)) (pow a 2))","(* (pow a 3) (pow c 2))","(* (pow a 3) (+ (/ 1 (pow a 2)) (pow c 2)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (+ b_2 (pow b_2 4)) a)) (* 2 (* (pow b_2 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 (pow c 2)) (* 2 (/ (* (pow b_2 2) c) a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -2 (* (pow b_2 2) c)) (+ (/ b_2 a) (/ (pow b_2 4) a))) a)) (* -1 (pow c 2)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ (pow b_2 4) a)) (* 2 (* (pow b_2 2) c))) a)) (pow c 2)))","(* -1 (* a (+ (* -1 c) (/ (pow b_2 2) a))))","(+ (* -16 (* (pow b_2 2) c)) (* -1 (/ (+ (* 256 (pow b_2 3)) (* 16 (/ 1 (* a c)))) a)))","(+ (* -16 (* (pow b_2 2) c)) (* -1 (/ (+ (* -1 (/ (- (* 16 (/ (pow b_2 2) (* a (pow c 2)))) (* 16 (/ 1 c))) a)) (* 256 (pow b_2 3))) a)))","(/ (- (* -1 (/ (- (* -16 (/ (pow b_2 2) (pow c 2))) (* 16 (/ 1 (* a (pow c 3))))) a)) (* 16 (/ 1 c))) (pow a 2))","(/ (- (* -1 (/ (+ (* -16 (/ (pow b_2 2) (pow c 2))) (* -1 (/ (+ (* -16 (/ (pow b_2 2) (* a (pow c 4)))) (* 16 (/ 1 (pow c 3)))) a))) a)) (* 16 (/ 1 c))) (pow a 2))","(/ (- (* -1 (/ (- (* -1 (/ (pow b_2 2) (pow c 2))) (/ 1 (* a (pow c 3)))) a)) (/ 1 c)) (pow a 2))","(/ (- (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow b_2 2) (* a (pow c 4)))) (/ 1 (pow c 3))) a)) (* -1 (/ (pow b_2 2) (pow c 2)))) a)) (/ 1 c)) (pow a 2))","(* -1 (* (pow a 3) (- (* -1 (pow c 2)) (/ 1 (pow a 2)))))","(+ (* b_2 (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (+ (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* (pow b_2 2) (- (* (pow b_2 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ b_2 (* (pow a 2) (pow c 2)))","(+ (* b_2 (+ 1 (* -2 (* a (* b_2 c))))) (* (pow a 2) (pow c 2)))","(+ (* b_2 (+ 1 (* b_2 (+ (* -2 (* a c)) (pow b_2 2))))) (* (pow a 2) (pow c 2)))","(+ (* a (pow c 2)) (/ b_2 a))","(+ (* a (pow c 2)) (* b_2 (+ (* -2 (* b_2 c)) (/ 1 a))))","(+ (* a (pow c 2)) (* b_2 (+ (* b_2 (+ (* -2 c) (/ (pow b_2 2) a))) (/ 1 a))))","(+ (* -2 (* a (* (pow b_2 2) c))) (* (pow a 2) (pow c 2)))","(+ (* (pow a 2) (pow c 2)) (* (pow b_2 2) (+ (* -2 (* a c)) (pow b_2 2))))","(* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2)))))","(+ (* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (* (pow b_2 2) (+ (* -16 c) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2))))))))","(+ (* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (* (pow b_2 2) (+ (* -256 (/ b_2 a)) (+ (* -16 c) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2)))))))))","(* (pow b_2 2) (+ (* -256 (/ b_2 a)) (* -16 c)))","(+ (* -16 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (* 16 (/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2))))))","(* -1 (/ (* a c) (+ a (* (pow a 3) (pow c 2)))))","(+ (* -1 (/ (* a c) (+ a (* (pow a 3) (pow c 2))))) (/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a)))))","(* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 4) (+ 1 (* -2 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (/ 1 (pow b_2 3)))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (+ (/ 1 (pow b_2 3)) (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(/ (pow b_2 4) a)","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (/ 1 a)))","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (+ (/ 1 a) (/ 1 (* a (pow b_2 3))))))","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (+ (/ 1 a) (+ (/ 1 (* a (pow b_2 3))) (/ (* a (pow c 2)) (pow b_2 4))))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))","(* (pow b_2 2) (- (/ (* a c) (pow b_2 2)) 1))","(* (pow b_2 3) (- (+ (* -16 (/ c b_2)) (/ 16 (* b_2 (+ a (* (pow a 3) (pow c 2)))))) (* 256 (/ 1 a))))","(* (pow b_2 3) (- (+ (* -16 (/ c b_2)) (+ (* -16 (/ (* a c) (* (pow b_2 3) (+ a (* (pow a 3) (pow c 2)))))) (/ 16 (* b_2 (+ a (* (pow a 3) (pow c 2))))))) (* 256 (/ 1 a))))","(* (pow b_2 3) (- (* -16 (/ c b_2)) (* 256 (/ 1 a))))","(* 16 (/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))","(* (pow b_2 2) (+ (* -16 (/ (* a c) (* (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2)))))))","(/ (pow b_2 2) (+ a (* (pow a 3) (pow c 2))))","(* (pow b_2 2) (+ (* -1 (/ (* a c) (* (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))) (/ 1 (+ a (* (pow a 3) (pow c 2))))))","(* 1/2 (/ c b_2))","(* -1 (/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2))","(* -1 (/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))))","(* -1 (* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* (pow b_2 4) (+ 1 (+ (* -2 (/ (* a c) (pow b_2 2))) (* -1 (/ (- (* -1 (/ (* (pow a 2) (pow c 2)) b_2)) 1) (pow b_2 3))))))","(* (pow b_2 4) (+ (* -2 (/ c (pow b_2 2))) (+ (* -1 (/ (- (* -1 (/ (* a (pow c 2)) b_2)) (/ 1 a)) (pow b_2 3))) (/ 1 a))))","(* -1 (* (pow b_2 3) (+ (* -1 (/ (+ (* -16 c) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2)))))) b_2)) (* 256 (/ 1 a)))))","(* -1 (* (pow b_2 3) (+ (* -1 (/ (+ (* -16 c) (+ (* -16 (/ (* a c) (* (pow b_2 2) (+ a (* (pow a 3) (pow c 2)))))) (* 16 (/ 1 (+ a (* (pow a 3) (pow c 2))))))) b_2)) (* 256 (/ 1 a)))))","(* -1 (* (pow b_2 3) (+ (* 16 (/ c b_2)) (* 256 (/ 1 a)))))","(+ (* -1/2 (/ c b_2)) (* 2 (/ b_2 a)))","(+ (* 2 (/ b_2 a)) (* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* 2 (/ b_2 a)) (* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) b_2)","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(+ b_2 (+ (* c (+ (* -2 (* a (pow b_2 2))) (* (pow a 2) c))) (pow b_2 4)))","(+ (* -2 (* (pow b_2 2) c)) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (+ (* -2 (pow b_2 2)) (* a c))) (+ (/ b_2 a) (/ (pow b_2 4) a)))","(+ (* c (+ (* -2 (* a (pow b_2 2))) (* (pow a 2) c))) (pow b_2 4))","(+ (* -256 (/ (pow b_2 3) a)) (* 16 (/ (pow b_2 2) a)))","(+ (* -256 (/ (pow b_2 3) a)) (+ (* 16 (/ (pow b_2 2) a)) (* c (- (* -16 (pow b_2 2)) 16))))","(+ (* -256 (/ (pow b_2 3) a)) (+ (* 16 (/ (pow b_2 2) a)) (* c (- (+ (* -16 (* a (* (pow b_2 2) c))) (* -16 (pow b_2 2))) 16))))","(+ (* -256 (/ (pow b_2 3) a)) (+ (* 16 (/ (pow b_2 2) a)) (* c (- (+ (* -16 (pow b_2 2)) (* c (+ (* -16 (* a (pow b_2 2))) (* 16 (* (pow a 2) c))))) 16))))","(+ (* -16 c) (* 16 (/ (pow b_2 2) a)))","(+ (* 16 (/ (pow b_2 2) a)) (* c (- (* -16 (* a (* (pow b_2 2) c))) 16)))","(+ (* 16 (/ (pow b_2 2) a)) (* c (- (* c (+ (* -16 (* a (pow b_2 2))) (* 16 (* (pow a 2) c)))) 16)))","(+ (* -1 c) (/ (pow b_2 2) a))","(+ (* c (- (* -1 (* a (* (pow b_2 2) c))) 1)) (/ (pow b_2 2) a))","(+ (* c (- (* c (- (* (pow a 2) c) (* a (pow b_2 2)))) 1)) (/ (pow b_2 2) a))","(+ a (* (pow a 3) (pow c 2)))","(* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (+ (* -2 (/ (* a (pow b_2 2)) c)) (pow a 2)))","(* (pow c 2) (+ (* -2 (/ (* a (pow b_2 2)) c)) (+ (/ b_2 (pow c 2)) (+ (/ (pow b_2 4) (pow c 2)) (pow a 2)))))","(* (pow c 2) (+ a (* -2 (/ (pow b_2 2) c))))","(* (pow c 2) (+ a (+ (* -2 (/ (pow b_2 2) c)) (+ (/ b_2 (* a (pow c 2))) (/ (pow b_2 4) (* a (pow c 2)))))))","(* (pow c 2) (+ (* -2 (/ (* a (pow b_2 2)) c)) (+ (/ (pow b_2 4) (pow c 2)) (pow a 2))))","(* c (+ a (* -1 (/ (pow b_2 2) c))))","(* c (+ (* -256 (/ (pow b_2 3) (* a c))) (* -16 (pow b_2 2))))","(* c (- (+ (* -256 (/ (pow b_2 3) (* a c))) (* -16 (pow b_2 2))) (/ 16 (* (pow a 2) (pow c 2)))))","(* c (- (+ (* -256 (/ (pow b_2 3) (* a c))) (+ (* -16 (pow b_2 2)) (* 16 (/ (pow b_2 2) (* (pow a 3) (pow c 3)))))) (* 16 (/ 1 (* (pow a 2) (pow c 2))))))","(/ (- (* 16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (pow a 2)))) c)","(/ (- (+ (* 16 (/ (pow b_2 2) (* (pow a 3) c))) (/ 16 (* (pow a 4) (pow c 2)))) (* 16 (/ 1 (pow a 2)))) c)","(/ (- (+ (* -16 (/ (pow b_2 2) (* (pow a 5) (pow c 3)))) (+ (* 16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (* (pow a 4) (pow c 2)))))) (* 16 (/ 1 (pow a 2)))) c)","(/ (- (/ (pow b_2 2) (* (pow a 3) c)) (/ 1 (pow a 2))) c)","(/ (- (+ (/ 1 (* (pow a 4) (pow c 2))) (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c)","(/ (- (+ (* -1 (/ (pow b_2 2) (* (pow a 5) (pow c 3)))) (+ (/ 1 (* (pow a 4) (pow c 2))) (/ (pow b_2 2) (* (pow a 3) c)))) (/ 1 (pow a 2))) c)","(* (pow c 2) (+ (/ a (pow c 2)) (pow a 3)))","(* -1 (* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c)) (/ b_2 a)) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (+ b_2 (pow b_2 4)) c)) (* 2 (* a (pow b_2 2)))) c)) (pow a 2)))","(* (pow c 2) (+ a (* -1 (/ (+ (* -1 (/ (+ (/ b_2 a) (/ (pow b_2 4) a)) c)) (* 2 (pow b_2 2))) c))))","(* (pow c 2) (+ (* -1 (/ (+ (* -1 (/ (pow b_2 4) c)) (* 2 (* a (pow b_2 2)))) c)) (pow a 2)))","(* -1 (* c (+ (* -1 a) (/ (pow b_2 2) c))))","(* -1 (* c (+ (* 16 (pow b_2 2)) (* 256 (/ (pow b_2 3) (* a c))))))","(* -1 (* c (+ (* -1 (/ (- (* -256 (/ (pow b_2 3) a)) (* 16 (/ 1 (* (pow a 2) c)))) c)) (* 16 (pow b_2 2)))))","(* -1 (* c (+ (* -1 (/ (+ (* -256 (/ (pow b_2 3) a)) (* -1 (/ (+ (* -16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (pow a 2)))) c))) c)) (* 16 (pow b_2 2)))))","(* -1 (/ (+ (* -16 (/ (pow b_2 2) (* (pow a 3) c))) (* 16 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* 16 (/ (pow b_2 2) (pow a 3))) (* 16 (/ 1 (* (pow a 4) c)))) c)) (* 16 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (* 16 (/ (pow b_2 2) (* (pow a 5) c))) (* 16 (/ 1 (pow a 4)))) c)) (* 16 (/ (pow b_2 2) (pow a 3)))) c)) (* 16 (/ 1 (pow a 2)))) c))","(* -1 (/ (+ (* -1 (/ (pow b_2 2) (* (pow a 3) c))) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (+ (/ 1 (* (pow a 4) c)) (/ (pow b_2 2) (pow a 3))) c)) (/ 1 (pow a 2))) c))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (/ (pow b_2 2) (* (pow a 5) c)) (/ 1 (pow a 4))) c)) (/ (pow b_2 2) (pow a 3))) c)) (/ 1 (pow a 2))) c))"]],"memory":[[3580976,11612592]],"method":["egg-herbie"],"outputs":[[]],"time":132.2890625,"type":"simplify"},{"count":[[18,270]],"inputs":[["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2)","(neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(/.f64 #s(literal -1/2 binary64) a)","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(/.f64 #s(literal 28 binary64) a)","(+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))))","(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","(*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))","(fma.f64 (neg.f64 b_2) b_2 (*.f64 a c))","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","(*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64))","(*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64))","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","(neg.f64 a)","(fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)","(/.f64 (*.f64 b_2 b_2) a)"]],"memory":[[-5484560,79973472]],"outputs":[["(neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(+.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 b_2 a))","(+.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (neg.f64 b_2) a))","(+.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (*.f64 (/.f64 #s(literal 1 binary64) a) (neg.f64 b_2)))","(+.f64 (/.f64 b_2 a) (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a))","(+.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) a) (neg.f64 b_2)) (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (neg.f64 b_2) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(-.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 a)) (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 a)))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal -1 binary64))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal 1 binary64))","(neg.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) #s(literal 1 binary64)))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 b_2))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 #s(literal 1 binary64) b_2))","(+.f64 b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(+.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 #s(literal 1 binary64) (neg.f64 b_2)))","(+.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(+.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) b_2) (fma.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(neg.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))))","(neg.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))))","(neg.f64 (/.f64 #s(literal 1/2 binary64) a))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal -1/2 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(literal -1/2 binary64) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) a) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 a #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (/.f64 a #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 (/.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(neg.f64 (*.f64 (/.f64 #s(literal -28 binary64) a) #s(literal 16 binary64)))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal -28 binary64) a)))","(neg.f64 (/.f64 #s(literal 448 binary64) (neg.f64 a)))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) #s(literal -1 binary64)) (/.f64 #s(literal -28 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 28 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) a) #s(literal 448 binary64))","(*.f64 (/.f64 #s(literal -28 binary64) a) (/.f64 #s(literal 16 binary64) #s(literal -1 binary64)))","(*.f64 #s(literal 16 binary64) (/.f64 #s(literal 28 binary64) a))","(*.f64 #s(literal 28 binary64) (/.f64 #s(literal 16 binary64) a))","(*.f64 #s(literal 448 binary64) (/.f64 #s(literal 1 binary64) a))","(*.f64 #s(literal -448 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 448 binary64) a))","(neg.f64 (/.f64 #s(literal -28 binary64) a))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -28 binary64) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -28 binary64) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(literal -28 binary64) a))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(literal 28 binary64) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -28 binary64))","(*.f64 (/.f64 #s(literal 1 binary64) a) #s(literal 28 binary64))","(*.f64 #s(literal 28 binary64) (/.f64 #s(literal 1 binary64) a))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -28 binary64) a))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 28 binary64) a))","(*.f64 #s(literal -28 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 a #s(literal 28 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (/.f64 a #s(literal 28 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 (/.f64 #s(literal 1 binary64) #s(literal 28 binary64)) #s(literal -1 binary64)))","(neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 b_2)))","(neg.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) b_2) #s(literal -1 binary64)))","(+.f64 b_2 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) b_2))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2))","(+.f64 (fma.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) b_2 #s(literal 1 binary64)) b_2 (*.f64 (*.f64 a a) (*.f64 c c))) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2)))","(+.f64 (fma.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) b_2 #s(literal 1 binary64)) b_2 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) b_2) (neg.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c))))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) b_2) (*.f64 (neg.f64 c) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) a)))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) b_2) (*.f64 (neg.f64 a) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) c)))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2)) (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (fma.f64 (*.f64 (*.f64 b_2 b_2) (neg.f64 c)) a (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)))","(neg.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 b_2)) a))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 b_2)) a)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) b_2))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 b_2 a))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal 1 binary64) a)) (/.f64 b_2 a))","(+.f64 (/.f64 b_2 a) (*.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 b_2 a) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal 1 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) b_2)) (*.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c))))","(+.f64 (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) b_2) (/.f64 #s(literal 1 binary64) a)) (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)) (/.f64 #s(literal 1 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (*.f64 (/.f64 #s(literal 1 binary64) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2)))","(+.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (/.f64 #s(literal 1 binary64) a)) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c) b_2) (/.f64 #s(literal 1 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 b_2)) a))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 b_2)) a))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) b_2)) a) (/.f64 (/.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) b_2)) a))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) b_2) a)) (/.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)) b_2) a)))","(neg.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 (*.f64 (neg.f64 a) a) (*.f64 c c) (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2))))","(neg.f64 (fma.f64 (*.f64 (neg.f64 b_2) (*.f64 b_2 b_2)) b_2 (*.f64 (*.f64 (neg.f64 a) a) (*.f64 c c))))","(+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2)) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) (neg.f64 b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 (*.f64 a a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 (neg.f64 a) a) (*.f64 c c)) (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c))))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(+.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) (*.f64 (*.f64 a a) (*.f64 c c))) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 (*.f64 (neg.f64 a) a) (*.f64 c c)))","(+.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))","(+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 a c)))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(+.f64 (*.f64 a c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 a c))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))","(+.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 a c))","(+.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (neg.f64 a) c))","(+.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 0 binary64))","(+.f64 (-.f64 (*.f64 a c) #s(literal 0 binary64)) (*.f64 b_2 b_2))","(+.f64 (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64)) (*.f64 a c))","(+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(+.f64 (*.f64 a c) (*.f64 (neg.f64 b_2) b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) #s(literal -1 binary64)) (*.f64 (neg.f64 b_2) b_2))","(+.f64 (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)))","(neg.f64 (/.f64 (*.f64 #s(literal 256 binary64) (-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))))) (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64))))","(neg.f64 (/.f64 (neg.f64 (*.f64 #s(literal 4096 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 #s(literal -16 binary64))) (/.f64 (*.f64 b_2 b_2) a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))))) (fma.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 256 binary64)) (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) (*.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) #s(literal 256 binary64)))))","(neg.f64 (/.f64 (*.f64 #s(literal 4096 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 #s(literal -16 binary64))) (/.f64 (*.f64 b_2 b_2) a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))))) (neg.f64 (fma.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 256 binary64)) (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) (*.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) #s(literal 256 binary64))))))","(+.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)) #s(literal -16 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)) #s(literal -16 binary64)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(+.f64 (/.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 256 binary64)) (*.f64 (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))) (neg.f64 (/.f64 (*.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) #s(literal 256 binary64)) (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)))))","(-.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)))","(-.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)) #s(literal -16 binary64)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(-.f64 #s(literal 0 binary64) (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 256 binary64)) (*.f64 (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))) (/.f64 (*.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) #s(literal 256 binary64)) (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64))))","(-.f64 (/.f64 (*.f64 (/.f64 (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (*.f64 b_2 b_2))) (*.f64 a a)) #s(literal 256 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (neg.f64 b_2)) (/.f64 b_2 a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) #s(literal 16 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 256 binary64)) (*.f64 (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))))","(*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (neg.f64 b_2)) (/.f64 b_2 a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) #s(literal 16 binary64))","(*.f64 #s(literal 16 binary64) (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (neg.f64 b_2)) (/.f64 b_2 a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))))","(*.f64 #s(literal -1 binary64) (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)))","(neg.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)))","(+.f64 (*.f64 (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a) #s(literal 0 binary64)) (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)) #s(literal -16 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a) (*.f64 (neg.f64 a) c)) (*.f64 (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a) (*.f64 b_2 #s(literal -16 binary64))))","(+.f64 (*.f64 (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a) (*.f64 b_2 #s(literal -16 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a) (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 #s(literal 0 binary64) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)) (*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)) #s(literal -16 binary64)))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)) (*.f64 (*.f64 b_2 #s(literal -16 binary64)) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)))","(+.f64 (*.f64 (*.f64 b_2 #s(literal -16 binary64)) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)) (*.f64 (*.f64 (neg.f64 a) c) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)))","(+.f64 (*.f64 #s(literal 16 binary64) (/.f64 (*.f64 (*.f64 b_2 #s(literal -16 binary64)) (*.f64 b_2 b_2)) a)) (*.f64 #s(literal 16 binary64) (/.f64 (*.f64 (*.f64 a c) (*.f64 b_2 b_2)) (neg.f64 a))))","(+.f64 (*.f64 (/.f64 (*.f64 (*.f64 b_2 #s(literal -16 binary64)) (*.f64 b_2 b_2)) a) #s(literal 16 binary64)) (*.f64 (/.f64 (*.f64 (*.f64 a c) (*.f64 b_2 b_2)) (neg.f64 a)) #s(literal 16 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a)))","(*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 #s(literal -16 binary64))) (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a))","(*.f64 (/.f64 (*.f64 (*.f64 b_2 #s(literal 16 binary64)) b_2) a) (fma.f64 (neg.f64 a) c (*.f64 b_2 #s(literal -16 binary64))))","(*.f64 (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 #s(literal -16 binary64))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64))","(*.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 #s(literal 16 binary64) a))","(*.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a)) #s(literal -16 binary64))","(neg.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))))) (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) (*.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))))) (neg.f64 a)))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a)) (*.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))))))","(+.f64 (*.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))))) (*.f64 (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a)))","(+.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a)) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64))))))) (*.f64 (neg.f64 a) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64))))))))","(+.f64 (*.f64 (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))) (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))) (*.f64 (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64))","(*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(*.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 16 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal -16 binary64))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64))) (/.f64 #s(literal 16 binary64) a))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(*.f64 (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) a))","(neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(+.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a)) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))))))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (neg.f64 a) c)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 b_2 b_2)))","(+.f64 (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 b_2 b_2)) (*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))))) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a))) (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a)))","(+.f64 (*.f64 (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))) (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))))","(+.f64 (*.f64 (*.f64 (neg.f64 a) c) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) (*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))))","(+.f64 (*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) (*.f64 (*.f64 (neg.f64 a) c) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))) (*.f64 (*.f64 (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a))) (*.f64 (*.f64 c c) (*.f64 (*.f64 c c) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (*.f64 a a) a)))))","(+.f64 (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))))) (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a))) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))))) (neg.f64 a)))","(+.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64))))))) (*.f64 (neg.f64 a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64))))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (/.f64 (*.f64 a c) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(-.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) (/.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))))","(neg.f64 a)","(+.f64 (neg.f64 a) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 a))","(-.f64 #s(literal 0 binary64) a)","(-.f64 (/.f64 #s(literal 0 binary64) #s(literal 1 binary64)) a)","(-.f64 (/.f64 #s(literal 0 binary64) a) a)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 a a)) (/.f64 (*.f64 (*.f64 a a) a) (*.f64 a a)))","(*.f64 a #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) a)","(*.f64 (neg.f64 a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (neg.f64 a))","(*.f64 (*.f64 (neg.f64 a) a) (/.f64 #s(literal 1 binary64) a))","(*.f64 (*.f64 (neg.f64 a) (*.f64 a a)) (/.f64 #s(literal 1 binary64) (*.f64 a a)))","(/.f64 a #s(literal -1 binary64))","(/.f64 (neg.f64 a) #s(literal 1 binary64))","(neg.f64 (neg.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(+.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a)) a)","(+.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a)))","(+.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))) (neg.f64 (/.f64 (*.f64 a a) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64))))))","(-.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))) (/.f64 (*.f64 a a) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(-.f64 (/.f64 (*.f64 a a) (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a)))) (/.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (-.f64 a (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) a)))))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) (*.f64 c c)) (*.f64 (*.f64 a a) (*.f64 (*.f64 a a) (*.f64 a a)))) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 a a) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) a)","(*.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))","(*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64)))) (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 1 binary64)) (*.f64 a (*.f64 a (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal -1 binary64))))))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)))","(neg.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (*.f64 b_2 b_2) (neg.f64 a)))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 b_2 b_2) (neg.f64 a)))","(*.f64 (*.f64 #s(literal 1 binary64) b_2) (/.f64 b_2 a))","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) a))","(*.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 b_2 b_2))","(*.f64 (/.f64 b_2 a) b_2)","(*.f64 b_2 (/.f64 b_2 a))","(*.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 b_2))","(*.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 1 binary64))","(*.f64 (*.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 b_2 #s(literal 1 binary64))) (pow.f64 b_2 #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) (/.f64 (neg.f64 b_2) a))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 b_2 b_2) (neg.f64 a)))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) a))"]],"time":5443.389892578125,"type":"rewrite"},{"compiler":[[9071,1001]],"memory":[[5727952,28043616]],"time":39.444091796875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","fresh",57.77272069036344,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","fresh",61.269567052256775,"binary64"],["(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) a)","fresh",57.880714020620246,"binary64"],["(/.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2))) a)","fresh",48.88433162877544,"binary64"],["(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","done",61.76405774016938,"binary64"],["(/.f64 (+.f64 (pow.f64 b_2 #s(literal -1 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","fresh",52.39771626689566,"binary64"],["(/.f64 (+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)","fresh",55.41847559950129,"binary64"],["(/.f64 (+.f64 (*.f64 b_2 b_2) (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","fresh",55.32886069719248,"binary64"],["(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) b_2) (*.f64 a c)))) a)","fresh",49.47048525321028,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) a)","fresh",55.16381131418348,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",28.678957412114354,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","fresh",43.57452240767065,"binary64"],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",42.67833923804912,"binary64"],["(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","done",55.401811505033244,"binary64"],["(/.f64 #s(literal 28 binary64) a)","done",60.58115090088185,"binary64"],["(/.f64 #s(literal 12 binary64) a)","fresh",60.575801558191245,"binary64"],["(/.f64 #s(literal 1/8 binary64) a)","fresh",60.613174341269435,"binary64"],["(/.f64 #s(literal -1/2 binary64) a)","done",62.57821644244857,"binary64"],["(/.f64 #s(literal -3 binary64) a)","done",62.581754901395286,"binary64"],["(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)))","fresh",51.304283541532484,"binary64"],["(+.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (*.f64 (/.f64 #s(literal 1 binary64) a) (neg.f64 b_2)))","fresh",44.92024323579952,"binary64"],["(*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (neg.f64 b_2)) (/.f64 b_2 a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) #s(literal 16 binary64))","fresh",58.254037605282214,"binary64"],["(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","fresh",60.56891582794567,"binary64"],["(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","fresh",62.586882935073056,"binary64"],["(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))) b_2) (/.f64 #s(literal -1 binary64) a))","fresh",62.550162050447405,"binary64"],["(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","done",42.66298556253777,"binary64"],["(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","fresh",61.76638690872936,"binary64"],["(*.f64 (*.f64 (pow.f64 (/.f64 a #s(literal 28 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (/.f64 a #s(literal 28 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) #s(literal 16 binary64))","fresh",62.43613164729294,"binary64"],["(*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64)))) #s(literal 16 binary64))","fresh",60.56891582794567,"binary64"],["(neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","fresh",63.042675218416115,"binary64"],["(neg.f64 (/.f64 #s(literal 6 binary64) a))","fresh",62.583078024174775,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","fresh",42.69425999253023,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","fresh",58.57280750756569,"binary64"],["(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","done",58.97716790392457,"binary64"],["(neg.f64 (/.f64 #s(literal -448 binary64) a))","fresh",60.56891582794567,"binary64"],["(neg.f64 (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)))","fresh",62.56039280944806,"binary64"],["(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","fresh",62.58810344224484,"binary64"]],"compiler":[[829,187],[12,8],[40,18],[29,16],[34,13],[12,8],[14,11],[17,8],[21,10],[20,11],[18,9],[13,10],[15,11],[12,9],[21,8],[3,5],[3,5],[3,5],[3,5],[3,5],[37,12],[16,12],[32,18],[5,7],[5,7],[27,14],[15,12],[14,10],[17,12],[8,10],[12,9],[4,6],[15,12],[19,12],[15,11],[4,6],[33,18],[6,8]],"count":[[317,37]],"kept":[{"done":[8,7],"fresh":[19,19],"new":[285,9],"picked":[5,2]}],"memory":[[666400,27665680]],"min-error":[[20.571199100424334,"binary64"]],"time":34.1328125,"type":"prune"},{"accuracy":[22.673552873627138],"baseline":[28.678957412114354],"branch":[["a",28.678957412114357,1,"binary64"],["b_2",22.673552873627138,3,"binary64"],["c",28.678957412114357,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",25.338633097846884,3,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[49,3]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(neg.f64 (/.f64 #s(literal 6 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","(*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64)))) #s(literal 16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)","(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) a)","(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(/.f64 (+.f64 (*.f64 (*.f64 b_2 b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (+.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(/.f64 (+.f64 (*.f64 b_2 b_2) (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)","(/.f64 (+.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (*.f64 (/.f64 #s(literal 1 binary64) a) (neg.f64 b_2)))","(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (+.f64 (fma.f64 (*.f64 a c) (*.f64 b_2 b_2) b_2) (*.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (*.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)))) a)","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 a a) (*.f64 c c) #s(literal 16 binary64))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)))) a)","(*.f64 (fma.f64 (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (neg.f64 b_2)) (/.f64 b_2 a) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a))) #s(literal 16 binary64))","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(neg.f64 (*.f64 (+.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) (*.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c)) (/.f64 (*.f64 b_2 b_2) a))) #s(literal 16 binary64)))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (fma.f64 c a (*.f64 b_2 b_2)))))) a)","(+.f64 (*.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 c c) (*.f64 (*.f64 a a) a) a)) #s(literal 16 binary64)) (*.f64 (*.f64 (neg.f64 (fma.f64 b_2 #s(literal 16 binary64) (*.f64 a c))) (/.f64 (*.f64 b_2 b_2) a)) #s(literal 16 binary64)))","(/.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 a) c (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2)) b_2)) (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2))) (*.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 (-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) b_2))) a)","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (*.f64 (-.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) a)))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal -1 binary64)) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(*.f64 (*.f64 (pow.f64 (/.f64 a #s(literal 28 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64))) (pow.f64 (/.f64 a #s(literal 28 binary64)) (/.f64 #s(literal -1 binary64) #s(literal 2 binary64)))) #s(literal 16 binary64))","(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal 1/2 binary64) #s(literal 2 binary64)))) b_2) (/.f64 #s(literal -1 binary64) a))"]],"memory":[[1933904,25754352]],"oracle":[64.0],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))"]],"repr":["binary64"],"time":105.97900390625,"times":[[63.47998046875,"a"],[12.098876953125,"b_2"],[12.955078125,"c"],[12.776123046875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[22.673552873627138],"baseline":[28.678957412114354],"branch":[["b_2",22.673552873627138,3,"binary64"]],"compiler":[[1,3]],"count":[[27,3]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(neg.f64 (/.f64 #s(literal 6 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","(*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64)))) #s(literal 16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)","(/.f64 (+.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (neg.f64 b_2) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) a)","(*.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(/.f64 (+.f64 b_2 (*.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)) (fma.f64 (neg.f64 b_2) b_2 (*.f64 a c)))) a)"]],"memory":[[-2365856,5479088]],"oracle":[63.620411592528775],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))"]],"repr":["binary64"],"time":28.298095703125,"times":[[24.319091796875,"b_2"]],"type":"regimes"},{"accuracy":[27.60391525776409],"baseline":[42.67833923804912],"branch":[["a",39.041884326628484,3,"binary64"],["c",38.000717349134646,3,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",35.15799405863777,3,"binary64"],["b_2",27.60391525776409,3,"binary64"]],"compiler":[[1,3],[1,3],[13,10],[1,3]],"count":[[21,3]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(neg.f64 (/.f64 #s(literal 6 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","(*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64)))) #s(literal 16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[-3666912,14395568]],"oracle":[63.60748270030037],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)"]],"repr":["binary64"],"time":65.139892578125,"times":[[9.049072265625,"a"],[7.489990234375,"c"],[10.113037109375,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[35.22607421875,"b_2"]],"type":"regimes"},{"accuracy":[39.76205006176937],"baseline":[43.57452240767065],"branch":[["c",43.574522407670685,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",43.57452240767067,1,"binary64"],["b_2",39.76205006176937,2,"binary64"]],"compiler":[[1,3],[13,10],[1,3]],"count":[[20,2]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(neg.f64 (/.f64 #s(literal 6 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","(*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64)))) #s(literal 16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)","(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))","(neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))"]],"memory":[[2606352,10635520]],"oracle":[63.6018774834463],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)"]],"repr":["binary64"],"time":28.578125,"times":[[10.148193359375,"c"],[8.4951171875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[7.718994140625,"b_2"]],"type":"regimes"},{"accuracy":[57.77272069036344],"baseline":[57.77272069036344],"branch":[["c",57.77272069036344,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",57.772720690363464,1,"binary64"],["a",57.77272069036345,1,"binary64"],["b_2",57.77272069036345,1,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[17,1]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(neg.f64 (/.f64 #s(literal 6 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","(*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64)))) #s(literal 16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal 16 binary64) a))","(*.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) (/.f64 #s(literal -1 binary64) a))","(/.f64 (*.f64 (+.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) #s(literal 16 binary64)) a)"]],"memory":[[4646400,12716160]],"oracle":[63.23781011637571],"outputs":[["(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)"]],"repr":["binary64"],"time":24.97705078125,"times":[[5.01806640625,"c"],[5.735107421875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[5.9931640625,"a"],[6.338134765625,"b_2"]],"type":"regimes"},{"accuracy":[60.56891582794565],"baseline":[60.56891582794567],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",60.56891582794569,1,"binary64"],["a",60.56891582794571,1,"binary64"],["b_2",60.56891582794568,1,"binary64"],["c",60.56891582794565,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[13,1]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 28 binary64) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(neg.f64 (/.f64 #s(literal 6 binary64) a))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal -3 binary64))","(*.f64 (/.f64 #s(literal 16 binary64) a) #s(literal 28 binary64))","(*.f64 (/.f64 #s(literal 28 binary64) a) #s(literal 16 binary64))","(neg.f64 (*.f64 #s(literal 16 binary64) (/.f64 #s(literal 6 binary64) a)))","(*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a #s(literal 28 binary64)))) #s(literal 16 binary64))","(/.f64 (+.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)"]],"memory":[[-7663568,11051232]],"oracle":[63.23728437890703],"outputs":[["(neg.f64 (/.f64 #s(literal -448 binary64) a))"]],"repr":["binary64"],"time":25.490966796875,"times":[[6.33203125,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[6.281005859375,"a"],[6.510009765625,"b_2"],[4.56689453125,"c"]],"type":"regimes"},{"accuracy":[60.57580155819125],"baseline":[60.575801558191245],"branch":[["a",60.57580155819127,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",60.57580155819125,1,"binary64"],["b_2",60.57580155819128,1,"binary64"],["c",60.57580155819128,1,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[5,1]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 28 binary64) a)"]],"memory":[[-369344,7882928]],"oracle":[62.881501244812455],"outputs":[["(/.f64 #s(literal 12 binary64) a)"]],"repr":["binary64"],"time":10.81005859375,"times":[[2.7451171875,"a"],[2.483154296875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[2.177978515625,"b_2"],[2.117919921875,"c"]],"type":"regimes"},{"accuracy":[60.6131743412694],"baseline":[60.613174341269435],"branch":[["b_2",60.61317434126942,1,"binary64"],["c",60.61317434126942,1,"binary64"],["a",60.6131743412694,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",60.61317434126941,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[3,1]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)"]],"memory":[[6995776,6995776]],"oracle":[62.88042839592602],"outputs":[["(/.f64 #s(literal 1/8 binary64) a)"]],"repr":["binary64"],"time":7.761962890625,"times":[[1.906982421875,"b_2"],[1.68701171875,"c"],[1.56689453125,"a"],[1.754150390625,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[62.578216442448564],"baseline":[62.57821644244857],"branch":[["b_2",62.578216442448586,1,"binary64"],["c",62.578216442448564,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",62.57821644244858,1,"binary64"],["a",62.57821644244859,1,"binary64"]],"compiler":[[1,3],[1,3],[13,10],[1,3]],"count":[[2,1]],"inputs":[["(/.f64 #s(literal -3 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)"]],"memory":[[-1815456,6531792]],"oracle":[62.582503142274916],"outputs":[["(/.f64 #s(literal -1/2 binary64) a)"]],"repr":["binary64"],"time":6.5830078125,"times":[[1.518798828125,"b_2"],[1.34814453125,"c"],[1.373046875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.470947265625,"a"]],"type":"regimes"},{"accuracy":[62.581754901395286],"baseline":[62.581754901395286],"branch":[["a",62.58175490139532,1,"binary64"],["b_2",62.58175490139531,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",62.58175490139532,1,"binary64"],["c",62.581754901395286,1,"binary64"]],"compiler":[[1,3],[1,3],[13,10],[1,3]],"count":[[1,1]],"inputs":[["(/.f64 #s(literal -3 binary64) a)"]],"link":["."],"memory":[[-2151984,6171968]],"name":["quad2p (problem 3.2.1, positive)"],"oracle":[62.581754901395286],"outputs":[["(/.f64 #s(literal -3 binary64) a)"]],"repr":["binary64"],"time":5.36083984375,"times":[[1.125,"a"],[1.109130859375,"b_2"],[1.25390625,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.156982421875,"c"]],"type":"regimes"},{"bstep":[[11.640869140625,7.347389268350515e+160,1.466879225360905e+161],[17.5830078125,-2.83572551492328e+154,-1.8540943341282057e+145]],"compiler":[[19,13],[13,11],[19,13],[13,11],[19,13],[13,11],[19,13],[13,11],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[15,13],[1,3]],"memory":[[1219632,9614976]],"method":["binary-search","binary-search"],"mixsample":[[0.30615234375,"ival-sqrt",2000],[2.260009765625,"ival-div",0],[1.2138671875,"adjust",800],[0.4677734375,"ival-sqrt",800],[0.144775390625,"ival-sub",2000],[0.0908203125,"ival-assert",0],[1.58349609375,"ival-sub",0],[1.6865234375,"ival-sqrt",0],[0.02197265625,"ival-sqrt",4400],[0.4169921875,"adjust",2000],[0.008056640625,"ival-sub",4400],[0.323486328125,"ival-mult",800],[1.494384765625,"ival-add",0],[0.271240234375,"ival-sub",800],[0.046630859375,"ival-mult",400],[2.861083984375,"ival-mult",0],[0.02294921875,"adjust",2800],[0.173095703125,"ival-true",0],[1.04833984375,"ival-neg",0]],"outcomes":[[3.283447265625,1,"valid",27],[0.235107421875,0,"invalid",3],[5.176025390625,2,"valid",29],[0.40478515625,3,"valid",2],[12.192138671875,0,"valid",150]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":33.398193359375,"type":"bsearch"},{"bstep":[[0.5068359375,7.347389268350515e+160,1.466879225360905e+161],[1.018798828125,-2.83572551492328e+154,-1.8540943341282057e+145]],"compiler":[[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[13,11],[15,12],[15,13],[1,3]],"memory":[[1064672,1064672]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":2.119873046875,"type":"bsearch"},{"bstep":[[30.003173828125,3.4036191743401736e+36,6.596968583029889e+43],[23.5400390625,-1.0158002827550504e-61,-6.017154964834652e-74]],"compiler":[[12,9],[12,10],[12,9],[12,10],[12,9],[12,10],[12,9],[12,10],[12,9],[12,10],[12,9],[12,10],[12,9],[12,10],[12,9],[12,10],[12,9],[12,10],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[12,10],[15,12],[15,13],[1,3]],"memory":[[-841152,15208560]],"method":["binary-search","binary-search"],"mixsample":[[2.206298828125,"adjust",800],[4.429931640625,"ival-div",0],[0.32421875,"ival-sub",1600],[0.017822265625,"ival-mult",2000],[0.022705078125,"ival-sqrt",800],[0.150146484375,"ival-assert",0],[0.048095703125,"ival-sqrt",4000],[1.787353515625,"ival-sub",0],[2.576904296875,"ival-sqrt",0],[0.554931640625,"ival-sub",400],[0.6826171875,"adjust",2000],[0.037109375,"ival-mult",800],[2.93701171875,"ival-add",0],[6.22802734375,"ival-mult",0],[0.61962890625,"ival-mult",400],[0.390625,"ival-sqrt",1600],[0.01611328125,"ival-sub",800],[0.005859375,"ival-mult",1600],[0.06494140625,"adjust",2800],[0.329345703125,"ival-true",0],[0.0244140625,"ival-sub",4000],[0.96533203125,"ival-sqrt",400],[1.8837890625,"ival-neg",0]],"outcomes":[[9.048583984375,1,"valid",57],[8.384033203125,2,"valid",43],[3.2724609375,0,"invalid",45],[1.408447265625,3,"valid",4],[16.715576171875,0,"valid",200]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":59.14111328125,"type":"bsearch"},{"bstep":[[16.697998046875,3.3320790064252605e-16,1.1070410435100718e-15]],"compiler":[[12,9],[15,12],[12,9],[15,12],[12,9],[15,12],[12,9],[15,12],[12,9],[15,12],[15,13],[1,3]],"memory":[[-3104928,4753376]],"method":["binary-search"],"mixsample":[[1.324462890625,"ival-div",0],[1.082275390625,"adjust",800],[0.012939453125,"ival-mult",800],[0.893310546875,"ival-add",0],[0.18115234375,"ival-sqrt",1600],[0.1533203125,"ival-mult",400],[1.439697265625,"ival-mult",0],[0.106689453125,"ival-sub",1600],[0.0263671875,"ival-assert",0],[0.570068359375,"ival-sub",0],[0.158935546875,"ival-true",0],[0.252197265625,"ival-sub",400],[0.725830078125,"ival-sqrt",0],[0.336181640625,"adjust",2000],[1.503173828125,"ival-neg",0],[0.360107421875,"ival-sqrt",400]],"outcomes":[[4.640869140625,1,"valid",25],[4.407470703125,2,"valid",22],[1.1953125,0,"invalid",17],[2.735595703125,0,"valid",33]],"stop":[["narrow-enough",1]],"time":18.743896484375,"type":"bsearch"},{"inputs":[["(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))))","(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))))","(if (<=.f64 b_2 #s(literal -242445077749771/124330809102446660538845562036705210025114037699336929360115994223289874253133343883264 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (if (<=.f64 b_2 #s(literal 8000000000000000359085701424607334284394496 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))","(if (<=.f64 b_2 #s(literal 2636713248474717/5070602400912917605986812821504 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal -3 binary64) a)"]],"memory":[[-234384,17481344]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))))","(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (neg.f64 #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))))","(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a)))))","(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (neg.f64 #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))))","(if (<=.f64 b_2 #s(literal -242445077749771/124330809102446660538845562036705210025114037699336929360115994223289874253133343883264 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (if (<=.f64 b_2 #s(literal 8000000000000000359085701424607334284394496 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))","(if (<=.f64 b_2 #s(literal -242445077749771/124330809102446660538845562036705210025114037699336929360115994223289874253133343883264 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (if (<=.f64 b_2 #s(literal 8000000000000000359085701424607334284394496 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))","(if (<=.f64 b_2 #s(literal 2636713248474717/5070602400912917605986812821504 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2))) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))","(if (<=.f64 b_2 #s(literal 2636713248474717/5070602400912917605986812821504 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))","(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)","(neg.f64 (/.f64 #s(literal -448 binary64) a))","(/.f64 (neg.f64 #s(literal -448 binary64)) a)","(/.f64 #s(literal 12 binary64) a)","(/.f64 #s(literal 1/8 binary64) a)","(/.f64 #s(literal -1/2 binary64) a)","(/.f64 #s(literal -3 binary64) a)"]],"time":159.39794921875,"type":"simplify"},{"compiler":[[208,60]],"memory":[[2606944,2606944]],"stop":[["fuel",1]],"time":4.18505859375,"type":"soundness"},{"compiler":[[208,60],[208,60],[89,26],[89,26],[13,10],[13,10]],"memory":[[2123968,50392304]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[]],"time":82.7890625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.013916015625,"type":"end"}]