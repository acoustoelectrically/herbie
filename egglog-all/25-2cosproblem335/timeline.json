[{"memory":[[27264,27264]],"time":0.099853515625,"type":"start"},{"compiler":[[27,19]],"memory":[[4652544,12805376]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":129.4580078125,"type":"analyze"},{"bogosity":[{"invalid":0.49929134691837646,"precondition":0.4942799140699208,"valid":0.006428739011702773}],"memory":[[-54210624,1812843520]],"mixsample":[[364.057861328125,"adjust",800],[2115.72119140625,"ival-cos",1600],[19.945068359375,"ival-assert",0],[359.460693359375,"ival-sub",0],[732.863525390625,"ival-cos",0],[150.2958984375,"ival-and",0],[0.034423828125,"ival-sub",400],[776.450439453125,"const",0],[277.351318359375,"ival-cos",400],[194.975830078125,"adjust",2000],[272.75390625,"ival-add",0],[0.062744140625,"ival-sub",800],[350.4013671875,"ival-mult",0],[272.75439453125,"ival-fabs",0],[4.135498046875,"ival-add",400],[2.271728515625,"ival-add",800],[277.8935546875,"ival-<=",0],[67.828369140625,"exact",0],[213.486328125,"ival-<",0]],"outcomes":[[626.513427734375,1,"valid",2473],[3826.68310546875,0,"invalid",25993],[3725.055908203125,2,"valid",5670],[23.074951171875,0,"valid",113]],"time":10030.43017578125,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[139,0,0,117]],"explanations":[["cos.f64","(cos.f64 (+.f64 x eps))","sensitivity",1,0,[],[[1]]],["-.f64","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cancellation",139,0,[],[[]]]],"fperrors":[["(cos.f64 (+.f64 x eps))",1,0,false,0,false],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",139,0,false,0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,1],[1,138],[0,117]],"maybe-confusion":[[139,0,0,0,0,117]],"memory":[[-30088768,46314000]],"mixsample":[[13.16015625,"adjust",800],[3.464111328125,"ival-add",0],[102.27294921875,"ival-cos",1600],[0.239990234375,"ival-assert",0],[0.237060546875,"ival-add",400],[7.60791015625,"ival-sub",0],[0.564697265625,"ival-true",0],[9.208984375,"ival-cos",0],[13.590576171875,"ival-cos",400],[0.16162109375,"ival-add",800],[8.294189453125,"adjust",2000]],"outcomes":[[25.33837890625,1,"valid",162],[160.51171875,2,"valid",344],[0.640380859375,0,"valid",6]],"time":241.614013671875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"memory":[[3930912,20817632]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"symmetry":[[]],"time":297.462890625,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.151123046875,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","next",31.445175300803,"binary64"]],"compiler":[[7,6]],"memory":[[302208,302208]],"time":0.685791015625,"type":"prune"},{"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(cos.f64 x)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(cos.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cost-diff",0]],"memory":[[-6422976,10095632]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(cos.f64 x)"]],"time":151.3720703125,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(cos.f64 x)","accuracy",0.0],["(cos.f64 (+.f64 x eps))","accuracy",0.03848339469303147],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","accuracy",31.398094642736126]],"memory":[[3825440,12942176]],"mixsample":[[7.93798828125,"adjust",800],[1.88720703125,"ival-add",0],[54.43115234375,"ival-cos",1600],[0.16455078125,"ival-assert",0],[0.125732421875,"ival-add",400],[4.222900390625,"ival-sub",0],[0.31494140625,"ival-true",0],[5.54296875,"ival-cos",0],[7.9208984375,"ival-cos",400],[0.06640625,"ival-add",800],[4.444091796875,"adjust",2000]],"outcomes":[[15.5263671875,1,"valid",81],[88.476806640625,2,"valid",172],[0.5029296875,0,"valid",3]],"time":117.072998046875,"type":"localize"},{"count":[[4,33]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[1888768,1888768]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.689208984375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","-inf"],[0.824951171875,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","inf"],[0.955078125,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","0"],[0.47314453125,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","-inf"],[0.450927734375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","inf"],[1.06201171875,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","0"]],"time":5.112060546875,"type":"series"},{"count":[[33,0]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[-6297184,9730976]],"method":["egg-herbie"],"outputs":[[]],"time":123.10595703125,"type":"simplify"},{"count":[[4,46]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[-1735744,15946544]],"outputs":[["(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(neg.f64 (/.f64 (+.f64 (neg.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(+.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))","(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(+.f64 (/.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (neg.f64 (/.f64 (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (cos.f64 x) (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(-.f64 (+.f64 (cos.f64 (+.f64 x eps)) #s(literal 0 binary64)) (cos.f64 x))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (cos.f64 (-.f64 x eps))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (cos.f64 (-.f64 x eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))","(*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps))))","(*.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (cos.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))) (neg.f64 (cos.f64 (-.f64 x eps))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))))","(/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (cos.f64 (-.f64 x eps)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 x eps))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) #s(literal 4 binary64))","(neg.f64 (/.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps)) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 x x) x (*.f64 (*.f64 eps eps) eps))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (-.f64 x eps)))","(+.f64 x eps)","(+.f64 eps x)","(+.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (neg.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(*.f64 #s(literal 1 binary64) (+.f64 x eps))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (/.f64 #s(literal 1 binary64) (-.f64 x eps)))","(*.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 x eps)) (*.f64 (+.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 x eps) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (neg.f64 (*.f64 (+.f64 x eps) (-.f64 x eps))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x eps))))","(cos.f64 x)"]],"time":402.6279296875,"type":"rewrite"},{"compiler":[[970,196]],"memory":[[4491744,4491744]],"time":6.205078125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","next",31.444267666848503,"binary64"],["(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","next",31.48786924047781,"binary64"],["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","next",31.398094642736126,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",31.445175300803,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","next",12.866034425574362,"binary64"],["(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","next",31.443346114207202,"binary64"]],"compiler":[[19,12],[19,12],[13,9],[7,6],[16,12],[27,18],[19,12],[19,12],[13,9],[16,12],[27,18]],"count":[[47,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[46,5],"picked":[1,1]}],"memory":[[-3992112,4283840]],"min-error":[[12.866034425574362,"binary64"]],"time":5.444091796875,"type":"prune"},{"inputs":[["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(neg.f64 (cos.f64 x))","(cos.f64 x)","x","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 eps)","eps","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(neg.f64 (sin.f64 x))","(sin.f64 x)","(sin.f64 eps)","(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","(*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps))))","(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","(cos.f64 (-.f64 x eps))","(-.f64 x eps)","x","eps","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))","#s(literal 1 binary64)","(cos.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))))","#s(literal 1 binary64)","(/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))","(cos.f64 (-.f64 x eps))","(-.f64 x eps)","x","eps","(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)","(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64)))","(*.f64 (+.f64 x eps) #s(literal 2 binary64))","(+.f64 x eps)","x","eps","#s(literal 2 binary64)","#s(literal 1/2 binary64)","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","(neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(cos.f64 x)","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 x)","x","(cos.f64 eps)","eps","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))","(sin.f64 x)","(sin.f64 eps)"]],"locations":[["(cos.f64 eps)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(*.f64 (cos.f64 x) (cos.f64 eps))","cost-diff",0],["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","cost-diff",0],["(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","cost-diff",0],["(/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","cost-diff",0],["(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","cost-diff",2],["(-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","cost-diff",4],["(cos.f64 (-.f64 x eps))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))))","cost-diff",4],["(/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))","cost-diff",8],["(cos.f64 (-.f64 x eps))","cost-diff",0],["(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","cost-diff",0],["(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","cost-diff",0],["(*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps))))","cost-diff",12],["(cos.f64 x)","cost-diff",0],["(neg.f64 (cos.f64 x))","cost-diff",0],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","cost-diff",1],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","cost-diff",2]],"memory":[[5616672,13824208]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(fma.f64 (+.f64 (cos.f64 eps) #s(literal -1 binary64)) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (+.f64 (cos.f64 eps) #s(literal -1 binary64)) (cos.f64 x))","(neg.f64 (cos.f64 x))","(cos.f64 x)","x","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 eps)","eps","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(neg.f64 (sin.f64 x))","(sin.f64 x)","(sin.f64 eps)","(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps))))","(cos.f64 (+.f64 x eps))","(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","(cos.f64 (-.f64 x eps))","(-.f64 x eps)","x","eps","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))","#s(literal 1 binary64)","(cos.f64 x)","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))))","(cos.f64 (+.f64 x eps))","#s(literal 1 binary64)","(/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal 1 binary64) (cos.f64 (+.f64 x eps)))","(cos.f64 (-.f64 x eps))","(-.f64 x eps)","x","eps","(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)","(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) (cos.f64 (+.f64 x x)))) (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) (cos.f64 (+.f64 x x)))) (-.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (-.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) (cos.f64 (+.f64 x x))))","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64)))","(*.f64 (+.f64 x eps) #s(literal 2 binary64))","(+.f64 x eps)","x","eps","#s(literal 2 binary64)","#s(literal 1/2 binary64)","(fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(cos.f64 (+.f64 x x))","(+.f64 x x)","(neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(-.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(cos.f64 x)","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 eps) #s(literal -1 binary64)) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 x)","x","(cos.f64 eps)","eps","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))","(sin.f64 x)","(sin.f64 eps)"]],"time":531.1728515625,"type":"simplify"},{"compiler":[[377,44]],"locations":[["(*.f64 (cos.f64 x) (cos.f64 eps))","accuracy",0.00390625],["(sin.f64 x)","accuracy",0.00390625],["(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))","accuracy",0.01953125],["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","accuracy",31.401421564811503],["(/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","accuracy",0.015625],["(cos.f64 (+.f64 x eps))","accuracy",0.03848339469303147],["(cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64)))","accuracy",0.06861899566616902],["(-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","accuracy",31.37054101694362],["(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","accuracy",0.03125],["(cos.f64 (-.f64 x eps))","accuracy",0.037441259768442016],["(cos.f64 (+.f64 x eps))","accuracy",0.03848339469303147],["(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","accuracy",31.398094642736126],["(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","accuracy",0.03125],["(cos.f64 (-.f64 x eps))","accuracy",0.037441259768442016],["(cos.f64 (+.f64 x eps))","accuracy",0.03848339469303147],["(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","accuracy",31.398094642736126],["(sin.f64 x)","accuracy",0.00390625],["(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","accuracy",0.015625],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","accuracy",0.08203125],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","accuracy",30.84722130862453]],"memory":[[636752,96490544]],"mixsample":[[11.06787109375,"ival-div",0],[33.12255859375,"adjust",800],[2.11572265625,"ival-mult",1200],[5.854736328125,"ival-div",400],[5.02099609375,"ival-div",1600],[0.2041015625,"ival-assert",0],[0.412109375,"ival-neg",800],[15.482177734375,"ival-sub",0],[13.331298828125,"ival-cos",0],[22.68994140625,"ival-cos",1200],[12.829833984375,"ival-cos",400],[0.3583984375,"ival-neg",400],[1.0703125,"ival-mult",800],[15.4833984375,"ival-add",0],[1.369140625,"ival-neg",1200],[6.42041015625,"ival-mult",1600],[5.312255859375,"ival-add",400],[21.519287109375,"ival-sin",800],[109.7451171875,"ival-cos",1600],[0.455078125,"ival-mult",2000],[21.143310546875,"adjust",2000],[75.993408203125,"ival-cos",3200],[0.717041015625,"ival-neg",3200],[2.705078125,"ival-add",1600],[7.782958984375,"ival-mult",400],[16.68505859375,"ival-mult",0],[2.435791015625,"ival-sin",400],[5.4072265625,"ival-sin",0],[7.67236328125,"ival-cos",2000],[0.6806640625,"ival-add",2000],[0.03076171875,"ival-neg",2000],[0.528076171875,"ival-true",0],[1.5341796875,"ival-mult",3200],[0.656494140625,"ival-add",800],[0.609130859375,"exact",0],[10.29052734375,"ival-neg",0]],"outcomes":[[78.35693359375,1,"valid",83],[436.227294921875,2,"valid",172],[0.35302734375,0,"valid",1]],"time":586.153076171875,"type":"localize"},{"count":[[23,162]],"inputs":[["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(neg.f64 (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps))))","(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","(cos.f64 (-.f64 x eps))","(/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","(-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 eps)","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(sin.f64 x)","(cos.f64 (+.f64 x eps))","(cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))"]],"memory":[[-2267776,15169120]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (* -1/2 (cos eps))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (* 1/24 (cos eps)) 1/24)))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (+ (* 1/24 (cos eps)) (* (pow x 2) (+ 1/720 (* -1/720 (cos eps))))) 1/24)))))) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ 1/2 (* -1/2 (cos eps))))))) 1)","(- (+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))))))) 1)","-1","(- (* 1/2 (pow x 2)) 1)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (cos eps) (cos (neg eps)))","(+ (* x (+ (* -1 (* (cos eps) (sin (neg eps)))) (* -1 (* (cos (neg eps)) (sin eps))))) (* (cos eps) (cos (neg eps))))","(+ (* x (+ (* -1 (* (cos eps) (sin (neg eps)))) (+ (* -1 (* (cos (neg eps)) (sin eps))) (* x (+ (* -1 (* (cos eps) (cos (neg eps)))) (* (sin eps) (sin (neg eps)))))))) (* (cos eps) (cos (neg eps))))","(+ (* x (+ (* -1 (* (cos eps) (sin (neg eps)))) (+ (* -1 (* (cos (neg eps)) (sin eps))) (* x (+ (* -1 (* (cos eps) (cos (neg eps)))) (+ (* x (+ (* 1/6 (* (cos eps) (sin (neg eps)))) (+ (* 1/6 (* (cos (neg eps)) (sin eps))) (+ (* 1/2 (* (cos eps) (sin (neg eps)))) (* 1/2 (* (cos (neg eps)) (sin eps))))))) (* (sin eps) (sin (neg eps))))))))) (* (cos eps) (cos (neg eps))))","(cos (neg eps))","(+ (cos (neg eps)) (* -1 (* x (sin (neg eps)))))","(+ (cos (neg eps)) (* x (- (* -1/2 (* x (cos (neg eps)))) (sin (neg eps)))))","(+ (cos (neg eps)) (* x (- (* x (+ (* -1/2 (cos (neg eps))) (* 1/6 (* x (sin (neg eps)))))) (sin (neg eps)))))","(/ 1 (cos eps))","(+ (/ 1 (cos eps)) (/ (* x (sin eps)) (pow (cos eps) 2)))","(+ (* x (- (* x (- (* 1/2 (/ 1 (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (* -1 (/ (sin eps) (pow (cos eps) 2))))) (/ 1 (cos eps)))","(+ (* x (- (* x (- (+ (* -1 (* x (+ (* -1 (/ (* (sin eps) (- (* 1/2 (/ 1 (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (cos eps))) (+ (* -1/2 (/ (sin eps) (pow (cos eps) 2))) (* 1/6 (/ (sin eps) (pow (cos eps) 2))))))) (* 1/2 (/ 1 (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (* -1 (/ (sin eps) (pow (cos eps) 2))))) (/ 1 (cos eps)))","(- (* 1/2 (cos (* 2 eps))) 1/2)","(- (+ (* -1 (* x (sin (* 2 eps)))) (* 1/2 (cos (* 2 eps)))) 1/2)","(- (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* x (+ 1 (* -1 (cos (* 2 eps)))))))) 1/2)","(- (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* x (+ 1 (+ (* -1 (cos (* 2 eps))) (* 2/3 (* x (sin (* 2 eps)))))))))) 1/2)","(/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))","(- (* x (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(- (* x (- (* x (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(- (* x (- (* x (- (* x (- (* 2/3 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (+ (* 1/6 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))) (/ (* (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))) (- (* -1/2 (cos eps)) 1/2)) (+ 1 (cos eps))))))) (* -1 (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))) (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps))))","(+ (* -1 (* x (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(+ (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))) (* x (+ (* -1 (* x (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))))) (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))))","(+ (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))) (* x (+ (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (* x (+ (* -1 (* x (- (* 2/3 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (+ (* 1/6 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))) (/ (* (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))) (- (* -1/2 (cos eps)) 1/2)) (+ 1 (cos eps)))))))) (* -1 (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))))))","(+ 1/2 (* 1/2 (cos (* 2 eps))))","(+ 1/2 (+ (* -1 (* x (sin (* 2 eps)))) (* 1/2 (cos (* 2 eps)))))","(+ 1/2 (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* -1 (* x (cos (* 2 eps))))))))","(+ 1/2 (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* x (+ (* -1 (cos (* 2 eps))) (* 2/3 (* x (sin (* 2 eps))))))))))","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(cos (* 2 eps))","(+ (cos (* 2 eps)) (* -2 (* x (sin (* 2 eps)))))","(+ (cos (* 2 eps)) (* x (- (* -2 (* x (cos (* 2 eps)))) (* 2 (sin (* 2 eps))))))","(+ (cos (* 2 eps)) (* x (- (* x (+ (* -2 (cos (* 2 eps))) (* 4/3 (* x (sin (* 2 eps)))))) (* 2 (sin (* 2 eps))))))","(+ 1 (* x (sin eps)))","(+ 1 (* x (+ (sin eps) (* -1/2 x))))","(+ 1 (* x (+ (sin eps) (* x (- (* -1/6 (* x (sin eps))) 1/2)))))","(- (* (cos eps) (cos x)) (cos x))","(- (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x))) (cos x))","(* -1 (cos x))","(cos x)","(cos (+ eps x))","(- (cos (+ eps x)) (cos x))","(* (cos (+ eps x)) (cos (- x eps)))","(cos (- x eps))","(/ 1 (cos (+ eps x)))","(- (* 1/2 (cos (* 2 (+ eps x)))) (* 1/2 (cos (* 2 x))))","(/ (- (* 1/2 (cos (* 2 (+ eps x)))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (+ eps x))))","(* -1 (/ (- (* 1/2 (cos (* 2 (+ eps x)))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (+ eps x)))))","(+ 1/2 (* 1/2 (cos (* 2 (+ eps x)))))","(- (* (cos eps) (cos x)) (+ (cos x) (* (sin eps) (sin x))))","(* (cos eps) (cos x))","(* -1 (* (sin eps) (sin x)))","(sin x)","(cos (* 2 (+ eps x)))","(+ (cos x) (* (sin eps) (sin x)))","(cos (- eps (* -1 x)))","(- (cos (- eps (* -1 x))) (cos x))","(* (cos (neg (+ eps (* -1 x)))) (cos (- eps (* -1 x))))","(cos (neg (+ eps (* -1 x))))","(/ 1 (cos (- eps (* -1 x))))","(- (* 1/2 (cos (* 2 (- eps (* -1 x))))) (* 1/2 (cos (neg (* -2 x)))))","(/ (- (* 1/2 (cos (* 2 (- eps (* -1 x))))) (* 1/2 (cos (neg (* -2 x))))) (+ (cos x) (cos (- eps (* -1 x)))))","(* -1 (/ (- (* 1/2 (cos (* 2 (- eps (* -1 x))))) (* 1/2 (cos (neg (* -2 x))))) (+ (cos x) (cos (- eps (* -1 x))))))","(+ 1/2 (* 1/2 (cos (* 2 (- eps (* -1 x))))))","(cos (* 2 (- eps (* -1 x))))","(* -1/2 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x)))))","(* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x))))))","(* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* 1/24 (cos x)) (* (pow eps 2) (+ (* -1/720 (cos x)) (* 1/40320 (* (pow eps 2) (cos x)))))))))","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(pow (cos x) 2)","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (* -1 (pow (sin x) 2)))) (* (cos x) (sin x))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (+ (* -1 (pow (sin x) 2)) (* eps (+ (* -1/2 (* (cos x) (sin x))) (+ (* -1/6 (* (cos x) (sin x))) (+ (* 1/6 (* (cos x) (sin x))) (* 1/2 (* (cos x) (sin x)))))))))) (* (cos x) (sin x))))) (pow (cos x) 2))","(+ (cos x) (* eps (sin x)))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (* -1 (sin x)))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* -1/6 (* eps (sin x))))) (* -1 (sin x)))))","(/ 1 (cos x))","(+ (/ 1 (cos x)) (/ (* eps (sin x)) (pow (cos x) 2)))","(+ (* eps (- (* eps (- (* 1/2 (/ 1 (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 2))) (* 1/6 (/ (sin x) (pow (cos x) 2))))))) (* 1/2 (/ 1 (cos x)))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(* -1 (* eps (sin (* 2 x))))","(* eps (+ (* -1 (sin (* 2 x))) (* -1 (* eps (cos (* 2 x))))))","(* eps (+ (* -1 (sin (* 2 x))) (* eps (+ (* -1 (cos (* 2 x))) (* 2/3 (* eps (sin (* 2 x))))))))","(* eps (+ (* -1 (sin (* 2 x))) (* eps (+ (* -1 (cos (* 2 x))) (* eps (+ (* 1/3 (* eps (cos (* 2 x)))) (* 2/3 (sin (* 2 x)))))))))","(* -1/2 (/ (* eps (sin (* 2 x))) (cos x)))","(* eps (- (* eps (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* eps (- (* eps (- (* eps (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))) (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* eps (- (* eps (- (* eps (- (* eps (- (* 1/6 (/ (cos (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))) (cos x))) (+ (* -1/4 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* -1/24 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))))) (* -1 (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))))) (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* 1/2 (/ (* eps (sin (* 2 x))) (cos x)))","(* eps (+ (* -1 (* eps (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2)))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* eps (+ (* 1/2 (/ (sin (* 2 x)) (cos x))) (* eps (+ (* -1 (* eps (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x))))))) (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2)))))))))","(* eps (+ (* 1/2 (/ (sin (* 2 x)) (cos x))) (* eps (+ (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* eps (+ (* -1 (* eps (- (* 1/6 (/ (cos (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))) (cos x))) (+ (* -1/4 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* -1/24 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2)))))))) (* -1 (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x))))))))))))","(+ 1/2 (* 1/2 (cos (* 2 x))))","(+ 1/2 (+ (* -1 (* eps (sin (* 2 x)))) (* 1/2 (cos (* 2 x)))))","(+ 1/2 (+ (* 1/2 (cos (* 2 x))) (* eps (+ (* -1 (sin (* 2 x))) (* -1 (* eps (cos (* 2 x))))))))","(+ 1/2 (+ (* 1/2 (cos (* 2 x))) (* eps (+ (* -1 (sin (* 2 x))) (* eps (+ (* -1 (cos (* 2 x))) (* 2/3 (* eps (sin (* 2 x))))))))))","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","(cos (* 2 x))","(+ (cos (* 2 x)) (* -2 (* eps (sin (* 2 x)))))","(+ (cos (* 2 x)) (* eps (- (* -2 (* eps (cos (* 2 x)))) (* 2 (sin (* 2 x))))))","(+ (cos (* 2 x)) (* eps (- (* eps (+ (* -2 (cos (* 2 x))) (* 4/3 (* eps (sin (* 2 x)))))) (* 2 (sin (* 2 x))))))","(+ (cos x) (* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x))))))","(+ (cos x) (* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x))))))))","(cos (- x (* -1 eps)))","(- (cos (- x (* -1 eps))) (cos x))","(* (cos (+ x (* -1 eps))) (cos (- x (* -1 eps))))","(cos (+ x (* -1 eps)))","(/ 1 (cos (- x (* -1 eps))))","(- (* 1/2 (cos (* 2 (- x (* -1 eps))))) (* 1/2 (cos (* 2 x))))","(/ (- (* 1/2 (cos (* 2 (- x (* -1 eps))))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (- x (* -1 eps)))))","(* -1 (/ (- (* 1/2 (cos (* 2 (- x (* -1 eps))))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (- x (* -1 eps))))))","(+ 1/2 (* 1/2 (cos (* 2 (- x (* -1 eps))))))","(cos (* 2 (- x (* -1 eps))))"]],"series":[[5.6630859375,"((+ (neg (cos x)) (* (cos x) (cos eps))) (+ (+ (neg (cos x)) (* (cos x) (cos eps))) (* (neg (sin x)) (sin eps))) (neg (cos x)) (cos x) (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (- (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (cos x)) (* (cos (- x eps)) (cos (+ x eps))) (cos (- x eps)) (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps)))) (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (- (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (cos x)) (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x))))) (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x)))) (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos eps) (* (neg (sin x)) (sin eps)) (sin x) (cos (+ x eps)) (cos (* (+ x eps) 2)) (+ (* (sin x) (sin eps)) (cos x)))","eps","-inf"],[5.587890625,"((+ (neg (cos x)) (* (cos x) (cos eps))) (+ (+ (neg (cos x)) (* (cos x) (cos eps))) (* (neg (sin x)) (sin eps))) (neg (cos x)) (cos x) (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (- (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (cos x)) (* (cos (- x eps)) (cos (+ x eps))) (cos (- x eps)) (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps)))) (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (- (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (cos x)) (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x))))) (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x)))) (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos eps) (* (neg (sin x)) (sin eps)) (sin x) (cos (+ x eps)) (cos (* (+ x eps) 2)) (+ (* (sin x) (sin eps)) (cos x)))","eps","inf"],[9.218994140625,"((+ (neg (cos x)) (* (cos x) (cos eps))) (+ (+ (neg (cos x)) (* (cos x) (cos eps))) (* (neg (sin x)) (sin eps))) (neg (cos x)) (cos x) (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (- (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (cos x)) (* (cos (- x eps)) (cos (+ x eps))) (cos (- x eps)) (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps)))) (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (- (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (cos x)) (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x))))) (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x)))) (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos eps) (* (neg (sin x)) (sin eps)) (sin x) (cos (+ x eps)) (cos (* (+ x eps) 2)) (+ (* (sin x) (sin eps)) (cos x)))","eps","0"],[7.293212890625,"((+ (neg (cos x)) (* (cos x) (cos eps))) (+ (+ (neg (cos x)) (* (cos x) (cos eps))) (* (neg (sin x)) (sin eps))) (neg (cos x)) (cos x) (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (- (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (cos x)) (* (cos (- x eps)) (cos (+ x eps))) (cos (- x eps)) (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps)))) (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (- (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (cos x)) (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x))))) (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x)))) (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos eps) (* (neg (sin x)) (sin eps)) (sin x) (cos (+ x eps)) (cos (* (+ x eps) 2)) (+ (* (sin x) (sin eps)) (cos x)))","x","-inf"],[5.928955078125,"((+ (neg (cos x)) (* (cos x) (cos eps))) (+ (+ (neg (cos x)) (* (cos x) (cos eps))) (* (neg (sin x)) (sin eps))) (neg (cos x)) (cos x) (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (- (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (cos x)) (* (cos (- x eps)) (cos (+ x eps))) (cos (- x eps)) (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps)))) (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (- (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (cos x)) (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x))))) (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x)))) (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos eps) (* (neg (sin x)) (sin eps)) (sin x) (cos (+ x eps)) (cos (* (+ x eps) 2)) (+ (* (sin x) (sin eps)) (cos x)))","x","inf"],[8.35888671875,"((+ (neg (cos x)) (* (cos x) (cos eps))) (+ (+ (neg (cos x)) (* (cos x) (cos eps))) (* (neg (sin x)) (sin eps))) (neg (cos x)) (cos x) (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (- (* (* (cos (- x eps)) (cos (+ x eps))) (/ 1 (cos (- x eps)))) (cos x)) (* (cos (- x eps)) (cos (+ x eps))) (cos (- x eps)) (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps)))) (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (- (/ 1 (/ (cos (- x eps)) (* (cos (- x eps)) (cos (+ x eps))))) (cos x)) (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x))))) (/ (- (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (+ (* (cos (+ x x)) 1/2) 1/2)) (neg (+ (cos (+ x eps)) (cos x)))) (+ (* (cos (* (+ x eps) 2)) 1/2) 1/2) (- (* (cos x) (cos eps)) (+ (* (sin x) (sin eps)) (cos x))) (* (cos x) (cos eps)) (cos eps) (* (neg (sin x)) (sin eps)) (sin x) (cos (+ x eps)) (cos (* (+ x eps) 2)) (+ (* (sin x) (sin eps)) (cos x)))","x","0"]],"time":48.693115234375,"type":"series"},{"count":[[162,0]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (* -1/2 (cos eps))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (* 1/24 (cos eps)) 1/24)))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (+ (* 1/24 (cos eps)) (* (pow x 2) (+ 1/720 (* -1/720 (cos eps))))) 1/24)))))) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ 1/2 (* -1/2 (cos eps))))))) 1)","(- (+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))))))) 1)","-1","(- (* 1/2 (pow x 2)) 1)","(- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1)","(- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (cos eps) (cos (neg eps)))","(+ (* x (+ (* -1 (* (cos eps) (sin (neg eps)))) (* -1 (* (cos (neg eps)) (sin eps))))) (* (cos eps) (cos (neg eps))))","(+ (* x (+ (* -1 (* (cos eps) (sin (neg eps)))) (+ (* -1 (* (cos (neg eps)) (sin eps))) (* x (+ (* -1 (* (cos eps) (cos (neg eps)))) (* (sin eps) (sin (neg eps)))))))) (* (cos eps) (cos (neg eps))))","(+ (* x (+ (* -1 (* (cos eps) (sin (neg eps)))) (+ (* -1 (* (cos (neg eps)) (sin eps))) (* x (+ (* -1 (* (cos eps) (cos (neg eps)))) (+ (* x (+ (* 1/6 (* (cos eps) (sin (neg eps)))) (+ (* 1/6 (* (cos (neg eps)) (sin eps))) (+ (* 1/2 (* (cos eps) (sin (neg eps)))) (* 1/2 (* (cos (neg eps)) (sin eps))))))) (* (sin eps) (sin (neg eps))))))))) (* (cos eps) (cos (neg eps))))","(cos (neg eps))","(+ (cos (neg eps)) (* -1 (* x (sin (neg eps)))))","(+ (cos (neg eps)) (* x (- (* -1/2 (* x (cos (neg eps)))) (sin (neg eps)))))","(+ (cos (neg eps)) (* x (- (* x (+ (* -1/2 (cos (neg eps))) (* 1/6 (* x (sin (neg eps)))))) (sin (neg eps)))))","(/ 1 (cos eps))","(+ (/ 1 (cos eps)) (/ (* x (sin eps)) (pow (cos eps) 2)))","(+ (* x (- (* x (- (* 1/2 (/ 1 (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (* -1 (/ (sin eps) (pow (cos eps) 2))))) (/ 1 (cos eps)))","(+ (* x (- (* x (- (+ (* -1 (* x (+ (* -1 (/ (* (sin eps) (- (* 1/2 (/ 1 (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (cos eps))) (+ (* -1/2 (/ (sin eps) (pow (cos eps) 2))) (* 1/6 (/ (sin eps) (pow (cos eps) 2))))))) (* 1/2 (/ 1 (cos eps)))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 3))))) (* -1 (/ (sin eps) (pow (cos eps) 2))))) (/ 1 (cos eps)))","(- (* 1/2 (cos (* 2 eps))) 1/2)","(- (+ (* -1 (* x (sin (* 2 eps)))) (* 1/2 (cos (* 2 eps)))) 1/2)","(- (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* x (+ 1 (* -1 (cos (* 2 eps)))))))) 1/2)","(- (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* x (+ 1 (+ (* -1 (cos (* 2 eps))) (* 2/3 (* x (sin (* 2 eps)))))))))) 1/2)","(/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))","(- (* x (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(- (* x (- (* x (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(- (* x (- (* x (- (* x (- (* 2/3 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (+ (* 1/6 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))) (/ (* (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))) (- (* -1/2 (cos eps)) 1/2)) (+ 1 (cos eps))))))) (* -1 (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))) (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps))))","(+ (* -1 (* x (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))))) (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))))","(+ (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))) (* x (+ (* -1 (* x (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))))) (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))))","(+ (* -1 (/ (- (* 1/2 (cos (* 2 eps))) 1/2) (+ 1 (cos eps)))) (* x (+ (* -1 (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (* x (+ (* -1 (* x (- (* 2/3 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (+ (* 1/6 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))) (/ (* (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2)))) (- (* -1/2 (cos eps)) 1/2)) (+ 1 (cos eps)))))))) (* -1 (- (+ (* -1 (/ (cos (* 2 eps)) (+ 1 (cos eps)))) (/ 1 (+ 1 (cos eps)))) (+ (* -1 (/ (* (sin eps) (- (* -1 (/ (sin (* 2 eps)) (+ 1 (cos eps)))) (* -1 (/ (* (sin eps) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))) (+ 1 (cos eps)))) (/ (* (- (* -1/2 (cos eps)) 1/2) (- (* 1/2 (cos (* 2 eps))) 1/2)) (pow (+ 1 (cos eps)) 2))))))))))","(+ 1/2 (* 1/2 (cos (* 2 eps))))","(+ 1/2 (+ (* -1 (* x (sin (* 2 eps)))) (* 1/2 (cos (* 2 eps)))))","(+ 1/2 (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* -1 (* x (cos (* 2 eps))))))))","(+ 1/2 (+ (* 1/2 (cos (* 2 eps))) (* x (+ (* -1 (sin (* 2 eps))) (* x (+ (* -1 (cos (* 2 eps))) (* 2/3 (* x (sin (* 2 eps))))))))))","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(cos (* 2 eps))","(+ (cos (* 2 eps)) (* -2 (* x (sin (* 2 eps)))))","(+ (cos (* 2 eps)) (* x (- (* -2 (* x (cos (* 2 eps)))) (* 2 (sin (* 2 eps))))))","(+ (cos (* 2 eps)) (* x (- (* x (+ (* -2 (cos (* 2 eps))) (* 4/3 (* x (sin (* 2 eps)))))) (* 2 (sin (* 2 eps))))))","(+ 1 (* x (sin eps)))","(+ 1 (* x (+ (sin eps) (* -1/2 x))))","(+ 1 (* x (+ (sin eps) (* x (- (* -1/6 (* x (sin eps))) 1/2)))))","(- (* (cos eps) (cos x)) (cos x))","(- (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x))) (cos x))","(* -1 (cos x))","(cos x)","(cos (+ eps x))","(- (cos (+ eps x)) (cos x))","(* (cos (+ eps x)) (cos (- x eps)))","(cos (- x eps))","(/ 1 (cos (+ eps x)))","(- (* 1/2 (cos (* 2 (+ eps x)))) (* 1/2 (cos (* 2 x))))","(/ (- (* 1/2 (cos (* 2 (+ eps x)))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (+ eps x))))","(* -1 (/ (- (* 1/2 (cos (* 2 (+ eps x)))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (+ eps x)))))","(+ 1/2 (* 1/2 (cos (* 2 (+ eps x)))))","(- (* (cos eps) (cos x)) (+ (cos x) (* (sin eps) (sin x))))","(* (cos eps) (cos x))","(* -1 (* (sin eps) (sin x)))","(sin x)","(cos (* 2 (+ eps x)))","(+ (cos x) (* (sin eps) (sin x)))","(cos (- eps (* -1 x)))","(- (cos (- eps (* -1 x))) (cos x))","(* (cos (neg (+ eps (* -1 x)))) (cos (- eps (* -1 x))))","(cos (neg (+ eps (* -1 x))))","(/ 1 (cos (- eps (* -1 x))))","(- (* 1/2 (cos (* 2 (- eps (* -1 x))))) (* 1/2 (cos (neg (* -2 x)))))","(/ (- (* 1/2 (cos (* 2 (- eps (* -1 x))))) (* 1/2 (cos (neg (* -2 x))))) (+ (cos x) (cos (- eps (* -1 x)))))","(* -1 (/ (- (* 1/2 (cos (* 2 (- eps (* -1 x))))) (* 1/2 (cos (neg (* -2 x))))) (+ (cos x) (cos (- eps (* -1 x))))))","(+ 1/2 (* 1/2 (cos (* 2 (- eps (* -1 x))))))","(cos (* 2 (- eps (* -1 x))))","(* -1/2 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x)))))","(* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x))))))","(* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* 1/24 (cos x)) (* (pow eps 2) (+ (* -1/720 (cos x)) (* 1/40320 (* (pow eps 2) (cos x)))))))))","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(pow (cos x) 2)","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (* -1 (pow (sin x) 2)))) (* (cos x) (sin x))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (+ (* eps (+ (* -1 (pow (cos x) 2)) (+ (* -1 (pow (sin x) 2)) (* eps (+ (* -1/2 (* (cos x) (sin x))) (+ (* -1/6 (* (cos x) (sin x))) (+ (* 1/6 (* (cos x) (sin x))) (* 1/2 (* (cos x) (sin x)))))))))) (* (cos x) (sin x))))) (pow (cos x) 2))","(+ (cos x) (* eps (sin x)))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (* -1 (sin x)))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* -1/6 (* eps (sin x))))) (* -1 (sin x)))))","(/ 1 (cos x))","(+ (/ 1 (cos x)) (/ (* eps (sin x)) (pow (cos x) 2)))","(+ (* eps (- (* eps (- (* 1/2 (/ 1 (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 2))) (* 1/6 (/ (sin x) (pow (cos x) 2))))))) (* 1/2 (/ 1 (cos x)))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x)))","(* -1 (* eps (sin (* 2 x))))","(* eps (+ (* -1 (sin (* 2 x))) (* -1 (* eps (cos (* 2 x))))))","(* eps (+ (* -1 (sin (* 2 x))) (* eps (+ (* -1 (cos (* 2 x))) (* 2/3 (* eps (sin (* 2 x))))))))","(* eps (+ (* -1 (sin (* 2 x))) (* eps (+ (* -1 (cos (* 2 x))) (* eps (+ (* 1/3 (* eps (cos (* 2 x)))) (* 2/3 (sin (* 2 x)))))))))","(* -1/2 (/ (* eps (sin (* 2 x))) (cos x)))","(* eps (- (* eps (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* eps (- (* eps (- (* eps (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))) (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* eps (- (* eps (- (* eps (- (* eps (- (* 1/6 (/ (cos (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))) (cos x))) (+ (* -1/4 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* -1/24 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))))) (* -1 (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))))) (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* 1/2 (/ (* eps (sin (* 2 x))) (cos x)))","(* eps (+ (* -1 (* eps (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2)))))) (* 1/2 (/ (sin (* 2 x)) (cos x)))))","(* eps (+ (* 1/2 (/ (sin (* 2 x)) (cos x))) (* eps (+ (* -1 (* eps (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x))))))) (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2)))))))))","(* eps (+ (* 1/2 (/ (sin (* 2 x)) (cos x))) (* eps (+ (* -1 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* eps (+ (* -1 (* eps (- (* 1/6 (/ (cos (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x)))))) (cos x))) (+ (* -1/4 (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (* -1/24 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2)))))))) (* -1 (- (* 1/3 (/ (sin (* 2 x)) (cos x))) (+ (* -1/2 (/ (* (sin x) (- (* -1/2 (/ (cos (* 2 x)) (cos x))) (* 1/4 (/ (* (sin x) (sin (* 2 x))) (pow (cos x) 2))))) (cos x))) (* 1/8 (/ (sin (* 2 x)) (cos x))))))))))))","(+ 1/2 (* 1/2 (cos (* 2 x))))","(+ 1/2 (+ (* -1 (* eps (sin (* 2 x)))) (* 1/2 (cos (* 2 x)))))","(+ 1/2 (+ (* 1/2 (cos (* 2 x))) (* eps (+ (* -1 (sin (* 2 x))) (* -1 (* eps (cos (* 2 x))))))))","(+ 1/2 (+ (* 1/2 (cos (* 2 x))) (* eps (+ (* -1 (sin (* 2 x))) (* eps (+ (* -1 (cos (* 2 x))) (* 2/3 (* eps (sin (* 2 x))))))))))","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","(cos (* 2 x))","(+ (cos (* 2 x)) (* -2 (* eps (sin (* 2 x)))))","(+ (cos (* 2 x)) (* eps (- (* -2 (* eps (cos (* 2 x)))) (* 2 (sin (* 2 x))))))","(+ (cos (* 2 x)) (* eps (- (* eps (+ (* -2 (cos (* 2 x))) (* 4/3 (* eps (sin (* 2 x)))))) (* 2 (sin (* 2 x))))))","(+ (cos x) (* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x))))))","(+ (cos x) (* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x))))))))","(cos (- x (* -1 eps)))","(- (cos (- x (* -1 eps))) (cos x))","(* (cos (+ x (* -1 eps))) (cos (- x (* -1 eps))))","(cos (+ x (* -1 eps)))","(/ 1 (cos (- x (* -1 eps))))","(- (* 1/2 (cos (* 2 (- x (* -1 eps))))) (* 1/2 (cos (* 2 x))))","(/ (- (* 1/2 (cos (* 2 (- x (* -1 eps))))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (- x (* -1 eps)))))","(* -1 (/ (- (* 1/2 (cos (* 2 (- x (* -1 eps))))) (* 1/2 (cos (* 2 x)))) (+ (cos x) (cos (- x (* -1 eps))))))","(+ 1/2 (* 1/2 (cos (* 2 (- x (* -1 eps))))))","(cos (* 2 (- x (* -1 eps))))"]],"memory":[[3353648,11459040]],"method":["egg-herbie"],"outputs":[[]],"time":128.660888671875,"type":"simplify"},{"count":[[23,345]],"inputs":[["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(neg.f64 (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps))))","(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","(*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))","(cos.f64 (-.f64 x eps))","(/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","(-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 eps)","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(sin.f64 x)","(cos.f64 (+.f64 x eps))","(cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))"]],"memory":[[4447088,19808656]],"outputs":[["#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(literal 1/2 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 0 binary64)","#s(literal 4 binary64)","#s(literal -1/2 binary64)","#s(literal 3/2 binary64)","#s(literal 6 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 9 binary64)"]],"time":445.530029296875,"type":"rewrite"},{"compiler":[[120,36]],"memory":[[1462528,1462528]],"time":2.057861328125,"type":"eval"},{"alts":[["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","done",31.398094642736126,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",31.445175300803,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","done",12.866034425574362,"binary64"],["(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","next",13.017842033396892,"binary64"],["(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","done",31.443346114207202,"binary64"]],"compiler":[[13,9],[7,6],[16,12],[8,8],[27,18]],"count":[[21,5]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[15,1],"picked":[5,3]}],"memory":[[-11845104,1716832]],"min-error":[[12.866034425574362,"binary64"]],"time":5.405029296875,"type":"prune"},{"inputs":[["(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","#s(literal 0 binary64)","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","(sin.f64 eps)","eps"]],"locations":[["(sin.f64 x)","cost-diff",0],["(neg.f64 (sin.f64 x))","cost-diff",0],["(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","cost-diff",0],["(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","cost-diff",2]],"memory":[[1958096,10193728]],"method":["egg-herbie"],"outputs":[["(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","#s(literal 0 binary64)","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","(sin.f64 eps)","eps"]],"time":148.463134765625,"type":"simplify"},{"compiler":[[26,10]],"locations":[["(sin.f64 eps)","accuracy",0.0],["(neg.f64 (sin.f64 x))","accuracy",0.0],["(sin.f64 x)","accuracy",0.00390625],["(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","accuracy",0.015625]],"memory":[[736384,8577184]],"mixsample":[[0.313720703125,"ival-true",0],[1.449462890625,"ival-add",0],[2.083740234375,"ival-mult",0],[0.25439453125,"exact",0],[4.961669921875,"ival-sin",0],[0.16162109375,"ival-assert",0],[1.36328125,"ival-neg",0]],"outcomes":[[20.265625,0,"valid",256]],"time":28.52587890625,"type":"localize"},{"count":[[5,24]],"inputs":[["(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(neg.f64 (sin.f64 x))","(sin.f64 x)","(sin.f64 eps)"]],"memory":[[2439216,2439216]],"outputs":[["(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* -1 (* (sin eps) (sin x)))","(* -1 (sin x))","(sin x)","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(sin eps)"]],"series":[[0.596923828125,"((+ 0 (* (neg (sin x)) (sin eps))) (* (neg (sin x)) (sin eps)) (neg (sin x)) (sin x) (sin eps))","eps","-inf"],[0.6279296875,"((+ 0 (* (neg (sin x)) (sin eps))) (* (neg (sin x)) (sin eps)) (neg (sin x)) (sin x) (sin eps))","eps","inf"],[0.5771484375,"((+ 0 (* (neg (sin x)) (sin eps))) (* (neg (sin x)) (sin eps)) (neg (sin x)) (sin x) (sin eps))","eps","0"],[0.65283203125,"((+ 0 (* (neg (sin x)) (sin eps))) (* (neg (sin x)) (sin eps)) (neg (sin x)) (sin x) (sin eps))","x","-inf"],[0.7099609375,"((+ 0 (* (neg (sin x)) (sin eps))) (* (neg (sin x)) (sin eps)) (neg (sin x)) (sin x) (sin eps))","x","inf"],[0.508056640625,"((+ 0 (* (neg (sin x)) (sin eps))) (* (neg (sin x)) (sin eps)) (neg (sin x)) (sin x) (sin eps))","x","0"]],"time":4.237060546875,"type":"series"},{"count":[[24,0]],"inputs":[["(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* -1 (* (sin eps) (sin x)))","(* -1 (sin x))","(sin x)","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(sin eps)"]],"memory":[[1068368,9248544]],"method":["egg-herbie"],"outputs":[[]],"time":129.27001953125,"type":"simplify"},{"count":[[5,61]],"inputs":[["(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(neg.f64 (sin.f64 x))","(sin.f64 x)","(sin.f64 eps)"]],"memory":[[-2540912,14450992]],"outputs":[["(neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 0 binary64))","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal 0 binary64) (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 x)) (+.f64 (sin.f64 eps) #s(literal 0 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (-.f64 (sin.f64 eps) #s(literal 0 binary64)))","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(*.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal -1 binary64))","(*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) (sin.f64 eps)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (sin.f64 eps))))","(neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 0 binary64))","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(*.f64 (neg.f64 (sin.f64 x)) (+.f64 #s(literal 0 binary64) (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 x)) (+.f64 (sin.f64 eps) #s(literal 0 binary64)))","(*.f64 (neg.f64 (sin.f64 x)) (-.f64 (sin.f64 eps) #s(literal 0 binary64)))","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(*.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal -1 binary64))","(*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) (sin.f64 eps)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (sin.f64 x) (sin.f64 eps))))","(neg.f64 (sin.f64 x))","(+.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (sin.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (sin.f64 x))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))))","(*.f64 (sin.f64 x) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (sin.f64 x))","(*.f64 #s(literal 1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))))","(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 x))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))))","(neg.f64 (neg.f64 (sin.f64 x)))","(+.f64 (sin.f64 x) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (sin.f64 x))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (sin.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (sin.f64 x)))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))))","(/.f64 (neg.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 0 binary64))))","(sin.f64 x)","(fma.f64 (sin.f64 x) #s(literal 0 binary64) (sin.f64 x))","(sin.f64 eps)"]],"time":386.8310546875,"type":"rewrite"},{"compiler":[[542,145]],"memory":[[3960928,3960928]],"time":4.929931640625,"type":"eval"},{"alts":[["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","done",31.398094642736126,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",31.445175300803,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","done",12.866034425574362,"binary64"],["(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","next",61.80448257686406,"binary64"],["(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","next",30.46789558526548,"binary64"],["(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","next",30.467895585504664,"binary64"],["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","next",13.017842033396892,"binary64"],["(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","done",31.443346114207202,"binary64"]],"compiler":[[13,9],[7,6],[16,12],[19,17],[17,15],[19,17],[6,6],[27,18]],"count":[[51,8]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[46,4],"picked":[1,0]}],"memory":[[-4580880,3580736]],"min-error":[[12.864262095903591,"binary64"]],"time":5.077880859375,"type":"prune"},{"inputs":[["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(sin.f64 x)","x","(neg.f64 (sin.f64 eps))","(sin.f64 eps)","eps","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","#s(literal 0 binary64)","(*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps))","(*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","#s(literal 1/2 binary64)","(*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))","(cos.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(/.f64 #s(literal 1 binary64) (sin.f64 x))","#s(literal 1 binary64)","(sin.f64 x)","(sin.f64 eps)","eps","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","#s(literal 0 binary64)","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps))","(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x)))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","#s(literal 1/2 binary64)","(*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))","(cos.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(sin.f64 eps)","eps","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","#s(literal 0 binary64)","(*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","#s(literal 3 binary64)","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","#s(literal 1/2 binary64)","(*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))","(cos.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(sin.f64 eps)","eps"]],"locations":[["(*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps))","cost-diff",0],["(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","cost-diff",1],["(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","cost-diff",1],["(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","cost-diff",2],["(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps))","cost-diff",0],["(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","cost-diff",1],["(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x)))","cost-diff",1],["(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","cost-diff",2],["(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","cost-diff",1],["(neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","cost-diff",1],["(*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","cost-diff",2],["(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","cost-diff",2],["(sin.f64 eps)","cost-diff",0],["(neg.f64 (sin.f64 eps))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","cost-diff",0]],"memory":[[5292944,13493616]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(sin.f64 x)","x","(neg.f64 (sin.f64 eps))","(sin.f64 eps)","eps","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","(/.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (sin.f64 eps)) (sin.f64 x))","#s(literal 0 binary64)","(*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps))","(/.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (sin.f64 eps)) (sin.f64 x))","(*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (sin.f64 x))","(neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","(fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))","(cos.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(/.f64 #s(literal 1 binary64) (sin.f64 x))","#s(literal 1 binary64)","(sin.f64 x)","(sin.f64 eps)","eps","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","(/.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (sin.f64 eps)) (sin.f64 x))","#s(literal 0 binary64)","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps))","(/.f64 (*.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (sin.f64 eps)) (sin.f64 x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x)))","(/.f64 (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)) (sin.f64 x))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","(fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))","(cos.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(neg.f64 (sin.f64 x))","(sin.f64 x)","(sin.f64 eps)","eps","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64))) (sin.f64 eps))","#s(literal 0 binary64)","(*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64))) (sin.f64 eps))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64) #s(literal -1/2 binary64)))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","#s(literal 3 binary64)","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","(fma.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))","(cos.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(sin.f64 eps)","eps"]],"time":314.4091796875,"type":"simplify"},{"compiler":[[277,30]],"locations":[["(*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps))","accuracy",0.015625],["(pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))","accuracy",0.03972626953688403],["(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","accuracy",31.21691869893817],["(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","accuracy",39.94586158105698],["(sin.f64 x)","accuracy",0.00390625],["(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps))","accuracy",0.015625],["(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x)))","accuracy",26.671639442247493],["(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","accuracy",31.21691869893817],["(/.f64 #s(literal 1 binary64) (sin.f64 x))","accuracy",0.01171875],["(*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps))","accuracy",0.015625],["(*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","accuracy",26.765539731661512],["(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","accuracy",31.21691869893817],["(sin.f64 eps)","accuracy",0.0],["(neg.f64 (sin.f64 eps))","accuracy",0.0],["(sin.f64 x)","accuracy",0.00390625],["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","accuracy",0.015625]],"memory":[[-640752,56767360]],"mixsample":[[12.4580078125,"adjust",800],[4.52001953125,"ival-div",0],[16.961181640625,"ival-cos",4800],[3.515625,"ival-div",400],[28.306884765625,"ival-cos",1600],[0.237060546875,"ival-sub",2000],[0.333251953125,"ival-mult",2000],[0.177978515625,"ival-assert",0],[1.7822265625,"ival-neg",800],[1.437744140625,"ival-sub",0],[1.99853515625,"ival-cos",0],[1.306640625,"ival-pow",2000],[4.8212890625,"ival-pow",800],[1.79541015625,"adjust",2000],[0.9794921875,"ival-neg",400],[5.263671875,"ival-pow",0],[2.137451171875,"ival-mult",800],[7.393310546875,"ival-add",0],[1.296630859375,"ival-sub",800],[4.762451171875,"ival-mult",400],[12.350830078125,"ival-mult",0],[0.443359375,"ival-mult",4800],[4.587158203125,"ival-sin",0],[2.0234375,"ival-mult",1600],[0.15625,"ival-neg",2000],[2.167724609375,"ival-div",800],[70.6162109375,"ival-sin",2000],[0.352783203125,"ival-true",0],[0.294189453125,"ival-div",2000],[0.613525390625,"exact",0],[34.4677734375,"ival-sin",800],[4.80908203125,"ival-neg",0]],"outcomes":[[157.998291015625,1,"valid",208],[118.139892578125,2,"valid",35],[3.69677734375,0,"valid",13]],"time":317.86083984375,"type":"localize"},{"count":[[17,75]],"inputs":[["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(sin.f64 x)","(neg.f64 (sin.f64 eps))","(sin.f64 eps)","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","(*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps))","(*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))"]],"memory":[[-3880048,13992672]],"outputs":[["(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (- (* 1/3 (sin eps)) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (- (+ (* 1/3 (sin eps)) (* (pow x 2) (- (* -2/45 (sin eps)) (+ (* -1/6 (- (* 1/3 (sin eps)) (* 1/6 (sin eps)))) (* -1/120 (sin eps)))))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (- (+ (* 1/3 (sin eps)) (* (pow x 2) (- (+ (* -2/45 (sin eps)) (* (pow x 2) (- (* 1/315 (sin eps)) (+ (* -1/6 (- (* -2/45 (sin eps)) (+ (* -1/6 (- (* 1/3 (sin eps)) (* 1/6 (sin eps)))) (* -1/120 (sin eps))))) (+ (* 1/5040 (sin eps)) (* 1/120 (- (* 1/3 (sin eps)) (* 1/6 (sin eps))))))))) (+ (* -1/6 (- (* 1/3 (sin eps)) (* 1/6 (sin eps)))) (* -1/120 (sin eps)))))) (* 1/6 (sin eps))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* -1 (pow x 2))","(* (pow x 2) (- (* 1/3 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* (pow x 2) (- (* 1/315 (pow x 2)) 2/45)))) 1))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(* x (+ (* -1 (sin eps)) (* -1 (* (pow x 2) (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* 2/45 (sin eps)) (+ (* -1/6 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* 1/120 (sin eps)))))) (* -1 (- (* -1/3 (sin eps)) (* -1/6 (sin eps))))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* -1/315 (sin eps)) (+ (* -1/6 (- (* 2/45 (sin eps)) (+ (* -1/6 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* 1/120 (sin eps))))) (+ (* -1/5040 (sin eps)) (* 1/120 (- (* -1/3 (sin eps)) (* -1/6 (sin eps))))))))) (* -1 (- (* 2/45 (sin eps)) (+ (* -1/6 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* 1/120 (sin eps)))))))))))","(* x (+ (* -1 (sin eps)) (* -1 (* (pow x 2) (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* 13/120 (sin eps)) (+ (* -1/3 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* 2/45 (sin eps)))))) (* -1 (- (* -1/2 (sin eps)) (* -1/3 (sin eps))))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* -41/3024 (sin eps)) (+ (* -1/3 (- (* 13/120 (sin eps)) (+ (* -1/3 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* 2/45 (sin eps))))) (+ (* -1/315 (sin eps)) (* 2/45 (- (* -1/2 (sin eps)) (* -1/3 (sin eps))))))))) (* -1 (- (* 13/120 (sin eps)) (+ (* -1/3 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* 2/45 (sin eps)))))))))))","(/ 1 x)","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","(* -1 (pow x 3))","(* (pow x 3) (- (* 1/2 (pow x 2)) 1))","(* (pow x 3) (- (* (pow x 2) (+ 1/2 (* -13/120 (pow x 2)))) 1))","(* (pow x 3) (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 41/3024 (pow x 2)) 13/120)))) 1))","(* -1 (* (sin eps) (sin x)))","(sin x)","(/ (* (sin eps) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))","(/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x))","(- (* 1/2 (cos (* 2 x))) 1/2)","(- 1/2 (* 1/2 (cos (* 2 x))))","(* -1 (/ (* (sin eps) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))","(* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x)))","(* -1 (/ (* (sin eps) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))","(* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x))))))","(/ 1 (sin x))","(* -1 (pow (sin x) 3))","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","(* -1 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(/ (* eps (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))","(* eps (- (+ (* -1/6 (/ (* (pow eps 2) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))) (* 1/2 (/ (cos (* 2 x)) (sin x)))) (* 1/2 (/ 1 (sin x)))))","(* eps (- (+ (* 1/2 (/ (cos (* 2 x)) (sin x))) (* (pow eps 2) (+ (* -1/6 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x))) (* 1/120 (/ (* (pow eps 2) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x)))))) (* 1/2 (/ 1 (sin x)))))","(* eps (- (+ (* 1/2 (/ (cos (* 2 x)) (sin x))) (* (pow eps 2) (+ (* -1/6 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x))) (* (pow eps 2) (+ (* -1/5040 (/ (* (pow eps 2) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))) (* 1/120 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x)))))))) (* 1/2 (/ 1 (sin x)))))","(* -1 (/ (* eps (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))","(* eps (+ (* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/6 (/ (* (pow eps 2) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))))","(* eps (+ (* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* (pow eps 2) (+ (* -1/120 (/ (* (pow eps 2) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x))) (* 1/6 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x)))))))","(* eps (+ (* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* (pow eps 2) (+ (* 1/6 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* (pow eps 2) (+ (* -1/120 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/5040 (/ (* (pow eps 2) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))))))))","(* -1 (/ (* eps (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))","(* eps (+ (* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* 1/6 (/ (* (pow eps 2) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))))","(* eps (+ (* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* (pow eps 2) (+ (* -1/120 (/ (* (pow eps 2) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* 1/6 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x))))))))))","(* eps (+ (* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* (pow eps 2) (+ (* 1/6 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* (pow eps 2) (+ (* -1/120 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* 1/5040 (/ (* (pow eps 2) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))))))))","(* -1 (sin eps))","(sin eps)"]],"series":[[4.77197265625,"((* (sin x) (neg (sin eps))) (sin x) (neg (sin eps)) (sin eps) (+ 0 (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps))) (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 0 (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps))) (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps)) (+ 0 (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps))) (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps)) (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps)) (/ 1 (sin x)) (pow (neg (sin x)) 3))","eps","-inf"],[11.923095703125,"((* (sin x) (neg (sin eps))) (sin x) (neg (sin eps)) (sin eps) (+ 0 (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps))) (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 0 (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps))) (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps)) (+ 0 (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps))) (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps)) (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps)) (/ 1 (sin x)) (pow (neg (sin x)) 3))","eps","inf"],[3.225830078125,"((* (sin x) (neg (sin eps))) (sin x) (neg (sin eps)) (sin eps) (+ 0 (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps))) (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 0 (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps))) (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps)) (+ 0 (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps))) (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps)) (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps)) (/ 1 (sin x)) (pow (neg (sin x)) 3))","eps","0"],[7.45703125,"((* (sin x) (neg (sin eps))) (sin x) (neg (sin eps)) (sin eps) (+ 0 (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps))) (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 0 (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps))) (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps)) (+ 0 (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps))) (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps)) (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps)) (/ 1 (sin x)) (pow (neg (sin x)) 3))","x","-inf"],[15.635009765625,"((* (sin x) (neg (sin eps))) (sin x) (neg (sin eps)) (sin eps) (+ 0 (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps))) (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 0 (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps))) (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps)) (+ 0 (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps))) (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps)) (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps)) (/ 1 (sin x)) (pow (neg (sin x)) 3))","x","inf"],[4.51806640625,"((* (sin x) (neg (sin eps))) (sin x) (neg (sin eps)) (sin eps) (+ 0 (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps))) (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (- 1/2 (* 1/2 (cos (* 2 x)))) (+ 0 (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps))) (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (* (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (neg (sin x))) (sin eps)) (+ 0 (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps))) (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (* (/ (pow (neg (sin x)) 3) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin eps)) (* (* (neg (- 1/2 (* 1/2 (cos (* 2 x))))) (/ 1 (sin x))) (sin eps)) (/ 1 (sin x)) (pow (neg (sin x)) 3))","x","0"]],"time":49.856201171875,"type":"series"},{"count":[[75,0]],"inputs":[["(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (- (* 1/3 (sin eps)) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (- (+ (* 1/3 (sin eps)) (* (pow x 2) (- (* -2/45 (sin eps)) (+ (* -1/6 (- (* 1/3 (sin eps)) (* 1/6 (sin eps)))) (* -1/120 (sin eps)))))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (- (+ (* 1/3 (sin eps)) (* (pow x 2) (- (+ (* -2/45 (sin eps)) (* (pow x 2) (- (* 1/315 (sin eps)) (+ (* -1/6 (- (* -2/45 (sin eps)) (+ (* -1/6 (- (* 1/3 (sin eps)) (* 1/6 (sin eps)))) (* -1/120 (sin eps))))) (+ (* 1/5040 (sin eps)) (* 1/120 (- (* 1/3 (sin eps)) (* 1/6 (sin eps))))))))) (+ (* -1/6 (- (* 1/3 (sin eps)) (* 1/6 (sin eps)))) (* -1/120 (sin eps)))))) (* 1/6 (sin eps))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* -1 (pow x 2))","(* (pow x 2) (- (* 1/3 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/3 (* (pow x 2) (- (* 1/315 (pow x 2)) 2/45)))) 1))","(pow x 2)","(* (pow x 2) (+ 1 (* -1/3 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 2/45 (pow x 2)) 1/3))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 2/45 (* -1/315 (pow x 2)))) 1/3))))","(* x (+ (* -1 (sin eps)) (* -1 (* (pow x 2) (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* 2/45 (sin eps)) (+ (* -1/6 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* 1/120 (sin eps)))))) (* -1 (- (* -1/3 (sin eps)) (* -1/6 (sin eps))))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* -1/315 (sin eps)) (+ (* -1/6 (- (* 2/45 (sin eps)) (+ (* -1/6 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* 1/120 (sin eps))))) (+ (* -1/5040 (sin eps)) (* 1/120 (- (* -1/3 (sin eps)) (* -1/6 (sin eps))))))))) (* -1 (- (* 2/45 (sin eps)) (+ (* -1/6 (- (* -1/3 (sin eps)) (* -1/6 (sin eps)))) (* 1/120 (sin eps)))))))))))","(* x (+ (* -1 (sin eps)) (* -1 (* (pow x 2) (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* 13/120 (sin eps)) (+ (* -1/3 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* 2/45 (sin eps)))))) (* -1 (- (* -1/2 (sin eps)) (* -1/3 (sin eps))))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* (pow x 2) (+ (* -1 (* (pow x 2) (- (* -41/3024 (sin eps)) (+ (* -1/3 (- (* 13/120 (sin eps)) (+ (* -1/3 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* 2/45 (sin eps))))) (+ (* -1/315 (sin eps)) (* 2/45 (- (* -1/2 (sin eps)) (* -1/3 (sin eps))))))))) (* -1 (- (* 13/120 (sin eps)) (+ (* -1/3 (- (* -1/2 (sin eps)) (* -1/3 (sin eps)))) (* 2/45 (sin eps)))))))))))","(/ 1 x)","(/ (+ 1 (* 1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))) x)","(/ (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))) x)","(* -1 (pow x 3))","(* (pow x 3) (- (* 1/2 (pow x 2)) 1))","(* (pow x 3) (- (* (pow x 2) (+ 1/2 (* -13/120 (pow x 2)))) 1))","(* (pow x 3) (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 41/3024 (pow x 2)) 13/120)))) 1))","(* -1 (* (sin eps) (sin x)))","(sin x)","(/ (* (sin eps) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))","(/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x))","(- (* 1/2 (cos (* 2 x))) 1/2)","(- 1/2 (* 1/2 (cos (* 2 x))))","(* -1 (/ (* (sin eps) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))","(* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x)))","(* -1 (/ (* (sin eps) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))","(* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x))))))","(/ 1 (sin x))","(* -1 (pow (sin x) 3))","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","(* -1 eps)","(* eps (- (* 1/6 (pow eps 2)) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* -1/120 (pow eps 2)))) 1))","(* eps (- (* (pow eps 2) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120)))) 1))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(/ (* eps (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))","(* eps (- (+ (* -1/6 (/ (* (pow eps 2) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))) (* 1/2 (/ (cos (* 2 x)) (sin x)))) (* 1/2 (/ 1 (sin x)))))","(* eps (- (+ (* 1/2 (/ (cos (* 2 x)) (sin x))) (* (pow eps 2) (+ (* -1/6 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x))) (* 1/120 (/ (* (pow eps 2) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x)))))) (* 1/2 (/ 1 (sin x)))))","(* eps (- (+ (* 1/2 (/ (cos (* 2 x)) (sin x))) (* (pow eps 2) (+ (* -1/6 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x))) (* (pow eps 2) (+ (* -1/5040 (/ (* (pow eps 2) (- (* 1/2 (cos (* 2 x))) 1/2)) (sin x))) (* 1/120 (/ (- (* 1/2 (cos (* 2 x))) 1/2) (sin x)))))))) (* 1/2 (/ 1 (sin x)))))","(* -1 (/ (* eps (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))","(* eps (+ (* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/6 (/ (* (pow eps 2) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))))","(* eps (+ (* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* (pow eps 2) (+ (* -1/120 (/ (* (pow eps 2) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x))) (* 1/6 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x)))))))","(* eps (+ (* -1 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* (pow eps 2) (+ (* 1/6 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* (pow eps 2) (+ (* -1/120 (/ (- 1/2 (* 1/2 (cos (* 2 x)))) (sin x))) (* 1/5040 (/ (* (pow eps 2) (- 1/2 (* 1/2 (cos (* 2 x))))) (sin x)))))))))","(* -1 (/ (* eps (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))","(* eps (+ (* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* 1/6 (/ (* (pow eps 2) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))))","(* eps (+ (* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* (pow eps 2) (+ (* -1/120 (/ (* (pow eps 2) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* 1/6 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x))))))))))","(* eps (+ (* -1 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* (pow eps 2) (+ (* 1/6 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* (pow eps 2) (+ (* -1/120 (/ (pow (sin x) 3) (- 1/2 (* 1/2 (cos (* 2 x)))))) (* 1/5040 (/ (* (pow eps 2) (pow (sin x) 3)) (- 1/2 (* 1/2 (cos (* 2 x))))))))))))","(* -1 (sin eps))","(sin eps)"]],"memory":[[2705328,10762048]],"method":["egg-herbie"],"outputs":[[]],"time":127.69287109375,"type":"simplify"},{"count":[[17,255]],"inputs":[["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(sin.f64 x)","(neg.f64 (sin.f64 eps))","(sin.f64 eps)","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","(*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x)))","(neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","(/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps))","(*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps))","(/.f64 #s(literal 1 binary64) (sin.f64 x))","(pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))"]],"memory":[[1464688,17451920]],"outputs":[["#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)","#s(literal 0 binary64)","#s(literal 1/2 binary64)","#s(literal 2 binary64)","#s(literal 1 binary64)","#s(literal 3 binary64)","#s(literal -2 binary64)","#s(literal -1 binary64)","#s(literal 4 binary64)","#s(literal 5 binary64)","#s(literal 6 binary64)","#s(literal 3/2 binary64)","#s(literal -1/2 binary64)","#s(literal -3 binary64)","#s(literal -3/2 binary64)","#s(literal 1/4 binary64)"]],"time":418.153076171875,"type":"rewrite"},{"compiler":[[15,17]],"memory":[[1316400,1316400]],"time":1.89892578125,"type":"eval"},{"alts":[["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","done",31.398094642736126,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",31.445175300803,"binary64"],["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","done",12.866034425574362,"binary64"],["(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","done",61.80448257686406,"binary64"],["(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","done",30.46789558526548,"binary64"],["(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","done",30.467895585504664,"binary64"],["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","done",13.017842033396892,"binary64"],["(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","done",31.443346114207202,"binary64"],["#s(literal 1/4 binary64)","fresh",61.74143078225695,"binary64"],["#s(literal 0 binary64)","fresh",32.06716227395069,"binary64"],["#s(literal -1/2 binary64)","fresh",61.80544566909871,"binary64"]],"compiler":[[173,63],[13,9],[7,6],[16,12],[19,17],[17,15],[19,17],[6,6],[27,18],[1,3],[1,3],[1,3]],"count":[[23,11]],"kept":[{"done":[4,4],"fresh":[0,0],"new":[15,3],"picked":[4,4]}],"memory":[[-4434496,4858848]],"min-error":[[12.864262095903591,"binary64"]],"time":9.68310546875,"type":"prune"},{"accuracy":[12.86603442557436],"baseline":[12.866034425574362],"branch":[["x",12.86603442557437,1,"binary64"],["eps",12.86603442557436,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",12.86603442557436,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[14,1]],"inputs":[["#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/4 binary64)","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))"]],"memory":[[238144,8318864]],"oracle":[63.545606027491445],"outputs":[["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))"]],"repr":["binary64"],"time":12.866943359375,"times":[[3.89794921875,"x"],[4.573974609375,"eps"],[3.277099609375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[13.01784203339689],"baseline":[13.017842033396892],"branch":[["x",13.0178420333969,1,"binary64"],["eps",13.01784203339689,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",13.01784203339689,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[13,1]],"inputs":[["#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/4 binary64)","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sin.f64 x))) (sin.f64 eps)))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (/.f64 #s(literal 1 binary64) (sin.f64 x))) (sin.f64 eps)))","(-.f64 (*.f64 (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 #s(literal 1 binary64) (cos.f64 (-.f64 x eps)))) (cos.f64 x))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) (sin.f64 eps)))","(-.f64 (/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 x eps)) (*.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) (cos.f64 x))","(neg.f64 (/.f64 (-.f64 (fma.f64 (cos.f64 (*.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal 1/2 binary64) #s(literal 1/2 binary64)) (fma.f64 (cos.f64 (+.f64 x x)) #s(literal 1/2 binary64) #s(literal 1/2 binary64))) (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))"]],"memory":[[-265632,7991856]],"oracle":[63.545606027491445],"outputs":[["(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))"]],"repr":["binary64"],"time":11.327880859375,"times":[[3.444091796875,"x"],[3.899169921875,"eps"],[2.991943359375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[31.445175300803],"baseline":[31.445175300803],"branch":[["x",31.445175300803008,1,"binary64"],["eps",31.445175300802997,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",31.445175300803,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[4,1]],"inputs":[["#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/4 binary64)","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"memory":[[-3155280,5189712]],"oracle":[62.28324633731595],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"repr":["binary64"],"time":5.62109375,"times":[[1.6689453125,"x"],[1.75390625,"eps"],[1.450927734375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[32.06716227395069],"baseline":[32.06716227395069],"branch":[["x",32.0671622739507,1,"binary64"],["eps",32.06716227395069,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",32.06716227395069,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[3,1]],"inputs":[["#s(literal -1/2 binary64)","#s(literal 0 binary64)","#s(literal 1/4 binary64)"]],"memory":[[4964608,4964608]],"oracle":[62.28324633731595],"outputs":[["#s(literal 0 binary64)"]],"repr":["binary64"],"time":5.080078125,"times":[[1.4619140625,"x"],[1.548095703125,"eps"],[1.47509765625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[61.8054456690987],"baseline":[61.80544566909871],"branch":[["x",61.80544566909875,1,"binary64"],["eps",61.80544566909884,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",61.8054456690987,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[1,1]],"inputs":[["#s(literal -1/2 binary64)"]],"link":["."],"memory":[[-4455680,4269056]],"name":["2cos (problem 3.3.5)"],"oracle":[61.80544566909871],"outputs":[["#s(literal -1/2 binary64)"]],"repr":["binary64"],"time":3.98291015625,"times":[[1.4169921875,"x"],[1.1298828125,"eps"],[0.85498046875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"inputs":[["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(literal 0 binary64)","#s(literal -1/2 binary64)"]],"memory":[[7765296,15761664]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(literal 0 binary64)","#s(literal -1/2 binary64)"]],"time":141.787109375,"type":"simplify"},{"compiler":[[30,18]],"memory":[[-7150720,1174304]],"stop":[["fuel",1]],"time":2.755859375,"type":"soundness"},{"compiler":[[30,18],[30,18],[17,15],[17,15],[7,6],[7,6]],"memory":[[1111648,25105072]],"remove-preprocessing":[[],[],[],[],[],[]],"time":43.10107421875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.012939453125,"type":"end"}]