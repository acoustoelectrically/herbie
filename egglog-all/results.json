{"branch":"varun10p-egglog-multi","commit":"debf1aed9e26cbfa45cab9e280b538180329feb3","date":1733879600,"flags":["rules:arithmetic","rules:polynomials","rules:fractions","rules:exponents","rules:trigonometry","rules:hyperbolic","rules:numerics","rules:special","rules:bools","rules:branches","generate:rr","generate:taylor","generate:simplify","generate:proofs","generate:egglog","localize:costs","localize:errors","reduce:regimes","reduce:binary-search","reduce:branch-expressions","setup:simplify","setup:search"],"hostname":"Varuns-MacBook-Pro-2.local","iterations":4,"merged-cost-accuracy":[[1.0,0.3528805969320573],[[0.8472847060050036,0.6981998379553169],[0.8692032360134638,0.6981937823034097],[0.9128743895933763,0.6981457174743854],[0.9133009804012963,0.6981449725176327],[0.9603642301246613,0.6979530436341107],[0.9624174644025789,0.6979324524410222],[0.9963937522639905,0.6975710686576573],[1.0788894133245908,0.6967265772738951],[1.1058329808405016,0.696475231812931],[1.1074380155480108,0.6964597739088777],[1.1520111057481306,0.6959051731177033],[1.2026927688071225,0.6950782503840321],[1.255378683997376,0.6942548956781069],[1.3140103950756428,0.6933373341957297],[1.335778827235014,0.6925920700169261],[1.401894623226538,0.6897498101495978],[1.4316841643343512,0.6874957039156451],[1.5025186637740864,0.6819273803363357],[1.586967894976617,0.6736562963842267],[1.7341622615134695,0.6604275567513727],[1.8486577053367208,0.6503579476562975],[1.8861133277003008,0.6472014995989439],[1.9640996376496456,0.6397657815807598],[2.006432815007228,0.6359400995879514],[2.041636304741269,0.6319619184159242],[2.078097167905754,0.6279678463055811],[2.2402034706058886,0.6104819469890188],[2.601849266679708,0.5766912948416488],[2.8335559531568135,0.5594232090089148],[3.1044418881327953,0.5422555472117128],[3.4894594446907568,0.5218493620410118],[3.9834989858920777,0.5014390760238459],[4.4240821553784055,0.4846602240266261],[4.476178648421399,0.48255560063963676],[5.191658690985452,0.45600285303644805],[5.704636529312214,0.4367423709626288],[6.210783103106756,0.4194696065359532],[7.0303945465148105,0.3962044758671689],[7.213434719664133,0.39032943323845415],[8.357597652506252,0.35702086187408877],[9.880146900351464,0.32399145373202354],[11.737406710181059,0.28938761493875287],[11.98935383646349,0.2720167693717984]]],"note":false,"points":256,"seed":"1494275546","tests":[{"bits":64,"conversions":[],"cost-accuracy":[[13760,29.498173262977875],[7168,0.3025494855593806],[[14145,56.7155959118717,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 2 binary64))"],[14145,56.64948764336097,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 1 binary64))"],[14145,56.704225264519835,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -2428827039687727/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(literal -1 binary64) #s(literal 1/2 binary64))"],[14145,58.693368157602,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal -6642173867685913/60383398797144661635864873295812302254670739526663046854019300803929986598274381633378027602842540280663494000492221518396329354078796682120982948022923136698390325231616 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))"],[7553,58.35956048017922,"(if (<=.f64 x #s(literal 1134777778456161/2521728396569246669585858566409191283525103313309788586748690777871726193375821479130513040312634601011624191379636224 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 2 binary64) (sin.f64 x)))"],[7553,58.430033217074495,"(if (<=.f64 x #s(literal 8271269140747129/20173827172553973356686868531273530268200826506478308693989526222973809547006571833044104322501076808092993531037089792 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 3/2 binary64) (sin.f64 x)))"],[7553,58.51113654307408,"(if (<=.f64 x #s(literal 3631288891059715/10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (sin.f64 x)))"],[7553,58.634289450660496,"(if (<=.f64 x #s(literal 1462602470010163/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) (sin.f64 x)))"],[64,59.49124887614009,"#s(literal -1 binary64)"],[64,59.57102540872389,"#s(literal -2 binary64)"]]],"end":0.3025494855593806,"end-est":0.2809562988422101,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (sin x))","link":"0-tanhfexample34","name":"tanhf (example 3.4)","output":"(tan.f64 (/.f64 x #s(literal 2 binary64)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (sin x))","start":29.498173262977875,"start-est":30.136001684203958,"status":"eq-target","target":[[7168,0.3025494855593806]],"target-prog":"(((! :herbie-platform default (tan (/ x 2))) . #t))","time":7818.409912109375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14912,41.572294627603405],[7296,0.015561143100371594],[[64,34.530345019384264,"#s(literal 1 binary64)"]]],"end":0.015561143100371594,"end-est":0.015625,"identifier":"#f","input":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","link":"1-sqrtexpproblem344","name":"sqrtexp (problem 3.4.4)","output":"(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","start":41.572294627603405,"start-est":39.09037978534923,"status":"imp-start","target":[],"target-prog":"()","time":4238.98095703125,"vars":["x"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,63.0580110287684],[64,0.6164156872761819],[]],"end":0.6164156872761819,"end-est":0.5195874211330497,"identifier":"#f","input":"(/ (- eps (sin eps)) (- eps (tan eps)))","link":"2-sintanproblem345","name":"sintan (problem 3.4.5)","output":"#s(literal -1/2 binary64)","pre":"(and (<= -0.4 eps) (<= eps 0.4))","prec":"binary64","preprocess":"()","spec":"(/ (- eps (sin eps)) (- eps (tan eps)))","start":63.0580110287684,"start-est":63.0353062736438,"status":"lt-target","target":[[896,0.25733852371718513]],"target-prog":"(((! :herbie-platform default (- (* 9/40 eps eps) 1/2)) . #t))","time":16394.199951171875,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,30.48224794504643],[3970,23.32487072331183],[[4355,27.297054549074204,"(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3957737425103581/56539106072908298546665520023773392506479484700019806659891398441363832832 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (neg.f64 a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))"],[4227,27.564963505363437,"(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal -3978585891278293/3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 74999999999999999278579712 binary64)) (/.f64 (+.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a)))))"],[3778,36.39636348260009,"(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 16500000000000001228319625973381323161769571993509895587492110828093529949527369877967408673138236075540566761139480906389714446780566773906879123816448 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 (neg.f64 a) c) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 #s(literal -16 binary64)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))))"],[3330,39.04776827708331,"(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 2500000000000000226492416 binary64)) (/.f64 (+.f64 b (sqrt.f64 (*.f64 (neg.f64 a) c))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) c) b) b) (*.f64 #s(literal 2 binary64) a))))"],[3138,41.94068128285549,"(if (<=.f64 b #s(literal -5848587932906155/899782758908639276562107701537196371773939423660383326620151114522367516134297574063808137220778171429984182126704179024641653211098859937801703036173032771026944 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (*.f64 (neg.f64 a) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))"],[3138,53.94276569902168,"(if (<=.f64 b #s(literal -3070091297427743/4951760157141521099596496896 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 50000000000000002382364672 binary64)) (/.f64 (+.f64 b (sqrt.f64 (*.f64 (neg.f64 a) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))"],[2241,54.968534361306595,"(if (<=.f64 b #s(literal -77000000000000003793921656420827799956727848268367421131919555364921645680487194948809805505583972816013176315281402734451943134932837122139831568171008 binary64)) (+.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))"],[1921,57.33251196643635,"(if (<=.f64 b #s(literal -1900000000000000131762249422712564540901893317345861888588242083967719090207325982086453362536358978844957532108658036087482827566652774644973568 binary64)) (+.f64 (*.f64 (*.f64 b b) #s(literal 2 binary64)) (*.f64 (*.f64 a c) #s(literal 2 binary64))) (if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64))))"],[1473,58.80509838453307,"(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 65536 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))"],[1473,58.984449168595454,"(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 18 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))"],[1473,59.01204548808761,"(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 a c) #s(literal 2 binary64)))"],[1153,58.99585051620278,"(if (<=.f64 b #s(literal 5759265950624221/822752278660603021077484591278675252491367932816789931674304512 binary64)) (/.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 a c) #s(literal 2 binary64)))"],[1153,58.98380121341515,"(if (<=.f64 b #s(literal 44000000000000001409286144 binary64)) (/.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 c #s(literal -2 binary64)) a))"],[704,60.37198651972367,"(*.f64 (*.f64 c #s(literal -2 binary64)) a)"],[704,61.428537332579666,"(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 4 binary64))"],[384,61.42665775730583,"(*.f64 a #s(literal 2 binary64))"]]],"end":23.32487072331183,"end-est":19.570183597301146,"identifier":"#f","input":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"3-quadpp42positive","name":"quadp (p42, positive)","output":"(if (<=.f64 b #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 10000000000000000369475456880582265409809179829842688451922778552150543659347219597216513109705408327446511753687232667314337003349573404171046192448274432 binary64)) (/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 #s(literal -16 binary64)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":30.48224794504643,"start-est":26.862336143160924,"status":"lt-target","target":[[18050,0.20298891094642407]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ (- sqtD (/ b 2)) a) (/ (- c) (+ (/ b 2) sqtD))))) . #t))","time":9392.028076171875,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,30.742288923375128],[3970,23.613388263102255],[[4163,27.738879493546403,"(if (<=.f64 b #s(literal -130000000000000009918700793419453104283454462230528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 271508251957999/205688069665150755269371147819668813122841983204197482918576128 binary64)) (/.f64 (-.f64 b (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 a (neg.f64 c)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a)))))"],[3778,36.66633995575687,"(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (+.f64 (*.f64 a (neg.f64 c)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a))))"],[2945,40.060096030213,"(if (<=.f64 b #s(literal -3459022883669859/98829225247710262867429368515096341332791332892647518728955741224331220492185227974590031104217345944915565363435943316108305047551656971126471386689813725547615929822542168634993607295943953291620980311754270053008792716515963231747120779125566189619536160406425180445475300105093018814544105228831057745755716670455808 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a)))"],[2945,41.147352817140224,"(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) b) (*.f64 #s(literal 2 binary64) a)))"],[2817,48.43285277095317,"(if (<=.f64 b #s(literal 251939172494419/449891379454319638281053850768598185886969711830191663310075557261183758067148787031904068610389085714992091063352089512320826605549429968900851518086516385513472 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(literal 0 binary64))) (*.f64 #s(literal 2 binary64) a)))"],[2817,48.74478127057412,"(if (<=.f64 b #s(literal -5884782876925013/196159429230833773869868419475239575503198607639501078528 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))"],[2817,48.802639607250605,"(if (<=.f64 b #s(literal -7737125245533627/309485009821345068724781056 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))"],[2561,57.835287795890935,"(if (<=.f64 c #s(literal -202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (neg.f64 c))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a)))"],[2240,54.288657904576475,"(/.f64 (-.f64 (*.f64 b #s(literal -16 binary64)) (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"],[2240,56.369398159112684,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 #s(literal 2 binary64) c))) (*.f64 #s(literal 2 binary64) a))"],[1920,61.695082775977745,"(/.f64 (-.f64 b (sqrt.f64 #s(literal 1/8 binary64))) (*.f64 #s(literal 2 binary64) a))"]]],"end":23.613388263102255,"end-est":23.676657301226435,"identifier":"#f","input":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"4-quadmp42negative","name":"quadm (p42, negative)","output":"(if (<=.f64 b #s(literal -599999999999999993262698741913011689315595218504925424171200737183999432753320986350169139924182614602801285281982067443540613379592562933760 binary64)) (/.f64 (-.f64 b (fma.f64 (*.f64 a (neg.f64 c)) (*.f64 a c) b)) (*.f64 #s(literal 2 binary64) a)) (if (<=.f64 b #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (+.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b)) (*.f64 #s(literal 2 binary64) a))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":30.742288923375128,"start-est":29.652450954656487,"status":"lt-target","target":[[18050,0.2048827078205227]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ c (- sqtD (/ b 2))) (/ (+ (/ b 2) sqtD) (- a))))) . #t))","time":67684.50512695313,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,30.49396551003425],[3842,23.63834337892167],[[3330,23.63834337892167,"(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (neg.f64 #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))))"],[3202,30.290990908167306,"(if (<=.f64 b_2 #s(literal -242445077749771/124330809102446660538845562036705210025114037699336929360115994223289874253133343883264 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (if (<=.f64 b_2 #s(literal 8000000000000000359085701424607334284394496 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)))"],[2625,41.363118033579006,"(if (<=.f64 b_2 #s(literal 2636713248474717/5070602400912917605986812821504 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a))"],[1984,58.00565669182201,"(/.f64 (-.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2) b_2) a)"],[896,60.50570449779982,"(/.f64 (neg.f64 #s(literal -448 binary64)) a)"],[768,60.56166828905213,"(/.f64 #s(literal 12 binary64) a)"],[768,60.575849683243796,"(/.f64 #s(literal 1/8 binary64) a)"],[768,62.57103868288402,"(/.f64 #s(literal -1/2 binary64) a)"],[768,62.57403156857918,"(/.f64 #s(literal -3 binary64) a)"]]],"end":23.63834337892167,"end-est":22.673552873627138,"identifier":"#f","input":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"5-quad2pproblem321positive","name":"quad2p (problem 3.2.1, positive)","output":"(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 a c) b_2)) a) (if (<=.f64 b_2 #s(literal 75000000000000002830941993617111165299622738461521732699814941090132201478154078287856335439740717858852145824022796758823324223419043649257365874344501090189312 binary64)) (/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (neg.f64 #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) b_2) b_2 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) a))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":30.49396551003425,"start-est":28.678957412114354,"status":"lt-target","target":[[16642,0.21517111234836295]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ (- sqtD b_2) a) (/ (- c) (+ b_2 sqtD))))) . #t))","time":18553.498046875,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,30.358626443119253],[3330,24.702271524341832],[[3202,29.865154229415683,"(if (<=.f64 b_2 #s(literal -31999999999999999783070357579572095246774670142210048 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 520997997575091/46517678354918840995156723704832290198633047083988355858015372747560914439257467092876227245680868195888801382801035387746214504231337984 binary64)) (/.f64 (-.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (+.f64 (neg.f64 b_2) (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a)))"],[2625,40.977415689957525,"(if (<=.f64 b_2 #s(literal -290432989937067/2323463919496536035621972653359219625205094065092803842274643530181157276813131833664325491400244297796560505922176520391335289446163915168423172782972491602785891938199156053035447515366090213859748743409924120634480857354496687637745467094294778254706320477272099863787133357522944 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (/.f64 (+.f64 (neg.f64 b_2) (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a))"],[2497,42.7803818095183,"(if (<=.f64 b_2 #s(literal -959110449498405/45671926166590716193865151022383844364247891968 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) b_2) a))"],[2497,43.78578205257816,"(if (<=.f64 b_2 #s(literal 2531151933886141/23010472126237643618935106442099516590310105330461524130999050388189782503104123280986685097268164610703374576623538349780325090408245327679084471121852687920354290358382782115366684108959500047289994617866880738411283287339835248828660878149225886356908865367627046174713247480125403687018925610191900689563648 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) b_2) a))"],[2369,49.569043933309125,"(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (-.f64 b_2 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) a) (/.f64 (neg.f64 b_2) a))"],[2241,50.08662610002665,"(if (<=.f64 b_2 #s(literal 2588599034278125/152270531428124985630521599810549817357441044649921992607311038393952323293225407851025235404406410300395389316115760440366549529143798344477781051504885209680176214061819891091731088367032088255512493648112787169901337467584294921027286931491702587700433418798504336673153571718623657984 binary64)) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (neg.f64 a)) (/.f64 (neg.f64 b_2) a))"],[1088,53.936419388214134,"(/.f64 (-.f64 (neg.f64 b_2) #s(literal 11 binary64)) a)"],[896,54.03957243634399,"(/.f64 (neg.f64 b_2) a)"],[64,61.69335801839884,"#s(literal 3/4 binary64)"],[64,61.69460076628083,"#s(literal 1/8 binary64)"],[64,61.70670425357023,"#s(literal -16 binary64)"]]],"end":24.702271524341832,"end-est":22.902830020490498,"identifier":"#f","input":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"6-quad2mproblem321negative","name":"quad2m (problem 3.2.1, negative)","output":"(if (<=.f64 b_2 #s(literal -13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (+.f64 b_2 (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) b_2)) a) (if (<=.f64 b_2 #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 a a) (*.f64 c c) b_2)) b_2) a)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":30.358626443119253,"start-est":29.091938737141167,"status":"lt-target","target":[[16642,0.21670680812156567]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ c (- sqtD b_2)) (/ (+ b_2 sqtD) (- a))))) . #t))","time":8166.1298828125,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,61.1005083467012],[14208,0.001],[[14400,0.03262048906511421,"(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))"],[13696,0.028700564063671885,"(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"],[64,1.5041521970816139,"#s(literal -1 binary64)"]]],"end":0.001,"end-est":0.0,"identifier":"#f","input":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","link":"7-qlogexample310","name":"qlog (example 3.10)","output":"(+.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) #s(literal -1 binary64))","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","start":61.1005083467012,"start-est":61.8518992652888,"status":"eq-target","target":[[13696,0.028700564063671885]],"target-prog":"(((! :herbie-platform default (/ (log1p (- x)) (log1p x))) . #t))","time":7900.1640625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14272,63.00359838633706],[6464,0.0],[[64,62.01007911754095,"#s(literal 0 binary64)"]]],"end":0.0,"end-est":0.0,"identifier":"#f","input":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","link":"8-logsexample38","name":"logs (example 3.8)","output":"(log1p.f64 n)","pre":"(> n 6.8e+15)","prec":"binary64","preprocess":"()","spec":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","start":63.00359838633706,"start-est":63.023819862188006,"status":"eq-target","target":[[16768,0.0]],"target-prog":"(((! :herbie-platform default (- (log (+ n 1)) (- (/ 1 (* 2 n)) (- (/ 1 (* 3 (* n n))) (/ 4 (pow n 3)))))) . #t))","time":15427.51318359375,"vars":["n"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7552,58.41685778902828],[13184,0.0085],[[7680,58.411911339409706,"(neg.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) eps) (-.f64 #s(literal 1 binary64) eps))))"],[7552,58.41685778902828,"(log.f64 (/.f64 (-.f64 #s(literal 1 binary64) eps) (+.f64 #s(literal 1 binary64) eps)))"],[64,60.56134864808708,"#s(literal 0 binary64)"]]],"end":0.0085,"end-est":0.0,"identifier":"#f","input":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","link":"9-logqproblem343","name":"logq (problem 3.4.3)","output":"(-.f64 (log1p.f64 (neg.f64 eps)) (log1p.f64 eps))","pre":"(< (fabs eps) 1.0)","prec":"binary64","preprocess":"()","spec":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","start":58.41685778902828,"start-est":57.81638332132415,"status":"eq-target","target":[[13184,0.0085]],"target-prog":"(((! :herbie-platform default (- (log1p (- eps)) (log1p eps))) . #t))","time":7866.89501953125,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[8064,59.88439148958512],[14784,59.87353976136733],[[8064,59.88439148958512,"(-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (tan.f64 x)))"],[64,60.531991229375116,"#s(literal 0 binary64)"]]],"end":59.87353976136733,"end-est":59.736355135964665,"identifier":"#f","input":"(- (/ 1.0 x) (/ 1.0 (tan x)))","link":"10-invcotexample39","name":"invcot (example 3.9)","output":"(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 #s(literal 1 binary64) (sin.f64 x)) (cos.f64 x)))","pre":"(and (< -0.026 x) (< x 0.026))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 x) (/ 1.0 (tan x)))","start":59.88439148958512,"start-est":59.742249883117175,"status":"eq-start","target":[[8577,0.09577538647357214]],"target-prog":"(((! :herbie-platform default (if (< (fabs x) 13/500) (* (/ x 3) (+ 1 (/ (* x x) 15))) (- (/ 1 x) (/ 1 (tan x))))) . #t))","time":17371.7568359375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[22336,63.984935771270834],[22465,57.163943288248205],[[22145,57.16527825074893,"(if (<=.f64 eps #s(literal 1917062309491721/165263992197562149737978827008192759957101170741070304821162198818601447809077836456297302609928821211897803006255839576064 binary64)) #s(literal 27 binary64) (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 a b) eps))) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps)))))"],[64,62.32742704053289,"#s(literal 27 binary64)"],[64,62.25860793300132,"#s(literal -3 binary64)"]]],"end":57.163943288248205,"end-est":56.90262874066215,"identifier":"#f","input":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","link":"11-expq3problem342","name":"expq3 (problem 3.4.2)","output":"(if (<=.f64 eps #s(literal 1917062309491721/165263992197562149737978827008192759957101170741070304821162198818601447809077836456297302609928821211897803006255839576064 binary64)) #s(literal 27 binary64) (/.f64 (*.f64 (expm1.f64 (+.f64 (*.f64 b eps) (*.f64 a eps))) eps) (*.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 b eps)))))","pre":"(and (and (<= (fabs a) 710.0) (<= (fabs b) 710.0)) (and (<= (* 1e-27 (fmin (fabs a) (fabs b))) eps) (<= eps (fmin (fabs a) (fabs b)))))","prec":"binary64","preprocess":"()","spec":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","start":63.984935771270834,"start-est":63.91998796705164,"status":"lt-target","target":[[1664,0.03620452443281802]],"target-prog":"(((! :herbie-platform default (+ (/ 1 a) (/ 1 b))) . #t))","time":31281.599853515625,"vars":["a","b","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13760,39.84067592983407],[13568,0.00977124062518029],[[7296,0.007375,"(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))"],[64,41.6984891584616,"#s(literal 0 binary64)"],[64,61.952127201262996,"#s(literal -1 binary64)"],[64,61.948495325417674,"#s(literal -3 binary64)"]]],"end":0.00977124062518029,"end-est":0.0078125,"identifier":"#f","input":"(/ (exp x) (- (exp x) 1.0))","link":"12-expq2section311","name":"expq2 (section 3.11)","output":"(/.f64 (exp.f64 x) (expm1.f64 x))","pre":"(> 710.0 x)","prec":"binary64","preprocess":"()","spec":"(/ (exp x) (- (exp x) 1.0))","start":39.84067592983407,"start-est":40.1813616296202,"status":"eq-target","target":[[7424,0.007375]],"target-prog":"(((! :herbie-platform default (/ (- 1) (expm1 (- x)))) . #t))","time":5833.873046875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6656,58.619746496149006],[6464,0.0],[[6656,58.619746496149006,"(+.f64 (exp.f64 x) #s(literal -1 binary64))"]]],"end":0.0,"end-est":0.0,"identifier":"#f","input":"(- (exp x) 1.0)","link":"13-expm1example37","name":"expm1 (example 3.7)","output":"(expm1.f64 x)","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(- (exp x) 1.0)","start":58.619746496149006,"start-est":58.28815308508581,"status":"eq-target","target":[[6464,0.0]],"target-prog":"(((! :herbie-platform default (expm1 x)) . #t))","time":3172.77392578125,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6976,29.59336529441834],[6784,0.021013752648133946],[[6976,29.59336529441834,"(+.f64 (exp.f64 (*.f64 a x)) #s(literal -1 binary64))"],[769,30.78546369323418,"(if (<=.f64 (*.f64 a x) #s(literal -3381470332640101/30191699398572330817932436647906151127335369763331523427009650401964993299137190816689013801421270140331747000246110759198164677039398341060491474011461568349195162615808 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))"],[64,41.31354008389093,"#s(literal -1 binary64)"]]],"end":0.021013752648133946,"end-est":0.036161671260518176,"identifier":"#f","input":"(- (exp (* a x)) 1.0)","link":"14-expaxsection35","name":"expax (section 3.5)","output":"(expm1.f64 (*.f64 a x))","pre":"(> 710.0 (* a x))","prec":"binary64","preprocess":"()","spec":"(- (exp (* a x)) 1.0)","start":29.59336529441834,"start-est":26.577254803269792,"status":"eq-target","target":[[6784,0.021013752648133946]],"target-prog":"(((! :herbie-platform default (expm1 (* a x))) . #t))","time":5805.654052734375,"vars":["a","x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13376,29.705675927552843],[14208,29.668776509538393],[[13952,29.70801938182182,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (exp.f64 x)))"],[13376,29.7322497659382,"(-.f64 (exp.f64 x) (-.f64 #s(literal 2 binary64) (exp.f64 (neg.f64 x))))"],[13376,29.705675927552843,"(+.f64 (-.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))"],[64,31.349946103972812,"#s(literal 0 binary64)"]]],"end":29.668776509538393,"end-est":29.808341171122443,"identifier":"#f","input":"(+ (- (exp x) 2.0) (exp (- x)))","link":"15-exp2problem337","name":"exp2 (problem 3.3.7)","output":"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x))) #s(literal 2 binary64)) (exp.f64 (neg.f64 x)))","pre":"(<= (fabs x) 710.0)","prec":"binary64","preprocess":"((abs x))","spec":"(+ (- (exp x) 2.0) (exp (- x)))","start":29.705675927552843,"start-est":29.841069442533303,"status":"eq-start","target":[[14912,0.042137218755408636]],"target-prog":"(((! :herbie-platform default (* 4 (* (sinh (/ x 2)) (sinh (/ x 2))))) . #t))","time":13618.416015625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7680,31.723225478019312],[8065,0.6958300010540885],[[449,15.517612443233578,"(if (<=.f64 x #s(literal 111999999999999994986331580283874830516910144784665608417822386580986248822784 binary64)) #s(literal 1/2 binary64) #s(literal 0 binary64))"],[64,46.646167699215944,"#s(literal 0 binary64)"]]],"end":0.6958300010540885,"end-est":12.692012740368526,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (* x x))","link":"16-cos2problem341","name":"cos2 (problem 3.4.1)","output":"(if (<=.f64 x #s(literal 4242751136953197/36893488147419103232 binary64)) #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","pre":"(TRUE)","prec":"binary64","preprocess":"((abs x))","spec":"(/ (- 1.0 (cos x)) (* x x))","start":31.723225478019312,"start-est":31.0299738762253,"status":"imp-start","target":[],"target-prog":"()","time":6305.819091796875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2944,19.367103564256055],[2944,19.367103564256055],[[64,20.360948182040552,"#s(literal 0 binary64)"]]],"end":19.367103564256055,"end-est":17.68092451380449,"identifier":"#f","input":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","link":"17-3fracproblem333","name":"3frac (problem 3.3.3)","output":"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal -1 binary64))))","pre":"(> (fabs x) 1.0)","prec":"binary64","preprocess":"((negabs x))","spec":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","start":19.367103564256055,"start-est":17.68092451380449,"status":"eq-start","target":[[1600,0.5846758808941135]],"target-prog":"(((! :herbie-platform default (/ 2 (* x (- (* x x) 1)))) . #t))","time":3861.194091796875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,23.94484056003294],[33664,23.858708386421327],[[13248,23.94484056003294,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"],[64,60.51272438592888,"#s(literal 0 binary64)"]]],"end":23.858708386421327,"end-est":24.948819782408215,"identifier":"#f","input":"(- (tan (+ x eps)) (tan x))","link":"18-2tanproblem332","name":"2tan (problem 3.3.2)","output":"(-.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 eps) #s(literal 1 binary64))) (tan.f64 x))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (tan (+ x eps)) (tan x))","start":23.94484056003294,"start-est":25.046995626821868,"status":"eq-start","target":[[13696,0.5996954975445609]],"target-prog":"(((! :herbie-platform default (+ eps (* eps (tan x) (tan x)))) . #t))","time":13335.77587890625,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1728,59.73705047689712],[3777,58.056039126233735],[[768,59.52673162302423,"(/.f64 #s(literal 1 binary64) x)"],[64,59.56936768593558,"#s(literal 1 binary64)"]]],"end":58.056039126233735,"end-est":57.92739553574521,"identifier":"#f","input":"(- (sqrt (+ x 1.0)) (sqrt x))","link":"19-2sqrtexample31","name":"2sqrt (example 3.1)","output":"(if (<=.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 0 binary64)) (/.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (sqrt (+ x 1.0)) (sqrt x))","start":59.73705047689712,"start-est":59.698026489576904,"status":"lt-target","target":[[6848,1.1908208196465906]],"target-prog":"(((! :herbie-platform default (* 1/2 (pow x -1/2))) . #t))","time":5202.080810546875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,23.937430657158448],[33088,0.2315292350839932],[[13248,23.937430657158448,"(-.f64 (sin.f64 (+.f64 x eps)) (sin.f64 x))"],[64,60.51266319992001,"#s(literal 0 binary64)"]]],"end":0.2315292350839932,"end-est":0.23258223038526776,"identifier":"#f","input":"(- (sin (+ x eps)) (sin x))","link":"20-2sinexample33","name":"2sin (example 3.3)","output":"(+.f64 (*.f64 (cos.f64 x) (sin.f64 eps)) (fma.f64 (sin.f64 x) (cos.f64 eps) (neg.f64 (sin.f64 x))))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (sin (+ x eps)) (sin x))","start":23.937430657158448,"start-est":25.03741077484549,"status":"lt-target","target":[[14656,0.05832392898046015]],"target-prog":"(((! :herbie-platform default (* (cos (* 1/2 (- eps (* -2 x)))) (sin (* 1/2 eps)) 2)) . #t))","time":11747.0380859375,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14784,29.972522089453154],[20928,25.933163718210054],[[15488,29.99057445437969,"(-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) n))) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[14784,29.972522089453154,"(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))"],[1153,39.95095794357551,"(if (<=.f64 (/.f64 #s(literal 1 binary64) n) #s(literal 7114265962740707/7410693711188236507108543040556026102609279018600996098525285376506440296955904 binary64)) #s(literal 0 binary64) #s(literal 1 binary64))"],[64,43.72244305306033,"#s(literal 0 binary64)"],[64,62.01455534100178,"#s(literal -1 binary64)"],[64,62.01929268303029,"#s(literal -6 binary64)"],[64,62.02319805467304,"#s(literal -27 binary64)"]]],"end":25.933163718210054,"end-est":23.62068660141691,"identifier":"#f","input":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","link":"21-2nthrtproblem346","name":"2nthrt (problem 3.4.6)","output":"(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 #s(literal 1 binary64) n)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","start":29.972522089453154,"start-est":26.379112794158548,"status":"imp-start","target":[],"target-prog":"()","time":21577.27490234375,"vars":["x","n"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,48.37478455574213],[7873,44.27867977522936],[[64,57.6034864638154,"#s(literal 1 binary64)"]]],"end":44.27867977522936,"end-est":44.765539051836306,"identifier":"#f","input":"(- (log (+ N 1.0)) (log N))","link":"22-2logproblem336","name":"2log (problem 3.3.6)","output":"(if (<=.f64 N #s(literal 14000000000000000 binary64)) (neg.f64 (log.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))) #s(literal 1 binary64))","pre":"(and (> N 1.0) (< N 1e+40))","prec":"binary64","preprocess":"()","spec":"(- (log (+ N 1.0)) (log N))","start":48.37478455574213,"start-est":48.976030472678374,"status":"lt-target","target":[[23808,2.5865093089646516]],"target-prog":"(((! :herbie-platform default (+ (/ 1 N) (/ -1 (* 2 (pow N 2))) (/ 1 (* 3 (pow N 3))) (/ -1 (* 4 (pow N 4))))) . #t))","time":8732.136962890625,"vars":["N"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3136,39.3536591998829],[3136,39.3536591998829],[[1153,39.80407026593047,"(if (<=.f64 x #s(literal 4600000000000000259272652606512016799213132235005633869259928535246893330689236690036551753838824648947751718403393963071093676518791710391413096650375168 binary64)) (/.f64 #s(literal 1 binary64) x) #s(literal 0 binary64))"],[64,41.13958367434664,"#s(literal 0 binary64)"]]],"end":39.3536591998829,"end-est":40.413736605142276,"identifier":"#f","input":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","link":"23-2isqrtexample36","name":"2isqrt (example 3.6)","output":"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","start":39.3536591998829,"start-est":40.413736605142276,"status":"eq-target","target":[[13376,39.32261431350775]],"target-prog":"(((! :herbie-platform default (- (pow x -1/2) (pow (+ x 1) -1/2))) . #t))","time":5323.27197265625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1856,14.570148574187614],[1856,14.570148574187614],[[1152,61.623024414628276,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 216 binary64))"],[1152,61.80234296283453,"(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))"],[1152,62.09668367936815,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -6 binary64))"],[384,62.172464728283956,"(+.f64 (neg.f64 x) #s(literal -1 binary64))"],[256,62.152672279101935,"(+.f64 x #s(literal -5 binary64))"]]],"end":14.570148574187614,"end-est":15.093473413094994,"identifier":"#f","input":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","link":"24-2fracproblem331","name":"2frac (problem 3.3.1)","output":"(+.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","start":14.570148574187614,"start-est":15.093473413094994,"status":"eq-start","target":[[1280,0.4054654628292412]],"target-prog":"(((! :herbie-platform default (/ 1 (* x (- -1 x)))) . #t))","time":5837.14404296875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,30.318333546869237],[33216,12.754583299956566],[[13312,13.098519859227995,"(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))"],[13248,30.318333546869237,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[64,31.143259357602734,"#s(literal 0 binary64)"],[64,61.78924491581702,"#s(literal -1/2 binary64)"]]],"end":12.754583299956566,"end-est":12.866034425574362,"identifier":"#f","input":"(- (cos (+ x eps)) (cos x))","link":"25-2cosproblem335","name":"2cos (problem 3.3.5)","output":"(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (cos (+ x eps)) (cos x))","start":30.318333546869237,"start-est":31.445175300803,"status":"lt-target","target":[[27392,0.42948760586341944]],"target-prog":"(((! :herbie-platform default (pow (cbrt (* -2 (sin (* 1/2 (fma 2 x eps))) (sin (* 1/2 eps)))) 3)) . #t))","time":15432.2548828125,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,59.56046808974152],[13633,58.505479504890424],[[64,59.987325043629106,"#s(literal 1 binary64)"],[64,61.34671488802652,"#s(literal 0 binary64)"]]],"end":58.505479504890424,"end-est":58.418742171727345,"identifier":"#f","input":"(- (cbrt (+ x 1.0)) (cbrt x))","link":"26-2cbrtproblem334","name":"2cbrt (problem 3.3.4)","output":"(if (<=.f64 x #s(literal 6500000000000000 binary64)) (-.f64 (cbrt.f64 (+.f64 x #s(literal 1 binary64))) (cbrt.f64 x)) #s(literal 1 binary64))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (cbrt (+ x 1.0)) (cbrt x))","start":59.56046808974152,"start-est":59.570970692016225,"status":"lt-target","target":[[41088,0.5845368484860926]],"target-prog":"(((! :herbie-platform default (/ 1 (+ (* (cbrt (+ x 1)) (cbrt (+ x 1))) (* (cbrt x) (cbrt (+ x 1))) (* (cbrt x) (cbrt x))))) . #t))","time":4296.43505859375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,58.42304033371126],[7104,0.2634174812503605],[[64,59.952377366193026,"#s(literal 1 binary64)"],[64,61.364522045926236,"#s(literal 0 binary64)"]]],"end":0.2634174812503605,"end-est":0.265625,"identifier":"#f","input":"(- (atan (+ N 1.0)) (atan N))","link":"27-2atanexample35","name":"2atan (example 3.5)","output":"(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)))","pre":"(and (> N 1.0) (< N 1e+100))","prec":"binary64","preprocess":"()","spec":"(- (atan (+ N 1.0)) (atan N))","start":58.42304033371126,"start-est":58.351724565171295,"status":"eq-target","target":[[7104,0.2634174812503605]],"target-prog":"(((! :herbie-platform default (atan2 1 (fma N (+ 1 N) 1))) . #t))","time":6411.989990234375,"vars":["N"],"warnings":[]}]}